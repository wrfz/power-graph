
      var $parcel$global = globalThis;
    
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ const $c684b498c6ee1332$var$t = globalThis, $c684b498c6ee1332$export$b4d10f6001c083c2 = $c684b498c6ee1332$var$t.ShadowRoot && (void 0 === $c684b498c6ee1332$var$t.ShadyCSS || $c684b498c6ee1332$var$t.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype, $c684b498c6ee1332$var$s = Symbol(), $c684b498c6ee1332$var$o = new WeakMap;
class $c684b498c6ee1332$export$505d1e8739bad805 {
    constructor(t, e, o){
        if (this._$cssResult$ = !0, o !== $c684b498c6ee1332$var$s) throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
        this.cssText = t, this.t = e;
    }
    get styleSheet() {
        let t = this.o;
        const s = this.t;
        if ($c684b498c6ee1332$export$b4d10f6001c083c2 && void 0 === t) {
            const e = void 0 !== s && 1 === s.length;
            e && (t = $c684b498c6ee1332$var$o.get(s)), void 0 === t && ((this.o = t = new CSSStyleSheet).replaceSync(this.cssText), e && $c684b498c6ee1332$var$o.set(s, t));
        }
        return t;
    }
    toString() {
        return this.cssText;
    }
}
const $c684b498c6ee1332$export$8d80f9cac07cdb3 = (t)=>new $c684b498c6ee1332$export$505d1e8739bad805("string" == typeof t ? t : t + "", void 0, $c684b498c6ee1332$var$s), $c684b498c6ee1332$export$dbf350e5966cf602 = (t, ...e)=>{
    const o = 1 === t.length ? t[0] : e.reduce((e, s, o)=>e + ((t)=>{
            if (!0 === t._$cssResult$) return t.cssText;
            if ("number" == typeof t) return t;
            throw Error("Value passed to 'css' function must be a 'css' function result: " + t + ". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.");
        })(s) + t[o + 1], t[0]);
    return new $c684b498c6ee1332$export$505d1e8739bad805(o, t, $c684b498c6ee1332$var$s);
}, $c684b498c6ee1332$export$2ca4a66ec4cecb90 = (s, o)=>{
    if ($c684b498c6ee1332$export$b4d10f6001c083c2) s.adoptedStyleSheets = o.map((t)=>t instanceof CSSStyleSheet ? t : t.styleSheet);
    else for (const e of o){
        const o = document.createElement("style"), n = $c684b498c6ee1332$var$t.litNonce;
        void 0 !== n && o.setAttribute("nonce", n), o.textContent = e.cssText, s.appendChild(o);
    }
}, $c684b498c6ee1332$export$ee69dfd951e24778 = $c684b498c6ee1332$export$b4d10f6001c083c2 ? (t)=>t : (t)=>t instanceof CSSStyleSheet ? ((t)=>{
        let e = "";
        for (const s of t.cssRules)e += s.cssText;
        return $c684b498c6ee1332$export$8d80f9cac07cdb3(e);
    })(t) : t;


/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ const { is: $f84c6fd9d0a7cc89$var$i, defineProperty: $f84c6fd9d0a7cc89$var$e, getOwnPropertyDescriptor: $f84c6fd9d0a7cc89$var$r, getOwnPropertyNames: $f84c6fd9d0a7cc89$var$h, getOwnPropertySymbols: $f84c6fd9d0a7cc89$var$o, getPrototypeOf: $f84c6fd9d0a7cc89$var$n } = Object, $f84c6fd9d0a7cc89$var$a = globalThis, $f84c6fd9d0a7cc89$var$c = $f84c6fd9d0a7cc89$var$a.trustedTypes, $f84c6fd9d0a7cc89$var$l = $f84c6fd9d0a7cc89$var$c ? $f84c6fd9d0a7cc89$var$c.emptyScript : "", $f84c6fd9d0a7cc89$var$p = $f84c6fd9d0a7cc89$var$a.reactiveElementPolyfillSupport, $f84c6fd9d0a7cc89$var$d = (t, s)=>t, $f84c6fd9d0a7cc89$export$7312b35fbf521afb = {
    toAttribute (t, s) {
        switch(s){
            case Boolean:
                t = t ? $f84c6fd9d0a7cc89$var$l : null;
                break;
            case Object:
            case Array:
                t = null == t ? t : JSON.stringify(t);
        }
        return t;
    },
    fromAttribute (t, s) {
        let i = t;
        switch(s){
            case Boolean:
                i = null !== t;
                break;
            case Number:
                i = null === t ? null : Number(t);
                break;
            case Object:
            case Array:
                try {
                    i = JSON.parse(t);
                } catch (t) {
                    i = null;
                }
        }
        return i;
    }
}, $f84c6fd9d0a7cc89$export$53a6892c50694894 = (t, s)=>!$f84c6fd9d0a7cc89$var$i(t, s), $f84c6fd9d0a7cc89$var$y = {
    attribute: !0,
    type: String,
    converter: $f84c6fd9d0a7cc89$export$7312b35fbf521afb,
    reflect: !1,
    hasChanged: $f84c6fd9d0a7cc89$export$53a6892c50694894
};
Symbol.metadata ??= Symbol("metadata"), $f84c6fd9d0a7cc89$var$a.litPropertyMetadata ??= new WeakMap;
class $f84c6fd9d0a7cc89$export$c7c07a37856565d extends HTMLElement {
    static addInitializer(t) {
        this._$Ei(), (this.l ??= []).push(t);
    }
    static get observedAttributes() {
        return this.finalize(), this._$Eh && [
            ...this._$Eh.keys()
        ];
    }
    static createProperty(t, s = $f84c6fd9d0a7cc89$var$y) {
        if (s.state && (s.attribute = !1), this._$Ei(), this.elementProperties.set(t, s), !s.noAccessor) {
            const i = Symbol(), r = this.getPropertyDescriptor(t, i, s);
            void 0 !== r && $f84c6fd9d0a7cc89$var$e(this.prototype, t, r);
        }
    }
    static getPropertyDescriptor(t, s, i) {
        const { get: e, set: h } = $f84c6fd9d0a7cc89$var$r(this.prototype, t) ?? {
            get () {
                return this[s];
            },
            set (t) {
                this[s] = t;
            }
        };
        return {
            get () {
                return e?.call(this);
            },
            set (s) {
                const r = e?.call(this);
                h.call(this, s), this.requestUpdate(t, r, i);
            },
            configurable: !0,
            enumerable: !0
        };
    }
    static getPropertyOptions(t) {
        return this.elementProperties.get(t) ?? $f84c6fd9d0a7cc89$var$y;
    }
    static _$Ei() {
        if (this.hasOwnProperty($f84c6fd9d0a7cc89$var$d("elementProperties"))) return;
        const t = $f84c6fd9d0a7cc89$var$n(this);
        t.finalize(), void 0 !== t.l && (this.l = [
            ...t.l
        ]), this.elementProperties = new Map(t.elementProperties);
    }
    static finalize() {
        if (this.hasOwnProperty($f84c6fd9d0a7cc89$var$d("finalized"))) return;
        if (this.finalized = !0, this._$Ei(), this.hasOwnProperty($f84c6fd9d0a7cc89$var$d("properties"))) {
            const t = this.properties, s = [
                ...$f84c6fd9d0a7cc89$var$h(t),
                ...$f84c6fd9d0a7cc89$var$o(t)
            ];
            for (const i of s)this.createProperty(i, t[i]);
        }
        const t = this[Symbol.metadata];
        if (null !== t) {
            const s = litPropertyMetadata.get(t);
            if (void 0 !== s) for (const [t, i] of s)this.elementProperties.set(t, i);
        }
        this._$Eh = new Map;
        for (const [t, s] of this.elementProperties){
            const i = this._$Eu(t, s);
            void 0 !== i && this._$Eh.set(i, t);
        }
        this.elementStyles = this.finalizeStyles(this.styles);
    }
    static finalizeStyles(s) {
        const i = [];
        if (Array.isArray(s)) {
            const e = new Set(s.flat(1 / 0).reverse());
            for (const s of e)i.unshift((0, $c684b498c6ee1332$export$ee69dfd951e24778)(s));
        } else void 0 !== s && i.push((0, $c684b498c6ee1332$export$ee69dfd951e24778)(s));
        return i;
    }
    static _$Eu(t, s) {
        const i = s.attribute;
        return !1 === i ? void 0 : "string" == typeof i ? i : "string" == typeof t ? t.toLowerCase() : void 0;
    }
    constructor(){
        super(), this._$Ep = void 0, this.isUpdatePending = !1, this.hasUpdated = !1, this._$Em = null, this._$Ev();
    }
    _$Ev() {
        this._$ES = new Promise((t)=>this.enableUpdating = t), this._$AL = new Map, this._$E_(), this.requestUpdate(), this.constructor.l?.forEach((t)=>t(this));
    }
    addController(t) {
        (this._$EO ??= new Set).add(t), void 0 !== this.renderRoot && this.isConnected && t.hostConnected?.();
    }
    removeController(t) {
        this._$EO?.delete(t);
    }
    _$E_() {
        const t = new Map, s = this.constructor.elementProperties;
        for (const i of s.keys())this.hasOwnProperty(i) && (t.set(i, this[i]), delete this[i]);
        t.size > 0 && (this._$Ep = t);
    }
    createRenderRoot() {
        const t = this.shadowRoot ?? this.attachShadow(this.constructor.shadowRootOptions);
        return (0, $c684b498c6ee1332$export$2ca4a66ec4cecb90)(t, this.constructor.elementStyles), t;
    }
    connectedCallback() {
        this.renderRoot ??= this.createRenderRoot(), this.enableUpdating(!0), this._$EO?.forEach((t)=>t.hostConnected?.());
    }
    enableUpdating(t) {}
    disconnectedCallback() {
        this._$EO?.forEach((t)=>t.hostDisconnected?.());
    }
    attributeChangedCallback(t, s, i) {
        this._$AK(t, i);
    }
    _$EC(t, s) {
        const i = this.constructor.elementProperties.get(t), e = this.constructor._$Eu(t, i);
        if (void 0 !== e && !0 === i.reflect) {
            const r = (void 0 !== i.converter?.toAttribute ? i.converter : $f84c6fd9d0a7cc89$export$7312b35fbf521afb).toAttribute(s, i.type);
            this._$Em = t, null == r ? this.removeAttribute(e) : this.setAttribute(e, r), this._$Em = null;
        }
    }
    _$AK(t, s) {
        const i = this.constructor, e = i._$Eh.get(t);
        if (void 0 !== e && this._$Em !== e) {
            const t = i.getPropertyOptions(e), r = "function" == typeof t.converter ? {
                fromAttribute: t.converter
            } : void 0 !== t.converter?.fromAttribute ? t.converter : $f84c6fd9d0a7cc89$export$7312b35fbf521afb;
            this._$Em = e, this[e] = r.fromAttribute(s, t.type), this._$Em = null;
        }
    }
    requestUpdate(t, s, i) {
        if (void 0 !== t) {
            if (i ??= this.constructor.getPropertyOptions(t), !(i.hasChanged ?? $f84c6fd9d0a7cc89$export$53a6892c50694894)(this[t], s)) return;
            this.P(t, s, i);
        }
        !1 === this.isUpdatePending && (this._$ES = this._$ET());
    }
    P(t, s, i) {
        this._$AL.has(t) || this._$AL.set(t, s), !0 === i.reflect && this._$Em !== t && (this._$Ej ??= new Set).add(t);
    }
    async _$ET() {
        this.isUpdatePending = !0;
        try {
            await this._$ES;
        } catch (t) {
            Promise.reject(t);
        }
        const t = this.scheduleUpdate();
        return null != t && await t, !this.isUpdatePending;
    }
    scheduleUpdate() {
        return this.performUpdate();
    }
    performUpdate() {
        if (!this.isUpdatePending) return;
        if (!this.hasUpdated) {
            if (this.renderRoot ??= this.createRenderRoot(), this._$Ep) {
                for (const [t, s] of this._$Ep)this[t] = s;
                this._$Ep = void 0;
            }
            const t = this.constructor.elementProperties;
            if (t.size > 0) for (const [s, i] of t)!0 !== i.wrapped || this._$AL.has(s) || void 0 === this[s] || this.P(s, this[s], i);
        }
        let t = !1;
        const s = this._$AL;
        try {
            t = this.shouldUpdate(s), t ? (this.willUpdate(s), this._$EO?.forEach((t)=>t.hostUpdate?.()), this.update(s)) : this._$EU();
        } catch (s) {
            throw t = !1, this._$EU(), s;
        }
        t && this._$AE(s);
    }
    willUpdate(t) {}
    _$AE(t) {
        this._$EO?.forEach((t)=>t.hostUpdated?.()), this.hasUpdated || (this.hasUpdated = !0, this.firstUpdated(t)), this.updated(t);
    }
    _$EU() {
        this._$AL = new Map, this.isUpdatePending = !1;
    }
    get updateComplete() {
        return this.getUpdateComplete();
    }
    getUpdateComplete() {
        return this._$ES;
    }
    shouldUpdate(t) {
        return !0;
    }
    update(t) {
        this._$Ej &&= this._$Ej.forEach((t)=>this._$EC(t, this[t])), this._$EU();
    }
    updated(t) {}
    firstUpdated(t) {}
}
$f84c6fd9d0a7cc89$export$c7c07a37856565d.elementStyles = [], $f84c6fd9d0a7cc89$export$c7c07a37856565d.shadowRootOptions = {
    mode: "open"
}, $f84c6fd9d0a7cc89$export$c7c07a37856565d[$f84c6fd9d0a7cc89$var$d("elementProperties")] = new Map, $f84c6fd9d0a7cc89$export$c7c07a37856565d[$f84c6fd9d0a7cc89$var$d("finalized")] = new Map, $f84c6fd9d0a7cc89$var$p?.({
    ReactiveElement: $f84c6fd9d0a7cc89$export$c7c07a37856565d
}), ($f84c6fd9d0a7cc89$var$a.reactiveElementVersions ??= []).push("2.0.4");


/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ const $2ebd2829a6006e2c$var$t = globalThis, $2ebd2829a6006e2c$var$i = $2ebd2829a6006e2c$var$t.trustedTypes, $2ebd2829a6006e2c$var$s = $2ebd2829a6006e2c$var$i ? $2ebd2829a6006e2c$var$i.createPolicy("lit-html", {
    createHTML: (t)=>t
}) : void 0, $2ebd2829a6006e2c$var$e = "$lit$", $2ebd2829a6006e2c$var$h = `lit$${(Math.random() + "").slice(9)}$`, $2ebd2829a6006e2c$var$o = "?" + $2ebd2829a6006e2c$var$h, $2ebd2829a6006e2c$var$n = `<${$2ebd2829a6006e2c$var$o}>`, $2ebd2829a6006e2c$var$r = document, $2ebd2829a6006e2c$var$l = ()=>$2ebd2829a6006e2c$var$r.createComment(""), $2ebd2829a6006e2c$var$c = (t)=>null === t || "object" != typeof t && "function" != typeof t, $2ebd2829a6006e2c$var$a = Array.isArray, $2ebd2829a6006e2c$var$u = (t)=>$2ebd2829a6006e2c$var$a(t) || "function" == typeof t?.[Symbol.iterator], $2ebd2829a6006e2c$var$d = "[ 	\n\f\r]", $2ebd2829a6006e2c$var$f = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g, $2ebd2829a6006e2c$var$v = /-->/g, $2ebd2829a6006e2c$var$_ = />/g, $2ebd2829a6006e2c$var$m = RegExp(`>|${$2ebd2829a6006e2c$var$d}(?:([^\\s"'>=/]+)(${$2ebd2829a6006e2c$var$d}*=${$2ebd2829a6006e2c$var$d}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`, "g"), $2ebd2829a6006e2c$var$p = /'/g, $2ebd2829a6006e2c$var$g = /"/g, $2ebd2829a6006e2c$var$$ = /^(?:script|style|textarea|title)$/i, $2ebd2829a6006e2c$var$y = (t)=>(i, ...s)=>({
            _$litType$: t,
            strings: i,
            values: s
        }), $2ebd2829a6006e2c$export$c0bb0b647f701bb5 = $2ebd2829a6006e2c$var$y(1), $2ebd2829a6006e2c$export$7ed1367e7fa1ad68 = $2ebd2829a6006e2c$var$y(2), $2ebd2829a6006e2c$export$9c068ae9cc5db4e8 = Symbol.for("lit-noChange"), $2ebd2829a6006e2c$export$45b790e32b2810ee = Symbol.for("lit-nothing"), $2ebd2829a6006e2c$var$A = new WeakMap, $2ebd2829a6006e2c$var$E = $2ebd2829a6006e2c$var$r.createTreeWalker($2ebd2829a6006e2c$var$r, 129);
function $2ebd2829a6006e2c$var$C(t, i) {
    if (!Array.isArray(t) || !t.hasOwnProperty("raw")) throw Error("invalid template strings array");
    return void 0 !== $2ebd2829a6006e2c$var$s ? $2ebd2829a6006e2c$var$s.createHTML(i) : i;
}
const $2ebd2829a6006e2c$var$P = (t, i)=>{
    const s = t.length - 1, o = [];
    let r, l = 2 === i ? "<svg>" : "", c = $2ebd2829a6006e2c$var$f;
    for(let i = 0; i < s; i++){
        const s = t[i];
        let a, u, d = -1, y = 0;
        for(; y < s.length && (c.lastIndex = y, u = c.exec(s), null !== u);)y = c.lastIndex, c === $2ebd2829a6006e2c$var$f ? "!--" === u[1] ? c = $2ebd2829a6006e2c$var$v : void 0 !== u[1] ? c = $2ebd2829a6006e2c$var$_ : void 0 !== u[2] ? ($2ebd2829a6006e2c$var$$.test(u[2]) && (r = RegExp("</" + u[2], "g")), c = $2ebd2829a6006e2c$var$m) : void 0 !== u[3] && (c = $2ebd2829a6006e2c$var$m) : c === $2ebd2829a6006e2c$var$m ? ">" === u[0] ? (c = r ?? $2ebd2829a6006e2c$var$f, d = -1) : void 0 === u[1] ? d = -2 : (d = c.lastIndex - u[2].length, a = u[1], c = void 0 === u[3] ? $2ebd2829a6006e2c$var$m : '"' === u[3] ? $2ebd2829a6006e2c$var$g : $2ebd2829a6006e2c$var$p) : c === $2ebd2829a6006e2c$var$g || c === $2ebd2829a6006e2c$var$p ? c = $2ebd2829a6006e2c$var$m : c === $2ebd2829a6006e2c$var$v || c === $2ebd2829a6006e2c$var$_ ? c = $2ebd2829a6006e2c$var$f : (c = $2ebd2829a6006e2c$var$m, r = void 0);
        const x = c === $2ebd2829a6006e2c$var$m && t[i + 1].startsWith("/>") ? " " : "";
        l += c === $2ebd2829a6006e2c$var$f ? s + $2ebd2829a6006e2c$var$n : d >= 0 ? (o.push(a), s.slice(0, d) + $2ebd2829a6006e2c$var$e + s.slice(d) + $2ebd2829a6006e2c$var$h + x) : s + $2ebd2829a6006e2c$var$h + (-2 === d ? i : x);
    }
    return [
        $2ebd2829a6006e2c$var$C(t, l + (t[s] || "<?>") + (2 === i ? "</svg>" : "")),
        o
    ];
};
class $2ebd2829a6006e2c$var$V {
    constructor({ strings: t, _$litType$: s }, n){
        let r;
        this.parts = [];
        let c = 0, a = 0;
        const u = t.length - 1, d = this.parts, [f, v] = $2ebd2829a6006e2c$var$P(t, s);
        if (this.el = $2ebd2829a6006e2c$var$V.createElement(f, n), $2ebd2829a6006e2c$var$E.currentNode = this.el.content, 2 === s) {
            const t = this.el.content.firstChild;
            t.replaceWith(...t.childNodes);
        }
        for(; null !== (r = $2ebd2829a6006e2c$var$E.nextNode()) && d.length < u;){
            if (1 === r.nodeType) {
                if (r.hasAttributes()) for (const t of r.getAttributeNames())if (t.endsWith($2ebd2829a6006e2c$var$e)) {
                    const i = v[a++], s = r.getAttribute(t).split($2ebd2829a6006e2c$var$h), e = /([.?@])?(.*)/.exec(i);
                    d.push({
                        type: 1,
                        index: c,
                        name: e[2],
                        strings: s,
                        ctor: "." === e[1] ? $2ebd2829a6006e2c$var$k : "?" === e[1] ? $2ebd2829a6006e2c$var$H : "@" === e[1] ? $2ebd2829a6006e2c$var$I : $2ebd2829a6006e2c$var$R
                    }), r.removeAttribute(t);
                } else t.startsWith($2ebd2829a6006e2c$var$h) && (d.push({
                    type: 6,
                    index: c
                }), r.removeAttribute(t));
                if ($2ebd2829a6006e2c$var$$.test(r.tagName)) {
                    const t = r.textContent.split($2ebd2829a6006e2c$var$h), s = t.length - 1;
                    if (s > 0) {
                        r.textContent = $2ebd2829a6006e2c$var$i ? $2ebd2829a6006e2c$var$i.emptyScript : "";
                        for(let i = 0; i < s; i++)r.append(t[i], $2ebd2829a6006e2c$var$l()), $2ebd2829a6006e2c$var$E.nextNode(), d.push({
                            type: 2,
                            index: ++c
                        });
                        r.append(t[s], $2ebd2829a6006e2c$var$l());
                    }
                }
            } else if (8 === r.nodeType) {
                if (r.data === $2ebd2829a6006e2c$var$o) d.push({
                    type: 2,
                    index: c
                });
                else {
                    let t = -1;
                    for(; -1 !== (t = r.data.indexOf($2ebd2829a6006e2c$var$h, t + 1));)d.push({
                        type: 7,
                        index: c
                    }), t += $2ebd2829a6006e2c$var$h.length - 1;
                }
            }
            c++;
        }
    }
    static createElement(t, i) {
        const s = $2ebd2829a6006e2c$var$r.createElement("template");
        return s.innerHTML = t, s;
    }
}
function $2ebd2829a6006e2c$var$N(t, i, s = t, e) {
    if (i === $2ebd2829a6006e2c$export$9c068ae9cc5db4e8) return i;
    let h = void 0 !== e ? s._$Co?.[e] : s._$Cl;
    const o = $2ebd2829a6006e2c$var$c(i) ? void 0 : i._$litDirective$;
    return h?.constructor !== o && (h?._$AO?.(!1), void 0 === o ? h = void 0 : (h = new o(t), h._$AT(t, s, e)), void 0 !== e ? (s._$Co ??= [])[e] = h : s._$Cl = h), void 0 !== h && (i = $2ebd2829a6006e2c$var$N(t, h._$AS(t, i.values), h, e)), i;
}
class $2ebd2829a6006e2c$var$S {
    constructor(t, i){
        this._$AV = [], this._$AN = void 0, this._$AD = t, this._$AM = i;
    }
    get parentNode() {
        return this._$AM.parentNode;
    }
    get _$AU() {
        return this._$AM._$AU;
    }
    u(t) {
        const { el: { content: i }, parts: s } = this._$AD, e = (t?.creationScope ?? $2ebd2829a6006e2c$var$r).importNode(i, !0);
        $2ebd2829a6006e2c$var$E.currentNode = e;
        let h = $2ebd2829a6006e2c$var$E.nextNode(), o = 0, n = 0, l = s[0];
        for(; void 0 !== l;){
            if (o === l.index) {
                let i;
                2 === l.type ? i = new $2ebd2829a6006e2c$var$M(h, h.nextSibling, this, t) : 1 === l.type ? i = new l.ctor(h, l.name, l.strings, this, t) : 6 === l.type && (i = new $2ebd2829a6006e2c$var$L(h, this, t)), this._$AV.push(i), l = s[++n];
            }
            o !== l?.index && (h = $2ebd2829a6006e2c$var$E.nextNode(), o++);
        }
        return $2ebd2829a6006e2c$var$E.currentNode = $2ebd2829a6006e2c$var$r, e;
    }
    p(t) {
        let i = 0;
        for (const s of this._$AV)void 0 !== s && (void 0 !== s.strings ? (s._$AI(t, s, i), i += s.strings.length - 2) : s._$AI(t[i])), i++;
    }
}
class $2ebd2829a6006e2c$var$M {
    get _$AU() {
        return this._$AM?._$AU ?? this._$Cv;
    }
    constructor(t, i, s, e){
        this.type = 2, this._$AH = $2ebd2829a6006e2c$export$45b790e32b2810ee, this._$AN = void 0, this._$AA = t, this._$AB = i, this._$AM = s, this.options = e, this._$Cv = e?.isConnected ?? !0;
    }
    get parentNode() {
        let t = this._$AA.parentNode;
        const i = this._$AM;
        return void 0 !== i && 11 === t?.nodeType && (t = i.parentNode), t;
    }
    get startNode() {
        return this._$AA;
    }
    get endNode() {
        return this._$AB;
    }
    _$AI(t, i = this) {
        t = $2ebd2829a6006e2c$var$N(this, t, i), $2ebd2829a6006e2c$var$c(t) ? t === $2ebd2829a6006e2c$export$45b790e32b2810ee || null == t || "" === t ? (this._$AH !== $2ebd2829a6006e2c$export$45b790e32b2810ee && this._$AR(), this._$AH = $2ebd2829a6006e2c$export$45b790e32b2810ee) : t !== this._$AH && t !== $2ebd2829a6006e2c$export$9c068ae9cc5db4e8 && this._(t) : void 0 !== t._$litType$ ? this.$(t) : void 0 !== t.nodeType ? this.T(t) : $2ebd2829a6006e2c$var$u(t) ? this.k(t) : this._(t);
    }
    S(t) {
        return this._$AA.parentNode.insertBefore(t, this._$AB);
    }
    T(t) {
        this._$AH !== t && (this._$AR(), this._$AH = this.S(t));
    }
    _(t) {
        this._$AH !== $2ebd2829a6006e2c$export$45b790e32b2810ee && $2ebd2829a6006e2c$var$c(this._$AH) ? this._$AA.nextSibling.data = t : this.T($2ebd2829a6006e2c$var$r.createTextNode(t)), this._$AH = t;
    }
    $(t) {
        const { values: i, _$litType$: s } = t, e = "number" == typeof s ? this._$AC(t) : (void 0 === s.el && (s.el = $2ebd2829a6006e2c$var$V.createElement($2ebd2829a6006e2c$var$C(s.h, s.h[0]), this.options)), s);
        if (this._$AH?._$AD === e) this._$AH.p(i);
        else {
            const t = new $2ebd2829a6006e2c$var$S(e, this), s = t.u(this.options);
            t.p(i), this.T(s), this._$AH = t;
        }
    }
    _$AC(t) {
        let i = $2ebd2829a6006e2c$var$A.get(t.strings);
        return void 0 === i && $2ebd2829a6006e2c$var$A.set(t.strings, i = new $2ebd2829a6006e2c$var$V(t)), i;
    }
    k(t) {
        $2ebd2829a6006e2c$var$a(this._$AH) || (this._$AH = [], this._$AR());
        const i = this._$AH;
        let s, e = 0;
        for (const h of t)e === i.length ? i.push(s = new $2ebd2829a6006e2c$var$M(this.S($2ebd2829a6006e2c$var$l()), this.S($2ebd2829a6006e2c$var$l()), this, this.options)) : s = i[e], s._$AI(h), e++;
        e < i.length && (this._$AR(s && s._$AB.nextSibling, e), i.length = e);
    }
    _$AR(t = this._$AA.nextSibling, i) {
        for(this._$AP?.(!1, !0, i); t && t !== this._$AB;){
            const i = t.nextSibling;
            t.remove(), t = i;
        }
    }
    setConnected(t) {
        void 0 === this._$AM && (this._$Cv = t, this._$AP?.(t));
    }
}
class $2ebd2829a6006e2c$var$R {
    get tagName() {
        return this.element.tagName;
    }
    get _$AU() {
        return this._$AM._$AU;
    }
    constructor(t, i, s, e, h){
        this.type = 1, this._$AH = $2ebd2829a6006e2c$export$45b790e32b2810ee, this._$AN = void 0, this.element = t, this.name = i, this._$AM = e, this.options = h, s.length > 2 || "" !== s[0] || "" !== s[1] ? (this._$AH = Array(s.length - 1).fill(new String), this.strings = s) : this._$AH = $2ebd2829a6006e2c$export$45b790e32b2810ee;
    }
    _$AI(t, i = this, s, e) {
        const h = this.strings;
        let o = !1;
        if (void 0 === h) t = $2ebd2829a6006e2c$var$N(this, t, i, 0), o = !$2ebd2829a6006e2c$var$c(t) || t !== this._$AH && t !== $2ebd2829a6006e2c$export$9c068ae9cc5db4e8, o && (this._$AH = t);
        else {
            const e = t;
            let n, r;
            for(t = h[0], n = 0; n < h.length - 1; n++)r = $2ebd2829a6006e2c$var$N(this, e[s + n], i, n), r === $2ebd2829a6006e2c$export$9c068ae9cc5db4e8 && (r = this._$AH[n]), o ||= !$2ebd2829a6006e2c$var$c(r) || r !== this._$AH[n], r === $2ebd2829a6006e2c$export$45b790e32b2810ee ? t = $2ebd2829a6006e2c$export$45b790e32b2810ee : t !== $2ebd2829a6006e2c$export$45b790e32b2810ee && (t += (r ?? "") + h[n + 1]), this._$AH[n] = r;
        }
        o && !e && this.j(t);
    }
    j(t) {
        t === $2ebd2829a6006e2c$export$45b790e32b2810ee ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, t ?? "");
    }
}
class $2ebd2829a6006e2c$var$k extends $2ebd2829a6006e2c$var$R {
    constructor(){
        super(...arguments), this.type = 3;
    }
    j(t) {
        this.element[this.name] = t === $2ebd2829a6006e2c$export$45b790e32b2810ee ? void 0 : t;
    }
}
class $2ebd2829a6006e2c$var$H extends $2ebd2829a6006e2c$var$R {
    constructor(){
        super(...arguments), this.type = 4;
    }
    j(t) {
        this.element.toggleAttribute(this.name, !!t && t !== $2ebd2829a6006e2c$export$45b790e32b2810ee);
    }
}
class $2ebd2829a6006e2c$var$I extends $2ebd2829a6006e2c$var$R {
    constructor(t, i, s, e, h){
        super(t, i, s, e, h), this.type = 5;
    }
    _$AI(t, i = this) {
        if ((t = $2ebd2829a6006e2c$var$N(this, t, i, 0) ?? $2ebd2829a6006e2c$export$45b790e32b2810ee) === $2ebd2829a6006e2c$export$9c068ae9cc5db4e8) return;
        const s = this._$AH, e = t === $2ebd2829a6006e2c$export$45b790e32b2810ee && s !== $2ebd2829a6006e2c$export$45b790e32b2810ee || t.capture !== s.capture || t.once !== s.once || t.passive !== s.passive, h = t !== $2ebd2829a6006e2c$export$45b790e32b2810ee && (s === $2ebd2829a6006e2c$export$45b790e32b2810ee || e);
        e && this.element.removeEventListener(this.name, this, s), h && this.element.addEventListener(this.name, this, t), this._$AH = t;
    }
    handleEvent(t) {
        "function" == typeof this._$AH ? this._$AH.call(this.options?.host ?? this.element, t) : this._$AH.handleEvent(t);
    }
}
class $2ebd2829a6006e2c$var$L {
    constructor(t, i, s){
        this.element = t, this.type = 6, this._$AN = void 0, this._$AM = i, this.options = s;
    }
    get _$AU() {
        return this._$AM._$AU;
    }
    _$AI(t) {
        $2ebd2829a6006e2c$var$N(this, t);
    }
}
const $2ebd2829a6006e2c$export$8613d1ca9052b22e = {
    P: $2ebd2829a6006e2c$var$e,
    A: $2ebd2829a6006e2c$var$h,
    C: $2ebd2829a6006e2c$var$o,
    M: 1,
    L: $2ebd2829a6006e2c$var$P,
    R: $2ebd2829a6006e2c$var$S,
    D: $2ebd2829a6006e2c$var$u,
    V: $2ebd2829a6006e2c$var$N,
    I: $2ebd2829a6006e2c$var$M,
    H: $2ebd2829a6006e2c$var$R,
    N: $2ebd2829a6006e2c$var$H,
    U: $2ebd2829a6006e2c$var$I,
    B: $2ebd2829a6006e2c$var$k,
    F: $2ebd2829a6006e2c$var$L
}, $2ebd2829a6006e2c$var$Z = $2ebd2829a6006e2c$var$t.litHtmlPolyfillSupport;
$2ebd2829a6006e2c$var$Z?.($2ebd2829a6006e2c$var$V, $2ebd2829a6006e2c$var$M), ($2ebd2829a6006e2c$var$t.litHtmlVersions ??= []).push("3.1.2");
const $2ebd2829a6006e2c$export$b3890eb0ae9dca99 = (t, i, s)=>{
    const e = s?.renderBefore ?? i;
    let h = e._$litPart$;
    if (void 0 === h) {
        const t = s?.renderBefore ?? null;
        e._$litPart$ = h = new $2ebd2829a6006e2c$var$M(i.insertBefore($2ebd2829a6006e2c$var$l(), t), t, void 0, s ?? {});
    }
    return h._$AI(t), h;
};




/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ class $99940392dc05f986$export$3f2f9f5909897157 extends (0, $f84c6fd9d0a7cc89$export$c7c07a37856565d) {
    constructor(){
        super(...arguments), this.renderOptions = {
            host: this
        }, this._$Do = void 0;
    }
    createRenderRoot() {
        const t = super.createRenderRoot();
        return this.renderOptions.renderBefore ??= t.firstChild, t;
    }
    update(t) {
        const i = this.render();
        this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(t), this._$Do = (0, $2ebd2829a6006e2c$export$b3890eb0ae9dca99)(i, this.renderRoot, this.renderOptions);
    }
    connectedCallback() {
        super.connectedCallback(), this._$Do?.setConnected(!0);
    }
    disconnectedCallback() {
        super.disconnectedCallback(), this._$Do?.setConnected(!1);
    }
    render() {
        return 0, $2ebd2829a6006e2c$export$9c068ae9cc5db4e8;
    }
}
$99940392dc05f986$export$3f2f9f5909897157._$litElement$ = !0, $99940392dc05f986$export$3f2f9f5909897157["finalized"] = !0, globalThis.litElementHydrateSupport?.({
    LitElement: $99940392dc05f986$export$3f2f9f5909897157
});
const $99940392dc05f986$var$r = globalThis.litElementPolyfillSupport;
$99940392dc05f986$var$r?.({
    LitElement: $99940392dc05f986$export$3f2f9f5909897157
});
const $99940392dc05f986$export$f5c524615a7708d6 = {
    _$AK: (t, e, i)=>{
        t._$AK(e, i);
    },
    _$AL: (t)=>t._$AL
};
(globalThis.litElementVersions ??= []).push("4.0.4");


/**
 * @license
 * Copyright 2022 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */ const $7a5353310211e6e3$export$6acf61af03e62db = !1;




/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var $a88b03c2e6649d67$var$extendStatics = function(d, b) {
    $a88b03c2e6649d67$var$extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return $a88b03c2e6649d67$var$extendStatics(d, b);
};
function $a88b03c2e6649d67$export$a8ba968b8961cb8a(d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    $a88b03c2e6649d67$var$extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var $a88b03c2e6649d67$export$18ce0697a983be9b = function() {
    $a88b03c2e6649d67$export$18ce0697a983be9b = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return $a88b03c2e6649d67$export$18ce0697a983be9b.apply(this, arguments);
};
function $a88b03c2e6649d67$export$3c9a16f847548506(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function $a88b03c2e6649d67$export$29e00dfd3077644b(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function $a88b03c2e6649d67$export$d5ad3fd78186038f(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function $a88b03c2e6649d67$export$f1db080c865becb9(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function $a88b03c2e6649d67$export$1050f835b63b671e(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function $a88b03c2e6649d67$export$67ebef60e6f28a6(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var $a88b03c2e6649d67$export$45d3717a4c69092e = Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
};
function $a88b03c2e6649d67$export$f33643c0debef087(m, o) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) $a88b03c2e6649d67$export$45d3717a4c69092e(o, m, p);
}
function $a88b03c2e6649d67$export$19a8beecd37a4c45(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function $a88b03c2e6649d67$export$8d051b38c9118094(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function $a88b03c2e6649d67$export$afc72e2116322959() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat($a88b03c2e6649d67$export$8d051b38c9118094(arguments[i]));
    return ar;
}
function $a88b03c2e6649d67$export$6388937ca91ccae8() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function $a88b03c2e6649d67$export$1216008129fb82ed(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || from);
}
function $a88b03c2e6649d67$export$10c90e4f7922046c(v) {
    return this instanceof $a88b03c2e6649d67$export$10c90e4f7922046c ? (this.v = v, this) : new $a88b03c2e6649d67$export$10c90e4f7922046c(v);
}
function $a88b03c2e6649d67$export$e427f37a30a4de9b(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof $a88b03c2e6649d67$export$10c90e4f7922046c ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function $a88b03c2e6649d67$export$bbd80228419bb833(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: $a88b03c2e6649d67$export$10c90e4f7922046c(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function $a88b03c2e6649d67$export$e3b29a3d6162315f(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof $a88b03c2e6649d67$export$19a8beecd37a4c45 === "function" ? $a88b03c2e6649d67$export$19a8beecd37a4c45(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function $a88b03c2e6649d67$export$4fb47efe1390b86f(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
var $a88b03c2e6649d67$var$__setModuleDefault = Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
};
function $a88b03c2e6649d67$export$c21735bcef00d192(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) $a88b03c2e6649d67$export$45d3717a4c69092e(result, mod, k);
    }
    $a88b03c2e6649d67$var$__setModuleDefault(result, mod);
    return result;
}
function $a88b03c2e6649d67$export$da59b14a69baef04(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function $a88b03c2e6649d67$export$d5dcaf168c640c35(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function $a88b03c2e6649d67$export$d40a35129aaff81f(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}


/*!
* ZRender, a high performance 2d drawing library.
*
* Copyright (c) 2013, Baidu Inc.
* All rights reserved.
*
* LICENSE
* https://github.com/ecomfe/zrender/blob/master/LICENSE.txt
*/ var $de9e931273a116c1$var$Browser = function() {
    function Browser() {
        this.firefox = false;
        this.ie = false;
        this.edge = false;
        this.newEdge = false;
        this.weChat = false;
    }
    return Browser;
}();
var $de9e931273a116c1$var$Env = function() {
    function Env() {
        this.browser = new $de9e931273a116c1$var$Browser();
        this.node = false;
        this.wxa = false;
        this.worker = false;
        this.svgSupported = false;
        this.touchEventsSupported = false;
        this.pointerEventsSupported = false;
        this.domSupported = false;
        this.transformSupported = false;
        this.transform3dSupported = false;
        this.hasGlobalWindow = typeof window !== "undefined";
    }
    return Env;
}();
var $de9e931273a116c1$var$env = new $de9e931273a116c1$var$Env();
if (typeof wx === "object" && typeof wx.getSystemInfoSync === "function") {
    $de9e931273a116c1$var$env.wxa = true;
    $de9e931273a116c1$var$env.touchEventsSupported = true;
} else if (typeof document === "undefined" && typeof self !== "undefined") $de9e931273a116c1$var$env.worker = true;
else if (typeof navigator === "undefined" || navigator.userAgent.indexOf("Node.js") === 0) {
    $de9e931273a116c1$var$env.node = true;
    $de9e931273a116c1$var$env.svgSupported = true;
} else $de9e931273a116c1$var$detect(navigator.userAgent, $de9e931273a116c1$var$env);
function $de9e931273a116c1$var$detect(ua, env) {
    var browser = env.browser;
    var firefox = ua.match(/Firefox\/([\d.]+)/);
    var ie = ua.match(/MSIE\s([\d.]+)/) || ua.match(/Trident\/.+?rv:(([\d.]+))/);
    var edge = ua.match(/Edge?\/([\d.]+)/);
    var weChat = /micromessenger/i.test(ua);
    if (firefox) {
        browser.firefox = true;
        browser.version = firefox[1];
    }
    if (ie) {
        browser.ie = true;
        browser.version = ie[1];
    }
    if (edge) {
        browser.edge = true;
        browser.version = edge[1];
        browser.newEdge = +edge[1].split(".")[0] > 18;
    }
    if (weChat) browser.weChat = true;
    env.svgSupported = typeof SVGRect !== "undefined";
    env.touchEventsSupported = "ontouchstart" in window && !browser.ie && !browser.edge;
    env.pointerEventsSupported = "onpointerdown" in window && (browser.edge || browser.ie && +browser.version >= 11);
    env.domSupported = typeof document !== "undefined";
    var style = document.documentElement.style;
    env.transform3dSupported = (browser.ie && "transition" in style || browser.edge || "WebKitCSSMatrix" in window && "m11" in new WebKitCSSMatrix() || "MozPerspective" in style) && !("OTransition" in style);
    env.transformSupported = env.transform3dSupported || browser.ie && +browser.version >= 9;
}
var $de9e931273a116c1$export$2e2bcd8739ae039 = $de9e931273a116c1$var$env;


var $c7ef4e2442c05203$export$b1461457ea2c1179 = 12;
var $c7ef4e2442c05203$export$2653e0d5dd45b294 = "sans-serif";
var $c7ef4e2442c05203$export$7d7a232b6d2cc80c = $c7ef4e2442c05203$export$b1461457ea2c1179 + "px " + $c7ef4e2442c05203$export$2653e0d5dd45b294;
var $c7ef4e2442c05203$var$OFFSET = 20;
var $c7ef4e2442c05203$var$SCALE = 100;
var $c7ef4e2442c05203$var$defaultWidthMapStr = "007LLmW'55;N0500LLLLLLLLLL00NNNLzWW\\\\WQb\\0FWLg\\bWb\\WQ\\WrWWQ000CL5LLFLL0LL**F*gLLLL5F0LF\\FFF5.5N";
function $c7ef4e2442c05203$var$getTextWidthMap(mapStr) {
    var map = {};
    if (typeof JSON === "undefined") return map;
    for(var i = 0; i < mapStr.length; i++){
        var char = String.fromCharCode(i + 32);
        var size = (mapStr.charCodeAt(i) - $c7ef4e2442c05203$var$OFFSET) / $c7ef4e2442c05203$var$SCALE;
        map[char] = size;
    }
    return map;
}
var $c7ef4e2442c05203$export$69462fcc6bf851a4 = $c7ef4e2442c05203$var$getTextWidthMap($c7ef4e2442c05203$var$defaultWidthMapStr);
var $c7ef4e2442c05203$export$ef5e599365494451 = {
    createCanvas: function() {
        return typeof document !== "undefined" && document.createElement("canvas");
    },
    measureText: function() {
        var _ctx;
        var _cachedFont;
        return function(text, font) {
            if (!_ctx) {
                var canvas = $c7ef4e2442c05203$export$ef5e599365494451.createCanvas();
                _ctx = canvas && canvas.getContext("2d");
            }
            if (_ctx) {
                if (_cachedFont !== font) _cachedFont = _ctx.font = font || $c7ef4e2442c05203$export$7d7a232b6d2cc80c;
                return _ctx.measureText(text);
            } else {
                text = text || "";
                font = font || $c7ef4e2442c05203$export$7d7a232b6d2cc80c;
                var res = /(\d+)px/.exec(font);
                var fontSize = res && +res[1] || $c7ef4e2442c05203$export$b1461457ea2c1179;
                var width = 0;
                if (font.indexOf("mono") >= 0) width = fontSize * text.length;
                else for(var i = 0; i < text.length; i++){
                    var preCalcWidth = $c7ef4e2442c05203$export$69462fcc6bf851a4[text[i]];
                    width += preCalcWidth == null ? fontSize : preCalcWidth * fontSize;
                }
                return {
                    width: width
                };
            }
        };
    }(),
    loadImage: function(src, onload, onerror) {
        var image = new Image();
        image.onload = onload;
        image.onerror = onerror;
        image.src = src;
        return image;
    }
};
function $c7ef4e2442c05203$export$61bcfd79465c1b7c(newPlatformApis) {
    for(var key in $c7ef4e2442c05203$export$ef5e599365494451)if (newPlatformApis[key]) $c7ef4e2442c05203$export$ef5e599365494451[key] = newPlatformApis[key];
}


var $e44eb14c4271d0f9$var$BUILTIN_OBJECT = $e44eb14c4271d0f9$export$533b26079ad0b4b([
    "Function",
    "RegExp",
    "Date",
    "Error",
    "CanvasGradient",
    "CanvasPattern",
    "Image",
    "Canvas"
], function(obj, val) {
    obj["[object " + val + "]"] = true;
    return obj;
}, {});
var $e44eb14c4271d0f9$var$TYPED_ARRAY = $e44eb14c4271d0f9$export$533b26079ad0b4b([
    "Int8",
    "Uint8",
    "Uint8Clamped",
    "Int16",
    "Uint16",
    "Int32",
    "Uint32",
    "Float32",
    "Float64"
], function(obj, val) {
    obj["[object " + val + "Array]"] = true;
    return obj;
}, {});
var $e44eb14c4271d0f9$var$objToString = Object.prototype.toString;
var $e44eb14c4271d0f9$var$arrayProto = Array.prototype;
var $e44eb14c4271d0f9$var$nativeForEach = $e44eb14c4271d0f9$var$arrayProto.forEach;
var $e44eb14c4271d0f9$var$nativeFilter = $e44eb14c4271d0f9$var$arrayProto.filter;
var $e44eb14c4271d0f9$var$nativeSlice = $e44eb14c4271d0f9$var$arrayProto.slice;
var $e44eb14c4271d0f9$var$nativeMap = $e44eb14c4271d0f9$var$arrayProto.map;
var $e44eb14c4271d0f9$var$ctorFunction = (function() {}).constructor;
var $e44eb14c4271d0f9$var$protoFunction = $e44eb14c4271d0f9$var$ctorFunction ? $e44eb14c4271d0f9$var$ctorFunction.prototype : null;
var $e44eb14c4271d0f9$var$protoKey = "__proto__";
var $e44eb14c4271d0f9$var$idStart = 0x0907;
function $e44eb14c4271d0f9$export$46e8f25c7328f77e() {
    return $e44eb14c4271d0f9$var$idStart++;
}
function $e44eb14c4271d0f9$export$58da9968c3170cb1() {
    var args = [];
    for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
    if (typeof console !== "undefined") console.error.apply(console, args);
}
function $e44eb14c4271d0f9$export$9cd59f9826255e47(source) {
    if (source == null || typeof source !== "object") return source;
    var result = source;
    var typeStr = $e44eb14c4271d0f9$var$objToString.call(source);
    if (typeStr === "[object Array]") {
        if (!$e44eb14c4271d0f9$export$c3825b437cbdea5c(source)) {
            result = [];
            for(var i = 0, len = source.length; i < len; i++)result[i] = $e44eb14c4271d0f9$export$9cd59f9826255e47(source[i]);
        }
    } else if ($e44eb14c4271d0f9$var$TYPED_ARRAY[typeStr]) {
        if (!$e44eb14c4271d0f9$export$c3825b437cbdea5c(source)) {
            var Ctor = source.constructor;
            if (Ctor.from) result = Ctor.from(source);
            else {
                result = new Ctor(source.length);
                for(var i = 0, len = source.length; i < len; i++)result[i] = source[i];
            }
        }
    } else if (!$e44eb14c4271d0f9$var$BUILTIN_OBJECT[typeStr] && !$e44eb14c4271d0f9$export$c3825b437cbdea5c(source) && !$e44eb14c4271d0f9$export$9f57505b7bd8dae(source)) {
        result = {};
        for(var key in source)if (source.hasOwnProperty(key) && key !== $e44eb14c4271d0f9$var$protoKey) result[key] = $e44eb14c4271d0f9$export$9cd59f9826255e47(source[key]);
    }
    return result;
}
function $e44eb14c4271d0f9$export$4950aa0f605343fb(target, source, overwrite) {
    if (!$e44eb14c4271d0f9$export$a6cdc56e425d0d0a(source) || !$e44eb14c4271d0f9$export$a6cdc56e425d0d0a(target)) return overwrite ? $e44eb14c4271d0f9$export$9cd59f9826255e47(source) : target;
    for(var key in source)if (source.hasOwnProperty(key) && key !== $e44eb14c4271d0f9$var$protoKey) {
        var targetProp = target[key];
        var sourceProp = source[key];
        if ($e44eb14c4271d0f9$export$a6cdc56e425d0d0a(sourceProp) && $e44eb14c4271d0f9$export$a6cdc56e425d0d0a(targetProp) && !$e44eb14c4271d0f9$export$43bee75e5e14138e(sourceProp) && !$e44eb14c4271d0f9$export$43bee75e5e14138e(targetProp) && !$e44eb14c4271d0f9$export$9f57505b7bd8dae(sourceProp) && !$e44eb14c4271d0f9$export$9f57505b7bd8dae(targetProp) && !$e44eb14c4271d0f9$export$fa523b2c4941fd4f(sourceProp) && !$e44eb14c4271d0f9$export$fa523b2c4941fd4f(targetProp) && !$e44eb14c4271d0f9$export$c3825b437cbdea5c(sourceProp) && !$e44eb14c4271d0f9$export$c3825b437cbdea5c(targetProp)) $e44eb14c4271d0f9$export$4950aa0f605343fb(targetProp, sourceProp, overwrite);
        else if (overwrite || !(key in target)) target[key] = $e44eb14c4271d0f9$export$9cd59f9826255e47(source[key]);
    }
    return target;
}
function $e44eb14c4271d0f9$export$18aef43295bbe906(targetAndSources, overwrite) {
    var result = targetAndSources[0];
    for(var i = 1, len = targetAndSources.length; i < len; i++)result = $e44eb14c4271d0f9$export$4950aa0f605343fb(result, targetAndSources[i], overwrite);
    return result;
}
function $e44eb14c4271d0f9$export$8b58be045bf06082(target, source) {
    if (Object.assign) Object.assign(target, source);
    else {
        for(var key in source)if (source.hasOwnProperty(key) && key !== $e44eb14c4271d0f9$var$protoKey) target[key] = source[key];
    }
    return target;
}
function $e44eb14c4271d0f9$export$ebe90cb607ad99e(target, source, overlay) {
    var keysArr = $e44eb14c4271d0f9$export$ed97f33186d4b816(source);
    for(var i = 0; i < keysArr.length; i++){
        var key = keysArr[i];
        if (overlay ? source[key] != null : target[key] == null) target[key] = source[key];
    }
    return target;
}
var $e44eb14c4271d0f9$export$cd3d1f114b139967 = (0, $c7ef4e2442c05203$export$ef5e599365494451).createCanvas;
function $e44eb14c4271d0f9$export$305f7d4e9d4624f2(array, value) {
    if (array) {
        if (array.indexOf) return array.indexOf(value);
        for(var i = 0, len = array.length; i < len; i++){
            if (array[i] === value) return i;
        }
    }
    return -1;
}
function $e44eb14c4271d0f9$export$69f1b2dcda23c5f8(clazz, baseClazz) {
    var clazzPrototype = clazz.prototype;
    function F() {}
    F.prototype = baseClazz.prototype;
    clazz.prototype = new F();
    for(var prop in clazzPrototype)if (clazzPrototype.hasOwnProperty(prop)) clazz.prototype[prop] = clazzPrototype[prop];
    clazz.prototype.constructor = clazz;
    clazz.superClass = baseClazz;
}
function $e44eb14c4271d0f9$export$e36fc9d62a853069(target, source, override) {
    target = "prototype" in target ? target.prototype : target;
    source = "prototype" in source ? source.prototype : source;
    if (Object.getOwnPropertyNames) {
        var keyList = Object.getOwnPropertyNames(source);
        for(var i = 0; i < keyList.length; i++){
            var key = keyList[i];
            if (key !== "constructor") {
                if (override ? source[key] != null : target[key] == null) target[key] = source[key];
            }
        }
    } else $e44eb14c4271d0f9$export$ebe90cb607ad99e(target, source, override);
}
function $e44eb14c4271d0f9$export$1e2f57719e155213(data) {
    if (!data) return false;
    if (typeof data === "string") return false;
    return typeof data.length === "number";
}
function $e44eb14c4271d0f9$export$79b2f7037acddd43(arr, cb, context) {
    if (!(arr && cb)) return;
    if (arr.forEach && arr.forEach === $e44eb14c4271d0f9$var$nativeForEach) arr.forEach(cb, context);
    else if (arr.length === +arr.length) for(var i = 0, len = arr.length; i < len; i++)cb.call(context, arr[i], i, arr);
    else {
        for(var key in arr)if (arr.hasOwnProperty(key)) cb.call(context, arr[key], key, arr);
    }
}
function $e44eb14c4271d0f9$export$871de8747c9eaa88(arr, cb, context) {
    if (!arr) return [];
    if (!cb) return $e44eb14c4271d0f9$export$58adb3bec8346d0f(arr);
    if (arr.map && arr.map === $e44eb14c4271d0f9$var$nativeMap) return arr.map(cb, context);
    else {
        var result = [];
        for(var i = 0, len = arr.length; i < len; i++)result.push(cb.call(context, arr[i], i, arr));
        return result;
    }
}
function $e44eb14c4271d0f9$export$533b26079ad0b4b(arr, cb, memo, context) {
    if (!(arr && cb)) return;
    for(var i = 0, len = arr.length; i < len; i++)memo = cb.call(context, memo, arr[i], i, arr);
    return memo;
}
function $e44eb14c4271d0f9$export$3dea766d36a8935f(arr, cb, context) {
    if (!arr) return [];
    if (!cb) return $e44eb14c4271d0f9$export$58adb3bec8346d0f(arr);
    if (arr.filter && arr.filter === $e44eb14c4271d0f9$var$nativeFilter) return arr.filter(cb, context);
    else {
        var result = [];
        for(var i = 0, len = arr.length; i < len; i++)if (cb.call(context, arr[i], i, arr)) result.push(arr[i]);
        return result;
    }
}
function $e44eb14c4271d0f9$export$71aa6c912b956294(arr, cb, context) {
    if (!(arr && cb)) return;
    for(var i = 0, len = arr.length; i < len; i++){
        if (cb.call(context, arr[i], i, arr)) return arr[i];
    }
}
function $e44eb14c4271d0f9$export$ed97f33186d4b816(obj) {
    if (!obj) return [];
    if (Object.keys) return Object.keys(obj);
    var keyList = [];
    for(var key in obj)if (obj.hasOwnProperty(key)) keyList.push(key);
    return keyList;
}
function $e44eb14c4271d0f9$var$bindPolyfill(func, context) {
    var args = [];
    for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
    return function() {
        return func.apply(context, args.concat($e44eb14c4271d0f9$var$nativeSlice.call(arguments)));
    };
}
var $e44eb14c4271d0f9$export$2385a24977818dd0 = $e44eb14c4271d0f9$var$protoFunction && $e44eb14c4271d0f9$export$f6e2535fb5126e54($e44eb14c4271d0f9$var$protoFunction.bind) ? $e44eb14c4271d0f9$var$protoFunction.call.bind($e44eb14c4271d0f9$var$protoFunction.bind) : $e44eb14c4271d0f9$var$bindPolyfill;
function $e44eb14c4271d0f9$export$c3095a23b368d1f2(func) {
    var args = [];
    for(var _i = 1; _i < arguments.length; _i++)args[_i - 1] = arguments[_i];
    return function() {
        return func.apply(this, args.concat($e44eb14c4271d0f9$var$nativeSlice.call(arguments)));
    };
}
function $e44eb14c4271d0f9$export$43bee75e5e14138e(value) {
    if (Array.isArray) return Array.isArray(value);
    return $e44eb14c4271d0f9$var$objToString.call(value) === "[object Array]";
}
function $e44eb14c4271d0f9$export$f6e2535fb5126e54(value) {
    return typeof value === "function";
}
function $e44eb14c4271d0f9$export$844ec244b1367d54(value) {
    return typeof value === "string";
}
function $e44eb14c4271d0f9$export$29d0bb2a4e07b252(value) {
    return $e44eb14c4271d0f9$var$objToString.call(value) === "[object String]";
}
function $e44eb14c4271d0f9$export$7e4aa119212bc614(value) {
    return typeof value === "number";
}
function $e44eb14c4271d0f9$export$a6cdc56e425d0d0a(value) {
    var type = typeof value;
    return type === "function" || !!value && type === "object";
}
function $e44eb14c4271d0f9$export$fa523b2c4941fd4f(value) {
    return !!$e44eb14c4271d0f9$var$BUILTIN_OBJECT[$e44eb14c4271d0f9$var$objToString.call(value)];
}
function $e44eb14c4271d0f9$export$b119cc7e1840e59c(value) {
    return !!$e44eb14c4271d0f9$var$TYPED_ARRAY[$e44eb14c4271d0f9$var$objToString.call(value)];
}
function $e44eb14c4271d0f9$export$9f57505b7bd8dae(value) {
    return typeof value === "object" && typeof value.nodeType === "number" && typeof value.ownerDocument === "object";
}
function $e44eb14c4271d0f9$export$fa2c283003ed971c(value) {
    return value.colorStops != null;
}
function $e44eb14c4271d0f9$export$a49bbf3a55dcef7b(value) {
    return value.image != null;
}
function $e44eb14c4271d0f9$export$49841c62b9eff15(value) {
    return $e44eb14c4271d0f9$var$objToString.call(value) === "[object RegExp]";
}
function $e44eb14c4271d0f9$export$7d667b9a0c48c975(value) {
    return value !== value;
}
function $e44eb14c4271d0f9$export$8a4d17b6e8486e66() {
    var args = [];
    for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
    for(var i = 0, len = args.length; i < len; i++){
        if (args[i] != null) return args[i];
    }
}
function $e44eb14c4271d0f9$export$995e01f2f5c9d030(value0, value1) {
    return value0 != null ? value0 : value1;
}
function $e44eb14c4271d0f9$export$2e94551289abb95b(value0, value1, value2) {
    return value0 != null ? value0 : value1 != null ? value1 : value2;
}
function $e44eb14c4271d0f9$export$58adb3bec8346d0f(arr) {
    var args = [];
    for(var _i = 1; _i < arguments.length; _i++)args[_i - 1] = arguments[_i];
    return $e44eb14c4271d0f9$var$nativeSlice.apply(arr, args);
}
function $e44eb14c4271d0f9$export$f3a38102c49f4268(val) {
    if (typeof val === "number") return [
        val,
        val,
        val,
        val
    ];
    var len = val.length;
    if (len === 2) return [
        val[0],
        val[1],
        val[0],
        val[1]
    ];
    else if (len === 3) return [
        val[0],
        val[1],
        val[2],
        val[1]
    ];
    return val;
}
function $e44eb14c4271d0f9$export$a7a9523472993e97(condition, message) {
    if (!condition) throw new Error(message);
}
function $e44eb14c4271d0f9$export$87c2784dc9fc4ab(str) {
    if (str == null) return null;
    else if (typeof str.trim === "function") return str.trim();
    else return str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
}
var $e44eb14c4271d0f9$var$primitiveKey = "__ec_primitive__";
function $e44eb14c4271d0f9$export$112e66431016387b(obj) {
    obj[$e44eb14c4271d0f9$var$primitiveKey] = true;
}
function $e44eb14c4271d0f9$export$c3825b437cbdea5c(obj) {
    return obj[$e44eb14c4271d0f9$var$primitiveKey];
}
var $e44eb14c4271d0f9$var$MapPolyfill = function() {
    function MapPolyfill() {
        this.data = {};
    }
    MapPolyfill.prototype["delete"] = function(key) {
        var existed = this.has(key);
        if (existed) delete this.data[key];
        return existed;
    };
    MapPolyfill.prototype.has = function(key) {
        return this.data.hasOwnProperty(key);
    };
    MapPolyfill.prototype.get = function(key) {
        return this.data[key];
    };
    MapPolyfill.prototype.set = function(key, value) {
        this.data[key] = value;
        return this;
    };
    MapPolyfill.prototype.keys = function() {
        return $e44eb14c4271d0f9$export$ed97f33186d4b816(this.data);
    };
    MapPolyfill.prototype.forEach = function(callback) {
        var data = this.data;
        for(var key in data)if (data.hasOwnProperty(key)) callback(data[key], key);
    };
    return MapPolyfill;
}();
var $e44eb14c4271d0f9$var$isNativeMapSupported = typeof Map === "function";
function $e44eb14c4271d0f9$var$maybeNativeMap() {
    return $e44eb14c4271d0f9$var$isNativeMapSupported ? new Map() : new $e44eb14c4271d0f9$var$MapPolyfill();
}
var $e44eb14c4271d0f9$export$60ef0b43d585640a = function() {
    function HashMap(obj) {
        var isArr = $e44eb14c4271d0f9$export$43bee75e5e14138e(obj);
        this.data = $e44eb14c4271d0f9$var$maybeNativeMap();
        var thisMap = this;
        obj instanceof HashMap ? obj.each(visit) : obj && $e44eb14c4271d0f9$export$79b2f7037acddd43(obj, visit);
        function visit(value, key) {
            isArr ? thisMap.set(value, key) : thisMap.set(key, value);
        }
    }
    HashMap.prototype.hasKey = function(key) {
        return this.data.has(key);
    };
    HashMap.prototype.get = function(key) {
        return this.data.get(key);
    };
    HashMap.prototype.set = function(key, value) {
        this.data.set(key, value);
        return value;
    };
    HashMap.prototype.each = function(cb, context) {
        this.data.forEach(function(value, key) {
            cb.call(context, value, key);
        });
    };
    HashMap.prototype.keys = function() {
        var keys = this.data.keys();
        return $e44eb14c4271d0f9$var$isNativeMapSupported ? Array.from(keys) : keys;
    };
    HashMap.prototype.removeKey = function(key) {
        this.data["delete"](key);
    };
    return HashMap;
}();
function $e44eb14c4271d0f9$export$55f8aa7ef875b0a4(obj) {
    return new $e44eb14c4271d0f9$export$60ef0b43d585640a(obj);
}
function $e44eb14c4271d0f9$export$4fd8af2c48c43416(a, b) {
    var newArray = new a.constructor(a.length + b.length);
    for(var i = 0; i < a.length; i++)newArray[i] = a[i];
    var offset = a.length;
    for(var i = 0; i < b.length; i++)newArray[i + offset] = b[i];
    return newArray;
}
function $e44eb14c4271d0f9$export$79c7e160a7743efd(proto, properties) {
    var obj;
    if (Object.create) obj = Object.create(proto);
    else {
        var StyleCtor = function() {};
        StyleCtor.prototype = proto;
        obj = new StyleCtor();
    }
    if (properties) $e44eb14c4271d0f9$export$8b58be045bf06082(obj, properties);
    return obj;
}
function $e44eb14c4271d0f9$export$23a5d775868fdd2c(dom) {
    var domStyle = dom.style;
    domStyle.webkitUserSelect = "none";
    domStyle.userSelect = "none";
    domStyle.webkitTapHighlightColor = "rgba(0,0,0,0)";
    domStyle["-webkit-touch-callout"] = "none";
}
function $e44eb14c4271d0f9$export$b5a638e9b3fff9f3(own, prop) {
    return own.hasOwnProperty(prop);
}
function $e44eb14c4271d0f9$export$8793edee2d425525() {}
var $e44eb14c4271d0f9$export$bce8e055322a0ce6 = 180 / Math.PI;




function $187eb1bf1a49fd34$export$185802fd694ee1f5(x, y) {
    if (x == null) x = 0;
    if (y == null) y = 0;
    return [
        x,
        y
    ];
}
function $187eb1bf1a49fd34$export$784d13d8ee351f07(out, v) {
    out[0] = v[0];
    out[1] = v[1];
    return out;
}
function $187eb1bf1a49fd34$export$9cd59f9826255e47(v) {
    return [
        v[0],
        v[1]
    ];
}
function $187eb1bf1a49fd34$export$adaa4cf7ef1b65be(out, a, b) {
    out[0] = a;
    out[1] = b;
    return out;
}
function $187eb1bf1a49fd34$export$e16d8520af44a096(out, v1, v2) {
    out[0] = v1[0] + v2[0];
    out[1] = v1[1] + v2[1];
    return out;
}
function $187eb1bf1a49fd34$export$19cedf1da84ba854(out, v1, v2, a) {
    out[0] = v1[0] + v2[0] * a;
    out[1] = v1[1] + v2[1] * a;
    return out;
}
function $187eb1bf1a49fd34$export$f93b5905241a7cca(out, v1, v2) {
    out[0] = v1[0] - v2[0];
    out[1] = v1[1] - v2[1];
    return out;
}
function $187eb1bf1a49fd34$export$fc1400facf92c78(v) {
    return Math.sqrt($187eb1bf1a49fd34$export$48e33bc611e4c25a(v));
}
var $187eb1bf1a49fd34$export$f24224f1c91d8156 = $187eb1bf1a49fd34$export$fc1400facf92c78;
function $187eb1bf1a49fd34$export$48e33bc611e4c25a(v) {
    return v[0] * v[0] + v[1] * v[1];
}
var $187eb1bf1a49fd34$export$2f106540dd9a5136 = $187eb1bf1a49fd34$export$48e33bc611e4c25a;
function $187eb1bf1a49fd34$export$6e3a27864ab166fe(out, v1, v2) {
    out[0] = v1[0] * v2[0];
    out[1] = v1[1] * v2[1];
    return out;
}
function $187eb1bf1a49fd34$export$159d9494db57879b(out, v1, v2) {
    out[0] = v1[0] / v2[0];
    out[1] = v1[1] / v2[1];
    return out;
}
function $187eb1bf1a49fd34$export$94132a0e348806d4(v1, v2) {
    return v1[0] * v2[0] + v1[1] * v2[1];
}
function $187eb1bf1a49fd34$export$dcdf75081b88279d(out, v, s) {
    out[0] = v[0] * s;
    out[1] = v[1] * s;
    return out;
}
function $187eb1bf1a49fd34$export$a3295358bff77e(out, v) {
    var d = $187eb1bf1a49fd34$export$fc1400facf92c78(v);
    if (d === 0) {
        out[0] = 0;
        out[1] = 0;
    } else {
        out[0] = v[0] / d;
        out[1] = v[1] / d;
    }
    return out;
}
function $187eb1bf1a49fd34$export$9f17032d917177de(v1, v2) {
    return Math.sqrt((v1[0] - v2[0]) * (v1[0] - v2[0]) + (v1[1] - v2[1]) * (v1[1] - v2[1]));
}
var $187eb1bf1a49fd34$export$6c4a311cc157c764 = $187eb1bf1a49fd34$export$9f17032d917177de;
function $187eb1bf1a49fd34$export$137c0a69d1ff4a79(v1, v2) {
    return (v1[0] - v2[0]) * (v1[0] - v2[0]) + (v1[1] - v2[1]) * (v1[1] - v2[1]);
}
var $187eb1bf1a49fd34$export$c68db45a034c13b0 = $187eb1bf1a49fd34$export$137c0a69d1ff4a79;
function $187eb1bf1a49fd34$export$aef51622e549b8b0(out, v) {
    out[0] = -v[0];
    out[1] = -v[1];
    return out;
}
function $187eb1bf1a49fd34$export$3a89f8d6f6bf6c9f(out, v1, v2, t) {
    out[0] = v1[0] + t * (v2[0] - v1[0]);
    out[1] = v1[1] + t * (v2[1] - v1[1]);
    return out;
}
function $187eb1bf1a49fd34$export$9f9dcb98c894b623(out, v, m) {
    var x = v[0];
    var y = v[1];
    out[0] = m[0] * x + m[2] * y + m[4];
    out[1] = m[1] * x + m[3] * y + m[5];
    return out;
}
function $187eb1bf1a49fd34$export$96ec731ed4dcb222(out, v1, v2) {
    out[0] = Math.min(v1[0], v2[0]);
    out[1] = Math.min(v1[1], v2[1]);
    return out;
}
function $187eb1bf1a49fd34$export$8960430cfd85939f(out, v1, v2) {
    out[0] = Math.max(v1[0], v2[0]);
    out[1] = Math.max(v1[1], v2[1]);
    return out;
}


var $fde533d073755533$var$Param = function() {
    function Param(target, e) {
        this.target = target;
        this.topTarget = e && e.topTarget;
    }
    return Param;
}();
var $fde533d073755533$var$Draggable = function() {
    function Draggable(handler) {
        this.handler = handler;
        handler.on("mousedown", this._dragStart, this);
        handler.on("mousemove", this._drag, this);
        handler.on("mouseup", this._dragEnd, this);
    }
    Draggable.prototype._dragStart = function(e) {
        var draggingTarget = e.target;
        while(draggingTarget && !draggingTarget.draggable)draggingTarget = draggingTarget.parent || draggingTarget.__hostTarget;
        if (draggingTarget) {
            this._draggingTarget = draggingTarget;
            draggingTarget.dragging = true;
            this._x = e.offsetX;
            this._y = e.offsetY;
            this.handler.dispatchToElement(new $fde533d073755533$var$Param(draggingTarget, e), "dragstart", e.event);
        }
    };
    Draggable.prototype._drag = function(e) {
        var draggingTarget = this._draggingTarget;
        if (draggingTarget) {
            var x = e.offsetX;
            var y = e.offsetY;
            var dx = x - this._x;
            var dy = y - this._y;
            this._x = x;
            this._y = y;
            draggingTarget.drift(dx, dy, e);
            this.handler.dispatchToElement(new $fde533d073755533$var$Param(draggingTarget, e), "drag", e.event);
            var dropTarget = this.handler.findHover(x, y, draggingTarget).target;
            var lastDropTarget = this._dropTarget;
            this._dropTarget = dropTarget;
            if (draggingTarget !== dropTarget) {
                if (lastDropTarget && dropTarget !== lastDropTarget) this.handler.dispatchToElement(new $fde533d073755533$var$Param(lastDropTarget, e), "dragleave", e.event);
                if (dropTarget && dropTarget !== lastDropTarget) this.handler.dispatchToElement(new $fde533d073755533$var$Param(dropTarget, e), "dragenter", e.event);
            }
        }
    };
    Draggable.prototype._dragEnd = function(e) {
        var draggingTarget = this._draggingTarget;
        if (draggingTarget) draggingTarget.dragging = false;
        this.handler.dispatchToElement(new $fde533d073755533$var$Param(draggingTarget, e), "dragend", e.event);
        if (this._dropTarget) this.handler.dispatchToElement(new $fde533d073755533$var$Param(this._dropTarget, e), "drop", e.event);
        this._draggingTarget = null;
        this._dropTarget = null;
    };
    return Draggable;
}();
var $fde533d073755533$export$2e2bcd8739ae039 = $fde533d073755533$var$Draggable;


var $a2a21788c772d0fe$var$Eventful = function() {
    function Eventful(eventProcessors) {
        if (eventProcessors) this._$eventProcessor = eventProcessors;
    }
    Eventful.prototype.on = function(event, query, handler, context) {
        if (!this._$handlers) this._$handlers = {};
        var _h = this._$handlers;
        if (typeof query === "function") {
            context = handler;
            handler = query;
            query = null;
        }
        if (!handler || !event) return this;
        var eventProcessor = this._$eventProcessor;
        if (query != null && eventProcessor && eventProcessor.normalizeQuery) query = eventProcessor.normalizeQuery(query);
        if (!_h[event]) _h[event] = [];
        for(var i = 0; i < _h[event].length; i++){
            if (_h[event][i].h === handler) return this;
        }
        var wrap = {
            h: handler,
            query: query,
            ctx: context || this,
            callAtLast: handler.zrEventfulCallAtLast
        };
        var lastIndex = _h[event].length - 1;
        var lastWrap = _h[event][lastIndex];
        lastWrap && lastWrap.callAtLast ? _h[event].splice(lastIndex, 0, wrap) : _h[event].push(wrap);
        return this;
    };
    Eventful.prototype.isSilent = function(eventName) {
        var _h = this._$handlers;
        return !_h || !_h[eventName] || !_h[eventName].length;
    };
    Eventful.prototype.off = function(eventType, handler) {
        var _h = this._$handlers;
        if (!_h) return this;
        if (!eventType) {
            this._$handlers = {};
            return this;
        }
        if (handler) {
            if (_h[eventType]) {
                var newList = [];
                for(var i = 0, l = _h[eventType].length; i < l; i++)if (_h[eventType][i].h !== handler) newList.push(_h[eventType][i]);
                _h[eventType] = newList;
            }
            if (_h[eventType] && _h[eventType].length === 0) delete _h[eventType];
        } else delete _h[eventType];
        return this;
    };
    Eventful.prototype.trigger = function(eventType) {
        var args = [];
        for(var _i = 1; _i < arguments.length; _i++)args[_i - 1] = arguments[_i];
        if (!this._$handlers) return this;
        var _h = this._$handlers[eventType];
        var eventProcessor = this._$eventProcessor;
        if (_h) {
            var argLen = args.length;
            var len = _h.length;
            for(var i = 0; i < len; i++){
                var hItem = _h[i];
                if (eventProcessor && eventProcessor.filter && hItem.query != null && !eventProcessor.filter(eventType, hItem.query)) continue;
                switch(argLen){
                    case 0:
                        hItem.h.call(hItem.ctx);
                        break;
                    case 1:
                        hItem.h.call(hItem.ctx, args[0]);
                        break;
                    case 2:
                        hItem.h.call(hItem.ctx, args[0], args[1]);
                        break;
                    default:
                        hItem.h.apply(hItem.ctx, args);
                        break;
                }
            }
        }
        eventProcessor && eventProcessor.afterTrigger && eventProcessor.afterTrigger(eventType);
        return this;
    };
    Eventful.prototype.triggerWithContext = function(type) {
        var args = [];
        for(var _i = 1; _i < arguments.length; _i++)args[_i - 1] = arguments[_i];
        if (!this._$handlers) return this;
        var _h = this._$handlers[type];
        var eventProcessor = this._$eventProcessor;
        if (_h) {
            var argLen = args.length;
            var ctx = args[argLen - 1];
            var len = _h.length;
            for(var i = 0; i < len; i++){
                var hItem = _h[i];
                if (eventProcessor && eventProcessor.filter && hItem.query != null && !eventProcessor.filter(type, hItem.query)) continue;
                switch(argLen){
                    case 0:
                        hItem.h.call(ctx);
                        break;
                    case 1:
                        hItem.h.call(ctx, args[0]);
                        break;
                    case 2:
                        hItem.h.call(ctx, args[0], args[1]);
                        break;
                    default:
                        hItem.h.apply(ctx, args.slice(1, argLen - 1));
                        break;
                }
            }
        }
        eventProcessor && eventProcessor.afterTrigger && eventProcessor.afterTrigger(type);
        return this;
    };
    return Eventful;
}();
var $a2a21788c772d0fe$export$2e2bcd8739ae039 = $a2a21788c772d0fe$var$Eventful;





var $7bb924f07a463af6$var$LN2 = Math.log(2);
function $7bb924f07a463af6$var$determinant(rows, rank, rowStart, rowMask, colMask, detCache) {
    var cacheKey = rowMask + "-" + colMask;
    var fullRank = rows.length;
    if (detCache.hasOwnProperty(cacheKey)) return detCache[cacheKey];
    if (rank === 1) {
        var colStart = Math.round(Math.log((1 << fullRank) - 1 & ~colMask) / $7bb924f07a463af6$var$LN2);
        return rows[rowStart][colStart];
    }
    var subRowMask = rowMask | 1 << rowStart;
    var subRowStart = rowStart + 1;
    while(rowMask & 1 << subRowStart)subRowStart++;
    var sum = 0;
    for(var j = 0, colLocalIdx = 0; j < fullRank; j++){
        var colTag = 1 << j;
        if (!(colTag & colMask)) {
            sum += (colLocalIdx % 2 ? -1 : 1) * rows[rowStart][j] * $7bb924f07a463af6$var$determinant(rows, rank - 1, subRowStart, subRowMask, colMask | colTag, detCache);
            colLocalIdx++;
        }
    }
    detCache[cacheKey] = sum;
    return sum;
}
function $7bb924f07a463af6$export$fbdb2748a8171a7e(src, dest) {
    var mA = [
        [
            src[0],
            src[1],
            1,
            0,
            0,
            0,
            -dest[0] * src[0],
            -dest[0] * src[1]
        ],
        [
            0,
            0,
            0,
            src[0],
            src[1],
            1,
            -dest[1] * src[0],
            -dest[1] * src[1]
        ],
        [
            src[2],
            src[3],
            1,
            0,
            0,
            0,
            -dest[2] * src[2],
            -dest[2] * src[3]
        ],
        [
            0,
            0,
            0,
            src[2],
            src[3],
            1,
            -dest[3] * src[2],
            -dest[3] * src[3]
        ],
        [
            src[4],
            src[5],
            1,
            0,
            0,
            0,
            -dest[4] * src[4],
            -dest[4] * src[5]
        ],
        [
            0,
            0,
            0,
            src[4],
            src[5],
            1,
            -dest[5] * src[4],
            -dest[5] * src[5]
        ],
        [
            src[6],
            src[7],
            1,
            0,
            0,
            0,
            -dest[6] * src[6],
            -dest[6] * src[7]
        ],
        [
            0,
            0,
            0,
            src[6],
            src[7],
            1,
            -dest[7] * src[6],
            -dest[7] * src[7]
        ]
    ];
    var detCache = {};
    var det = $7bb924f07a463af6$var$determinant(mA, 8, 0, 0, 0, detCache);
    if (det === 0) return;
    var vh = [];
    for(var i = 0; i < 8; i++)for(var j = 0; j < 8; j++){
        vh[j] == null && (vh[j] = 0);
        vh[j] += ((i + j) % 2 ? -1 : 1) * $7bb924f07a463af6$var$determinant(mA, 7, i === 0 ? 1 : 0, 1 << i, 1 << j, detCache) / det * dest[i];
    }
    return function(out, srcPointX, srcPointY) {
        var pk = srcPointX * vh[6] + srcPointY * vh[7] + 1;
        out[0] = (srcPointX * vh[0] + srcPointY * vh[1] + vh[2]) / pk;
        out[1] = (srcPointX * vh[3] + srcPointY * vh[4] + vh[5]) / pk;
    };
}


var $e8bddf605818feb2$var$EVENT_SAVED_PROP = "___zrEVENTSAVED";
var $e8bddf605818feb2$var$_calcOut = [];
function $e8bddf605818feb2$export$8c5c02e118307e20(out, elFrom, elTarget, inX, inY) {
    return $e8bddf605818feb2$export$1219648acc517df4($e8bddf605818feb2$var$_calcOut, elFrom, inX, inY, true) && $e8bddf605818feb2$export$1219648acc517df4(out, elTarget, $e8bddf605818feb2$var$_calcOut[0], $e8bddf605818feb2$var$_calcOut[1]);
}
function $e8bddf605818feb2$export$1219648acc517df4(out, el, inX, inY, inverse) {
    if (el.getBoundingClientRect && (0, $de9e931273a116c1$export$2e2bcd8739ae039).domSupported && !$e8bddf605818feb2$export$1b92e4fe606eff6d(el)) {
        var saved = el[$e8bddf605818feb2$var$EVENT_SAVED_PROP] || (el[$e8bddf605818feb2$var$EVENT_SAVED_PROP] = {});
        var markers = $e8bddf605818feb2$var$prepareCoordMarkers(el, saved);
        var transformer = $e8bddf605818feb2$var$preparePointerTransformer(markers, saved, inverse);
        if (transformer) {
            transformer(out, inX, inY);
            return true;
        }
    }
    return false;
}
function $e8bddf605818feb2$var$prepareCoordMarkers(el, saved) {
    var markers = saved.markers;
    if (markers) return markers;
    markers = saved.markers = [];
    var propLR = [
        "left",
        "right"
    ];
    var propTB = [
        "top",
        "bottom"
    ];
    for(var i = 0; i < 4; i++){
        var marker = document.createElement("div");
        var stl = marker.style;
        var idxLR = i % 2;
        var idxTB = (i >> 1) % 2;
        stl.cssText = [
            "position: absolute",
            "visibility: hidden",
            "padding: 0",
            "margin: 0",
            "border-width: 0",
            "user-select: none",
            "width:0",
            "height:0",
            propLR[idxLR] + ":0",
            propTB[idxTB] + ":0",
            propLR[1 - idxLR] + ":auto",
            propTB[1 - idxTB] + ":auto",
            ""
        ].join("!important;");
        el.appendChild(marker);
        markers.push(marker);
    }
    return markers;
}
function $e8bddf605818feb2$var$preparePointerTransformer(markers, saved, inverse) {
    var transformerName = inverse ? "invTrans" : "trans";
    var transformer = saved[transformerName];
    var oldSrcCoords = saved.srcCoords;
    var srcCoords = [];
    var destCoords = [];
    var oldCoordTheSame = true;
    for(var i = 0; i < 4; i++){
        var rect = markers[i].getBoundingClientRect();
        var ii = 2 * i;
        var x = rect.left;
        var y = rect.top;
        srcCoords.push(x, y);
        oldCoordTheSame = oldCoordTheSame && oldSrcCoords && x === oldSrcCoords[ii] && y === oldSrcCoords[ii + 1];
        destCoords.push(markers[i].offsetLeft, markers[i].offsetTop);
    }
    return oldCoordTheSame && transformer ? transformer : (saved.srcCoords = srcCoords, saved[transformerName] = inverse ? (0, $7bb924f07a463af6$export$fbdb2748a8171a7e)(destCoords, srcCoords) : (0, $7bb924f07a463af6$export$fbdb2748a8171a7e)(srcCoords, destCoords));
}
function $e8bddf605818feb2$export$1b92e4fe606eff6d(el) {
    return el.nodeName.toUpperCase() === "CANVAS";
}
var $e8bddf605818feb2$var$replaceReg = /([&<>"'])/g;
var $e8bddf605818feb2$var$replaceMap = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#39;"
};
function $e8bddf605818feb2$export$f9d6449b9af28dc1(source) {
    return source == null ? "" : (source + "").replace($e8bddf605818feb2$var$replaceReg, function(str, c) {
        return $e8bddf605818feb2$var$replaceMap[c];
    });
}


var $81f76356654e394a$var$MOUSE_EVENT_REG = /^(?:mouse|pointer|contextmenu|drag|drop)|click/;
var $81f76356654e394a$var$_calcOut = [];
var $81f76356654e394a$var$firefoxNotSupportOffsetXY = (0, $de9e931273a116c1$export$2e2bcd8739ae039).browser.firefox && +(0, $de9e931273a116c1$export$2e2bcd8739ae039).browser.version.split(".")[0] < 39;
function $81f76356654e394a$export$7d5fecde839eee88(el, e, out, calculate) {
    out = out || {};
    if (calculate) $81f76356654e394a$var$calculateZrXY(el, e, out);
    else if ($81f76356654e394a$var$firefoxNotSupportOffsetXY && e.layerX != null && e.layerX !== e.offsetX) {
        out.zrX = e.layerX;
        out.zrY = e.layerY;
    } else if (e.offsetX != null) {
        out.zrX = e.offsetX;
        out.zrY = e.offsetY;
    } else $81f76356654e394a$var$calculateZrXY(el, e, out);
    return out;
}
function $81f76356654e394a$var$calculateZrXY(el, e, out) {
    if ((0, $de9e931273a116c1$export$2e2bcd8739ae039).domSupported && el.getBoundingClientRect) {
        var ex = e.clientX;
        var ey = e.clientY;
        if ((0, $e8bddf605818feb2$export$1b92e4fe606eff6d)(el)) {
            var box = el.getBoundingClientRect();
            out.zrX = ex - box.left;
            out.zrY = ey - box.top;
            return;
        } else if ((0, $e8bddf605818feb2$export$1219648acc517df4)($81f76356654e394a$var$_calcOut, el, ex, ey)) {
            out.zrX = $81f76356654e394a$var$_calcOut[0];
            out.zrY = $81f76356654e394a$var$_calcOut[1];
            return;
        }
    }
    out.zrX = out.zrY = 0;
}
function $81f76356654e394a$export$4abe0e945399ac1d(e) {
    return e || window.event;
}
function $81f76356654e394a$export$40fadb093aebad71(el, e, calculate) {
    e = $81f76356654e394a$export$4abe0e945399ac1d(e);
    if (e.zrX != null) return e;
    var eventType = e.type;
    var isTouch = eventType && eventType.indexOf("touch") >= 0;
    if (!isTouch) {
        $81f76356654e394a$export$7d5fecde839eee88(el, e, e, calculate);
        var wheelDelta = $81f76356654e394a$var$getWheelDeltaMayPolyfill(e);
        e.zrDelta = wheelDelta ? wheelDelta / 120 : -(e.detail || 0) / 3;
    } else {
        var touch = eventType !== "touchend" ? e.targetTouches[0] : e.changedTouches[0];
        touch && $81f76356654e394a$export$7d5fecde839eee88(el, touch, e, calculate);
    }
    var button = e.button;
    if (e.which == null && button !== undefined && $81f76356654e394a$var$MOUSE_EVENT_REG.test(e.type)) e.which = button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
    return e;
}
function $81f76356654e394a$var$getWheelDeltaMayPolyfill(e) {
    var rawWheelDelta = e.wheelDelta;
    if (rawWheelDelta) return rawWheelDelta;
    var deltaX = e.deltaX;
    var deltaY = e.deltaY;
    if (deltaX == null || deltaY == null) return rawWheelDelta;
    var delta = deltaY !== 0 ? Math.abs(deltaY) : Math.abs(deltaX);
    var sign = deltaY > 0 ? -1 : deltaY < 0 ? 1 : deltaX > 0 ? -1 : 1;
    return 3 * delta * sign;
}
function $81f76356654e394a$export$3f65cefe8380dbea(el, name, handler, opt) {
    el.addEventListener(name, handler, opt);
}
function $81f76356654e394a$export$8ff9f68337b520c0(el, name, handler, opt) {
    el.removeEventListener(name, handler, opt);
}
var $81f76356654e394a$export$fa6813432f753b0d = function(e) {
    e.preventDefault();
    e.stopPropagation();
    e.cancelBubble = true;
};
function $81f76356654e394a$export$b7ae4cded3e71bd2(e) {
    return e.which === 2 || e.which === 3;
}



var $23dee61d0e9edcbc$export$f7557d6f27e9503 = function() {
    function GestureMgr() {
        this._track = [];
    }
    GestureMgr.prototype.recognize = function(event, target, root) {
        this._doTrack(event, target, root);
        return this._recognize(event);
    };
    GestureMgr.prototype.clear = function() {
        this._track.length = 0;
        return this;
    };
    GestureMgr.prototype._doTrack = function(event, target, root) {
        var touches = event.touches;
        if (!touches) return;
        var trackItem = {
            points: [],
            touches: [],
            target: target,
            event: event
        };
        for(var i = 0, len = touches.length; i < len; i++){
            var touch = touches[i];
            var pos = $81f76356654e394a$export$7d5fecde839eee88(root, touch, {});
            trackItem.points.push([
                pos.zrX,
                pos.zrY
            ]);
            trackItem.touches.push(touch);
        }
        this._track.push(trackItem);
    };
    GestureMgr.prototype._recognize = function(event) {
        for(var eventName in $23dee61d0e9edcbc$var$recognizers)if ($23dee61d0e9edcbc$var$recognizers.hasOwnProperty(eventName)) {
            var gestureInfo = $23dee61d0e9edcbc$var$recognizers[eventName](this._track, event);
            if (gestureInfo) return gestureInfo;
        }
    };
    return GestureMgr;
}();
function $23dee61d0e9edcbc$var$dist(pointPair) {
    var dx = pointPair[1][0] - pointPair[0][0];
    var dy = pointPair[1][1] - pointPair[0][1];
    return Math.sqrt(dx * dx + dy * dy);
}
function $23dee61d0e9edcbc$var$center(pointPair) {
    return [
        (pointPair[0][0] + pointPair[1][0]) / 2,
        (pointPair[0][1] + pointPair[1][1]) / 2
    ];
}
var $23dee61d0e9edcbc$var$recognizers = {
    pinch: function(tracks, event) {
        var trackLen = tracks.length;
        if (!trackLen) return;
        var pinchEnd = (tracks[trackLen - 1] || {}).points;
        var pinchPre = (tracks[trackLen - 2] || {}).points || pinchEnd;
        if (pinchPre && pinchPre.length > 1 && pinchEnd && pinchEnd.length > 1) {
            var pinchScale = $23dee61d0e9edcbc$var$dist(pinchEnd) / $23dee61d0e9edcbc$var$dist(pinchPre);
            !isFinite(pinchScale) && (pinchScale = 1);
            event.pinchScale = pinchScale;
            var pinchCenter = $23dee61d0e9edcbc$var$center(pinchEnd);
            event.pinchX = pinchCenter[0];
            event.pinchY = pinchCenter[1];
            return {
                type: "pinch",
                target: tracks[0].target,
                event: event
            };
        }
    }
};


function $27fca49e20b3ee21$export$185802fd694ee1f5() {
    return [
        1,
        0,
        0,
        1,
        0,
        0
    ];
}
function $27fca49e20b3ee21$export$f0954fd7d5368655(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
}
function $27fca49e20b3ee21$export$784d13d8ee351f07(out, m) {
    out[0] = m[0];
    out[1] = m[1];
    out[2] = m[2];
    out[3] = m[3];
    out[4] = m[4];
    out[5] = m[5];
    return out;
}
function $27fca49e20b3ee21$export$6e3a27864ab166fe(out, m1, m2) {
    var out0 = m1[0] * m2[0] + m1[2] * m2[1];
    var out1 = m1[1] * m2[0] + m1[3] * m2[1];
    var out2 = m1[0] * m2[2] + m1[2] * m2[3];
    var out3 = m1[1] * m2[2] + m1[3] * m2[3];
    var out4 = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];
    var out5 = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];
    out[0] = out0;
    out[1] = out1;
    out[2] = out2;
    out[3] = out3;
    out[4] = out4;
    out[5] = out5;
    return out;
}
function $27fca49e20b3ee21$export$d73ee8ef04f5226a(out, a, v) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4] + v[0];
    out[5] = a[5] + v[1];
    return out;
}
function $27fca49e20b3ee21$export$bb628a54ab399bc9(out, a, rad, pivot) {
    if (pivot === void 0) pivot = [
        0,
        0
    ];
    var aa = a[0];
    var ac = a[2];
    var atx = a[4];
    var ab = a[1];
    var ad = a[3];
    var aty = a[5];
    var st = Math.sin(rad);
    var ct = Math.cos(rad);
    out[0] = aa * ct + ab * st;
    out[1] = -aa * st + ab * ct;
    out[2] = ac * ct + ad * st;
    out[3] = -ac * st + ct * ad;
    out[4] = ct * (atx - pivot[0]) + st * (aty - pivot[1]) + pivot[0];
    out[5] = ct * (aty - pivot[1]) - st * (atx - pivot[0]) + pivot[1];
    return out;
}
function $27fca49e20b3ee21$export$dcdf75081b88279d(out, a, v) {
    var vx = v[0];
    var vy = v[1];
    out[0] = a[0] * vx;
    out[1] = a[1] * vy;
    out[2] = a[2] * vx;
    out[3] = a[3] * vy;
    out[4] = a[4] * vx;
    out[5] = a[5] * vy;
    return out;
}
function $27fca49e20b3ee21$export$6897c284b6f9f4dc(out, a) {
    var aa = a[0];
    var ac = a[2];
    var atx = a[4];
    var ab = a[1];
    var ad = a[3];
    var aty = a[5];
    var det = aa * ad - ab * ac;
    if (!det) return null;
    det = 1.0 / det;
    out[0] = ad * det;
    out[1] = -ab * det;
    out[2] = -ac * det;
    out[3] = aa * det;
    out[4] = (ac * aty - ad * atx) * det;
    out[5] = (ab * atx - aa * aty) * det;
    return out;
}
function $27fca49e20b3ee21$export$9cd59f9826255e47(a) {
    var b = $27fca49e20b3ee21$export$185802fd694ee1f5();
    $27fca49e20b3ee21$export$784d13d8ee351f07(b, a);
    return b;
}


var $98bf1aab7582d293$var$Point = function() {
    function Point(x, y) {
        this.x = x || 0;
        this.y = y || 0;
    }
    Point.prototype.copy = function(other) {
        this.x = other.x;
        this.y = other.y;
        return this;
    };
    Point.prototype.clone = function() {
        return new Point(this.x, this.y);
    };
    Point.prototype.set = function(x, y) {
        this.x = x;
        this.y = y;
        return this;
    };
    Point.prototype.equal = function(other) {
        return other.x === this.x && other.y === this.y;
    };
    Point.prototype.add = function(other) {
        this.x += other.x;
        this.y += other.y;
        return this;
    };
    Point.prototype.scale = function(scalar) {
        this.x *= scalar;
        this.y *= scalar;
    };
    Point.prototype.scaleAndAdd = function(other, scalar) {
        this.x += other.x * scalar;
        this.y += other.y * scalar;
    };
    Point.prototype.sub = function(other) {
        this.x -= other.x;
        this.y -= other.y;
        return this;
    };
    Point.prototype.dot = function(other) {
        return this.x * other.x + this.y * other.y;
    };
    Point.prototype.len = function() {
        return Math.sqrt(this.x * this.x + this.y * this.y);
    };
    Point.prototype.lenSquare = function() {
        return this.x * this.x + this.y * this.y;
    };
    Point.prototype.normalize = function() {
        var len = this.len();
        this.x /= len;
        this.y /= len;
        return this;
    };
    Point.prototype.distance = function(other) {
        var dx = this.x - other.x;
        var dy = this.y - other.y;
        return Math.sqrt(dx * dx + dy * dy);
    };
    Point.prototype.distanceSquare = function(other) {
        var dx = this.x - other.x;
        var dy = this.y - other.y;
        return dx * dx + dy * dy;
    };
    Point.prototype.negate = function() {
        this.x = -this.x;
        this.y = -this.y;
        return this;
    };
    Point.prototype.transform = function(m) {
        if (!m) return;
        var x = this.x;
        var y = this.y;
        this.x = m[0] * x + m[2] * y + m[4];
        this.y = m[1] * x + m[3] * y + m[5];
        return this;
    };
    Point.prototype.toArray = function(out) {
        out[0] = this.x;
        out[1] = this.y;
        return out;
    };
    Point.prototype.fromArray = function(input) {
        this.x = input[0];
        this.y = input[1];
    };
    Point.set = function(p, x, y) {
        p.x = x;
        p.y = y;
    };
    Point.copy = function(p, p2) {
        p.x = p2.x;
        p.y = p2.y;
    };
    Point.len = function(p) {
        return Math.sqrt(p.x * p.x + p.y * p.y);
    };
    Point.lenSquare = function(p) {
        return p.x * p.x + p.y * p.y;
    };
    Point.dot = function(p0, p1) {
        return p0.x * p1.x + p0.y * p1.y;
    };
    Point.add = function(out, p0, p1) {
        out.x = p0.x + p1.x;
        out.y = p0.y + p1.y;
    };
    Point.sub = function(out, p0, p1) {
        out.x = p0.x - p1.x;
        out.y = p0.y - p1.y;
    };
    Point.scale = function(out, p0, scalar) {
        out.x = p0.x * scalar;
        out.y = p0.y * scalar;
    };
    Point.scaleAndAdd = function(out, p0, p1, scalar) {
        out.x = p0.x + p1.x * scalar;
        out.y = p0.y + p1.y * scalar;
    };
    Point.lerp = function(out, p0, p1, t) {
        var onet = 1 - t;
        out.x = onet * p0.x + t * p1.x;
        out.y = onet * p0.y + t * p1.y;
    };
    return Point;
}();
var $98bf1aab7582d293$export$2e2bcd8739ae039 = $98bf1aab7582d293$var$Point;


var $bf33be5184c664d0$var$mathMin = Math.min;
var $bf33be5184c664d0$var$mathMax = Math.max;
var $bf33be5184c664d0$var$lt = new (0, $98bf1aab7582d293$export$2e2bcd8739ae039)();
var $bf33be5184c664d0$var$rb = new (0, $98bf1aab7582d293$export$2e2bcd8739ae039)();
var $bf33be5184c664d0$var$lb = new (0, $98bf1aab7582d293$export$2e2bcd8739ae039)();
var $bf33be5184c664d0$var$rt = new (0, $98bf1aab7582d293$export$2e2bcd8739ae039)();
var $bf33be5184c664d0$var$minTv = new (0, $98bf1aab7582d293$export$2e2bcd8739ae039)();
var $bf33be5184c664d0$var$maxTv = new (0, $98bf1aab7582d293$export$2e2bcd8739ae039)();
var $bf33be5184c664d0$var$BoundingRect = function() {
    function BoundingRect(x, y, width, height) {
        if (width < 0) {
            x = x + width;
            width = -width;
        }
        if (height < 0) {
            y = y + height;
            height = -height;
        }
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    }
    BoundingRect.prototype.union = function(other) {
        var x = $bf33be5184c664d0$var$mathMin(other.x, this.x);
        var y = $bf33be5184c664d0$var$mathMin(other.y, this.y);
        if (isFinite(this.x) && isFinite(this.width)) this.width = $bf33be5184c664d0$var$mathMax(other.x + other.width, this.x + this.width) - x;
        else this.width = other.width;
        if (isFinite(this.y) && isFinite(this.height)) this.height = $bf33be5184c664d0$var$mathMax(other.y + other.height, this.y + this.height) - y;
        else this.height = other.height;
        this.x = x;
        this.y = y;
    };
    BoundingRect.prototype.applyTransform = function(m) {
        BoundingRect.applyTransform(this, this, m);
    };
    BoundingRect.prototype.calculateTransform = function(b) {
        var a = this;
        var sx = b.width / a.width;
        var sy = b.height / a.height;
        var m = $27fca49e20b3ee21$export$185802fd694ee1f5();
        $27fca49e20b3ee21$export$d73ee8ef04f5226a(m, m, [
            -a.x,
            -a.y
        ]);
        $27fca49e20b3ee21$export$dcdf75081b88279d(m, m, [
            sx,
            sy
        ]);
        $27fca49e20b3ee21$export$d73ee8ef04f5226a(m, m, [
            b.x,
            b.y
        ]);
        return m;
    };
    BoundingRect.prototype.intersect = function(b, mtv) {
        if (!b) return false;
        if (!(b instanceof BoundingRect)) b = BoundingRect.create(b);
        var a = this;
        var ax0 = a.x;
        var ax1 = a.x + a.width;
        var ay0 = a.y;
        var ay1 = a.y + a.height;
        var bx0 = b.x;
        var bx1 = b.x + b.width;
        var by0 = b.y;
        var by1 = b.y + b.height;
        var overlap = !(ax1 < bx0 || bx1 < ax0 || ay1 < by0 || by1 < ay0);
        if (mtv) {
            var dMin = Infinity;
            var dMax = 0;
            var d0 = Math.abs(ax1 - bx0);
            var d1 = Math.abs(bx1 - ax0);
            var d2 = Math.abs(ay1 - by0);
            var d3 = Math.abs(by1 - ay0);
            var dx = Math.min(d0, d1);
            var dy = Math.min(d2, d3);
            if (ax1 < bx0 || bx1 < ax0) {
                if (dx > dMax) {
                    dMax = dx;
                    if (d0 < d1) (0, $98bf1aab7582d293$export$2e2bcd8739ae039).set($bf33be5184c664d0$var$maxTv, -d0, 0);
                    else (0, $98bf1aab7582d293$export$2e2bcd8739ae039).set($bf33be5184c664d0$var$maxTv, d1, 0);
                }
            } else if (dx < dMin) {
                dMin = dx;
                if (d0 < d1) (0, $98bf1aab7582d293$export$2e2bcd8739ae039).set($bf33be5184c664d0$var$minTv, d0, 0);
                else (0, $98bf1aab7582d293$export$2e2bcd8739ae039).set($bf33be5184c664d0$var$minTv, -d1, 0);
            }
            if (ay1 < by0 || by1 < ay0) {
                if (dy > dMax) {
                    dMax = dy;
                    if (d2 < d3) (0, $98bf1aab7582d293$export$2e2bcd8739ae039).set($bf33be5184c664d0$var$maxTv, 0, -d2);
                    else (0, $98bf1aab7582d293$export$2e2bcd8739ae039).set($bf33be5184c664d0$var$maxTv, 0, d3);
                }
            } else if (dx < dMin) {
                dMin = dx;
                if (d2 < d3) (0, $98bf1aab7582d293$export$2e2bcd8739ae039).set($bf33be5184c664d0$var$minTv, 0, d2);
                else (0, $98bf1aab7582d293$export$2e2bcd8739ae039).set($bf33be5184c664d0$var$minTv, 0, -d3);
            }
        }
        if (mtv) (0, $98bf1aab7582d293$export$2e2bcd8739ae039).copy(mtv, overlap ? $bf33be5184c664d0$var$minTv : $bf33be5184c664d0$var$maxTv);
        return overlap;
    };
    BoundingRect.prototype.contain = function(x, y) {
        var rect = this;
        return x >= rect.x && x <= rect.x + rect.width && y >= rect.y && y <= rect.y + rect.height;
    };
    BoundingRect.prototype.clone = function() {
        return new BoundingRect(this.x, this.y, this.width, this.height);
    };
    BoundingRect.prototype.copy = function(other) {
        BoundingRect.copy(this, other);
    };
    BoundingRect.prototype.plain = function() {
        return {
            x: this.x,
            y: this.y,
            width: this.width,
            height: this.height
        };
    };
    BoundingRect.prototype.isFinite = function() {
        return isFinite(this.x) && isFinite(this.y) && isFinite(this.width) && isFinite(this.height);
    };
    BoundingRect.prototype.isZero = function() {
        return this.width === 0 || this.height === 0;
    };
    BoundingRect.create = function(rect) {
        return new BoundingRect(rect.x, rect.y, rect.width, rect.height);
    };
    BoundingRect.copy = function(target, source) {
        target.x = source.x;
        target.y = source.y;
        target.width = source.width;
        target.height = source.height;
    };
    BoundingRect.applyTransform = function(target, source, m) {
        if (!m) {
            if (target !== source) BoundingRect.copy(target, source);
            return;
        }
        if (m[1] < 1e-5 && m[1] > -0.00001 && m[2] < 1e-5 && m[2] > -0.00001) {
            var sx = m[0];
            var sy = m[3];
            var tx = m[4];
            var ty = m[5];
            target.x = source.x * sx + tx;
            target.y = source.y * sy + ty;
            target.width = source.width * sx;
            target.height = source.height * sy;
            if (target.width < 0) {
                target.x += target.width;
                target.width = -target.width;
            }
            if (target.height < 0) {
                target.y += target.height;
                target.height = -target.height;
            }
            return;
        }
        $bf33be5184c664d0$var$lt.x = $bf33be5184c664d0$var$lb.x = source.x;
        $bf33be5184c664d0$var$lt.y = $bf33be5184c664d0$var$rt.y = source.y;
        $bf33be5184c664d0$var$rb.x = $bf33be5184c664d0$var$rt.x = source.x + source.width;
        $bf33be5184c664d0$var$rb.y = $bf33be5184c664d0$var$lb.y = source.y + source.height;
        $bf33be5184c664d0$var$lt.transform(m);
        $bf33be5184c664d0$var$rt.transform(m);
        $bf33be5184c664d0$var$rb.transform(m);
        $bf33be5184c664d0$var$lb.transform(m);
        target.x = $bf33be5184c664d0$var$mathMin($bf33be5184c664d0$var$lt.x, $bf33be5184c664d0$var$rb.x, $bf33be5184c664d0$var$lb.x, $bf33be5184c664d0$var$rt.x);
        target.y = $bf33be5184c664d0$var$mathMin($bf33be5184c664d0$var$lt.y, $bf33be5184c664d0$var$rb.y, $bf33be5184c664d0$var$lb.y, $bf33be5184c664d0$var$rt.y);
        var maxX = $bf33be5184c664d0$var$mathMax($bf33be5184c664d0$var$lt.x, $bf33be5184c664d0$var$rb.x, $bf33be5184c664d0$var$lb.x, $bf33be5184c664d0$var$rt.x);
        var maxY = $bf33be5184c664d0$var$mathMax($bf33be5184c664d0$var$lt.y, $bf33be5184c664d0$var$rb.y, $bf33be5184c664d0$var$lb.y, $bf33be5184c664d0$var$rt.y);
        target.width = maxX - target.x;
        target.height = maxY - target.y;
    };
    return BoundingRect;
}();
var $bf33be5184c664d0$export$2e2bcd8739ae039 = $bf33be5184c664d0$var$BoundingRect;


var $26bcd6f2c00f1f23$var$SILENT = "silent";
function $26bcd6f2c00f1f23$var$makeEventPacket(eveType, targetInfo, event) {
    return {
        type: eveType,
        event: event,
        target: targetInfo.target,
        topTarget: targetInfo.topTarget,
        cancelBubble: false,
        offsetX: event.zrX,
        offsetY: event.zrY,
        gestureEvent: event.gestureEvent,
        pinchX: event.pinchX,
        pinchY: event.pinchY,
        pinchScale: event.pinchScale,
        wheelDelta: event.zrDelta,
        zrByTouch: event.zrByTouch,
        which: event.which,
        stop: $26bcd6f2c00f1f23$var$stopEvent
    };
}
function $26bcd6f2c00f1f23$var$stopEvent() {
    $81f76356654e394a$export$fa6813432f753b0d(this.event);
}
var $26bcd6f2c00f1f23$var$EmptyProxy = function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(EmptyProxy, _super);
    function EmptyProxy() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handler = null;
        return _this;
    }
    EmptyProxy.prototype.dispose = function() {};
    EmptyProxy.prototype.setCursor = function() {};
    return EmptyProxy;
}((0, $a2a21788c772d0fe$export$2e2bcd8739ae039));
var $26bcd6f2c00f1f23$var$HoveredResult = function() {
    function HoveredResult(x, y) {
        this.x = x;
        this.y = y;
    }
    return HoveredResult;
}();
var $26bcd6f2c00f1f23$var$handlerNames = [
    "click",
    "dblclick",
    "mousewheel",
    "mouseout",
    "mouseup",
    "mousedown",
    "mousemove",
    "contextmenu"
];
var $26bcd6f2c00f1f23$var$tmpRect = new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)(0, 0, 0, 0);
var $26bcd6f2c00f1f23$var$Handler = function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(Handler, _super);
    function Handler(storage, painter, proxy, painterRoot, pointerSize) {
        var _this = _super.call(this) || this;
        _this._hovered = new $26bcd6f2c00f1f23$var$HoveredResult(0, 0);
        _this.storage = storage;
        _this.painter = painter;
        _this.painterRoot = painterRoot;
        _this._pointerSize = pointerSize;
        proxy = proxy || new $26bcd6f2c00f1f23$var$EmptyProxy();
        _this.proxy = null;
        _this.setHandlerProxy(proxy);
        _this._draggingMgr = new (0, $fde533d073755533$export$2e2bcd8739ae039)(_this);
        return _this;
    }
    Handler.prototype.setHandlerProxy = function(proxy) {
        if (this.proxy) this.proxy.dispose();
        if (proxy) {
            $e44eb14c4271d0f9$export$79b2f7037acddd43($26bcd6f2c00f1f23$var$handlerNames, function(name) {
                proxy.on && proxy.on(name, this[name], this);
            }, this);
            proxy.handler = this;
        }
        this.proxy = proxy;
    };
    Handler.prototype.mousemove = function(event) {
        var x = event.zrX;
        var y = event.zrY;
        var isOutside = $26bcd6f2c00f1f23$var$isOutsideBoundary(this, x, y);
        var lastHovered = this._hovered;
        var lastHoveredTarget = lastHovered.target;
        if (lastHoveredTarget && !lastHoveredTarget.__zr) {
            lastHovered = this.findHover(lastHovered.x, lastHovered.y);
            lastHoveredTarget = lastHovered.target;
        }
        var hovered = this._hovered = isOutside ? new $26bcd6f2c00f1f23$var$HoveredResult(x, y) : this.findHover(x, y);
        var hoveredTarget = hovered.target;
        var proxy = this.proxy;
        proxy.setCursor && proxy.setCursor(hoveredTarget ? hoveredTarget.cursor : "default");
        if (lastHoveredTarget && hoveredTarget !== lastHoveredTarget) this.dispatchToElement(lastHovered, "mouseout", event);
        this.dispatchToElement(hovered, "mousemove", event);
        if (hoveredTarget && hoveredTarget !== lastHoveredTarget) this.dispatchToElement(hovered, "mouseover", event);
    };
    Handler.prototype.mouseout = function(event) {
        var eventControl = event.zrEventControl;
        if (eventControl !== "only_globalout") this.dispatchToElement(this._hovered, "mouseout", event);
        if (eventControl !== "no_globalout") this.trigger("globalout", {
            type: "globalout",
            event: event
        });
    };
    Handler.prototype.resize = function() {
        this._hovered = new $26bcd6f2c00f1f23$var$HoveredResult(0, 0);
    };
    Handler.prototype.dispatch = function(eventName, eventArgs) {
        var handler = this[eventName];
        handler && handler.call(this, eventArgs);
    };
    Handler.prototype.dispose = function() {
        this.proxy.dispose();
        this.storage = null;
        this.proxy = null;
        this.painter = null;
    };
    Handler.prototype.setCursorStyle = function(cursorStyle) {
        var proxy = this.proxy;
        proxy.setCursor && proxy.setCursor(cursorStyle);
    };
    Handler.prototype.dispatchToElement = function(targetInfo, eventName, event) {
        targetInfo = targetInfo || {};
        var el = targetInfo.target;
        if (el && el.silent) return;
        var eventKey = "on" + eventName;
        var eventPacket = $26bcd6f2c00f1f23$var$makeEventPacket(eventName, targetInfo, event);
        while(el){
            el[eventKey] && (eventPacket.cancelBubble = !!el[eventKey].call(el, eventPacket));
            el.trigger(eventName, eventPacket);
            el = el.__hostTarget ? el.__hostTarget : el.parent;
            if (eventPacket.cancelBubble) break;
        }
        if (!eventPacket.cancelBubble) {
            this.trigger(eventName, eventPacket);
            if (this.painter && this.painter.eachOtherLayer) this.painter.eachOtherLayer(function(layer) {
                if (typeof layer[eventKey] === "function") layer[eventKey].call(layer, eventPacket);
                if (layer.trigger) layer.trigger(eventName, eventPacket);
            });
        }
    };
    Handler.prototype.findHover = function(x, y, exclude) {
        var list = this.storage.getDisplayList();
        var out = new $26bcd6f2c00f1f23$var$HoveredResult(x, y);
        $26bcd6f2c00f1f23$var$setHoverTarget(list, out, x, y, exclude);
        if (this._pointerSize && !out.target) {
            var candidates = [];
            var pointerSize = this._pointerSize;
            var targetSizeHalf = pointerSize / 2;
            var pointerRect = new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)(x - targetSizeHalf, y - targetSizeHalf, pointerSize, pointerSize);
            for(var i = list.length - 1; i >= 0; i--){
                var el = list[i];
                if (el !== exclude && !el.ignore && !el.ignoreCoarsePointer && (!el.parent || !el.parent.ignoreCoarsePointer)) {
                    $26bcd6f2c00f1f23$var$tmpRect.copy(el.getBoundingRect());
                    if (el.transform) $26bcd6f2c00f1f23$var$tmpRect.applyTransform(el.transform);
                    if ($26bcd6f2c00f1f23$var$tmpRect.intersect(pointerRect)) candidates.push(el);
                }
            }
            if (candidates.length) {
                var rStep = 4;
                var thetaStep = Math.PI / 12;
                var PI2 = Math.PI * 2;
                for(var r = 0; r < targetSizeHalf; r += rStep)for(var theta = 0; theta < PI2; theta += thetaStep){
                    var x1 = x + r * Math.cos(theta);
                    var y1 = y + r * Math.sin(theta);
                    $26bcd6f2c00f1f23$var$setHoverTarget(candidates, out, x1, y1, exclude);
                    if (out.target) return out;
                }
            }
        }
        return out;
    };
    Handler.prototype.processGesture = function(event, stage) {
        if (!this._gestureMgr) this._gestureMgr = new (0, $23dee61d0e9edcbc$export$f7557d6f27e9503)();
        var gestureMgr = this._gestureMgr;
        stage === "start" && gestureMgr.clear();
        var gestureInfo = gestureMgr.recognize(event, this.findHover(event.zrX, event.zrY, null).target, this.proxy.dom);
        stage === "end" && gestureMgr.clear();
        if (gestureInfo) {
            var type = gestureInfo.type;
            event.gestureEvent = type;
            var res = new $26bcd6f2c00f1f23$var$HoveredResult();
            res.target = gestureInfo.target;
            this.dispatchToElement(res, type, gestureInfo.event);
        }
    };
    return Handler;
}((0, $a2a21788c772d0fe$export$2e2bcd8739ae039));
$e44eb14c4271d0f9$export$79b2f7037acddd43([
    "click",
    "mousedown",
    "mouseup",
    "mousewheel",
    "dblclick",
    "contextmenu"
], function(name) {
    $26bcd6f2c00f1f23$var$Handler.prototype[name] = function(event) {
        var x = event.zrX;
        var y = event.zrY;
        var isOutside = $26bcd6f2c00f1f23$var$isOutsideBoundary(this, x, y);
        var hovered;
        var hoveredTarget;
        if (name !== "mouseup" || !isOutside) {
            hovered = this.findHover(x, y);
            hoveredTarget = hovered.target;
        }
        if (name === "mousedown") {
            this._downEl = hoveredTarget;
            this._downPoint = [
                event.zrX,
                event.zrY
            ];
            this._upEl = hoveredTarget;
        } else if (name === "mouseup") this._upEl = hoveredTarget;
        else if (name === "click") {
            if (this._downEl !== this._upEl || !this._downPoint || $187eb1bf1a49fd34$export$6c4a311cc157c764(this._downPoint, [
                event.zrX,
                event.zrY
            ]) > 4) return;
            this._downPoint = null;
        }
        this.dispatchToElement(hovered, name, event);
    };
});
function $26bcd6f2c00f1f23$var$isHover(displayable, x, y) {
    if (displayable[displayable.rectHover ? "rectContain" : "contain"](x, y)) {
        var el = displayable;
        var isSilent = void 0;
        var ignoreClip = false;
        while(el){
            if (el.ignoreClip) ignoreClip = true;
            if (!ignoreClip) {
                var clipPath = el.getClipPath();
                if (clipPath && !clipPath.contain(x, y)) return false;
            }
            if (el.silent) isSilent = true;
            var hostEl = el.__hostTarget;
            el = hostEl ? hostEl : el.parent;
        }
        return isSilent ? $26bcd6f2c00f1f23$var$SILENT : true;
    }
    return false;
}
function $26bcd6f2c00f1f23$var$setHoverTarget(list, out, x, y, exclude) {
    for(var i = list.length - 1; i >= 0; i--){
        var el = list[i];
        var hoverCheckResult = void 0;
        if (el !== exclude && !el.ignore && (hoverCheckResult = $26bcd6f2c00f1f23$var$isHover(el, x, y))) {
            !out.topTarget && (out.topTarget = el);
            if (hoverCheckResult !== $26bcd6f2c00f1f23$var$SILENT) {
                out.target = el;
                break;
            }
        }
    }
}
function $26bcd6f2c00f1f23$var$isOutsideBoundary(handlerInstance, x, y) {
    var painter = handlerInstance.painter;
    return x < 0 || x > painter.getWidth() || y < 0 || y > painter.getHeight();
}
var $26bcd6f2c00f1f23$export$2e2bcd8739ae039 = $26bcd6f2c00f1f23$var$Handler;



var $eba99bd519f945da$var$DEFAULT_MIN_MERGE = 32;
var $eba99bd519f945da$var$DEFAULT_MIN_GALLOPING = 7;
function $eba99bd519f945da$var$minRunLength(n) {
    var r = 0;
    while(n >= $eba99bd519f945da$var$DEFAULT_MIN_MERGE){
        r |= n & 1;
        n >>= 1;
    }
    return n + r;
}
function $eba99bd519f945da$var$makeAscendingRun(array, lo, hi, compare) {
    var runHi = lo + 1;
    if (runHi === hi) return 1;
    if (compare(array[runHi++], array[lo]) < 0) {
        while(runHi < hi && compare(array[runHi], array[runHi - 1]) < 0)runHi++;
        $eba99bd519f945da$var$reverseRun(array, lo, runHi);
    } else while(runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0)runHi++;
    return runHi - lo;
}
function $eba99bd519f945da$var$reverseRun(array, lo, hi) {
    hi--;
    while(lo < hi){
        var t = array[lo];
        array[lo++] = array[hi];
        array[hi--] = t;
    }
}
function $eba99bd519f945da$var$binaryInsertionSort(array, lo, hi, start, compare) {
    if (start === lo) start++;
    for(; start < hi; start++){
        var pivot = array[start];
        var left = lo;
        var right = start;
        var mid;
        while(left < right){
            mid = left + right >>> 1;
            if (compare(pivot, array[mid]) < 0) right = mid;
            else left = mid + 1;
        }
        var n = start - left;
        switch(n){
            case 3:
                array[left + 3] = array[left + 2];
            case 2:
                array[left + 2] = array[left + 1];
            case 1:
                array[left + 1] = array[left];
                break;
            default:
                while(n > 0){
                    array[left + n] = array[left + n - 1];
                    n--;
                }
        }
        array[left] = pivot;
    }
}
function $eba99bd519f945da$var$gallopLeft(value, array, start, length, hint, compare) {
    var lastOffset = 0;
    var maxOffset = 0;
    var offset = 1;
    if (compare(value, array[start + hint]) > 0) {
        maxOffset = length - hint;
        while(offset < maxOffset && compare(value, array[start + hint + offset]) > 0){
            lastOffset = offset;
            offset = (offset << 1) + 1;
            if (offset <= 0) offset = maxOffset;
        }
        if (offset > maxOffset) offset = maxOffset;
        lastOffset += hint;
        offset += hint;
    } else {
        maxOffset = hint + 1;
        while(offset < maxOffset && compare(value, array[start + hint - offset]) <= 0){
            lastOffset = offset;
            offset = (offset << 1) + 1;
            if (offset <= 0) offset = maxOffset;
        }
        if (offset > maxOffset) offset = maxOffset;
        var tmp = lastOffset;
        lastOffset = hint - offset;
        offset = hint - tmp;
    }
    lastOffset++;
    while(lastOffset < offset){
        var m = lastOffset + (offset - lastOffset >>> 1);
        if (compare(value, array[start + m]) > 0) lastOffset = m + 1;
        else offset = m;
    }
    return offset;
}
function $eba99bd519f945da$var$gallopRight(value, array, start, length, hint, compare) {
    var lastOffset = 0;
    var maxOffset = 0;
    var offset = 1;
    if (compare(value, array[start + hint]) < 0) {
        maxOffset = hint + 1;
        while(offset < maxOffset && compare(value, array[start + hint - offset]) < 0){
            lastOffset = offset;
            offset = (offset << 1) + 1;
            if (offset <= 0) offset = maxOffset;
        }
        if (offset > maxOffset) offset = maxOffset;
        var tmp = lastOffset;
        lastOffset = hint - offset;
        offset = hint - tmp;
    } else {
        maxOffset = length - hint;
        while(offset < maxOffset && compare(value, array[start + hint + offset]) >= 0){
            lastOffset = offset;
            offset = (offset << 1) + 1;
            if (offset <= 0) offset = maxOffset;
        }
        if (offset > maxOffset) offset = maxOffset;
        lastOffset += hint;
        offset += hint;
    }
    lastOffset++;
    while(lastOffset < offset){
        var m = lastOffset + (offset - lastOffset >>> 1);
        if (compare(value, array[start + m]) < 0) offset = m;
        else lastOffset = m + 1;
    }
    return offset;
}
function $eba99bd519f945da$var$TimSort(array, compare) {
    var minGallop = $eba99bd519f945da$var$DEFAULT_MIN_GALLOPING;
    var runStart;
    var runLength;
    var stackSize = 0;
    var tmp = [];
    runStart = [];
    runLength = [];
    function pushRun(_runStart, _runLength) {
        runStart[stackSize] = _runStart;
        runLength[stackSize] = _runLength;
        stackSize += 1;
    }
    function mergeRuns() {
        while(stackSize > 1){
            var n = stackSize - 2;
            if (n >= 1 && runLength[n - 1] <= runLength[n] + runLength[n + 1] || n >= 2 && runLength[n - 2] <= runLength[n] + runLength[n - 1]) {
                if (runLength[n - 1] < runLength[n + 1]) n--;
            } else if (runLength[n] > runLength[n + 1]) break;
            mergeAt(n);
        }
    }
    function forceMergeRuns() {
        while(stackSize > 1){
            var n = stackSize - 2;
            if (n > 0 && runLength[n - 1] < runLength[n + 1]) n--;
            mergeAt(n);
        }
    }
    function mergeAt(i) {
        var start1 = runStart[i];
        var length1 = runLength[i];
        var start2 = runStart[i + 1];
        var length2 = runLength[i + 1];
        runLength[i] = length1 + length2;
        if (i === stackSize - 3) {
            runStart[i + 1] = runStart[i + 2];
            runLength[i + 1] = runLength[i + 2];
        }
        stackSize--;
        var k = $eba99bd519f945da$var$gallopRight(array[start2], array, start1, length1, 0, compare);
        start1 += k;
        length1 -= k;
        if (length1 === 0) return;
        length2 = $eba99bd519f945da$var$gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);
        if (length2 === 0) return;
        if (length1 <= length2) mergeLow(start1, length1, start2, length2);
        else mergeHigh(start1, length1, start2, length2);
    }
    function mergeLow(start1, length1, start2, length2) {
        var i = 0;
        for(i = 0; i < length1; i++)tmp[i] = array[start1 + i];
        var cursor1 = 0;
        var cursor2 = start2;
        var dest = start1;
        array[dest++] = array[cursor2++];
        if (--length2 === 0) {
            for(i = 0; i < length1; i++)array[dest + i] = tmp[cursor1 + i];
            return;
        }
        if (length1 === 1) {
            for(i = 0; i < length2; i++)array[dest + i] = array[cursor2 + i];
            array[dest + length2] = tmp[cursor1];
            return;
        }
        var _minGallop = minGallop;
        var count1;
        var count2;
        var exit;
        while(true){
            count1 = 0;
            count2 = 0;
            exit = false;
            do if (compare(array[cursor2], tmp[cursor1]) < 0) {
                array[dest++] = array[cursor2++];
                count2++;
                count1 = 0;
                if (--length2 === 0) {
                    exit = true;
                    break;
                }
            } else {
                array[dest++] = tmp[cursor1++];
                count1++;
                count2 = 0;
                if (--length1 === 1) {
                    exit = true;
                    break;
                }
            }
            while ((count1 | count2) < _minGallop);
            if (exit) break;
            do {
                count1 = $eba99bd519f945da$var$gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);
                if (count1 !== 0) {
                    for(i = 0; i < count1; i++)array[dest + i] = tmp[cursor1 + i];
                    dest += count1;
                    cursor1 += count1;
                    length1 -= count1;
                    if (length1 <= 1) {
                        exit = true;
                        break;
                    }
                }
                array[dest++] = array[cursor2++];
                if (--length2 === 0) {
                    exit = true;
                    break;
                }
                count2 = $eba99bd519f945da$var$gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);
                if (count2 !== 0) {
                    for(i = 0; i < count2; i++)array[dest + i] = array[cursor2 + i];
                    dest += count2;
                    cursor2 += count2;
                    length2 -= count2;
                    if (length2 === 0) {
                        exit = true;
                        break;
                    }
                }
                array[dest++] = tmp[cursor1++];
                if (--length1 === 1) {
                    exit = true;
                    break;
                }
                _minGallop--;
            }while (count1 >= $eba99bd519f945da$var$DEFAULT_MIN_GALLOPING || count2 >= $eba99bd519f945da$var$DEFAULT_MIN_GALLOPING);
            if (exit) break;
            if (_minGallop < 0) _minGallop = 0;
            _minGallop += 2;
        }
        minGallop = _minGallop;
        minGallop < 1 && (minGallop = 1);
        if (length1 === 1) {
            for(i = 0; i < length2; i++)array[dest + i] = array[cursor2 + i];
            array[dest + length2] = tmp[cursor1];
        } else if (length1 === 0) throw new Error();
        else for(i = 0; i < length1; i++)array[dest + i] = tmp[cursor1 + i];
    }
    function mergeHigh(start1, length1, start2, length2) {
        var i = 0;
        for(i = 0; i < length2; i++)tmp[i] = array[start2 + i];
        var cursor1 = start1 + length1 - 1;
        var cursor2 = length2 - 1;
        var dest = start2 + length2 - 1;
        var customCursor = 0;
        var customDest = 0;
        array[dest--] = array[cursor1--];
        if (--length1 === 0) {
            customCursor = dest - (length2 - 1);
            for(i = 0; i < length2; i++)array[customCursor + i] = tmp[i];
            return;
        }
        if (length2 === 1) {
            dest -= length1;
            cursor1 -= length1;
            customDest = dest + 1;
            customCursor = cursor1 + 1;
            for(i = length1 - 1; i >= 0; i--)array[customDest + i] = array[customCursor + i];
            array[dest] = tmp[cursor2];
            return;
        }
        var _minGallop = minGallop;
        while(true){
            var count1 = 0;
            var count2 = 0;
            var exit = false;
            do if (compare(tmp[cursor2], array[cursor1]) < 0) {
                array[dest--] = array[cursor1--];
                count1++;
                count2 = 0;
                if (--length1 === 0) {
                    exit = true;
                    break;
                }
            } else {
                array[dest--] = tmp[cursor2--];
                count2++;
                count1 = 0;
                if (--length2 === 1) {
                    exit = true;
                    break;
                }
            }
            while ((count1 | count2) < _minGallop);
            if (exit) break;
            do {
                count1 = length1 - $eba99bd519f945da$var$gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);
                if (count1 !== 0) {
                    dest -= count1;
                    cursor1 -= count1;
                    length1 -= count1;
                    customDest = dest + 1;
                    customCursor = cursor1 + 1;
                    for(i = count1 - 1; i >= 0; i--)array[customDest + i] = array[customCursor + i];
                    if (length1 === 0) {
                        exit = true;
                        break;
                    }
                }
                array[dest--] = tmp[cursor2--];
                if (--length2 === 1) {
                    exit = true;
                    break;
                }
                count2 = length2 - $eba99bd519f945da$var$gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);
                if (count2 !== 0) {
                    dest -= count2;
                    cursor2 -= count2;
                    length2 -= count2;
                    customDest = dest + 1;
                    customCursor = cursor2 + 1;
                    for(i = 0; i < count2; i++)array[customDest + i] = tmp[customCursor + i];
                    if (length2 <= 1) {
                        exit = true;
                        break;
                    }
                }
                array[dest--] = array[cursor1--];
                if (--length1 === 0) {
                    exit = true;
                    break;
                }
                _minGallop--;
            }while (count1 >= $eba99bd519f945da$var$DEFAULT_MIN_GALLOPING || count2 >= $eba99bd519f945da$var$DEFAULT_MIN_GALLOPING);
            if (exit) break;
            if (_minGallop < 0) _minGallop = 0;
            _minGallop += 2;
        }
        minGallop = _minGallop;
        if (minGallop < 1) minGallop = 1;
        if (length2 === 1) {
            dest -= length1;
            cursor1 -= length1;
            customDest = dest + 1;
            customCursor = cursor1 + 1;
            for(i = length1 - 1; i >= 0; i--)array[customDest + i] = array[customCursor + i];
            array[dest] = tmp[cursor2];
        } else if (length2 === 0) throw new Error();
        else {
            customCursor = dest - (length2 - 1);
            for(i = 0; i < length2; i++)array[customCursor + i] = tmp[i];
        }
    }
    return {
        mergeRuns: mergeRuns,
        forceMergeRuns: forceMergeRuns,
        pushRun: pushRun
    };
}
function $eba99bd519f945da$export$2e2bcd8739ae039(array, compare, lo, hi) {
    if (!lo) lo = 0;
    if (!hi) hi = array.length;
    var remaining = hi - lo;
    if (remaining < 2) return;
    var runLength = 0;
    if (remaining < $eba99bd519f945da$var$DEFAULT_MIN_MERGE) {
        runLength = $eba99bd519f945da$var$makeAscendingRun(array, lo, hi, compare);
        $eba99bd519f945da$var$binaryInsertionSort(array, lo, hi, lo + runLength, compare);
        return;
    }
    var ts = $eba99bd519f945da$var$TimSort(array, compare);
    var minRun = $eba99bd519f945da$var$minRunLength(remaining);
    do {
        runLength = $eba99bd519f945da$var$makeAscendingRun(array, lo, hi, compare);
        if (runLength < minRun) {
            var force = remaining;
            if (force > minRun) force = minRun;
            $eba99bd519f945da$var$binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);
            runLength = force;
        }
        ts.pushRun(lo, runLength);
        ts.mergeRuns();
        remaining -= runLength;
        lo += runLength;
    }while (remaining !== 0);
    ts.forceMergeRuns();
}


var $b870c418b8d2135e$export$a7b6db622c6c7dbd = 1;
var $b870c418b8d2135e$export$ada8b2beb3d76671 = 2;
var $b870c418b8d2135e$export$f75fe89a33ebe115 = 4;


var $af787ad638cafa4e$var$invalidZErrorLogged = false;
function $af787ad638cafa4e$var$logInvalidZError() {
    if ($af787ad638cafa4e$var$invalidZErrorLogged) return;
    $af787ad638cafa4e$var$invalidZErrorLogged = true;
    console.warn("z / z2 / zlevel of displayable is invalid, which may cause unexpected errors");
}
function $af787ad638cafa4e$var$shapeCompareFunc(a, b) {
    if (a.zlevel === b.zlevel) {
        if (a.z === b.z) return a.z2 - b.z2;
        return a.z - b.z;
    }
    return a.zlevel - b.zlevel;
}
var $af787ad638cafa4e$var$Storage = function() {
    function Storage() {
        this._roots = [];
        this._displayList = [];
        this._displayListLen = 0;
        this.displayableSortFunc = $af787ad638cafa4e$var$shapeCompareFunc;
    }
    Storage.prototype.traverse = function(cb, context) {
        for(var i = 0; i < this._roots.length; i++)this._roots[i].traverse(cb, context);
    };
    Storage.prototype.getDisplayList = function(update, includeIgnore) {
        includeIgnore = includeIgnore || false;
        var displayList = this._displayList;
        if (update || !displayList.length) this.updateDisplayList(includeIgnore);
        return displayList;
    };
    Storage.prototype.updateDisplayList = function(includeIgnore) {
        this._displayListLen = 0;
        var roots = this._roots;
        var displayList = this._displayList;
        for(var i = 0, len = roots.length; i < len; i++)this._updateAndAddDisplayable(roots[i], null, includeIgnore);
        displayList.length = this._displayListLen;
        (0, $eba99bd519f945da$export$2e2bcd8739ae039)(displayList, $af787ad638cafa4e$var$shapeCompareFunc);
    };
    Storage.prototype._updateAndAddDisplayable = function(el, clipPaths, includeIgnore) {
        if (el.ignore && !includeIgnore) return;
        el.beforeUpdate();
        el.update();
        el.afterUpdate();
        var userSetClipPath = el.getClipPath();
        if (el.ignoreClip) clipPaths = null;
        else if (userSetClipPath) {
            if (clipPaths) clipPaths = clipPaths.slice();
            else clipPaths = [];
            var currentClipPath = userSetClipPath;
            var parentClipPath = el;
            while(currentClipPath){
                currentClipPath.parent = parentClipPath;
                currentClipPath.updateTransform();
                clipPaths.push(currentClipPath);
                parentClipPath = currentClipPath;
                currentClipPath = currentClipPath.getClipPath();
            }
        }
        if (el.childrenRef) {
            var children = el.childrenRef();
            for(var i = 0; i < children.length; i++){
                var child = children[i];
                if (el.__dirty) child.__dirty |= (0, $b870c418b8d2135e$export$a7b6db622c6c7dbd);
                this._updateAndAddDisplayable(child, clipPaths, includeIgnore);
            }
            el.__dirty = 0;
        } else {
            var disp = el;
            if (clipPaths && clipPaths.length) disp.__clipPaths = clipPaths;
            else if (disp.__clipPaths && disp.__clipPaths.length > 0) disp.__clipPaths = [];
            if (isNaN(disp.z)) {
                $af787ad638cafa4e$var$logInvalidZError();
                disp.z = 0;
            }
            if (isNaN(disp.z2)) {
                $af787ad638cafa4e$var$logInvalidZError();
                disp.z2 = 0;
            }
            if (isNaN(disp.zlevel)) {
                $af787ad638cafa4e$var$logInvalidZError();
                disp.zlevel = 0;
            }
            this._displayList[this._displayListLen++] = disp;
        }
        var decalEl = el.getDecalElement && el.getDecalElement();
        if (decalEl) this._updateAndAddDisplayable(decalEl, clipPaths, includeIgnore);
        var textGuide = el.getTextGuideLine();
        if (textGuide) this._updateAndAddDisplayable(textGuide, clipPaths, includeIgnore);
        var textEl = el.getTextContent();
        if (textEl) this._updateAndAddDisplayable(textEl, clipPaths, includeIgnore);
    };
    Storage.prototype.addRoot = function(el) {
        if (el.__zr && el.__zr.storage === this) return;
        this._roots.push(el);
    };
    Storage.prototype.delRoot = function(el) {
        if (el instanceof Array) {
            for(var i = 0, l = el.length; i < l; i++)this.delRoot(el[i]);
            return;
        }
        var idx = $e44eb14c4271d0f9$export$305f7d4e9d4624f2(this._roots, el);
        if (idx >= 0) this._roots.splice(idx, 1);
    };
    Storage.prototype.delAllRoots = function() {
        this._roots = [];
        this._displayList = [];
        this._displayListLen = 0;
        return;
    };
    Storage.prototype.getRoots = function() {
        return this._roots;
    };
    Storage.prototype.dispose = function() {
        this._displayList = null;
        this._roots = null;
    };
    return Storage;
}();
var $af787ad638cafa4e$export$2e2bcd8739ae039 = $af787ad638cafa4e$var$Storage;





var $c6d80931a907d00a$var$requestAnimationFrame;
$c6d80931a907d00a$var$requestAnimationFrame = (0, $de9e931273a116c1$export$2e2bcd8739ae039).hasGlobalWindow && (window.requestAnimationFrame && window.requestAnimationFrame.bind(window) || window.msRequestAnimationFrame && window.msRequestAnimationFrame.bind(window) || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame) || function(func) {
    return setTimeout(func, 16);
};
var $c6d80931a907d00a$export$2e2bcd8739ae039 = $c6d80931a907d00a$var$requestAnimationFrame;


var $92c590cae218c52b$var$easingFuncs = {
    linear: function(k) {
        return k;
    },
    quadraticIn: function(k) {
        return k * k;
    },
    quadraticOut: function(k) {
        return k * (2 - k);
    },
    quadraticInOut: function(k) {
        if ((k *= 2) < 1) return 0.5 * k * k;
        return -0.5 * (--k * (k - 2) - 1);
    },
    cubicIn: function(k) {
        return k * k * k;
    },
    cubicOut: function(k) {
        return --k * k * k + 1;
    },
    cubicInOut: function(k) {
        if ((k *= 2) < 1) return 0.5 * k * k * k;
        return 0.5 * ((k -= 2) * k * k + 2);
    },
    quarticIn: function(k) {
        return k * k * k * k;
    },
    quarticOut: function(k) {
        return 1 - --k * k * k * k;
    },
    quarticInOut: function(k) {
        if ((k *= 2) < 1) return 0.5 * k * k * k * k;
        return -0.5 * ((k -= 2) * k * k * k - 2);
    },
    quinticIn: function(k) {
        return k * k * k * k * k;
    },
    quinticOut: function(k) {
        return --k * k * k * k * k + 1;
    },
    quinticInOut: function(k) {
        if ((k *= 2) < 1) return 0.5 * k * k * k * k * k;
        return 0.5 * ((k -= 2) * k * k * k * k + 2);
    },
    sinusoidalIn: function(k) {
        return 1 - Math.cos(k * Math.PI / 2);
    },
    sinusoidalOut: function(k) {
        return Math.sin(k * Math.PI / 2);
    },
    sinusoidalInOut: function(k) {
        return 0.5 * (1 - Math.cos(Math.PI * k));
    },
    exponentialIn: function(k) {
        return k === 0 ? 0 : Math.pow(1024, k - 1);
    },
    exponentialOut: function(k) {
        return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
    },
    exponentialInOut: function(k) {
        if (k === 0) return 0;
        if (k === 1) return 1;
        if ((k *= 2) < 1) return 0.5 * Math.pow(1024, k - 1);
        return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
    },
    circularIn: function(k) {
        return 1 - Math.sqrt(1 - k * k);
    },
    circularOut: function(k) {
        return Math.sqrt(1 - --k * k);
    },
    circularInOut: function(k) {
        if ((k *= 2) < 1) return -0.5 * (Math.sqrt(1 - k * k) - 1);
        return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
    },
    elasticIn: function(k) {
        var s;
        var a = 0.1;
        var p = 0.4;
        if (k === 0) return 0;
        if (k === 1) return 1;
        if (!a || a < 1) {
            a = 1;
            s = p / 4;
        } else s = p * Math.asin(1 / a) / (2 * Math.PI);
        return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
    },
    elasticOut: function(k) {
        var s;
        var a = 0.1;
        var p = 0.4;
        if (k === 0) return 0;
        if (k === 1) return 1;
        if (!a || a < 1) {
            a = 1;
            s = p / 4;
        } else s = p * Math.asin(1 / a) / (2 * Math.PI);
        return a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1;
    },
    elasticInOut: function(k) {
        var s;
        var a = 0.1;
        var p = 0.4;
        if (k === 0) return 0;
        if (k === 1) return 1;
        if (!a || a < 1) {
            a = 1;
            s = p / 4;
        } else s = p * Math.asin(1 / a) / (2 * Math.PI);
        if ((k *= 2) < 1) return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
        return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;
    },
    backIn: function(k) {
        var s = 1.70158;
        return k * k * ((s + 1) * k - s);
    },
    backOut: function(k) {
        var s = 1.70158;
        return --k * k * ((s + 1) * k + s) + 1;
    },
    backInOut: function(k) {
        var s = 2.5949095;
        if ((k *= 2) < 1) return 0.5 * (k * k * ((s + 1) * k - s));
        return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
    },
    bounceIn: function(k) {
        return 1 - $92c590cae218c52b$var$easingFuncs.bounceOut(1 - k);
    },
    bounceOut: function(k) {
        if (k < 1 / 2.75) return 7.5625 * k * k;
        else if (k < 2 / 2.75) return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;
        else if (k < 2.5 / 2.75) return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;
        else return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;
    },
    bounceInOut: function(k) {
        if (k < 0.5) return $92c590cae218c52b$var$easingFuncs.bounceIn(k * 2) * 0.5;
        return $92c590cae218c52b$var$easingFuncs.bounceOut(k * 2 - 1) * 0.5 + 0.5;
    }
};
var $92c590cae218c52b$export$2e2bcd8739ae039 = $92c590cae218c52b$var$easingFuncs;




var $b1facc0bcf653177$var$mathPow = Math.pow;
var $b1facc0bcf653177$var$mathSqrt = Math.sqrt;
var $b1facc0bcf653177$var$EPSILON = 1e-8;
var $b1facc0bcf653177$var$EPSILON_NUMERIC = 1e-4;
var $b1facc0bcf653177$var$THREE_SQRT = $b1facc0bcf653177$var$mathSqrt(3);
var $b1facc0bcf653177$var$ONE_THIRD = 1 / 3;
var $b1facc0bcf653177$var$_v0 = (0, $187eb1bf1a49fd34$export$185802fd694ee1f5)();
var $b1facc0bcf653177$var$_v1 = (0, $187eb1bf1a49fd34$export$185802fd694ee1f5)();
var $b1facc0bcf653177$var$_v2 = (0, $187eb1bf1a49fd34$export$185802fd694ee1f5)();
function $b1facc0bcf653177$var$isAroundZero(val) {
    return val > -$b1facc0bcf653177$var$EPSILON && val < $b1facc0bcf653177$var$EPSILON;
}
function $b1facc0bcf653177$var$isNotAroundZero(val) {
    return val > $b1facc0bcf653177$var$EPSILON || val < -$b1facc0bcf653177$var$EPSILON;
}
function $b1facc0bcf653177$export$547c21de482bbcb2(p0, p1, p2, p3, t) {
    var onet = 1 - t;
    return onet * onet * (onet * p0 + 3 * t * p1) + t * t * (t * p3 + 3 * onet * p2);
}
function $b1facc0bcf653177$export$55fce925c60b6271(p0, p1, p2, p3, t) {
    var onet = 1 - t;
    return 3 * (((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet + (p3 - p2) * t * t);
}
function $b1facc0bcf653177$export$ca5d13faa10b167e(p0, p1, p2, p3, val, roots) {
    var a = p3 + 3 * (p1 - p2) - p0;
    var b = 3 * (p2 - p1 * 2 + p0);
    var c = 3 * (p1 - p0);
    var d = p0 - val;
    var A = b * b - 3 * a * c;
    var B = b * c - 9 * a * d;
    var C = c * c - 3 * b * d;
    var n = 0;
    if ($b1facc0bcf653177$var$isAroundZero(A) && $b1facc0bcf653177$var$isAroundZero(B)) {
        if ($b1facc0bcf653177$var$isAroundZero(b)) roots[0] = 0;
        else {
            var t1 = -c / b;
            if (t1 >= 0 && t1 <= 1) roots[n++] = t1;
        }
    } else {
        var disc = B * B - 4 * A * C;
        if ($b1facc0bcf653177$var$isAroundZero(disc)) {
            var K = B / A;
            var t1 = -b / a + K;
            var t2 = -K / 2;
            if (t1 >= 0 && t1 <= 1) roots[n++] = t1;
            if (t2 >= 0 && t2 <= 1) roots[n++] = t2;
        } else if (disc > 0) {
            var discSqrt = $b1facc0bcf653177$var$mathSqrt(disc);
            var Y1 = A * b + 1.5 * a * (-B + discSqrt);
            var Y2 = A * b + 1.5 * a * (-B - discSqrt);
            if (Y1 < 0) Y1 = -$b1facc0bcf653177$var$mathPow(-Y1, $b1facc0bcf653177$var$ONE_THIRD);
            else Y1 = $b1facc0bcf653177$var$mathPow(Y1, $b1facc0bcf653177$var$ONE_THIRD);
            if (Y2 < 0) Y2 = -$b1facc0bcf653177$var$mathPow(-Y2, $b1facc0bcf653177$var$ONE_THIRD);
            else Y2 = $b1facc0bcf653177$var$mathPow(Y2, $b1facc0bcf653177$var$ONE_THIRD);
            var t1 = (-b - (Y1 + Y2)) / (3 * a);
            if (t1 >= 0 && t1 <= 1) roots[n++] = t1;
        } else {
            var T = (2 * A * b - 3 * a * B) / (2 * $b1facc0bcf653177$var$mathSqrt(A * A * A));
            var theta = Math.acos(T) / 3;
            var ASqrt = $b1facc0bcf653177$var$mathSqrt(A);
            var tmp = Math.cos(theta);
            var t1 = (-b - 2 * ASqrt * tmp) / (3 * a);
            var t2 = (-b + ASqrt * (tmp + $b1facc0bcf653177$var$THREE_SQRT * Math.sin(theta))) / (3 * a);
            var t3 = (-b + ASqrt * (tmp - $b1facc0bcf653177$var$THREE_SQRT * Math.sin(theta))) / (3 * a);
            if (t1 >= 0 && t1 <= 1) roots[n++] = t1;
            if (t2 >= 0 && t2 <= 1) roots[n++] = t2;
            if (t3 >= 0 && t3 <= 1) roots[n++] = t3;
        }
    }
    return n;
}
function $b1facc0bcf653177$export$df1a172f100d0457(p0, p1, p2, p3, extrema) {
    var b = 6 * p2 - 12 * p1 + 6 * p0;
    var a = 9 * p1 + 3 * p3 - 3 * p0 - 9 * p2;
    var c = 3 * p1 - 3 * p0;
    var n = 0;
    if ($b1facc0bcf653177$var$isAroundZero(a)) {
        if ($b1facc0bcf653177$var$isNotAroundZero(b)) {
            var t1 = -c / b;
            if (t1 >= 0 && t1 <= 1) extrema[n++] = t1;
        }
    } else {
        var disc = b * b - 4 * a * c;
        if ($b1facc0bcf653177$var$isAroundZero(disc)) extrema[0] = -b / (2 * a);
        else if (disc > 0) {
            var discSqrt = $b1facc0bcf653177$var$mathSqrt(disc);
            var t1 = (-b + discSqrt) / (2 * a);
            var t2 = (-b - discSqrt) / (2 * a);
            if (t1 >= 0 && t1 <= 1) extrema[n++] = t1;
            if (t2 >= 0 && t2 <= 1) extrema[n++] = t2;
        }
    }
    return n;
}
function $b1facc0bcf653177$export$a2ee23a0567039da(p0, p1, p2, p3, t, out) {
    var p01 = (p1 - p0) * t + p0;
    var p12 = (p2 - p1) * t + p1;
    var p23 = (p3 - p2) * t + p2;
    var p012 = (p12 - p01) * t + p01;
    var p123 = (p23 - p12) * t + p12;
    var p0123 = (p123 - p012) * t + p012;
    out[0] = p0;
    out[1] = p01;
    out[2] = p012;
    out[3] = p0123;
    out[4] = p0123;
    out[5] = p123;
    out[6] = p23;
    out[7] = p3;
}
function $b1facc0bcf653177$export$dbaa3801d1284367(x0, y0, x1, y1, x2, y2, x3, y3, x, y, out) {
    var t;
    var interval = 0.005;
    var d = Infinity;
    var prev;
    var next;
    var d1;
    var d2;
    $b1facc0bcf653177$var$_v0[0] = x;
    $b1facc0bcf653177$var$_v0[1] = y;
    for(var _t = 0; _t < 1; _t += 0.05){
        $b1facc0bcf653177$var$_v1[0] = $b1facc0bcf653177$export$547c21de482bbcb2(x0, x1, x2, x3, _t);
        $b1facc0bcf653177$var$_v1[1] = $b1facc0bcf653177$export$547c21de482bbcb2(y0, y1, y2, y3, _t);
        d1 = (0, $187eb1bf1a49fd34$export$c68db45a034c13b0)($b1facc0bcf653177$var$_v0, $b1facc0bcf653177$var$_v1);
        if (d1 < d) {
            t = _t;
            d = d1;
        }
    }
    d = Infinity;
    for(var i = 0; i < 32; i++){
        if (interval < $b1facc0bcf653177$var$EPSILON_NUMERIC) break;
        prev = t - interval;
        next = t + interval;
        $b1facc0bcf653177$var$_v1[0] = $b1facc0bcf653177$export$547c21de482bbcb2(x0, x1, x2, x3, prev);
        $b1facc0bcf653177$var$_v1[1] = $b1facc0bcf653177$export$547c21de482bbcb2(y0, y1, y2, y3, prev);
        d1 = (0, $187eb1bf1a49fd34$export$c68db45a034c13b0)($b1facc0bcf653177$var$_v1, $b1facc0bcf653177$var$_v0);
        if (prev >= 0 && d1 < d) {
            t = prev;
            d = d1;
        } else {
            $b1facc0bcf653177$var$_v2[0] = $b1facc0bcf653177$export$547c21de482bbcb2(x0, x1, x2, x3, next);
            $b1facc0bcf653177$var$_v2[1] = $b1facc0bcf653177$export$547c21de482bbcb2(y0, y1, y2, y3, next);
            d2 = (0, $187eb1bf1a49fd34$export$c68db45a034c13b0)($b1facc0bcf653177$var$_v2, $b1facc0bcf653177$var$_v0);
            if (next <= 1 && d2 < d) {
                t = next;
                d = d2;
            } else interval *= 0.5;
        }
    }
    if (out) {
        out[0] = $b1facc0bcf653177$export$547c21de482bbcb2(x0, x1, x2, x3, t);
        out[1] = $b1facc0bcf653177$export$547c21de482bbcb2(y0, y1, y2, y3, t);
    }
    return $b1facc0bcf653177$var$mathSqrt(d);
}
function $b1facc0bcf653177$export$af1875d576f60d7c(x0, y0, x1, y1, x2, y2, x3, y3, iteration) {
    var px = x0;
    var py = y0;
    var d = 0;
    var step = 1 / iteration;
    for(var i = 1; i <= iteration; i++){
        var t = i * step;
        var x = $b1facc0bcf653177$export$547c21de482bbcb2(x0, x1, x2, x3, t);
        var y = $b1facc0bcf653177$export$547c21de482bbcb2(y0, y1, y2, y3, t);
        var dx = x - px;
        var dy = y - py;
        d += Math.sqrt(dx * dx + dy * dy);
        px = x;
        py = y;
    }
    return d;
}
function $b1facc0bcf653177$export$af17094a950f5073(p0, p1, p2, t) {
    var onet = 1 - t;
    return onet * (onet * p0 + 2 * t * p1) + t * t * p2;
}
function $b1facc0bcf653177$export$7e161e77e6fff8cb(p0, p1, p2, t) {
    return 2 * ((1 - t) * (p1 - p0) + t * (p2 - p1));
}
function $b1facc0bcf653177$export$fd895ac7ee764967(p0, p1, p2, val, roots) {
    var a = p0 - 2 * p1 + p2;
    var b = 2 * (p1 - p0);
    var c = p0 - val;
    var n = 0;
    if ($b1facc0bcf653177$var$isAroundZero(a)) {
        if ($b1facc0bcf653177$var$isNotAroundZero(b)) {
            var t1 = -c / b;
            if (t1 >= 0 && t1 <= 1) roots[n++] = t1;
        }
    } else {
        var disc = b * b - 4 * a * c;
        if ($b1facc0bcf653177$var$isAroundZero(disc)) {
            var t1 = -b / (2 * a);
            if (t1 >= 0 && t1 <= 1) roots[n++] = t1;
        } else if (disc > 0) {
            var discSqrt = $b1facc0bcf653177$var$mathSqrt(disc);
            var t1 = (-b + discSqrt) / (2 * a);
            var t2 = (-b - discSqrt) / (2 * a);
            if (t1 >= 0 && t1 <= 1) roots[n++] = t1;
            if (t2 >= 0 && t2 <= 1) roots[n++] = t2;
        }
    }
    return n;
}
function $b1facc0bcf653177$export$752e1f8c6e7f7e11(p0, p1, p2) {
    var divider = p0 + p2 - 2 * p1;
    if (divider === 0) return 0.5;
    else return (p0 - p1) / divider;
}
function $b1facc0bcf653177$export$117c659e21a7a060(p0, p1, p2, t, out) {
    var p01 = (p1 - p0) * t + p0;
    var p12 = (p2 - p1) * t + p1;
    var p012 = (p12 - p01) * t + p01;
    out[0] = p0;
    out[1] = p01;
    out[2] = p012;
    out[3] = p012;
    out[4] = p12;
    out[5] = p2;
}
function $b1facc0bcf653177$export$81915a594fe10dee(x0, y0, x1, y1, x2, y2, x, y, out) {
    var t;
    var interval = 0.005;
    var d = Infinity;
    $b1facc0bcf653177$var$_v0[0] = x;
    $b1facc0bcf653177$var$_v0[1] = y;
    for(var _t = 0; _t < 1; _t += 0.05){
        $b1facc0bcf653177$var$_v1[0] = $b1facc0bcf653177$export$af17094a950f5073(x0, x1, x2, _t);
        $b1facc0bcf653177$var$_v1[1] = $b1facc0bcf653177$export$af17094a950f5073(y0, y1, y2, _t);
        var d1 = (0, $187eb1bf1a49fd34$export$c68db45a034c13b0)($b1facc0bcf653177$var$_v0, $b1facc0bcf653177$var$_v1);
        if (d1 < d) {
            t = _t;
            d = d1;
        }
    }
    d = Infinity;
    for(var i = 0; i < 32; i++){
        if (interval < $b1facc0bcf653177$var$EPSILON_NUMERIC) break;
        var prev = t - interval;
        var next = t + interval;
        $b1facc0bcf653177$var$_v1[0] = $b1facc0bcf653177$export$af17094a950f5073(x0, x1, x2, prev);
        $b1facc0bcf653177$var$_v1[1] = $b1facc0bcf653177$export$af17094a950f5073(y0, y1, y2, prev);
        var d1 = (0, $187eb1bf1a49fd34$export$c68db45a034c13b0)($b1facc0bcf653177$var$_v1, $b1facc0bcf653177$var$_v0);
        if (prev >= 0 && d1 < d) {
            t = prev;
            d = d1;
        } else {
            $b1facc0bcf653177$var$_v2[0] = $b1facc0bcf653177$export$af17094a950f5073(x0, x1, x2, next);
            $b1facc0bcf653177$var$_v2[1] = $b1facc0bcf653177$export$af17094a950f5073(y0, y1, y2, next);
            var d2 = (0, $187eb1bf1a49fd34$export$c68db45a034c13b0)($b1facc0bcf653177$var$_v2, $b1facc0bcf653177$var$_v0);
            if (next <= 1 && d2 < d) {
                t = next;
                d = d2;
            } else interval *= 0.5;
        }
    }
    if (out) {
        out[0] = $b1facc0bcf653177$export$af17094a950f5073(x0, x1, x2, t);
        out[1] = $b1facc0bcf653177$export$af17094a950f5073(y0, y1, y2, t);
    }
    return $b1facc0bcf653177$var$mathSqrt(d);
}
function $b1facc0bcf653177$export$8a68adee46f3cf55(x0, y0, x1, y1, x2, y2, iteration) {
    var px = x0;
    var py = y0;
    var d = 0;
    var step = 1 / iteration;
    for(var i = 1; i <= iteration; i++){
        var t = i * step;
        var x = $b1facc0bcf653177$export$af17094a950f5073(x0, x1, x2, t);
        var y = $b1facc0bcf653177$export$af17094a950f5073(y0, y1, y2, t);
        var dx = x - px;
        var dy = y - py;
        d += Math.sqrt(dx * dx + dy * dy);
        px = x;
        py = y;
    }
    return d;
}



var $20f77a86bf732593$var$regexp = /cubic-bezier\(([0-9,\.e ]+)\)/;
function $20f77a86bf732593$export$ec0863d806fd857e(cubicEasingStr) {
    var cubic = cubicEasingStr && $20f77a86bf732593$var$regexp.exec(cubicEasingStr);
    if (cubic) {
        var points = cubic[1].split(",");
        var a_1 = +(0, $e44eb14c4271d0f9$export$87c2784dc9fc4ab)(points[0]);
        var b_1 = +(0, $e44eb14c4271d0f9$export$87c2784dc9fc4ab)(points[1]);
        var c_1 = +(0, $e44eb14c4271d0f9$export$87c2784dc9fc4ab)(points[2]);
        var d_1 = +(0, $e44eb14c4271d0f9$export$87c2784dc9fc4ab)(points[3]);
        if (isNaN(a_1 + b_1 + c_1 + d_1)) return;
        var roots_1 = [];
        return function(p) {
            return p <= 0 ? 0 : p >= 1 ? 1 : (0, $b1facc0bcf653177$export$ca5d13faa10b167e)(0, a_1, c_1, 1, p, roots_1) && (0, $b1facc0bcf653177$export$547c21de482bbcb2)(0, b_1, d_1, 1, roots_1[0]);
        };
    }
}


var $f23cfe6325cf4308$var$Clip = function() {
    function Clip(opts) {
        this._inited = false;
        this._startTime = 0;
        this._pausedTime = 0;
        this._paused = false;
        this._life = opts.life || 1000;
        this._delay = opts.delay || 0;
        this.loop = opts.loop || false;
        this.onframe = opts.onframe || (0, $e44eb14c4271d0f9$export$8793edee2d425525);
        this.ondestroy = opts.ondestroy || (0, $e44eb14c4271d0f9$export$8793edee2d425525);
        this.onrestart = opts.onrestart || (0, $e44eb14c4271d0f9$export$8793edee2d425525);
        opts.easing && this.setEasing(opts.easing);
    }
    Clip.prototype.step = function(globalTime, deltaTime) {
        if (!this._inited) {
            this._startTime = globalTime + this._delay;
            this._inited = true;
        }
        if (this._paused) {
            this._pausedTime += deltaTime;
            return;
        }
        var life = this._life;
        var elapsedTime = globalTime - this._startTime - this._pausedTime;
        var percent = elapsedTime / life;
        if (percent < 0) percent = 0;
        percent = Math.min(percent, 1);
        var easingFunc = this.easingFunc;
        var schedule = easingFunc ? easingFunc(percent) : percent;
        this.onframe(schedule);
        if (percent === 1) {
            if (this.loop) {
                var remainder = elapsedTime % life;
                this._startTime = globalTime - remainder;
                this._pausedTime = 0;
                this.onrestart();
            } else return true;
        }
        return false;
    };
    Clip.prototype.pause = function() {
        this._paused = true;
    };
    Clip.prototype.resume = function() {
        this._paused = false;
    };
    Clip.prototype.setEasing = function(easing) {
        this.easing = easing;
        this.easingFunc = (0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(easing) ? easing : (0, $92c590cae218c52b$export$2e2bcd8739ae039)[easing] || (0, $20f77a86bf732593$export$ec0863d806fd857e)(easing);
    };
    return Clip;
}();
var $f23cfe6325cf4308$export$2e2bcd8739ae039 = $f23cfe6325cf4308$var$Clip;


var $46a227aab1eccb53$export$3bb977b3ba9d3b59 = function() {
    function Entry(val) {
        this.value = val;
    }
    return Entry;
}();
var $46a227aab1eccb53$export$f0ef28713f767754 = function() {
    function LinkedList() {
        this._len = 0;
    }
    LinkedList.prototype.insert = function(val) {
        var entry = new $46a227aab1eccb53$export$3bb977b3ba9d3b59(val);
        this.insertEntry(entry);
        return entry;
    };
    LinkedList.prototype.insertEntry = function(entry) {
        if (!this.head) this.head = this.tail = entry;
        else {
            this.tail.next = entry;
            entry.prev = this.tail;
            entry.next = null;
            this.tail = entry;
        }
        this._len++;
    };
    LinkedList.prototype.remove = function(entry) {
        var prev = entry.prev;
        var next = entry.next;
        if (prev) prev.next = next;
        else this.head = next;
        if (next) next.prev = prev;
        else this.tail = prev;
        entry.next = entry.prev = null;
        this._len--;
    };
    LinkedList.prototype.len = function() {
        return this._len;
    };
    LinkedList.prototype.clear = function() {
        this.head = this.tail = null;
        this._len = 0;
    };
    return LinkedList;
}();
var $46a227aab1eccb53$var$LRU = function() {
    function LRU(maxSize) {
        this._list = new $46a227aab1eccb53$export$f0ef28713f767754();
        this._maxSize = 10;
        this._map = {};
        this._maxSize = maxSize;
    }
    LRU.prototype.put = function(key, value) {
        var list = this._list;
        var map = this._map;
        var removed = null;
        if (map[key] == null) {
            var len = list.len();
            var entry = this._lastRemovedEntry;
            if (len >= this._maxSize && len > 0) {
                var leastUsedEntry = list.head;
                list.remove(leastUsedEntry);
                delete map[leastUsedEntry.key];
                removed = leastUsedEntry.value;
                this._lastRemovedEntry = leastUsedEntry;
            }
            if (entry) entry.value = value;
            else entry = new $46a227aab1eccb53$export$3bb977b3ba9d3b59(value);
            entry.key = key;
            list.insertEntry(entry);
            map[key] = entry;
        }
        return removed;
    };
    LRU.prototype.get = function(key) {
        var entry = this._map[key];
        var list = this._list;
        if (entry != null) {
            if (entry !== list.tail) {
                list.remove(entry);
                list.insertEntry(entry);
            }
            return entry.value;
        }
    };
    LRU.prototype.clear = function() {
        this._list.clear();
        this._map = {};
    };
    LRU.prototype.len = function() {
        return this._list.len();
    };
    return LRU;
}();
var $46a227aab1eccb53$export$2e2bcd8739ae039 = $46a227aab1eccb53$var$LRU;



var $5373993605fe25d6$var$kCSSColorTable = {
    "transparent": [
        0,
        0,
        0,
        0
    ],
    "aliceblue": [
        240,
        248,
        255,
        1
    ],
    "antiquewhite": [
        250,
        235,
        215,
        1
    ],
    "aqua": [
        0,
        255,
        255,
        1
    ],
    "aquamarine": [
        127,
        255,
        212,
        1
    ],
    "azure": [
        240,
        255,
        255,
        1
    ],
    "beige": [
        245,
        245,
        220,
        1
    ],
    "bisque": [
        255,
        228,
        196,
        1
    ],
    "black": [
        0,
        0,
        0,
        1
    ],
    "blanchedalmond": [
        255,
        235,
        205,
        1
    ],
    "blue": [
        0,
        0,
        255,
        1
    ],
    "blueviolet": [
        138,
        43,
        226,
        1
    ],
    "brown": [
        165,
        42,
        42,
        1
    ],
    "burlywood": [
        222,
        184,
        135,
        1
    ],
    "cadetblue": [
        95,
        158,
        160,
        1
    ],
    "chartreuse": [
        127,
        255,
        0,
        1
    ],
    "chocolate": [
        210,
        105,
        30,
        1
    ],
    "coral": [
        255,
        127,
        80,
        1
    ],
    "cornflowerblue": [
        100,
        149,
        237,
        1
    ],
    "cornsilk": [
        255,
        248,
        220,
        1
    ],
    "crimson": [
        220,
        20,
        60,
        1
    ],
    "cyan": [
        0,
        255,
        255,
        1
    ],
    "darkblue": [
        0,
        0,
        139,
        1
    ],
    "darkcyan": [
        0,
        139,
        139,
        1
    ],
    "darkgoldenrod": [
        184,
        134,
        11,
        1
    ],
    "darkgray": [
        169,
        169,
        169,
        1
    ],
    "darkgreen": [
        0,
        100,
        0,
        1
    ],
    "darkgrey": [
        169,
        169,
        169,
        1
    ],
    "darkkhaki": [
        189,
        183,
        107,
        1
    ],
    "darkmagenta": [
        139,
        0,
        139,
        1
    ],
    "darkolivegreen": [
        85,
        107,
        47,
        1
    ],
    "darkorange": [
        255,
        140,
        0,
        1
    ],
    "darkorchid": [
        153,
        50,
        204,
        1
    ],
    "darkred": [
        139,
        0,
        0,
        1
    ],
    "darksalmon": [
        233,
        150,
        122,
        1
    ],
    "darkseagreen": [
        143,
        188,
        143,
        1
    ],
    "darkslateblue": [
        72,
        61,
        139,
        1
    ],
    "darkslategray": [
        47,
        79,
        79,
        1
    ],
    "darkslategrey": [
        47,
        79,
        79,
        1
    ],
    "darkturquoise": [
        0,
        206,
        209,
        1
    ],
    "darkviolet": [
        148,
        0,
        211,
        1
    ],
    "deeppink": [
        255,
        20,
        147,
        1
    ],
    "deepskyblue": [
        0,
        191,
        255,
        1
    ],
    "dimgray": [
        105,
        105,
        105,
        1
    ],
    "dimgrey": [
        105,
        105,
        105,
        1
    ],
    "dodgerblue": [
        30,
        144,
        255,
        1
    ],
    "firebrick": [
        178,
        34,
        34,
        1
    ],
    "floralwhite": [
        255,
        250,
        240,
        1
    ],
    "forestgreen": [
        34,
        139,
        34,
        1
    ],
    "fuchsia": [
        255,
        0,
        255,
        1
    ],
    "gainsboro": [
        220,
        220,
        220,
        1
    ],
    "ghostwhite": [
        248,
        248,
        255,
        1
    ],
    "gold": [
        255,
        215,
        0,
        1
    ],
    "goldenrod": [
        218,
        165,
        32,
        1
    ],
    "gray": [
        128,
        128,
        128,
        1
    ],
    "green": [
        0,
        128,
        0,
        1
    ],
    "greenyellow": [
        173,
        255,
        47,
        1
    ],
    "grey": [
        128,
        128,
        128,
        1
    ],
    "honeydew": [
        240,
        255,
        240,
        1
    ],
    "hotpink": [
        255,
        105,
        180,
        1
    ],
    "indianred": [
        205,
        92,
        92,
        1
    ],
    "indigo": [
        75,
        0,
        130,
        1
    ],
    "ivory": [
        255,
        255,
        240,
        1
    ],
    "khaki": [
        240,
        230,
        140,
        1
    ],
    "lavender": [
        230,
        230,
        250,
        1
    ],
    "lavenderblush": [
        255,
        240,
        245,
        1
    ],
    "lawngreen": [
        124,
        252,
        0,
        1
    ],
    "lemonchiffon": [
        255,
        250,
        205,
        1
    ],
    "lightblue": [
        173,
        216,
        230,
        1
    ],
    "lightcoral": [
        240,
        128,
        128,
        1
    ],
    "lightcyan": [
        224,
        255,
        255,
        1
    ],
    "lightgoldenrodyellow": [
        250,
        250,
        210,
        1
    ],
    "lightgray": [
        211,
        211,
        211,
        1
    ],
    "lightgreen": [
        144,
        238,
        144,
        1
    ],
    "lightgrey": [
        211,
        211,
        211,
        1
    ],
    "lightpink": [
        255,
        182,
        193,
        1
    ],
    "lightsalmon": [
        255,
        160,
        122,
        1
    ],
    "lightseagreen": [
        32,
        178,
        170,
        1
    ],
    "lightskyblue": [
        135,
        206,
        250,
        1
    ],
    "lightslategray": [
        119,
        136,
        153,
        1
    ],
    "lightslategrey": [
        119,
        136,
        153,
        1
    ],
    "lightsteelblue": [
        176,
        196,
        222,
        1
    ],
    "lightyellow": [
        255,
        255,
        224,
        1
    ],
    "lime": [
        0,
        255,
        0,
        1
    ],
    "limegreen": [
        50,
        205,
        50,
        1
    ],
    "linen": [
        250,
        240,
        230,
        1
    ],
    "magenta": [
        255,
        0,
        255,
        1
    ],
    "maroon": [
        128,
        0,
        0,
        1
    ],
    "mediumaquamarine": [
        102,
        205,
        170,
        1
    ],
    "mediumblue": [
        0,
        0,
        205,
        1
    ],
    "mediumorchid": [
        186,
        85,
        211,
        1
    ],
    "mediumpurple": [
        147,
        112,
        219,
        1
    ],
    "mediumseagreen": [
        60,
        179,
        113,
        1
    ],
    "mediumslateblue": [
        123,
        104,
        238,
        1
    ],
    "mediumspringgreen": [
        0,
        250,
        154,
        1
    ],
    "mediumturquoise": [
        72,
        209,
        204,
        1
    ],
    "mediumvioletred": [
        199,
        21,
        133,
        1
    ],
    "midnightblue": [
        25,
        25,
        112,
        1
    ],
    "mintcream": [
        245,
        255,
        250,
        1
    ],
    "mistyrose": [
        255,
        228,
        225,
        1
    ],
    "moccasin": [
        255,
        228,
        181,
        1
    ],
    "navajowhite": [
        255,
        222,
        173,
        1
    ],
    "navy": [
        0,
        0,
        128,
        1
    ],
    "oldlace": [
        253,
        245,
        230,
        1
    ],
    "olive": [
        128,
        128,
        0,
        1
    ],
    "olivedrab": [
        107,
        142,
        35,
        1
    ],
    "orange": [
        255,
        165,
        0,
        1
    ],
    "orangered": [
        255,
        69,
        0,
        1
    ],
    "orchid": [
        218,
        112,
        214,
        1
    ],
    "palegoldenrod": [
        238,
        232,
        170,
        1
    ],
    "palegreen": [
        152,
        251,
        152,
        1
    ],
    "paleturquoise": [
        175,
        238,
        238,
        1
    ],
    "palevioletred": [
        219,
        112,
        147,
        1
    ],
    "papayawhip": [
        255,
        239,
        213,
        1
    ],
    "peachpuff": [
        255,
        218,
        185,
        1
    ],
    "peru": [
        205,
        133,
        63,
        1
    ],
    "pink": [
        255,
        192,
        203,
        1
    ],
    "plum": [
        221,
        160,
        221,
        1
    ],
    "powderblue": [
        176,
        224,
        230,
        1
    ],
    "purple": [
        128,
        0,
        128,
        1
    ],
    "red": [
        255,
        0,
        0,
        1
    ],
    "rosybrown": [
        188,
        143,
        143,
        1
    ],
    "royalblue": [
        65,
        105,
        225,
        1
    ],
    "saddlebrown": [
        139,
        69,
        19,
        1
    ],
    "salmon": [
        250,
        128,
        114,
        1
    ],
    "sandybrown": [
        244,
        164,
        96,
        1
    ],
    "seagreen": [
        46,
        139,
        87,
        1
    ],
    "seashell": [
        255,
        245,
        238,
        1
    ],
    "sienna": [
        160,
        82,
        45,
        1
    ],
    "silver": [
        192,
        192,
        192,
        1
    ],
    "skyblue": [
        135,
        206,
        235,
        1
    ],
    "slateblue": [
        106,
        90,
        205,
        1
    ],
    "slategray": [
        112,
        128,
        144,
        1
    ],
    "slategrey": [
        112,
        128,
        144,
        1
    ],
    "snow": [
        255,
        250,
        250,
        1
    ],
    "springgreen": [
        0,
        255,
        127,
        1
    ],
    "steelblue": [
        70,
        130,
        180,
        1
    ],
    "tan": [
        210,
        180,
        140,
        1
    ],
    "teal": [
        0,
        128,
        128,
        1
    ],
    "thistle": [
        216,
        191,
        216,
        1
    ],
    "tomato": [
        255,
        99,
        71,
        1
    ],
    "turquoise": [
        64,
        224,
        208,
        1
    ],
    "violet": [
        238,
        130,
        238,
        1
    ],
    "wheat": [
        245,
        222,
        179,
        1
    ],
    "white": [
        255,
        255,
        255,
        1
    ],
    "whitesmoke": [
        245,
        245,
        245,
        1
    ],
    "yellow": [
        255,
        255,
        0,
        1
    ],
    "yellowgreen": [
        154,
        205,
        50,
        1
    ]
};
function $5373993605fe25d6$var$clampCssByte(i) {
    i = Math.round(i);
    return i < 0 ? 0 : i > 255 ? 255 : i;
}
function $5373993605fe25d6$var$clampCssAngle(i) {
    i = Math.round(i);
    return i < 0 ? 0 : i > 360 ? 360 : i;
}
function $5373993605fe25d6$var$clampCssFloat(f) {
    return f < 0 ? 0 : f > 1 ? 1 : f;
}
function $5373993605fe25d6$var$parseCssInt(val) {
    var str = val;
    if (str.length && str.charAt(str.length - 1) === "%") return $5373993605fe25d6$var$clampCssByte(parseFloat(str) / 100 * 255);
    return $5373993605fe25d6$var$clampCssByte(parseInt(str, 10));
}
function $5373993605fe25d6$var$parseCssFloat(val) {
    var str = val;
    if (str.length && str.charAt(str.length - 1) === "%") return $5373993605fe25d6$var$clampCssFloat(parseFloat(str) / 100);
    return $5373993605fe25d6$var$clampCssFloat(parseFloat(str));
}
function $5373993605fe25d6$var$cssHueToRgb(m1, m2, h) {
    if (h < 0) h += 1;
    else if (h > 1) h -= 1;
    if (h * 6 < 1) return m1 + (m2 - m1) * h * 6;
    if (h * 2 < 1) return m2;
    if (h * 3 < 2) return m1 + (m2 - m1) * (2 / 3 - h) * 6;
    return m1;
}
function $5373993605fe25d6$var$lerpNumber(a, b, p) {
    return a + (b - a) * p;
}
function $5373993605fe25d6$var$setRgba(out, r, g, b, a) {
    out[0] = r;
    out[1] = g;
    out[2] = b;
    out[3] = a;
    return out;
}
function $5373993605fe25d6$var$copyRgba(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
}
var $5373993605fe25d6$var$colorCache = new (0, $46a227aab1eccb53$export$2e2bcd8739ae039)(20);
var $5373993605fe25d6$var$lastRemovedArr = null;
function $5373993605fe25d6$var$putToCache(colorStr, rgbaArr) {
    if ($5373993605fe25d6$var$lastRemovedArr) $5373993605fe25d6$var$copyRgba($5373993605fe25d6$var$lastRemovedArr, rgbaArr);
    $5373993605fe25d6$var$lastRemovedArr = $5373993605fe25d6$var$colorCache.put(colorStr, $5373993605fe25d6$var$lastRemovedArr || rgbaArr.slice());
}
function $5373993605fe25d6$export$98e6a39c04603d36(colorStr, rgbaArr) {
    if (!colorStr) return;
    rgbaArr = rgbaArr || [];
    var cached = $5373993605fe25d6$var$colorCache.get(colorStr);
    if (cached) return $5373993605fe25d6$var$copyRgba(rgbaArr, cached);
    colorStr = colorStr + "";
    var str = colorStr.replace(/ /g, "").toLowerCase();
    if (str in $5373993605fe25d6$var$kCSSColorTable) {
        $5373993605fe25d6$var$copyRgba(rgbaArr, $5373993605fe25d6$var$kCSSColorTable[str]);
        $5373993605fe25d6$var$putToCache(colorStr, rgbaArr);
        return rgbaArr;
    }
    var strLen = str.length;
    if (str.charAt(0) === "#") {
        if (strLen === 4 || strLen === 5) {
            var iv = parseInt(str.slice(1, 4), 16);
            if (!(iv >= 0 && iv <= 0xfff)) {
                $5373993605fe25d6$var$setRgba(rgbaArr, 0, 0, 0, 1);
                return;
            }
            $5373993605fe25d6$var$setRgba(rgbaArr, (iv & 0xf00) >> 4 | (iv & 0xf00) >> 8, iv & 0xf0 | (iv & 0xf0) >> 4, iv & 0xf | (iv & 0xf) << 4, strLen === 5 ? parseInt(str.slice(4), 16) / 0xf : 1);
            $5373993605fe25d6$var$putToCache(colorStr, rgbaArr);
            return rgbaArr;
        } else if (strLen === 7 || strLen === 9) {
            var iv = parseInt(str.slice(1, 7), 16);
            if (!(iv >= 0 && iv <= 0xffffff)) {
                $5373993605fe25d6$var$setRgba(rgbaArr, 0, 0, 0, 1);
                return;
            }
            $5373993605fe25d6$var$setRgba(rgbaArr, (iv & 0xff0000) >> 16, (iv & 0xff00) >> 8, iv & 0xff, strLen === 9 ? parseInt(str.slice(7), 16) / 0xff : 1);
            $5373993605fe25d6$var$putToCache(colorStr, rgbaArr);
            return rgbaArr;
        }
        return;
    }
    var op = str.indexOf("(");
    var ep = str.indexOf(")");
    if (op !== -1 && ep + 1 === strLen) {
        var fname = str.substr(0, op);
        var params = str.substr(op + 1, ep - (op + 1)).split(",");
        var alpha = 1;
        switch(fname){
            case "rgba":
                if (params.length !== 4) return params.length === 3 ? $5373993605fe25d6$var$setRgba(rgbaArr, +params[0], +params[1], +params[2], 1) : $5373993605fe25d6$var$setRgba(rgbaArr, 0, 0, 0, 1);
                alpha = $5373993605fe25d6$var$parseCssFloat(params.pop());
            case "rgb":
                if (params.length >= 3) {
                    $5373993605fe25d6$var$setRgba(rgbaArr, $5373993605fe25d6$var$parseCssInt(params[0]), $5373993605fe25d6$var$parseCssInt(params[1]), $5373993605fe25d6$var$parseCssInt(params[2]), params.length === 3 ? alpha : $5373993605fe25d6$var$parseCssFloat(params[3]));
                    $5373993605fe25d6$var$putToCache(colorStr, rgbaArr);
                    return rgbaArr;
                } else {
                    $5373993605fe25d6$var$setRgba(rgbaArr, 0, 0, 0, 1);
                    return;
                }
            case "hsla":
                if (params.length !== 4) {
                    $5373993605fe25d6$var$setRgba(rgbaArr, 0, 0, 0, 1);
                    return;
                }
                params[3] = $5373993605fe25d6$var$parseCssFloat(params[3]);
                $5373993605fe25d6$var$hsla2rgba(params, rgbaArr);
                $5373993605fe25d6$var$putToCache(colorStr, rgbaArr);
                return rgbaArr;
            case "hsl":
                if (params.length !== 3) {
                    $5373993605fe25d6$var$setRgba(rgbaArr, 0, 0, 0, 1);
                    return;
                }
                $5373993605fe25d6$var$hsla2rgba(params, rgbaArr);
                $5373993605fe25d6$var$putToCache(colorStr, rgbaArr);
                return rgbaArr;
            default:
                return;
        }
    }
    $5373993605fe25d6$var$setRgba(rgbaArr, 0, 0, 0, 1);
    return;
}
function $5373993605fe25d6$var$hsla2rgba(hsla, rgba) {
    var h = (parseFloat(hsla[0]) % 360 + 360) % 360 / 360;
    var s = $5373993605fe25d6$var$parseCssFloat(hsla[1]);
    var l = $5373993605fe25d6$var$parseCssFloat(hsla[2]);
    var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
    var m1 = l * 2 - m2;
    rgba = rgba || [];
    $5373993605fe25d6$var$setRgba(rgba, $5373993605fe25d6$var$clampCssByte($5373993605fe25d6$var$cssHueToRgb(m1, m2, h + 1 / 3) * 255), $5373993605fe25d6$var$clampCssByte($5373993605fe25d6$var$cssHueToRgb(m1, m2, h) * 255), $5373993605fe25d6$var$clampCssByte($5373993605fe25d6$var$cssHueToRgb(m1, m2, h - 1 / 3) * 255), 1);
    if (hsla.length === 4) rgba[3] = hsla[3];
    return rgba;
}
function $5373993605fe25d6$var$rgba2hsla(rgba) {
    if (!rgba) return;
    var R = rgba[0] / 255;
    var G = rgba[1] / 255;
    var B = rgba[2] / 255;
    var vMin = Math.min(R, G, B);
    var vMax = Math.max(R, G, B);
    var delta = vMax - vMin;
    var L = (vMax + vMin) / 2;
    var H;
    var S;
    if (delta === 0) {
        H = 0;
        S = 0;
    } else {
        if (L < 0.5) S = delta / (vMax + vMin);
        else S = delta / (2 - vMax - vMin);
        var deltaR = ((vMax - R) / 6 + delta / 2) / delta;
        var deltaG = ((vMax - G) / 6 + delta / 2) / delta;
        var deltaB = ((vMax - B) / 6 + delta / 2) / delta;
        if (R === vMax) H = deltaB - deltaG;
        else if (G === vMax) H = 1 / 3 + deltaR - deltaB;
        else if (B === vMax) H = 2 / 3 + deltaG - deltaR;
        if (H < 0) H += 1;
        if (H > 1) H -= 1;
    }
    var hsla = [
        H * 360,
        S,
        L
    ];
    if (rgba[3] != null) hsla.push(rgba[3]);
    return hsla;
}
function $5373993605fe25d6$export$590e8b2c435046d9(color, level) {
    var colorArr = $5373993605fe25d6$export$98e6a39c04603d36(color);
    if (colorArr) {
        for(var i = 0; i < 3; i++){
            if (level < 0) colorArr[i] = colorArr[i] * (1 - level) | 0;
            else colorArr[i] = (255 - colorArr[i]) * level + colorArr[i] | 0;
            if (colorArr[i] > 255) colorArr[i] = 255;
            else if (colorArr[i] < 0) colorArr[i] = 0;
        }
        return $5373993605fe25d6$export$fac44ee5b035f737(colorArr, colorArr.length === 4 ? "rgba" : "rgb");
    }
}
function $5373993605fe25d6$export$7ea66e3774a60b67(color) {
    var colorArr = $5373993605fe25d6$export$98e6a39c04603d36(color);
    if (colorArr) return (16777216 + (colorArr[0] << 16) + (colorArr[1] << 8) + +colorArr[2]).toString(16).slice(1);
}
function $5373993605fe25d6$export$66cb3c0e9efc61c8(normalizedValue, colors, out) {
    if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) return;
    out = out || [];
    var value = normalizedValue * (colors.length - 1);
    var leftIndex = Math.floor(value);
    var rightIndex = Math.ceil(value);
    var leftColor = colors[leftIndex];
    var rightColor = colors[rightIndex];
    var dv = value - leftIndex;
    out[0] = $5373993605fe25d6$var$clampCssByte($5373993605fe25d6$var$lerpNumber(leftColor[0], rightColor[0], dv));
    out[1] = $5373993605fe25d6$var$clampCssByte($5373993605fe25d6$var$lerpNumber(leftColor[1], rightColor[1], dv));
    out[2] = $5373993605fe25d6$var$clampCssByte($5373993605fe25d6$var$lerpNumber(leftColor[2], rightColor[2], dv));
    out[3] = $5373993605fe25d6$var$clampCssFloat($5373993605fe25d6$var$lerpNumber(leftColor[3], rightColor[3], dv));
    return out;
}
var $5373993605fe25d6$export$daa5a65daad5df58 = $5373993605fe25d6$export$66cb3c0e9efc61c8;
function $5373993605fe25d6$export$3a89f8d6f6bf6c9f(normalizedValue, colors, fullOutput) {
    if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) return;
    var value = normalizedValue * (colors.length - 1);
    var leftIndex = Math.floor(value);
    var rightIndex = Math.ceil(value);
    var leftColor = $5373993605fe25d6$export$98e6a39c04603d36(colors[leftIndex]);
    var rightColor = $5373993605fe25d6$export$98e6a39c04603d36(colors[rightIndex]);
    var dv = value - leftIndex;
    var color = $5373993605fe25d6$export$fac44ee5b035f737([
        $5373993605fe25d6$var$clampCssByte($5373993605fe25d6$var$lerpNumber(leftColor[0], rightColor[0], dv)),
        $5373993605fe25d6$var$clampCssByte($5373993605fe25d6$var$lerpNumber(leftColor[1], rightColor[1], dv)),
        $5373993605fe25d6$var$clampCssByte($5373993605fe25d6$var$lerpNumber(leftColor[2], rightColor[2], dv)),
        $5373993605fe25d6$var$clampCssFloat($5373993605fe25d6$var$lerpNumber(leftColor[3], rightColor[3], dv))
    ], "rgba");
    return fullOutput ? {
        color: color,
        leftIndex: leftIndex,
        rightIndex: rightIndex,
        value: value
    } : color;
}
var $5373993605fe25d6$export$296e08242b78a3ec = $5373993605fe25d6$export$3a89f8d6f6bf6c9f;
function $5373993605fe25d6$export$d898ae866e27bf18(color, h, s, l) {
    var colorArr = $5373993605fe25d6$export$98e6a39c04603d36(color);
    if (color) {
        colorArr = $5373993605fe25d6$var$rgba2hsla(colorArr);
        h != null && (colorArr[0] = $5373993605fe25d6$var$clampCssAngle(h));
        s != null && (colorArr[1] = $5373993605fe25d6$var$parseCssFloat(s));
        l != null && (colorArr[2] = $5373993605fe25d6$var$parseCssFloat(l));
        return $5373993605fe25d6$export$fac44ee5b035f737($5373993605fe25d6$var$hsla2rgba(colorArr), "rgba");
    }
}
function $5373993605fe25d6$export$ab4754bf42583a26(color, alpha) {
    var colorArr = $5373993605fe25d6$export$98e6a39c04603d36(color);
    if (colorArr && alpha != null) {
        colorArr[3] = $5373993605fe25d6$var$clampCssFloat(alpha);
        return $5373993605fe25d6$export$fac44ee5b035f737(colorArr, "rgba");
    }
}
function $5373993605fe25d6$export$fac44ee5b035f737(arrColor, type) {
    if (!arrColor || !arrColor.length) return;
    var colorStr = arrColor[0] + "," + arrColor[1] + "," + arrColor[2];
    if (type === "rgba" || type === "hsva" || type === "hsla") colorStr += "," + arrColor[3];
    return type + "(" + colorStr + ")";
}
function $5373993605fe25d6$export$16c0ec21a6f9ef95(color, backgroundLum) {
    var arr = $5373993605fe25d6$export$98e6a39c04603d36(color);
    return arr ? (0.299 * arr[0] + 0.587 * arr[1] + 0.114 * arr[2]) * arr[3] / 255 + (1 - arr[3]) * backgroundLum : 0;
}
function $5373993605fe25d6$export$4385e60b38654f68() {
    return $5373993605fe25d6$export$fac44ee5b035f737([
        Math.round(Math.random() * 255),
        Math.round(Math.random() * 255),
        Math.round(Math.random() * 255)
    ], "rgb");
}
var $5373993605fe25d6$var$liftedColorCache = new (0, $46a227aab1eccb53$export$2e2bcd8739ae039)(100);
function $5373993605fe25d6$export$2b47e247dfb87a73(color) {
    if ((0, $e44eb14c4271d0f9$export$844ec244b1367d54)(color)) {
        var liftedColor = $5373993605fe25d6$var$liftedColorCache.get(color);
        if (!liftedColor) {
            liftedColor = $5373993605fe25d6$export$590e8b2c435046d9(color, -0.1);
            $5373993605fe25d6$var$liftedColorCache.put(color, liftedColor);
        }
        return liftedColor;
    } else if ((0, $e44eb14c4271d0f9$export$fa2c283003ed971c)(color)) {
        var ret = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, color);
        ret.colorStops = (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(color.colorStops, function(stop) {
            return {
                offset: stop.offset,
                color: $5373993605fe25d6$export$590e8b2c435046d9(stop.color, -0.1)
            };
        });
        return ret;
    }
    return color;
}








/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ var $c0b9978588a19a71$export$a143d493d941bafc;
var $c0b9978588a19a71$export$e4cf37d7f6fb9e0a;
var $c0b9978588a19a71$export$f99ded8fe4b79145;
var $c0b9978588a19a71$export$599f31c3813fae4d;
"use strict";
var $d4bb3ef2fb06acfd$export$a48f0734ac7c2329;
var $d4bb3ef2fb06acfd$export$d622b2ad8d90c771;
var $d4bb3ef2fb06acfd$export$6100ba28696e12de;
"use strict";
$d4bb3ef2fb06acfd$export$a48f0734ac7c2329 = $d4bb3ef2fb06acfd$var$byteLength;
$d4bb3ef2fb06acfd$export$d622b2ad8d90c771 = $d4bb3ef2fb06acfd$var$toByteArray;
$d4bb3ef2fb06acfd$export$6100ba28696e12de = $d4bb3ef2fb06acfd$var$fromByteArray;
var $d4bb3ef2fb06acfd$var$lookup = [];
var $d4bb3ef2fb06acfd$var$revLookup = [];
var $d4bb3ef2fb06acfd$var$Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var $d4bb3ef2fb06acfd$var$code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var $d4bb3ef2fb06acfd$var$i = 0, $d4bb3ef2fb06acfd$var$len = $d4bb3ef2fb06acfd$var$code.length; $d4bb3ef2fb06acfd$var$i < $d4bb3ef2fb06acfd$var$len; ++$d4bb3ef2fb06acfd$var$i){
    $d4bb3ef2fb06acfd$var$lookup[$d4bb3ef2fb06acfd$var$i] = $d4bb3ef2fb06acfd$var$code[$d4bb3ef2fb06acfd$var$i];
    $d4bb3ef2fb06acfd$var$revLookup[$d4bb3ef2fb06acfd$var$code.charCodeAt($d4bb3ef2fb06acfd$var$i)] = $d4bb3ef2fb06acfd$var$i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
$d4bb3ef2fb06acfd$var$revLookup["-".charCodeAt(0)] = 62;
$d4bb3ef2fb06acfd$var$revLookup["_".charCodeAt(0)] = 63;
function $d4bb3ef2fb06acfd$var$getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function $d4bb3ef2fb06acfd$var$byteLength(b64) {
    var lens = $d4bb3ef2fb06acfd$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $d4bb3ef2fb06acfd$var$_byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $d4bb3ef2fb06acfd$var$toByteArray(b64) {
    var tmp;
    var lens = $d4bb3ef2fb06acfd$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new $d4bb3ef2fb06acfd$var$Arr($d4bb3ef2fb06acfd$var$_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = $d4bb3ef2fb06acfd$var$revLookup[b64.charCodeAt(i)] << 18 | $d4bb3ef2fb06acfd$var$revLookup[b64.charCodeAt(i + 1)] << 12 | $d4bb3ef2fb06acfd$var$revLookup[b64.charCodeAt(i + 2)] << 6 | $d4bb3ef2fb06acfd$var$revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = $d4bb3ef2fb06acfd$var$revLookup[b64.charCodeAt(i)] << 2 | $d4bb3ef2fb06acfd$var$revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = $d4bb3ef2fb06acfd$var$revLookup[b64.charCodeAt(i)] << 10 | $d4bb3ef2fb06acfd$var$revLookup[b64.charCodeAt(i + 1)] << 4 | $d4bb3ef2fb06acfd$var$revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function $d4bb3ef2fb06acfd$var$tripletToBase64(num) {
    return $d4bb3ef2fb06acfd$var$lookup[num >> 18 & 0x3F] + $d4bb3ef2fb06acfd$var$lookup[num >> 12 & 0x3F] + $d4bb3ef2fb06acfd$var$lookup[num >> 6 & 0x3F] + $d4bb3ef2fb06acfd$var$lookup[num & 0x3F];
}
function $d4bb3ef2fb06acfd$var$encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push($d4bb3ef2fb06acfd$var$tripletToBase64(tmp));
    }
    return output.join("");
}
function $d4bb3ef2fb06acfd$var$fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push($d4bb3ef2fb06acfd$var$encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push($d4bb3ef2fb06acfd$var$lookup[tmp >> 2] + $d4bb3ef2fb06acfd$var$lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push($d4bb3ef2fb06acfd$var$lookup[tmp >> 10] + $d4bb3ef2fb06acfd$var$lookup[tmp >> 4 & 0x3F] + $d4bb3ef2fb06acfd$var$lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}


/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ var $95835dc7fd26d8cf$export$aafa59e2e03f2942;
var $95835dc7fd26d8cf$export$68d8715fc104d294;
$95835dc7fd26d8cf$export$aafa59e2e03f2942 = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
$95835dc7fd26d8cf$export$68d8715fc104d294 = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};


const $c0b9978588a19a71$var$customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
$c0b9978588a19a71$export$a143d493d941bafc = $c0b9978588a19a71$var$Buffer;
$c0b9978588a19a71$export$e4cf37d7f6fb9e0a = $c0b9978588a19a71$var$SlowBuffer;
$c0b9978588a19a71$export$f99ded8fe4b79145 = 50;
const $c0b9978588a19a71$var$K_MAX_LENGTH = 0x7fffffff;
$c0b9978588a19a71$export$599f31c3813fae4d = $c0b9978588a19a71$var$K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ $c0b9978588a19a71$var$Buffer.TYPED_ARRAY_SUPPORT = $c0b9978588a19a71$var$typedArraySupport();
if (!$c0b9978588a19a71$var$Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function $c0b9978588a19a71$var$typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        const arr = new Uint8Array(1);
        const proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty($c0b9978588a19a71$var$Buffer.prototype, "parent", {
    enumerable: true,
    get: function() {
        if (!$c0b9978588a19a71$var$Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty($c0b9978588a19a71$var$Buffer.prototype, "offset", {
    enumerable: true,
    get: function() {
        if (!$c0b9978588a19a71$var$Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function $c0b9978588a19a71$var$createBuffer(length) {
    if (length > $c0b9978588a19a71$var$K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, $c0b9978588a19a71$var$Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function $c0b9978588a19a71$var$Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return $c0b9978588a19a71$var$allocUnsafe(arg);
    }
    return $c0b9978588a19a71$var$from(arg, encodingOrOffset, length);
}
$c0b9978588a19a71$var$Buffer.poolSize = 8192 // not used by this implementation
;
function $c0b9978588a19a71$var$from(value, encodingOrOffset, length) {
    if (typeof value === "string") return $c0b9978588a19a71$var$fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return $c0b9978588a19a71$var$fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if ($c0b9978588a19a71$var$isInstance(value, ArrayBuffer) || value && $c0b9978588a19a71$var$isInstance(value.buffer, ArrayBuffer)) return $c0b9978588a19a71$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && ($c0b9978588a19a71$var$isInstance(value, SharedArrayBuffer) || value && $c0b9978588a19a71$var$isInstance(value.buffer, SharedArrayBuffer))) return $c0b9978588a19a71$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return $c0b9978588a19a71$var$Buffer.from(valueOf, encodingOrOffset, length);
    const b = $c0b9978588a19a71$var$fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return $c0b9978588a19a71$var$Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ $c0b9978588a19a71$var$Buffer.from = function(value, encodingOrOffset, length) {
    return $c0b9978588a19a71$var$from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf($c0b9978588a19a71$var$Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf($c0b9978588a19a71$var$Buffer, Uint8Array);
function $c0b9978588a19a71$var$assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function $c0b9978588a19a71$var$alloc(size, fill, encoding) {
    $c0b9978588a19a71$var$assertSize(size);
    if (size <= 0) return $c0b9978588a19a71$var$createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? $c0b9978588a19a71$var$createBuffer(size).fill(fill, encoding) : $c0b9978588a19a71$var$createBuffer(size).fill(fill);
    return $c0b9978588a19a71$var$createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ $c0b9978588a19a71$var$Buffer.alloc = function(size, fill, encoding) {
    return $c0b9978588a19a71$var$alloc(size, fill, encoding);
};
function $c0b9978588a19a71$var$allocUnsafe(size) {
    $c0b9978588a19a71$var$assertSize(size);
    return $c0b9978588a19a71$var$createBuffer(size < 0 ? 0 : $c0b9978588a19a71$var$checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ $c0b9978588a19a71$var$Buffer.allocUnsafe = function(size) {
    return $c0b9978588a19a71$var$allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ $c0b9978588a19a71$var$Buffer.allocUnsafeSlow = function(size) {
    return $c0b9978588a19a71$var$allocUnsafe(size);
};
function $c0b9978588a19a71$var$fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!$c0b9978588a19a71$var$Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    const length = $c0b9978588a19a71$var$byteLength(string, encoding) | 0;
    let buf = $c0b9978588a19a71$var$createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function $c0b9978588a19a71$var$fromArrayLike(array) {
    const length = array.length < 0 ? 0 : $c0b9978588a19a71$var$checked(array.length) | 0;
    const buf = $c0b9978588a19a71$var$createBuffer(length);
    for(let i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function $c0b9978588a19a71$var$fromArrayView(arrayView) {
    if ($c0b9978588a19a71$var$isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return $c0b9978588a19a71$var$fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return $c0b9978588a19a71$var$fromArrayLike(arrayView);
}
function $c0b9978588a19a71$var$fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    let buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, $c0b9978588a19a71$var$Buffer.prototype);
    return buf;
}
function $c0b9978588a19a71$var$fromObject(obj) {
    if ($c0b9978588a19a71$var$Buffer.isBuffer(obj)) {
        const len = $c0b9978588a19a71$var$checked(obj.length) | 0;
        const buf = $c0b9978588a19a71$var$createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || $c0b9978588a19a71$var$numberIsNaN(obj.length)) return $c0b9978588a19a71$var$createBuffer(0);
        return $c0b9978588a19a71$var$fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return $c0b9978588a19a71$var$fromArrayLike(obj.data);
}
function $c0b9978588a19a71$var$checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= $c0b9978588a19a71$var$K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + $c0b9978588a19a71$var$K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function $c0b9978588a19a71$var$SlowBuffer(length) {
    if (+length != length) length = 0;
    return $c0b9978588a19a71$var$Buffer.alloc(+length);
}
$c0b9978588a19a71$var$Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== $c0b9978588a19a71$var$Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
$c0b9978588a19a71$var$Buffer.compare = function compare(a, b) {
    if ($c0b9978588a19a71$var$isInstance(a, Uint8Array)) a = $c0b9978588a19a71$var$Buffer.from(a, a.offset, a.byteLength);
    if ($c0b9978588a19a71$var$isInstance(b, Uint8Array)) b = $c0b9978588a19a71$var$Buffer.from(b, b.offset, b.byteLength);
    if (!$c0b9978588a19a71$var$Buffer.isBuffer(a) || !$c0b9978588a19a71$var$Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    let x = a.length;
    let y = b.length;
    for(let i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
$c0b9978588a19a71$var$Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
$c0b9978588a19a71$var$Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return $c0b9978588a19a71$var$Buffer.alloc(0);
    let i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    const buffer = $c0b9978588a19a71$var$Buffer.allocUnsafe(length);
    let pos = 0;
    for(i = 0; i < list.length; ++i){
        let buf = list[i];
        if ($c0b9978588a19a71$var$isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
                if (!$c0b9978588a19a71$var$Buffer.isBuffer(buf)) buf = $c0b9978588a19a71$var$Buffer.from(buf);
                buf.copy(buffer, pos);
            } else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!$c0b9978588a19a71$var$Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function $c0b9978588a19a71$var$byteLength(string, encoding) {
    if ($c0b9978588a19a71$var$Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || $c0b9978588a19a71$var$isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    const len = string.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    let loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return $c0b9978588a19a71$var$utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return $c0b9978588a19a71$var$base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : $c0b9978588a19a71$var$utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
$c0b9978588a19a71$var$Buffer.byteLength = $c0b9978588a19a71$var$byteLength;
function $c0b9978588a19a71$var$slowToString(encoding, start, end) {
    let loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return $c0b9978588a19a71$var$hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return $c0b9978588a19a71$var$utf8Slice(this, start, end);
        case "ascii":
            return $c0b9978588a19a71$var$asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return $c0b9978588a19a71$var$latin1Slice(this, start, end);
        case "base64":
            return $c0b9978588a19a71$var$base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return $c0b9978588a19a71$var$utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
$c0b9978588a19a71$var$Buffer.prototype._isBuffer = true;
function $c0b9978588a19a71$var$swap(b, n, m) {
    const i = b[n];
    b[n] = b[m];
    b[m] = i;
}
$c0b9978588a19a71$var$Buffer.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(let i = 0; i < len; i += 2)$c0b9978588a19a71$var$swap(this, i, i + 1);
    return this;
};
$c0b9978588a19a71$var$Buffer.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(let i = 0; i < len; i += 4){
        $c0b9978588a19a71$var$swap(this, i, i + 3);
        $c0b9978588a19a71$var$swap(this, i + 1, i + 2);
    }
    return this;
};
$c0b9978588a19a71$var$Buffer.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(let i = 0; i < len; i += 8){
        $c0b9978588a19a71$var$swap(this, i, i + 7);
        $c0b9978588a19a71$var$swap(this, i + 1, i + 6);
        $c0b9978588a19a71$var$swap(this, i + 2, i + 5);
        $c0b9978588a19a71$var$swap(this, i + 3, i + 4);
    }
    return this;
};
$c0b9978588a19a71$var$Buffer.prototype.toString = function toString() {
    const length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return $c0b9978588a19a71$var$utf8Slice(this, 0, length);
    return $c0b9978588a19a71$var$slowToString.apply(this, arguments);
};
$c0b9978588a19a71$var$Buffer.prototype.toLocaleString = $c0b9978588a19a71$var$Buffer.prototype.toString;
$c0b9978588a19a71$var$Buffer.prototype.equals = function equals(b) {
    if (!$c0b9978588a19a71$var$Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return $c0b9978588a19a71$var$Buffer.compare(this, b) === 0;
};
$c0b9978588a19a71$var$Buffer.prototype.inspect = function inspect() {
    let str = "";
    const max = $c0b9978588a19a71$export$f99ded8fe4b79145;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if ($c0b9978588a19a71$var$customInspectSymbol) $c0b9978588a19a71$var$Buffer.prototype[$c0b9978588a19a71$var$customInspectSymbol] = $c0b9978588a19a71$var$Buffer.prototype.inspect;
$c0b9978588a19a71$var$Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if ($c0b9978588a19a71$var$isInstance(target, Uint8Array)) target = $c0b9978588a19a71$var$Buffer.from(target, target.offset, target.byteLength);
    if (!$c0b9978588a19a71$var$Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    let x = thisEnd - thisStart;
    let y = end - start;
    const len = Math.min(x, y);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for(let i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function $c0b9978588a19a71$var$bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if ($c0b9978588a19a71$var$numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = $c0b9978588a19a71$var$Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if ($c0b9978588a19a71$var$Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return $c0b9978588a19a71$var$arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return $c0b9978588a19a71$var$arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function $c0b9978588a19a71$var$arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    let i;
    if (dir) {
        let foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            let found = true;
            for(let j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
$c0b9978588a19a71$var$Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
$c0b9978588a19a71$var$Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return $c0b9978588a19a71$var$bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
$c0b9978588a19a71$var$Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return $c0b9978588a19a71$var$bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function $c0b9978588a19a71$var$hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    const strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    let i;
    for(i = 0; i < length; ++i){
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if ($c0b9978588a19a71$var$numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function $c0b9978588a19a71$var$utf8Write(buf, string, offset, length) {
    return $c0b9978588a19a71$var$blitBuffer($c0b9978588a19a71$var$utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function $c0b9978588a19a71$var$asciiWrite(buf, string, offset, length) {
    return $c0b9978588a19a71$var$blitBuffer($c0b9978588a19a71$var$asciiToBytes(string), buf, offset, length);
}
function $c0b9978588a19a71$var$base64Write(buf, string, offset, length) {
    return $c0b9978588a19a71$var$blitBuffer($c0b9978588a19a71$var$base64ToBytes(string), buf, offset, length);
}
function $c0b9978588a19a71$var$ucs2Write(buf, string, offset, length) {
    return $c0b9978588a19a71$var$blitBuffer($c0b9978588a19a71$var$utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
$c0b9978588a19a71$var$Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    const remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    let loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return $c0b9978588a19a71$var$hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return $c0b9978588a19a71$var$utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return $c0b9978588a19a71$var$asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return $c0b9978588a19a71$var$base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return $c0b9978588a19a71$var$ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
$c0b9978588a19a71$var$Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function $c0b9978588a19a71$var$base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return $d4bb3ef2fb06acfd$export$6100ba28696e12de(buf);
    else return $d4bb3ef2fb06acfd$export$6100ba28696e12de(buf.slice(start, end));
}
function $c0b9978588a19a71$var$utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i = start;
    while(i < end){
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return $c0b9978588a19a71$var$decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const $c0b9978588a19a71$var$MAX_ARGUMENTS_LENGTH = 0x1000;
function $c0b9978588a19a71$var$decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= $c0b9978588a19a71$var$MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    let res = "";
    let i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += $c0b9978588a19a71$var$MAX_ARGUMENTS_LENGTH));
    return res;
}
function $c0b9978588a19a71$var$asciiSlice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function $c0b9978588a19a71$var$latin1Slice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function $c0b9978588a19a71$var$hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    let out = "";
    for(let i = start; i < end; ++i)out += $c0b9978588a19a71$var$hexSliceLookupTable[buf[i]];
    return out;
}
function $c0b9978588a19a71$var$utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(let i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
$c0b9978588a19a71$var$Buffer.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    const newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, $c0b9978588a19a71$var$Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function $c0b9978588a19a71$var$checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
$c0b9978588a19a71$var$Buffer.prototype.readUintLE = $c0b9978588a19a71$var$Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
$c0b9978588a19a71$var$Buffer.prototype.readUintBE = $c0b9978588a19a71$var$Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkOffset(offset, byteLength, this.length);
    let val = this[offset + --byteLength];
    let mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
$c0b9978588a19a71$var$Buffer.prototype.readUint8 = $c0b9978588a19a71$var$Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkOffset(offset, 1, this.length);
    return this[offset];
};
$c0b9978588a19a71$var$Buffer.prototype.readUint16LE = $c0b9978588a19a71$var$Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
$c0b9978588a19a71$var$Buffer.prototype.readUint16BE = $c0b9978588a19a71$var$Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
$c0b9978588a19a71$var$Buffer.prototype.readUint32LE = $c0b9978588a19a71$var$Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
$c0b9978588a19a71$var$Buffer.prototype.readUint32BE = $c0b9978588a19a71$var$Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
$c0b9978588a19a71$var$Buffer.prototype.readBigUInt64LE = $c0b9978588a19a71$var$defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    $c0b9978588a19a71$var$validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) $c0b9978588a19a71$var$boundsError(offset, this.length - 8);
    const lo = first + this[++offset] * 256 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 256 + this[++offset] * 2 ** 16 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
$c0b9978588a19a71$var$Buffer.prototype.readBigUInt64BE = $c0b9978588a19a71$var$defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    $c0b9978588a19a71$var$validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) $c0b9978588a19a71$var$boundsError(offset, this.length - 8);
    const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});
$c0b9978588a19a71$var$Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$c0b9978588a19a71$var$Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkOffset(offset, byteLength, this.length);
    let i = byteLength;
    let mul = 1;
    let val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$c0b9978588a19a71$var$Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
$c0b9978588a19a71$var$Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
$c0b9978588a19a71$var$Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
$c0b9978588a19a71$var$Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
$c0b9978588a19a71$var$Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
$c0b9978588a19a71$var$Buffer.prototype.readBigInt64LE = $c0b9978588a19a71$var$defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    $c0b9978588a19a71$var$validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) $c0b9978588a19a71$var$boundsError(offset, this.length - 8);
    const val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * 2 ** 16 + (last << 24 // Overflow
    );
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
});
$c0b9978588a19a71$var$Buffer.prototype.readBigInt64BE = $c0b9978588a19a71$var$defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    $c0b9978588a19a71$var$validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) $c0b9978588a19a71$var$boundsError(offset, this.length - 8);
    const val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 + this[++offset] * 256 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + last);
});
$c0b9978588a19a71$var$Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkOffset(offset, 4, this.length);
    return $95835dc7fd26d8cf$export$aafa59e2e03f2942(this, offset, true, 23, 4);
};
$c0b9978588a19a71$var$Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkOffset(offset, 4, this.length);
    return $95835dc7fd26d8cf$export$aafa59e2e03f2942(this, offset, false, 23, 4);
};
$c0b9978588a19a71$var$Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkOffset(offset, 8, this.length);
    return $95835dc7fd26d8cf$export$aafa59e2e03f2942(this, offset, true, 52, 8);
};
$c0b9978588a19a71$var$Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkOffset(offset, 8, this.length);
    return $95835dc7fd26d8cf$export$aafa59e2e03f2942(this, offset, false, 52, 8);
};
function $c0b9978588a19a71$var$checkInt(buf, value, offset, ext, max, min) {
    if (!$c0b9978588a19a71$var$Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
$c0b9978588a19a71$var$Buffer.prototype.writeUintLE = $c0b9978588a19a71$var$Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $c0b9978588a19a71$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let mul = 1;
    let i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
$c0b9978588a19a71$var$Buffer.prototype.writeUintBE = $c0b9978588a19a71$var$Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $c0b9978588a19a71$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let i = byteLength - 1;
    let mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
$c0b9978588a19a71$var$Buffer.prototype.writeUint8 = $c0b9978588a19a71$var$Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
$c0b9978588a19a71$var$Buffer.prototype.writeUint16LE = $c0b9978588a19a71$var$Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$c0b9978588a19a71$var$Buffer.prototype.writeUint16BE = $c0b9978588a19a71$var$Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
$c0b9978588a19a71$var$Buffer.prototype.writeUint32LE = $c0b9978588a19a71$var$Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
$c0b9978588a19a71$var$Buffer.prototype.writeUint32BE = $c0b9978588a19a71$var$Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function $c0b9978588a19a71$var$wrtBigUInt64LE(buf, value, offset, min, max) {
    $c0b9978588a19a71$var$checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
}
function $c0b9978588a19a71$var$wrtBigUInt64BE(buf, value, offset, min, max) {
    $c0b9978588a19a71$var$checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
}
$c0b9978588a19a71$var$Buffer.prototype.writeBigUInt64LE = $c0b9978588a19a71$var$defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return $c0b9978588a19a71$var$wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
$c0b9978588a19a71$var$Buffer.prototype.writeBigUInt64BE = $c0b9978588a19a71$var$defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return $c0b9978588a19a71$var$wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
$c0b9978588a19a71$var$Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        $c0b9978588a19a71$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
$c0b9978588a19a71$var$Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        $c0b9978588a19a71$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = byteLength - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
$c0b9978588a19a71$var$Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
$c0b9978588a19a71$var$Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$c0b9978588a19a71$var$Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
$c0b9978588a19a71$var$Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
$c0b9978588a19a71$var$Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
$c0b9978588a19a71$var$Buffer.prototype.writeBigInt64LE = $c0b9978588a19a71$var$defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return $c0b9978588a19a71$var$wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
$c0b9978588a19a71$var$Buffer.prototype.writeBigInt64BE = $c0b9978588a19a71$var$defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return $c0b9978588a19a71$var$wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
function $c0b9978588a19a71$var$checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function $c0b9978588a19a71$var$writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    $95835dc7fd26d8cf$export$68d8715fc104d294(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
$c0b9978588a19a71$var$Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return $c0b9978588a19a71$var$writeFloat(this, value, offset, true, noAssert);
};
$c0b9978588a19a71$var$Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return $c0b9978588a19a71$var$writeFloat(this, value, offset, false, noAssert);
};
function $c0b9978588a19a71$var$writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $c0b9978588a19a71$var$checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    $95835dc7fd26d8cf$export$68d8715fc104d294(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
$c0b9978588a19a71$var$Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return $c0b9978588a19a71$var$writeDouble(this, value, offset, true, noAssert);
};
$c0b9978588a19a71$var$Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return $c0b9978588a19a71$var$writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
$c0b9978588a19a71$var$Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!$c0b9978588a19a71$var$Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    const len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
$c0b9978588a19a71$var$Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !$c0b9978588a19a71$var$Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    let i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        const bytes = $c0b9978588a19a71$var$Buffer.isBuffer(val) ? val : $c0b9978588a19a71$var$Buffer.from(val, encoding);
        const len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
const $c0b9978588a19a71$var$errors = {};
function $c0b9978588a19a71$var$E(sym, getMessage, Base) {
    $c0b9978588a19a71$var$errors[sym] = class NodeError extends Base {
        constructor(){
            super();
            Object.defineProperty(this, "message", {
                value: getMessage.apply(this, arguments),
                writable: true,
                configurable: true
            });
            // Add the error code to the name to include it in the stack trace.
            this.name = `${this.name} [${sym}]`;
            // Access the stack to generate the error message including the error code
            // from the name.
            this.stack // eslint-disable-line no-unused-expressions
            ;
            // Reset the name to the actual name.
            delete this.name;
        }
        get code() {
            return sym;
        }
        set code(value) {
            Object.defineProperty(this, "code", {
                configurable: true,
                enumerable: true,
                value: value,
                writable: true
            });
        }
        toString() {
            return `${this.name} [${sym}]: ${this.message}`;
        }
    };
}
$c0b9978588a19a71$var$E("ERR_BUFFER_OUT_OF_BOUNDS", function(name) {
    if (name) return `${name} is outside of buffer bounds`;
    return "Attempt to access memory outside buffer bounds";
}, RangeError);
$c0b9978588a19a71$var$E("ERR_INVALID_ARG_TYPE", function(name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
}, TypeError);
$c0b9978588a19a71$var$E("ERR_OUT_OF_RANGE", function(str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) received = $c0b9978588a19a71$var$addNumericalSeparator(String(input));
    else if (typeof input === "bigint") {
        received = String(input);
        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) received = $c0b9978588a19a71$var$addNumericalSeparator(received);
        received += "n";
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg;
}, RangeError);
function $c0b9978588a19a71$var$addNumericalSeparator(val) {
    let res = "";
    let i = val.length;
    const start = val[0] === "-" ? 1 : 0;
    for(; i >= start + 4; i -= 3)res = `_${val.slice(i - 3, i)}${res}`;
    return `${val.slice(0, i)}${res}`;
}
// CHECK FUNCTIONS
// ===============
function $c0b9978588a19a71$var$checkBounds(buf, offset, byteLength) {
    $c0b9978588a19a71$var$validateNumber(offset, "offset");
    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) $c0b9978588a19a71$var$boundsError(offset, buf.length - (byteLength + 1));
}
function $c0b9978588a19a71$var$checkIntBI(value, min, max, buf, offset, byteLength) {
    if (value > max || value < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength > 3) {
            if (min === 0 || min === BigInt(0)) range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;
            else range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength + 1) * 8 - 1}${n}`;
        } else range = `>= ${min}${n} and <= ${max}${n}`;
        throw new $c0b9978588a19a71$var$errors.ERR_OUT_OF_RANGE("value", range, value);
    }
    $c0b9978588a19a71$var$checkBounds(buf, offset, byteLength);
}
function $c0b9978588a19a71$var$validateNumber(value, name) {
    if (typeof value !== "number") throw new $c0b9978588a19a71$var$errors.ERR_INVALID_ARG_TYPE(name, "number", value);
}
function $c0b9978588a19a71$var$boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
        $c0b9978588a19a71$var$validateNumber(value, type);
        throw new $c0b9978588a19a71$var$errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
    }
    if (length < 0) throw new $c0b9978588a19a71$var$errors.ERR_BUFFER_OUT_OF_BOUNDS();
    throw new $c0b9978588a19a71$var$errors.ERR_OUT_OF_RANGE(type || "offset", `>= ${type ? 1 : 0} and <= ${length}`, value);
}
// HELPER FUNCTIONS
// ================
const $c0b9978588a19a71$var$INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function $c0b9978588a19a71$var$base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace($c0b9978588a19a71$var$INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function $c0b9978588a19a71$var$utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for(let i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function $c0b9978588a19a71$var$asciiToBytes(str) {
    const byteArray = [];
    for(let i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function $c0b9978588a19a71$var$utf16leToBytes(str, units) {
    let c, hi, lo;
    const byteArray = [];
    for(let i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function $c0b9978588a19a71$var$base64ToBytes(str) {
    return $d4bb3ef2fb06acfd$export$d622b2ad8d90c771($c0b9978588a19a71$var$base64clean(str));
}
function $c0b9978588a19a71$var$blitBuffer(src, dst, offset, length) {
    let i;
    for(i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function $c0b9978588a19a71$var$isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function $c0b9978588a19a71$var$numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const $c0b9978588a19a71$var$hexSliceLookupTable = function() {
    const alphabet = "0123456789abcdef";
    const table = new Array(256);
    for(let i = 0; i < 16; ++i){
        const i16 = i * 16;
        for(let j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();
// Return not function with Error if BigInt not supported
function $c0b9978588a19a71$var$defineBigIntMethod(fn) {
    return typeof BigInt === "undefined" ? $c0b9978588a19a71$var$BufferBigIntNotDefined : fn;
}
function $c0b9978588a19a71$var$BufferBigIntNotDefined() {
    throw new Error("BigInt not supported");
}


var $c87c86d9265779a0$require$Buffer = $c0b9978588a19a71$export$a143d493d941bafc;
var $c87c86d9265779a0$var$mathRound = Math.round;
function $c87c86d9265779a0$export$4cde5df63f53f473(color) {
    var opacity;
    if (!color || color === "transparent") color = "none";
    else if (typeof color === "string" && color.indexOf("rgba") > -1) {
        var arr = (0, $5373993605fe25d6$export$98e6a39c04603d36)(color);
        if (arr) {
            color = "rgb(" + arr[0] + "," + arr[1] + "," + arr[2] + ")";
            opacity = arr[3];
        }
    }
    return {
        color: color,
        opacity: opacity == null ? 1 : opacity
    };
}
var $c87c86d9265779a0$var$EPSILON = 1e-4;
function $c87c86d9265779a0$export$4701367f5b4de464(transform) {
    return transform < $c87c86d9265779a0$var$EPSILON && transform > -$c87c86d9265779a0$var$EPSILON;
}
function $c87c86d9265779a0$export$4b9074ac37ee5a23(transform) {
    return $c87c86d9265779a0$var$mathRound(transform * 1e3) / 1e3;
}
function $c87c86d9265779a0$export$52bfc6d3e2ff0fc2(transform) {
    return $c87c86d9265779a0$var$mathRound(transform * 1e4) / 1e4;
}
function $c87c86d9265779a0$export$19676ab5cb1de150(transform) {
    return $c87c86d9265779a0$var$mathRound(transform * 10) / 10;
}
function $c87c86d9265779a0$export$f29a4456cf56ff21(m) {
    return "matrix(" + $c87c86d9265779a0$export$4b9074ac37ee5a23(m[0]) + "," + $c87c86d9265779a0$export$4b9074ac37ee5a23(m[1]) + "," + $c87c86d9265779a0$export$4b9074ac37ee5a23(m[2]) + "," + $c87c86d9265779a0$export$4b9074ac37ee5a23(m[3]) + "," + $c87c86d9265779a0$export$52bfc6d3e2ff0fc2(m[4]) + "," + $c87c86d9265779a0$export$52bfc6d3e2ff0fc2(m[5]) + ")";
}
var $c87c86d9265779a0$export$4062150f0600d971 = {
    left: "start",
    right: "end",
    center: "middle",
    middle: "middle"
};
function $c87c86d9265779a0$export$bf7d6802d2badd9(y, lineHeight, textBaseline) {
    if (textBaseline === "top") y += lineHeight / 2;
    else if (textBaseline === "bottom") y -= lineHeight / 2;
    return y;
}
function $c87c86d9265779a0$export$c62076b3a966c94b(style) {
    return style && (style.shadowBlur || style.shadowOffsetX || style.shadowOffsetY);
}
function $c87c86d9265779a0$export$9e4c657be710688a(displayable) {
    var style = displayable.style;
    var globalScale = displayable.getGlobalScale();
    return [
        style.shadowColor,
        (style.shadowBlur || 0).toFixed(2),
        (style.shadowOffsetX || 0).toFixed(2),
        (style.shadowOffsetY || 0).toFixed(2),
        globalScale[0],
        globalScale[1]
    ].join(",");
}
function $c87c86d9265779a0$export$8abc07640cab0527(clipPaths) {
    var key = [];
    if (clipPaths) for(var i = 0; i < clipPaths.length; i++){
        var clipPath = clipPaths[i];
        key.push(clipPath.id);
    }
    return key.join(",");
}
function $c87c86d9265779a0$export$2ade673ac4f85dfe(val) {
    return val && !!val.image;
}
function $c87c86d9265779a0$export$30352f47600a13cd(val) {
    return val && !!val.svgElement;
}
function $c87c86d9265779a0$export$41a28f5a000a9d0f(val) {
    return $c87c86d9265779a0$export$2ade673ac4f85dfe(val) || $c87c86d9265779a0$export$30352f47600a13cd(val);
}
function $c87c86d9265779a0$export$7d961bca9d3b47d0(val) {
    return val.type === "linear";
}
function $c87c86d9265779a0$export$2a9cca6692a0ce3a(val) {
    return val.type === "radial";
}
function $c87c86d9265779a0$export$545e02bbd5f8fe95(val) {
    return val && (val.type === "linear" || val.type === "radial");
}
function $c87c86d9265779a0$export$bb094196179998a5(id) {
    return "url(#" + id + ")";
}
function $c87c86d9265779a0$export$93fa1ae8a509371c(el) {
    var scale = el.getGlobalScale();
    var size = Math.max(scale[0], scale[1]);
    return Math.max(Math.ceil(Math.log(size) / Math.log(10)), 1);
}
function $c87c86d9265779a0$export$3fe07c0888ff6164(transform) {
    var x = transform.x || 0;
    var y = transform.y || 0;
    var rotation = (transform.rotation || 0) * (0, $e44eb14c4271d0f9$export$bce8e055322a0ce6);
    var scaleX = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(transform.scaleX, 1);
    var scaleY = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(transform.scaleY, 1);
    var skewX = transform.skewX || 0;
    var skewY = transform.skewY || 0;
    var res = [];
    if (x || y) res.push("translate(" + x + "px," + y + "px)");
    if (rotation) res.push("rotate(" + rotation + ")");
    if (scaleX !== 1 || scaleY !== 1) res.push("scale(" + scaleX + "," + scaleY + ")");
    if (skewX || skewY) res.push("skew(" + $c87c86d9265779a0$var$mathRound(skewX * (0, $e44eb14c4271d0f9$export$bce8e055322a0ce6)) + "deg, " + $c87c86d9265779a0$var$mathRound(skewY * (0, $e44eb14c4271d0f9$export$bce8e055322a0ce6)) + "deg)");
    return res.join(" ");
}
var $c87c86d9265779a0$export$8fb536984ec8b4d7 = function() {
    if ((0, $de9e931273a116c1$export$2e2bcd8739ae039).hasGlobalWindow && (0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(window.btoa)) return function(str) {
        return window.btoa(unescape(encodeURIComponent(str)));
    };
    if (typeof $c87c86d9265779a0$require$Buffer !== "undefined") return function(str) {
        return $c87c86d9265779a0$require$Buffer.from(str).toString("base64");
    };
    return function(str) {
        (0, $e44eb14c4271d0f9$export$58da9968c3170cb1)("Base64 isn't natively supported in the current environment.");
        return null;
    };
}();


var $d03d5f018aba2b0f$var$arraySlice = Array.prototype.slice;
function $d03d5f018aba2b0f$var$interpolateNumber(p0, p1, percent) {
    return (p1 - p0) * percent + p0;
}
function $d03d5f018aba2b0f$var$interpolate1DArray(out, p0, p1, percent) {
    var len = p0.length;
    for(var i = 0; i < len; i++)out[i] = $d03d5f018aba2b0f$var$interpolateNumber(p0[i], p1[i], percent);
    return out;
}
function $d03d5f018aba2b0f$var$interpolate2DArray(out, p0, p1, percent) {
    var len = p0.length;
    var len2 = len && p0[0].length;
    for(var i = 0; i < len; i++){
        if (!out[i]) out[i] = [];
        for(var j = 0; j < len2; j++)out[i][j] = $d03d5f018aba2b0f$var$interpolateNumber(p0[i][j], p1[i][j], percent);
    }
    return out;
}
function $d03d5f018aba2b0f$var$add1DArray(out, p0, p1, sign) {
    var len = p0.length;
    for(var i = 0; i < len; i++)out[i] = p0[i] + p1[i] * sign;
    return out;
}
function $d03d5f018aba2b0f$var$add2DArray(out, p0, p1, sign) {
    var len = p0.length;
    var len2 = len && p0[0].length;
    for(var i = 0; i < len; i++){
        if (!out[i]) out[i] = [];
        for(var j = 0; j < len2; j++)out[i][j] = p0[i][j] + p1[i][j] * sign;
    }
    return out;
}
function $d03d5f018aba2b0f$var$fillColorStops(val0, val1) {
    var len0 = val0.length;
    var len1 = val1.length;
    var shorterArr = len0 > len1 ? val1 : val0;
    var shorterLen = Math.min(len0, len1);
    var last = shorterArr[shorterLen - 1] || {
        color: [
            0,
            0,
            0,
            0
        ],
        offset: 0
    };
    for(var i = shorterLen; i < Math.max(len0, len1); i++)shorterArr.push({
        offset: last.offset,
        color: last.color.slice()
    });
}
function $d03d5f018aba2b0f$var$fillArray(val0, val1, arrDim) {
    var arr0 = val0;
    var arr1 = val1;
    if (!arr0.push || !arr1.push) return;
    var arr0Len = arr0.length;
    var arr1Len = arr1.length;
    if (arr0Len !== arr1Len) {
        var isPreviousLarger = arr0Len > arr1Len;
        if (isPreviousLarger) arr0.length = arr1Len;
        else for(var i = arr0Len; i < arr1Len; i++)arr0.push(arrDim === 1 ? arr1[i] : $d03d5f018aba2b0f$var$arraySlice.call(arr1[i]));
    }
    var len2 = arr0[0] && arr0[0].length;
    for(var i = 0; i < arr0.length; i++){
        if (arrDim === 1) {
            if (isNaN(arr0[i])) arr0[i] = arr1[i];
        } else {
            for(var j = 0; j < len2; j++)if (isNaN(arr0[i][j])) arr0[i][j] = arr1[i][j];
        }
    }
}
function $d03d5f018aba2b0f$export$c5e92b7f105af84e(value) {
    if ((0, $e44eb14c4271d0f9$export$1e2f57719e155213)(value)) {
        var len = value.length;
        if ((0, $e44eb14c4271d0f9$export$1e2f57719e155213)(value[0])) {
            var ret = [];
            for(var i = 0; i < len; i++)ret.push($d03d5f018aba2b0f$var$arraySlice.call(value[i]));
            return ret;
        }
        return $d03d5f018aba2b0f$var$arraySlice.call(value);
    }
    return value;
}
function $d03d5f018aba2b0f$var$rgba2String(rgba) {
    rgba[0] = Math.floor(rgba[0]) || 0;
    rgba[1] = Math.floor(rgba[1]) || 0;
    rgba[2] = Math.floor(rgba[2]) || 0;
    rgba[3] = rgba[3] == null ? 1 : rgba[3];
    return "rgba(" + rgba.join(",") + ")";
}
function $d03d5f018aba2b0f$var$guessArrayDim(value) {
    return (0, $e44eb14c4271d0f9$export$1e2f57719e155213)(value && value[0]) ? 2 : 1;
}
var $d03d5f018aba2b0f$var$VALUE_TYPE_NUMBER = 0;
var $d03d5f018aba2b0f$var$VALUE_TYPE_1D_ARRAY = 1;
var $d03d5f018aba2b0f$var$VALUE_TYPE_2D_ARRAY = 2;
var $d03d5f018aba2b0f$var$VALUE_TYPE_COLOR = 3;
var $d03d5f018aba2b0f$var$VALUE_TYPE_LINEAR_GRADIENT = 4;
var $d03d5f018aba2b0f$var$VALUE_TYPE_RADIAL_GRADIENT = 5;
var $d03d5f018aba2b0f$var$VALUE_TYPE_UNKOWN = 6;
function $d03d5f018aba2b0f$var$isGradientValueType(valType) {
    return valType === $d03d5f018aba2b0f$var$VALUE_TYPE_LINEAR_GRADIENT || valType === $d03d5f018aba2b0f$var$VALUE_TYPE_RADIAL_GRADIENT;
}
function $d03d5f018aba2b0f$var$isArrayValueType(valType) {
    return valType === $d03d5f018aba2b0f$var$VALUE_TYPE_1D_ARRAY || valType === $d03d5f018aba2b0f$var$VALUE_TYPE_2D_ARRAY;
}
var $d03d5f018aba2b0f$var$tmpRgba = [
    0,
    0,
    0,
    0
];
var $d03d5f018aba2b0f$var$Track = function() {
    function Track(propName) {
        this.keyframes = [];
        this.discrete = false;
        this._invalid = false;
        this._needsSort = false;
        this._lastFr = 0;
        this._lastFrP = 0;
        this.propName = propName;
    }
    Track.prototype.isFinished = function() {
        return this._finished;
    };
    Track.prototype.setFinished = function() {
        this._finished = true;
        if (this._additiveTrack) this._additiveTrack.setFinished();
    };
    Track.prototype.needsAnimate = function() {
        return this.keyframes.length >= 1;
    };
    Track.prototype.getAdditiveTrack = function() {
        return this._additiveTrack;
    };
    Track.prototype.addKeyframe = function(time, rawValue, easing) {
        this._needsSort = true;
        var keyframes = this.keyframes;
        var len = keyframes.length;
        var discrete = false;
        var valType = $d03d5f018aba2b0f$var$VALUE_TYPE_UNKOWN;
        var value = rawValue;
        if ((0, $e44eb14c4271d0f9$export$1e2f57719e155213)(rawValue)) {
            var arrayDim = $d03d5f018aba2b0f$var$guessArrayDim(rawValue);
            valType = arrayDim;
            if (arrayDim === 1 && !(0, $e44eb14c4271d0f9$export$7e4aa119212bc614)(rawValue[0]) || arrayDim === 2 && !(0, $e44eb14c4271d0f9$export$7e4aa119212bc614)(rawValue[0][0])) discrete = true;
        } else {
            if ((0, $e44eb14c4271d0f9$export$7e4aa119212bc614)(rawValue) && !(0, $e44eb14c4271d0f9$export$7d667b9a0c48c975)(rawValue)) valType = $d03d5f018aba2b0f$var$VALUE_TYPE_NUMBER;
            else if ((0, $e44eb14c4271d0f9$export$844ec244b1367d54)(rawValue)) {
                if (!isNaN(+rawValue)) valType = $d03d5f018aba2b0f$var$VALUE_TYPE_NUMBER;
                else {
                    var colorArray = $5373993605fe25d6$export$98e6a39c04603d36(rawValue);
                    if (colorArray) {
                        value = colorArray;
                        valType = $d03d5f018aba2b0f$var$VALUE_TYPE_COLOR;
                    }
                }
            } else if ((0, $e44eb14c4271d0f9$export$fa2c283003ed971c)(rawValue)) {
                var parsedGradient = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, value);
                parsedGradient.colorStops = (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(rawValue.colorStops, function(colorStop) {
                    return {
                        offset: colorStop.offset,
                        color: $5373993605fe25d6$export$98e6a39c04603d36(colorStop.color)
                    };
                });
                if ((0, $c87c86d9265779a0$export$7d961bca9d3b47d0)(rawValue)) valType = $d03d5f018aba2b0f$var$VALUE_TYPE_LINEAR_GRADIENT;
                else if ((0, $c87c86d9265779a0$export$2a9cca6692a0ce3a)(rawValue)) valType = $d03d5f018aba2b0f$var$VALUE_TYPE_RADIAL_GRADIENT;
                value = parsedGradient;
            }
        }
        if (len === 0) this.valType = valType;
        else if (valType !== this.valType || valType === $d03d5f018aba2b0f$var$VALUE_TYPE_UNKOWN) discrete = true;
        this.discrete = this.discrete || discrete;
        var kf = {
            time: time,
            value: value,
            rawValue: rawValue,
            percent: 0
        };
        if (easing) {
            kf.easing = easing;
            kf.easingFunc = (0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(easing) ? easing : (0, $92c590cae218c52b$export$2e2bcd8739ae039)[easing] || (0, $20f77a86bf732593$export$ec0863d806fd857e)(easing);
        }
        keyframes.push(kf);
        return kf;
    };
    Track.prototype.prepare = function(maxTime, additiveTrack) {
        var kfs = this.keyframes;
        if (this._needsSort) kfs.sort(function(a, b) {
            return a.time - b.time;
        });
        var valType = this.valType;
        var kfsLen = kfs.length;
        var lastKf = kfs[kfsLen - 1];
        var isDiscrete = this.discrete;
        var isArr = $d03d5f018aba2b0f$var$isArrayValueType(valType);
        var isGradient = $d03d5f018aba2b0f$var$isGradientValueType(valType);
        for(var i = 0; i < kfsLen; i++){
            var kf = kfs[i];
            var value = kf.value;
            var lastValue = lastKf.value;
            kf.percent = kf.time / maxTime;
            if (!isDiscrete) {
                if (isArr && i !== kfsLen - 1) $d03d5f018aba2b0f$var$fillArray(value, lastValue, valType);
                else if (isGradient) $d03d5f018aba2b0f$var$fillColorStops(value.colorStops, lastValue.colorStops);
            }
        }
        if (!isDiscrete && valType !== $d03d5f018aba2b0f$var$VALUE_TYPE_RADIAL_GRADIENT && additiveTrack && this.needsAnimate() && additiveTrack.needsAnimate() && valType === additiveTrack.valType && !additiveTrack._finished) {
            this._additiveTrack = additiveTrack;
            var startValue = kfs[0].value;
            for(var i = 0; i < kfsLen; i++){
                if (valType === $d03d5f018aba2b0f$var$VALUE_TYPE_NUMBER) kfs[i].additiveValue = kfs[i].value - startValue;
                else if (valType === $d03d5f018aba2b0f$var$VALUE_TYPE_COLOR) kfs[i].additiveValue = $d03d5f018aba2b0f$var$add1DArray([], kfs[i].value, startValue, -1);
                else if ($d03d5f018aba2b0f$var$isArrayValueType(valType)) kfs[i].additiveValue = valType === $d03d5f018aba2b0f$var$VALUE_TYPE_1D_ARRAY ? $d03d5f018aba2b0f$var$add1DArray([], kfs[i].value, startValue, -1) : $d03d5f018aba2b0f$var$add2DArray([], kfs[i].value, startValue, -1);
            }
        }
    };
    Track.prototype.step = function(target, percent) {
        if (this._finished) return;
        if (this._additiveTrack && this._additiveTrack._finished) this._additiveTrack = null;
        var isAdditive = this._additiveTrack != null;
        var valueKey = isAdditive ? "additiveValue" : "value";
        var valType = this.valType;
        var keyframes = this.keyframes;
        var kfsNum = keyframes.length;
        var propName = this.propName;
        var isValueColor = valType === $d03d5f018aba2b0f$var$VALUE_TYPE_COLOR;
        var frameIdx;
        var lastFrame = this._lastFr;
        var mathMin = Math.min;
        var frame;
        var nextFrame;
        if (kfsNum === 1) frame = nextFrame = keyframes[0];
        else {
            if (percent < 0) frameIdx = 0;
            else if (percent < this._lastFrP) {
                var start = mathMin(lastFrame + 1, kfsNum - 1);
                for(frameIdx = start; frameIdx >= 0; frameIdx--){
                    if (keyframes[frameIdx].percent <= percent) break;
                }
                frameIdx = mathMin(frameIdx, kfsNum - 2);
            } else {
                for(frameIdx = lastFrame; frameIdx < kfsNum; frameIdx++){
                    if (keyframes[frameIdx].percent > percent) break;
                }
                frameIdx = mathMin(frameIdx - 1, kfsNum - 2);
            }
            nextFrame = keyframes[frameIdx + 1];
            frame = keyframes[frameIdx];
        }
        if (!(frame && nextFrame)) return;
        this._lastFr = frameIdx;
        this._lastFrP = percent;
        var interval = nextFrame.percent - frame.percent;
        var w = interval === 0 ? 1 : mathMin((percent - frame.percent) / interval, 1);
        if (nextFrame.easingFunc) w = nextFrame.easingFunc(w);
        var targetArr = isAdditive ? this._additiveValue : isValueColor ? $d03d5f018aba2b0f$var$tmpRgba : target[propName];
        if (($d03d5f018aba2b0f$var$isArrayValueType(valType) || isValueColor) && !targetArr) targetArr = this._additiveValue = [];
        if (this.discrete) target[propName] = w < 1 ? frame.rawValue : nextFrame.rawValue;
        else if ($d03d5f018aba2b0f$var$isArrayValueType(valType)) valType === $d03d5f018aba2b0f$var$VALUE_TYPE_1D_ARRAY ? $d03d5f018aba2b0f$var$interpolate1DArray(targetArr, frame[valueKey], nextFrame[valueKey], w) : $d03d5f018aba2b0f$var$interpolate2DArray(targetArr, frame[valueKey], nextFrame[valueKey], w);
        else if ($d03d5f018aba2b0f$var$isGradientValueType(valType)) {
            var val = frame[valueKey];
            var nextVal_1 = nextFrame[valueKey];
            var isLinearGradient_1 = valType === $d03d5f018aba2b0f$var$VALUE_TYPE_LINEAR_GRADIENT;
            target[propName] = {
                type: isLinearGradient_1 ? "linear" : "radial",
                x: $d03d5f018aba2b0f$var$interpolateNumber(val.x, nextVal_1.x, w),
                y: $d03d5f018aba2b0f$var$interpolateNumber(val.y, nextVal_1.y, w),
                colorStops: (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(val.colorStops, function(colorStop, idx) {
                    var nextColorStop = nextVal_1.colorStops[idx];
                    return {
                        offset: $d03d5f018aba2b0f$var$interpolateNumber(colorStop.offset, nextColorStop.offset, w),
                        color: $d03d5f018aba2b0f$var$rgba2String($d03d5f018aba2b0f$var$interpolate1DArray([], colorStop.color, nextColorStop.color, w))
                    };
                }),
                global: nextVal_1.global
            };
            if (isLinearGradient_1) {
                target[propName].x2 = $d03d5f018aba2b0f$var$interpolateNumber(val.x2, nextVal_1.x2, w);
                target[propName].y2 = $d03d5f018aba2b0f$var$interpolateNumber(val.y2, nextVal_1.y2, w);
            } else target[propName].r = $d03d5f018aba2b0f$var$interpolateNumber(val.r, nextVal_1.r, w);
        } else if (isValueColor) {
            $d03d5f018aba2b0f$var$interpolate1DArray(targetArr, frame[valueKey], nextFrame[valueKey], w);
            if (!isAdditive) target[propName] = $d03d5f018aba2b0f$var$rgba2String(targetArr);
        } else {
            var value = $d03d5f018aba2b0f$var$interpolateNumber(frame[valueKey], nextFrame[valueKey], w);
            if (isAdditive) this._additiveValue = value;
            else target[propName] = value;
        }
        if (isAdditive) this._addToTarget(target);
    };
    Track.prototype._addToTarget = function(target) {
        var valType = this.valType;
        var propName = this.propName;
        var additiveValue = this._additiveValue;
        if (valType === $d03d5f018aba2b0f$var$VALUE_TYPE_NUMBER) target[propName] = target[propName] + additiveValue;
        else if (valType === $d03d5f018aba2b0f$var$VALUE_TYPE_COLOR) {
            $5373993605fe25d6$export$98e6a39c04603d36(target[propName], $d03d5f018aba2b0f$var$tmpRgba);
            $d03d5f018aba2b0f$var$add1DArray($d03d5f018aba2b0f$var$tmpRgba, $d03d5f018aba2b0f$var$tmpRgba, additiveValue, 1);
            target[propName] = $d03d5f018aba2b0f$var$rgba2String($d03d5f018aba2b0f$var$tmpRgba);
        } else if (valType === $d03d5f018aba2b0f$var$VALUE_TYPE_1D_ARRAY) $d03d5f018aba2b0f$var$add1DArray(target[propName], target[propName], additiveValue, 1);
        else if (valType === $d03d5f018aba2b0f$var$VALUE_TYPE_2D_ARRAY) $d03d5f018aba2b0f$var$add2DArray(target[propName], target[propName], additiveValue, 1);
    };
    return Track;
}();
var $d03d5f018aba2b0f$var$Animator = function() {
    function Animator(target, loop, allowDiscreteAnimation, additiveTo) {
        this._tracks = {};
        this._trackKeys = [];
        this._maxTime = 0;
        this._started = 0;
        this._clip = null;
        this._target = target;
        this._loop = loop;
        if (loop && additiveTo) {
            (0, $e44eb14c4271d0f9$export$58da9968c3170cb1)("Can' use additive animation on looped animation.");
            return;
        }
        this._additiveAnimators = additiveTo;
        this._allowDiscrete = allowDiscreteAnimation;
    }
    Animator.prototype.getMaxTime = function() {
        return this._maxTime;
    };
    Animator.prototype.getDelay = function() {
        return this._delay;
    };
    Animator.prototype.getLoop = function() {
        return this._loop;
    };
    Animator.prototype.getTarget = function() {
        return this._target;
    };
    Animator.prototype.changeTarget = function(target) {
        this._target = target;
    };
    Animator.prototype.when = function(time, props, easing) {
        return this.whenWithKeys(time, props, (0, $e44eb14c4271d0f9$export$ed97f33186d4b816)(props), easing);
    };
    Animator.prototype.whenWithKeys = function(time, props, propNames, easing) {
        var tracks = this._tracks;
        for(var i = 0; i < propNames.length; i++){
            var propName = propNames[i];
            var track = tracks[propName];
            if (!track) {
                track = tracks[propName] = new $d03d5f018aba2b0f$var$Track(propName);
                var initialValue = void 0;
                var additiveTrack = this._getAdditiveTrack(propName);
                if (additiveTrack) {
                    var addtiveTrackKfs = additiveTrack.keyframes;
                    var lastFinalKf = addtiveTrackKfs[addtiveTrackKfs.length - 1];
                    initialValue = lastFinalKf && lastFinalKf.value;
                    if (additiveTrack.valType === $d03d5f018aba2b0f$var$VALUE_TYPE_COLOR && initialValue) initialValue = $d03d5f018aba2b0f$var$rgba2String(initialValue);
                } else initialValue = this._target[propName];
                if (initialValue == null) continue;
                if (time > 0) track.addKeyframe(0, $d03d5f018aba2b0f$export$c5e92b7f105af84e(initialValue), easing);
                this._trackKeys.push(propName);
            }
            track.addKeyframe(time, $d03d5f018aba2b0f$export$c5e92b7f105af84e(props[propName]), easing);
        }
        this._maxTime = Math.max(this._maxTime, time);
        return this;
    };
    Animator.prototype.pause = function() {
        this._clip.pause();
        this._paused = true;
    };
    Animator.prototype.resume = function() {
        this._clip.resume();
        this._paused = false;
    };
    Animator.prototype.isPaused = function() {
        return !!this._paused;
    };
    Animator.prototype.duration = function(duration) {
        this._maxTime = duration;
        this._force = true;
        return this;
    };
    Animator.prototype._doneCallback = function() {
        this._setTracksFinished();
        this._clip = null;
        var doneList = this._doneCbs;
        if (doneList) {
            var len = doneList.length;
            for(var i = 0; i < len; i++)doneList[i].call(this);
        }
    };
    Animator.prototype._abortedCallback = function() {
        this._setTracksFinished();
        var animation = this.animation;
        var abortedList = this._abortedCbs;
        if (animation) animation.removeClip(this._clip);
        this._clip = null;
        if (abortedList) for(var i = 0; i < abortedList.length; i++)abortedList[i].call(this);
    };
    Animator.prototype._setTracksFinished = function() {
        var tracks = this._tracks;
        var tracksKeys = this._trackKeys;
        for(var i = 0; i < tracksKeys.length; i++)tracks[tracksKeys[i]].setFinished();
    };
    Animator.prototype._getAdditiveTrack = function(trackName) {
        var additiveTrack;
        var additiveAnimators = this._additiveAnimators;
        if (additiveAnimators) for(var i = 0; i < additiveAnimators.length; i++){
            var track = additiveAnimators[i].getTrack(trackName);
            if (track) additiveTrack = track;
        }
        return additiveTrack;
    };
    Animator.prototype.start = function(easing) {
        if (this._started > 0) return;
        this._started = 1;
        var self = this;
        var tracks = [];
        var maxTime = this._maxTime || 0;
        for(var i = 0; i < this._trackKeys.length; i++){
            var propName = this._trackKeys[i];
            var track = this._tracks[propName];
            var additiveTrack = this._getAdditiveTrack(propName);
            var kfs = track.keyframes;
            var kfsNum = kfs.length;
            track.prepare(maxTime, additiveTrack);
            if (track.needsAnimate()) {
                if (!this._allowDiscrete && track.discrete) {
                    var lastKf = kfs[kfsNum - 1];
                    if (lastKf) self._target[track.propName] = lastKf.rawValue;
                    track.setFinished();
                } else tracks.push(track);
            }
        }
        if (tracks.length || this._force) {
            var clip = new (0, $f23cfe6325cf4308$export$2e2bcd8739ae039)({
                life: maxTime,
                loop: this._loop,
                delay: this._delay || 0,
                onframe: function(percent) {
                    self._started = 2;
                    var additiveAnimators = self._additiveAnimators;
                    if (additiveAnimators) {
                        var stillHasAdditiveAnimator = false;
                        for(var i = 0; i < additiveAnimators.length; i++)if (additiveAnimators[i]._clip) {
                            stillHasAdditiveAnimator = true;
                            break;
                        }
                        if (!stillHasAdditiveAnimator) self._additiveAnimators = null;
                    }
                    for(var i = 0; i < tracks.length; i++)tracks[i].step(self._target, percent);
                    var onframeList = self._onframeCbs;
                    if (onframeList) for(var i = 0; i < onframeList.length; i++)onframeList[i](self._target, percent);
                },
                ondestroy: function() {
                    self._doneCallback();
                }
            });
            this._clip = clip;
            if (this.animation) this.animation.addClip(clip);
            if (easing) clip.setEasing(easing);
        } else this._doneCallback();
        return this;
    };
    Animator.prototype.stop = function(forwardToLast) {
        if (!this._clip) return;
        var clip = this._clip;
        if (forwardToLast) clip.onframe(1);
        this._abortedCallback();
    };
    Animator.prototype.delay = function(time) {
        this._delay = time;
        return this;
    };
    Animator.prototype.during = function(cb) {
        if (cb) {
            if (!this._onframeCbs) this._onframeCbs = [];
            this._onframeCbs.push(cb);
        }
        return this;
    };
    Animator.prototype.done = function(cb) {
        if (cb) {
            if (!this._doneCbs) this._doneCbs = [];
            this._doneCbs.push(cb);
        }
        return this;
    };
    Animator.prototype.aborted = function(cb) {
        if (cb) {
            if (!this._abortedCbs) this._abortedCbs = [];
            this._abortedCbs.push(cb);
        }
        return this;
    };
    Animator.prototype.getClip = function() {
        return this._clip;
    };
    Animator.prototype.getTrack = function(propName) {
        return this._tracks[propName];
    };
    Animator.prototype.getTracks = function() {
        var _this = this;
        return (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(this._trackKeys, function(key) {
            return _this._tracks[key];
        });
    };
    Animator.prototype.stopTracks = function(propNames, forwardToLast) {
        if (!propNames.length || !this._clip) return true;
        var tracks = this._tracks;
        var tracksKeys = this._trackKeys;
        for(var i = 0; i < propNames.length; i++){
            var track = tracks[propNames[i]];
            if (track && !track.isFinished()) {
                if (forwardToLast) track.step(this._target, 1);
                else if (this._started === 1) track.step(this._target, 0);
                track.setFinished();
            }
        }
        var allAborted = true;
        for(var i = 0; i < tracksKeys.length; i++)if (!tracks[tracksKeys[i]].isFinished()) {
            allAborted = false;
            break;
        }
        if (allAborted) this._abortedCallback();
        return allAborted;
    };
    Animator.prototype.saveTo = function(target, trackKeys, firstOrLast) {
        if (!target) return;
        trackKeys = trackKeys || this._trackKeys;
        for(var i = 0; i < trackKeys.length; i++){
            var propName = trackKeys[i];
            var track = this._tracks[propName];
            if (!track || track.isFinished()) continue;
            var kfs = track.keyframes;
            var kf = kfs[firstOrLast ? 0 : kfs.length - 1];
            if (kf) target[propName] = $d03d5f018aba2b0f$export$c5e92b7f105af84e(kf.rawValue);
        }
    };
    Animator.prototype.__changeFinalValue = function(finalProps, trackKeys) {
        trackKeys = trackKeys || (0, $e44eb14c4271d0f9$export$ed97f33186d4b816)(finalProps);
        for(var i = 0; i < trackKeys.length; i++){
            var propName = trackKeys[i];
            var track = this._tracks[propName];
            if (!track) continue;
            var kfs = track.keyframes;
            if (kfs.length > 1) {
                var lastKf = kfs.pop();
                track.addKeyframe(lastKf.time, finalProps[propName]);
                track.prepare(this._maxTime, track.getAdditiveTrack());
            }
        }
    };
    return Animator;
}();
var $d03d5f018aba2b0f$export$2e2bcd8739ae039 = $d03d5f018aba2b0f$var$Animator;


function $f7d782223a765565$export$1428f42a7de81803() {
    return new Date().getTime();
}
var $f7d782223a765565$var$Animation = function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(Animation, _super);
    function Animation(opts) {
        var _this = _super.call(this) || this;
        _this._running = false;
        _this._time = 0;
        _this._pausedTime = 0;
        _this._pauseStart = 0;
        _this._paused = false;
        opts = opts || {};
        _this.stage = opts.stage || {};
        return _this;
    }
    Animation.prototype.addClip = function(clip) {
        if (clip.animation) this.removeClip(clip);
        if (!this._head) this._head = this._tail = clip;
        else {
            this._tail.next = clip;
            clip.prev = this._tail;
            clip.next = null;
            this._tail = clip;
        }
        clip.animation = this;
    };
    Animation.prototype.addAnimator = function(animator) {
        animator.animation = this;
        var clip = animator.getClip();
        if (clip) this.addClip(clip);
    };
    Animation.prototype.removeClip = function(clip) {
        if (!clip.animation) return;
        var prev = clip.prev;
        var next = clip.next;
        if (prev) prev.next = next;
        else this._head = next;
        if (next) next.prev = prev;
        else this._tail = prev;
        clip.next = clip.prev = clip.animation = null;
    };
    Animation.prototype.removeAnimator = function(animator) {
        var clip = animator.getClip();
        if (clip) this.removeClip(clip);
        animator.animation = null;
    };
    Animation.prototype.update = function(notTriggerFrameAndStageUpdate) {
        var time = $f7d782223a765565$export$1428f42a7de81803() - this._pausedTime;
        var delta = time - this._time;
        var clip = this._head;
        while(clip){
            var nextClip = clip.next;
            var finished = clip.step(time, delta);
            if (finished) {
                clip.ondestroy();
                this.removeClip(clip);
                clip = nextClip;
            } else clip = nextClip;
        }
        this._time = time;
        if (!notTriggerFrameAndStageUpdate) {
            this.trigger("frame", delta);
            this.stage.update && this.stage.update();
        }
    };
    Animation.prototype._startLoop = function() {
        var self = this;
        this._running = true;
        function step() {
            if (self._running) {
                (0, $c6d80931a907d00a$export$2e2bcd8739ae039)(step);
                !self._paused && self.update();
            }
        }
        (0, $c6d80931a907d00a$export$2e2bcd8739ae039)(step);
    };
    Animation.prototype.start = function() {
        if (this._running) return;
        this._time = $f7d782223a765565$export$1428f42a7de81803();
        this._pausedTime = 0;
        this._startLoop();
    };
    Animation.prototype.stop = function() {
        this._running = false;
    };
    Animation.prototype.pause = function() {
        if (!this._paused) {
            this._pauseStart = $f7d782223a765565$export$1428f42a7de81803();
            this._paused = true;
        }
    };
    Animation.prototype.resume = function() {
        if (this._paused) {
            this._pausedTime += $f7d782223a765565$export$1428f42a7de81803() - this._pauseStart;
            this._paused = false;
        }
    };
    Animation.prototype.clear = function() {
        var clip = this._head;
        while(clip){
            var nextClip = clip.next;
            clip.prev = clip.next = clip.animation = null;
            clip = nextClip;
        }
        this._head = this._tail = null;
    };
    Animation.prototype.isFinished = function() {
        return this._head == null;
    };
    Animation.prototype.animate = function(target, options) {
        options = options || {};
        this.start();
        var animator = new (0, $d03d5f018aba2b0f$export$2e2bcd8739ae039)(target, options.loop);
        this.addAnimator(animator);
        return animator;
    };
    return Animation;
}((0, $a2a21788c772d0fe$export$2e2bcd8739ae039));
var $f7d782223a765565$export$2e2bcd8739ae039 = $f7d782223a765565$var$Animation;







var $fc18d2be4c4380ac$var$TOUCH_CLICK_DELAY = 300;
var $fc18d2be4c4380ac$var$globalEventSupported = (0, $de9e931273a116c1$export$2e2bcd8739ae039).domSupported;
var $fc18d2be4c4380ac$var$localNativeListenerNames = function() {
    var mouseHandlerNames = [
        "click",
        "dblclick",
        "mousewheel",
        "wheel",
        "mouseout",
        "mouseup",
        "mousedown",
        "mousemove",
        "contextmenu"
    ];
    var touchHandlerNames = [
        "touchstart",
        "touchend",
        "touchmove"
    ];
    var pointerEventNameMap = {
        pointerdown: 1,
        pointerup: 1,
        pointermove: 1,
        pointerout: 1
    };
    var pointerHandlerNames = $e44eb14c4271d0f9$export$871de8747c9eaa88(mouseHandlerNames, function(name) {
        var nm = name.replace("mouse", "pointer");
        return pointerEventNameMap.hasOwnProperty(nm) ? nm : name;
    });
    return {
        mouse: mouseHandlerNames,
        touch: touchHandlerNames,
        pointer: pointerHandlerNames
    };
}();
var $fc18d2be4c4380ac$var$globalNativeListenerNames = {
    mouse: [
        "mousemove",
        "mouseup"
    ],
    pointer: [
        "pointermove",
        "pointerup"
    ]
};
var $fc18d2be4c4380ac$var$wheelEventSupported = false;
function $fc18d2be4c4380ac$var$isPointerFromTouch(event) {
    var pointerType = event.pointerType;
    return pointerType === "pen" || pointerType === "touch";
}
function $fc18d2be4c4380ac$var$setTouchTimer(scope) {
    scope.touching = true;
    if (scope.touchTimer != null) {
        clearTimeout(scope.touchTimer);
        scope.touchTimer = null;
    }
    scope.touchTimer = setTimeout(function() {
        scope.touching = false;
        scope.touchTimer = null;
    }, 700);
}
function $fc18d2be4c4380ac$var$markTouch(event) {
    event && (event.zrByTouch = true);
}
function $fc18d2be4c4380ac$var$normalizeGlobalEvent(instance, event) {
    return (0, $81f76356654e394a$export$40fadb093aebad71)(instance.dom, new $fc18d2be4c4380ac$var$FakeGlobalEvent(instance, event), true);
}
function $fc18d2be4c4380ac$var$isLocalEl(instance, el) {
    var elTmp = el;
    var isLocal = false;
    while(elTmp && elTmp.nodeType !== 9 && !(isLocal = elTmp.domBelongToZr || elTmp !== el && elTmp === instance.painterRoot))elTmp = elTmp.parentNode;
    return isLocal;
}
var $fc18d2be4c4380ac$var$FakeGlobalEvent = function() {
    function FakeGlobalEvent(instance, event) {
        this.stopPropagation = $e44eb14c4271d0f9$export$8793edee2d425525;
        this.stopImmediatePropagation = $e44eb14c4271d0f9$export$8793edee2d425525;
        this.preventDefault = $e44eb14c4271d0f9$export$8793edee2d425525;
        this.type = event.type;
        this.target = this.currentTarget = instance.dom;
        this.pointerType = event.pointerType;
        this.clientX = event.clientX;
        this.clientY = event.clientY;
    }
    return FakeGlobalEvent;
}();
var $fc18d2be4c4380ac$var$localDOMHandlers = {
    mousedown: function(event) {
        event = (0, $81f76356654e394a$export$40fadb093aebad71)(this.dom, event);
        this.__mayPointerCapture = [
            event.zrX,
            event.zrY
        ];
        this.trigger("mousedown", event);
    },
    mousemove: function(event) {
        event = (0, $81f76356654e394a$export$40fadb093aebad71)(this.dom, event);
        var downPoint = this.__mayPointerCapture;
        if (downPoint && (event.zrX !== downPoint[0] || event.zrY !== downPoint[1])) this.__togglePointerCapture(true);
        this.trigger("mousemove", event);
    },
    mouseup: function(event) {
        event = (0, $81f76356654e394a$export$40fadb093aebad71)(this.dom, event);
        this.__togglePointerCapture(false);
        this.trigger("mouseup", event);
    },
    mouseout: function(event) {
        event = (0, $81f76356654e394a$export$40fadb093aebad71)(this.dom, event);
        var element = event.toElement || event.relatedTarget;
        if (!$fc18d2be4c4380ac$var$isLocalEl(this, element)) {
            if (this.__pointerCapturing) event.zrEventControl = "no_globalout";
            this.trigger("mouseout", event);
        }
    },
    wheel: function(event) {
        $fc18d2be4c4380ac$var$wheelEventSupported = true;
        event = (0, $81f76356654e394a$export$40fadb093aebad71)(this.dom, event);
        this.trigger("mousewheel", event);
    },
    mousewheel: function(event) {
        if ($fc18d2be4c4380ac$var$wheelEventSupported) return;
        event = (0, $81f76356654e394a$export$40fadb093aebad71)(this.dom, event);
        this.trigger("mousewheel", event);
    },
    touchstart: function(event) {
        event = (0, $81f76356654e394a$export$40fadb093aebad71)(this.dom, event);
        $fc18d2be4c4380ac$var$markTouch(event);
        this.__lastTouchMoment = new Date();
        this.handler.processGesture(event, "start");
        $fc18d2be4c4380ac$var$localDOMHandlers.mousemove.call(this, event);
        $fc18d2be4c4380ac$var$localDOMHandlers.mousedown.call(this, event);
    },
    touchmove: function(event) {
        event = (0, $81f76356654e394a$export$40fadb093aebad71)(this.dom, event);
        $fc18d2be4c4380ac$var$markTouch(event);
        this.handler.processGesture(event, "change");
        $fc18d2be4c4380ac$var$localDOMHandlers.mousemove.call(this, event);
    },
    touchend: function(event) {
        event = (0, $81f76356654e394a$export$40fadb093aebad71)(this.dom, event);
        $fc18d2be4c4380ac$var$markTouch(event);
        this.handler.processGesture(event, "end");
        $fc18d2be4c4380ac$var$localDOMHandlers.mouseup.call(this, event);
        if (+new Date() - +this.__lastTouchMoment < $fc18d2be4c4380ac$var$TOUCH_CLICK_DELAY) $fc18d2be4c4380ac$var$localDOMHandlers.click.call(this, event);
    },
    pointerdown: function(event) {
        $fc18d2be4c4380ac$var$localDOMHandlers.mousedown.call(this, event);
    },
    pointermove: function(event) {
        if (!$fc18d2be4c4380ac$var$isPointerFromTouch(event)) $fc18d2be4c4380ac$var$localDOMHandlers.mousemove.call(this, event);
    },
    pointerup: function(event) {
        $fc18d2be4c4380ac$var$localDOMHandlers.mouseup.call(this, event);
    },
    pointerout: function(event) {
        if (!$fc18d2be4c4380ac$var$isPointerFromTouch(event)) $fc18d2be4c4380ac$var$localDOMHandlers.mouseout.call(this, event);
    }
};
$e44eb14c4271d0f9$export$79b2f7037acddd43([
    "click",
    "dblclick",
    "contextmenu"
], function(name) {
    $fc18d2be4c4380ac$var$localDOMHandlers[name] = function(event) {
        event = (0, $81f76356654e394a$export$40fadb093aebad71)(this.dom, event);
        this.trigger(name, event);
    };
});
var $fc18d2be4c4380ac$var$globalDOMHandlers = {
    pointermove: function(event) {
        if (!$fc18d2be4c4380ac$var$isPointerFromTouch(event)) $fc18d2be4c4380ac$var$globalDOMHandlers.mousemove.call(this, event);
    },
    pointerup: function(event) {
        $fc18d2be4c4380ac$var$globalDOMHandlers.mouseup.call(this, event);
    },
    mousemove: function(event) {
        this.trigger("mousemove", event);
    },
    mouseup: function(event) {
        var pointerCaptureReleasing = this.__pointerCapturing;
        this.__togglePointerCapture(false);
        this.trigger("mouseup", event);
        if (pointerCaptureReleasing) {
            event.zrEventControl = "only_globalout";
            this.trigger("mouseout", event);
        }
    }
};
function $fc18d2be4c4380ac$var$mountLocalDOMEventListeners(instance, scope) {
    var domHandlers = scope.domHandlers;
    if ((0, $de9e931273a116c1$export$2e2bcd8739ae039).pointerEventsSupported) $e44eb14c4271d0f9$export$79b2f7037acddd43($fc18d2be4c4380ac$var$localNativeListenerNames.pointer, function(nativeEventName) {
        $fc18d2be4c4380ac$var$mountSingleDOMEventListener(scope, nativeEventName, function(event) {
            domHandlers[nativeEventName].call(instance, event);
        });
    });
    else {
        if ((0, $de9e931273a116c1$export$2e2bcd8739ae039).touchEventsSupported) $e44eb14c4271d0f9$export$79b2f7037acddd43($fc18d2be4c4380ac$var$localNativeListenerNames.touch, function(nativeEventName) {
            $fc18d2be4c4380ac$var$mountSingleDOMEventListener(scope, nativeEventName, function(event) {
                domHandlers[nativeEventName].call(instance, event);
                $fc18d2be4c4380ac$var$setTouchTimer(scope);
            });
        });
        $e44eb14c4271d0f9$export$79b2f7037acddd43($fc18d2be4c4380ac$var$localNativeListenerNames.mouse, function(nativeEventName) {
            $fc18d2be4c4380ac$var$mountSingleDOMEventListener(scope, nativeEventName, function(event) {
                event = (0, $81f76356654e394a$export$4abe0e945399ac1d)(event);
                if (!scope.touching) domHandlers[nativeEventName].call(instance, event);
            });
        });
    }
}
function $fc18d2be4c4380ac$var$mountGlobalDOMEventListeners(instance, scope) {
    if ((0, $de9e931273a116c1$export$2e2bcd8739ae039).pointerEventsSupported) $e44eb14c4271d0f9$export$79b2f7037acddd43($fc18d2be4c4380ac$var$globalNativeListenerNames.pointer, mount);
    else if (!(0, $de9e931273a116c1$export$2e2bcd8739ae039).touchEventsSupported) $e44eb14c4271d0f9$export$79b2f7037acddd43($fc18d2be4c4380ac$var$globalNativeListenerNames.mouse, mount);
    function mount(nativeEventName) {
        function nativeEventListener(event) {
            event = (0, $81f76356654e394a$export$4abe0e945399ac1d)(event);
            if (!$fc18d2be4c4380ac$var$isLocalEl(instance, event.target)) {
                event = $fc18d2be4c4380ac$var$normalizeGlobalEvent(instance, event);
                scope.domHandlers[nativeEventName].call(instance, event);
            }
        }
        $fc18d2be4c4380ac$var$mountSingleDOMEventListener(scope, nativeEventName, nativeEventListener, {
            capture: true
        });
    }
}
function $fc18d2be4c4380ac$var$mountSingleDOMEventListener(scope, nativeEventName, listener, opt) {
    scope.mounted[nativeEventName] = listener;
    scope.listenerOpts[nativeEventName] = opt;
    (0, $81f76356654e394a$export$3f65cefe8380dbea)(scope.domTarget, nativeEventName, listener, opt);
}
function $fc18d2be4c4380ac$var$unmountDOMEventListeners(scope) {
    var mounted = scope.mounted;
    for(var nativeEventName in mounted)if (mounted.hasOwnProperty(nativeEventName)) (0, $81f76356654e394a$export$8ff9f68337b520c0)(scope.domTarget, nativeEventName, mounted[nativeEventName], scope.listenerOpts[nativeEventName]);
    scope.mounted = {};
}
var $fc18d2be4c4380ac$var$DOMHandlerScope = function() {
    function DOMHandlerScope(domTarget, domHandlers) {
        this.mounted = {};
        this.listenerOpts = {};
        this.touching = false;
        this.domTarget = domTarget;
        this.domHandlers = domHandlers;
    }
    return DOMHandlerScope;
}();
var $fc18d2be4c4380ac$var$HandlerDomProxy = function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(HandlerDomProxy, _super);
    function HandlerDomProxy(dom, painterRoot) {
        var _this = _super.call(this) || this;
        _this.__pointerCapturing = false;
        _this.dom = dom;
        _this.painterRoot = painterRoot;
        _this._localHandlerScope = new $fc18d2be4c4380ac$var$DOMHandlerScope(dom, $fc18d2be4c4380ac$var$localDOMHandlers);
        if ($fc18d2be4c4380ac$var$globalEventSupported) _this._globalHandlerScope = new $fc18d2be4c4380ac$var$DOMHandlerScope(document, $fc18d2be4c4380ac$var$globalDOMHandlers);
        $fc18d2be4c4380ac$var$mountLocalDOMEventListeners(_this, _this._localHandlerScope);
        return _this;
    }
    HandlerDomProxy.prototype.dispose = function() {
        $fc18d2be4c4380ac$var$unmountDOMEventListeners(this._localHandlerScope);
        if ($fc18d2be4c4380ac$var$globalEventSupported) $fc18d2be4c4380ac$var$unmountDOMEventListeners(this._globalHandlerScope);
    };
    HandlerDomProxy.prototype.setCursor = function(cursorStyle) {
        this.dom.style && (this.dom.style.cursor = cursorStyle || "default");
    };
    HandlerDomProxy.prototype.__togglePointerCapture = function(isPointerCapturing) {
        this.__mayPointerCapture = null;
        if ($fc18d2be4c4380ac$var$globalEventSupported && +this.__pointerCapturing ^ +isPointerCapturing) {
            this.__pointerCapturing = isPointerCapturing;
            var globalHandlerScope = this._globalHandlerScope;
            isPointerCapturing ? $fc18d2be4c4380ac$var$mountGlobalDOMEventListeners(this, globalHandlerScope) : $fc18d2be4c4380ac$var$unmountDOMEventListeners(globalHandlerScope);
        }
    };
    return HandlerDomProxy;
}((0, $a2a21788c772d0fe$export$2e2bcd8739ae039));
var $fc18d2be4c4380ac$export$2e2bcd8739ae039 = $fc18d2be4c4380ac$var$HandlerDomProxy;




var $a9c042e5e4c73c13$var$dpr = 1;
if ((0, $de9e931273a116c1$export$2e2bcd8739ae039).hasGlobalWindow) $a9c042e5e4c73c13$var$dpr = Math.max(window.devicePixelRatio || window.screen && window.screen.deviceXDPI / window.screen.logicalXDPI || 1, 1);
var $a9c042e5e4c73c13$export$7cdcde344c85339c = 0;
var $a9c042e5e4c73c13$export$508f096bfcdaac40 = $a9c042e5e4c73c13$var$dpr;
var $a9c042e5e4c73c13$export$fd81e7ebc7dae256 = 0.4;
var $a9c042e5e4c73c13$export$f8ce94761f39398d = "#333";
var $a9c042e5e4c73c13$export$3c6e95f318c8369b = "#ccc";
var $a9c042e5e4c73c13$export$27682248795c3c6b = "#eee";






var $039fe2b24eabe4b4$var$mIdentity = $27fca49e20b3ee21$export$f0954fd7d5368655;
var $039fe2b24eabe4b4$var$EPSILON = 5e-5;
function $039fe2b24eabe4b4$var$isNotAroundZero(val) {
    return val > $039fe2b24eabe4b4$var$EPSILON || val < -$039fe2b24eabe4b4$var$EPSILON;
}
var $039fe2b24eabe4b4$var$scaleTmp = [];
var $039fe2b24eabe4b4$var$tmpTransform = [];
var $039fe2b24eabe4b4$var$originTransform = $27fca49e20b3ee21$export$185802fd694ee1f5();
var $039fe2b24eabe4b4$var$abs = Math.abs;
var $039fe2b24eabe4b4$var$Transformable = function() {
    function Transformable() {}
    Transformable.prototype.getLocalTransform = function(m) {
        return Transformable.getLocalTransform(this, m);
    };
    Transformable.prototype.setPosition = function(arr) {
        this.x = arr[0];
        this.y = arr[1];
    };
    Transformable.prototype.setScale = function(arr) {
        this.scaleX = arr[0];
        this.scaleY = arr[1];
    };
    Transformable.prototype.setSkew = function(arr) {
        this.skewX = arr[0];
        this.skewY = arr[1];
    };
    Transformable.prototype.setOrigin = function(arr) {
        this.originX = arr[0];
        this.originY = arr[1];
    };
    Transformable.prototype.needLocalTransform = function() {
        return $039fe2b24eabe4b4$var$isNotAroundZero(this.rotation) || $039fe2b24eabe4b4$var$isNotAroundZero(this.x) || $039fe2b24eabe4b4$var$isNotAroundZero(this.y) || $039fe2b24eabe4b4$var$isNotAroundZero(this.scaleX - 1) || $039fe2b24eabe4b4$var$isNotAroundZero(this.scaleY - 1) || $039fe2b24eabe4b4$var$isNotAroundZero(this.skewX) || $039fe2b24eabe4b4$var$isNotAroundZero(this.skewY);
    };
    Transformable.prototype.updateTransform = function() {
        var parentTransform = this.parent && this.parent.transform;
        var needLocalTransform = this.needLocalTransform();
        var m = this.transform;
        if (!(needLocalTransform || parentTransform)) {
            if (m) {
                $039fe2b24eabe4b4$var$mIdentity(m);
                this.invTransform = null;
            }
            return;
        }
        m = m || $27fca49e20b3ee21$export$185802fd694ee1f5();
        if (needLocalTransform) this.getLocalTransform(m);
        else $039fe2b24eabe4b4$var$mIdentity(m);
        if (parentTransform) {
            if (needLocalTransform) $27fca49e20b3ee21$export$6e3a27864ab166fe(m, parentTransform, m);
            else $27fca49e20b3ee21$export$784d13d8ee351f07(m, parentTransform);
        }
        this.transform = m;
        this._resolveGlobalScaleRatio(m);
    };
    Transformable.prototype._resolveGlobalScaleRatio = function(m) {
        var globalScaleRatio = this.globalScaleRatio;
        if (globalScaleRatio != null && globalScaleRatio !== 1) {
            this.getGlobalScale($039fe2b24eabe4b4$var$scaleTmp);
            var relX = $039fe2b24eabe4b4$var$scaleTmp[0] < 0 ? -1 : 1;
            var relY = $039fe2b24eabe4b4$var$scaleTmp[1] < 0 ? -1 : 1;
            var sx = (($039fe2b24eabe4b4$var$scaleTmp[0] - relX) * globalScaleRatio + relX) / $039fe2b24eabe4b4$var$scaleTmp[0] || 0;
            var sy = (($039fe2b24eabe4b4$var$scaleTmp[1] - relY) * globalScaleRatio + relY) / $039fe2b24eabe4b4$var$scaleTmp[1] || 0;
            m[0] *= sx;
            m[1] *= sx;
            m[2] *= sy;
            m[3] *= sy;
        }
        this.invTransform = this.invTransform || $27fca49e20b3ee21$export$185802fd694ee1f5();
        $27fca49e20b3ee21$export$6897c284b6f9f4dc(this.invTransform, m);
    };
    Transformable.prototype.getComputedTransform = function() {
        var transformNode = this;
        var ancestors = [];
        while(transformNode){
            ancestors.push(transformNode);
            transformNode = transformNode.parent;
        }
        while(transformNode = ancestors.pop())transformNode.updateTransform();
        return this.transform;
    };
    Transformable.prototype.setLocalTransform = function(m) {
        if (!m) return;
        var sx = m[0] * m[0] + m[1] * m[1];
        var sy = m[2] * m[2] + m[3] * m[3];
        var rotation = Math.atan2(m[1], m[0]);
        var shearX = Math.PI / 2 + rotation - Math.atan2(m[3], m[2]);
        sy = Math.sqrt(sy) * Math.cos(shearX);
        sx = Math.sqrt(sx);
        this.skewX = shearX;
        this.skewY = 0;
        this.rotation = -rotation;
        this.x = +m[4];
        this.y = +m[5];
        this.scaleX = sx;
        this.scaleY = sy;
        this.originX = 0;
        this.originY = 0;
    };
    Transformable.prototype.decomposeTransform = function() {
        if (!this.transform) return;
        var parent = this.parent;
        var m = this.transform;
        if (parent && parent.transform) {
            parent.invTransform = parent.invTransform || $27fca49e20b3ee21$export$185802fd694ee1f5();
            $27fca49e20b3ee21$export$6e3a27864ab166fe($039fe2b24eabe4b4$var$tmpTransform, parent.invTransform, m);
            m = $039fe2b24eabe4b4$var$tmpTransform;
        }
        var ox = this.originX;
        var oy = this.originY;
        if (ox || oy) {
            $039fe2b24eabe4b4$var$originTransform[4] = ox;
            $039fe2b24eabe4b4$var$originTransform[5] = oy;
            $27fca49e20b3ee21$export$6e3a27864ab166fe($039fe2b24eabe4b4$var$tmpTransform, m, $039fe2b24eabe4b4$var$originTransform);
            $039fe2b24eabe4b4$var$tmpTransform[4] -= ox;
            $039fe2b24eabe4b4$var$tmpTransform[5] -= oy;
            m = $039fe2b24eabe4b4$var$tmpTransform;
        }
        this.setLocalTransform(m);
    };
    Transformable.prototype.getGlobalScale = function(out) {
        var m = this.transform;
        out = out || [];
        if (!m) {
            out[0] = 1;
            out[1] = 1;
            return out;
        }
        out[0] = Math.sqrt(m[0] * m[0] + m[1] * m[1]);
        out[1] = Math.sqrt(m[2] * m[2] + m[3] * m[3]);
        if (m[0] < 0) out[0] = -out[0];
        if (m[3] < 0) out[1] = -out[1];
        return out;
    };
    Transformable.prototype.transformCoordToLocal = function(x, y) {
        var v2 = [
            x,
            y
        ];
        var invTransform = this.invTransform;
        if (invTransform) $187eb1bf1a49fd34$export$9f9dcb98c894b623(v2, v2, invTransform);
        return v2;
    };
    Transformable.prototype.transformCoordToGlobal = function(x, y) {
        var v2 = [
            x,
            y
        ];
        var transform = this.transform;
        if (transform) $187eb1bf1a49fd34$export$9f9dcb98c894b623(v2, v2, transform);
        return v2;
    };
    Transformable.prototype.getLineScale = function() {
        var m = this.transform;
        return m && $039fe2b24eabe4b4$var$abs(m[0] - 1) > 1e-10 && $039fe2b24eabe4b4$var$abs(m[3] - 1) > 1e-10 ? Math.sqrt($039fe2b24eabe4b4$var$abs(m[0] * m[3] - m[2] * m[1])) : 1;
    };
    Transformable.prototype.copyTransform = function(source) {
        $039fe2b24eabe4b4$export$234b1c16dfa57d6a(this, source);
    };
    Transformable.getLocalTransform = function(target, m) {
        m = m || [];
        var ox = target.originX || 0;
        var oy = target.originY || 0;
        var sx = target.scaleX;
        var sy = target.scaleY;
        var ax = target.anchorX;
        var ay = target.anchorY;
        var rotation = target.rotation || 0;
        var x = target.x;
        var y = target.y;
        var skewX = target.skewX ? Math.tan(target.skewX) : 0;
        var skewY = target.skewY ? Math.tan(-target.skewY) : 0;
        if (ox || oy || ax || ay) {
            var dx = ox + ax;
            var dy = oy + ay;
            m[4] = -dx * sx - skewX * dy * sy;
            m[5] = -dy * sy - skewY * dx * sx;
        } else m[4] = m[5] = 0;
        m[0] = sx;
        m[3] = sy;
        m[1] = skewY * sx;
        m[2] = skewX * sy;
        rotation && $27fca49e20b3ee21$export$bb628a54ab399bc9(m, m, rotation);
        m[4] += ox + x;
        m[5] += oy + y;
        return m;
    };
    Transformable.initDefaultProps = function() {
        var proto = Transformable.prototype;
        proto.scaleX = proto.scaleY = proto.globalScaleRatio = 1;
        proto.x = proto.y = proto.originX = proto.originY = proto.skewX = proto.skewY = proto.rotation = proto.anchorX = proto.anchorY = 0;
    }();
    return Transformable;
}();
var $039fe2b24eabe4b4$export$98ab6203ec3396e2 = [
    "x",
    "y",
    "originX",
    "originY",
    "anchorX",
    "anchorY",
    "rotation",
    "scaleX",
    "scaleY",
    "skewX",
    "skewY"
];
function $039fe2b24eabe4b4$export$234b1c16dfa57d6a(target, source) {
    for(var i = 0; i < $039fe2b24eabe4b4$export$98ab6203ec3396e2.length; i++){
        var propName = $039fe2b24eabe4b4$export$98ab6203ec3396e2[i];
        target[propName] = source[propName];
    }
}
var $039fe2b24eabe4b4$export$2e2bcd8739ae039 = $039fe2b24eabe4b4$var$Transformable;








var $1a2563e7d7856dd8$var$textWidthCache = {};
function $1a2563e7d7856dd8$export$3c49c185de0c2bfc(text, font) {
    font = font || (0, $c7ef4e2442c05203$export$7d7a232b6d2cc80c);
    var cacheOfFont = $1a2563e7d7856dd8$var$textWidthCache[font];
    if (!cacheOfFont) cacheOfFont = $1a2563e7d7856dd8$var$textWidthCache[font] = new (0, $46a227aab1eccb53$export$2e2bcd8739ae039)(500);
    var width = cacheOfFont.get(text);
    if (width == null) {
        width = (0, $c7ef4e2442c05203$export$ef5e599365494451).measureText(text, font).width;
        cacheOfFont.put(text, width);
    }
    return width;
}
function $1a2563e7d7856dd8$export$85aabf24202fbe9b(text, font, textAlign, textBaseline) {
    var width = $1a2563e7d7856dd8$export$3c49c185de0c2bfc(text, font);
    var height = $1a2563e7d7856dd8$export$56204a27a2958a55(font);
    var x = $1a2563e7d7856dd8$export$eb5a525ef00ef9a4(0, width, textAlign);
    var y = $1a2563e7d7856dd8$export$bf7d6802d2badd9(0, height, textBaseline);
    var rect = new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)(x, y, width, height);
    return rect;
}
function $1a2563e7d7856dd8$export$c381147bfed79d9f(text, font, textAlign, textBaseline) {
    var textLines = ((text || "") + "").split("\n");
    var len = textLines.length;
    if (len === 1) return $1a2563e7d7856dd8$export$85aabf24202fbe9b(textLines[0], font, textAlign, textBaseline);
    else {
        var uniondRect = new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)(0, 0, 0, 0);
        for(var i = 0; i < textLines.length; i++){
            var rect = $1a2563e7d7856dd8$export$85aabf24202fbe9b(textLines[i], font, textAlign, textBaseline);
            i === 0 ? uniondRect.copy(rect) : uniondRect.union(rect);
        }
        return uniondRect;
    }
}
function $1a2563e7d7856dd8$export$eb5a525ef00ef9a4(x, width, textAlign) {
    if (textAlign === "right") x -= width;
    else if (textAlign === "center") x -= width / 2;
    return x;
}
function $1a2563e7d7856dd8$export$bf7d6802d2badd9(y, height, verticalAlign) {
    if (verticalAlign === "middle") y -= height / 2;
    else if (verticalAlign === "bottom") y -= height;
    return y;
}
function $1a2563e7d7856dd8$export$56204a27a2958a55(font) {
    return $1a2563e7d7856dd8$export$3c49c185de0c2bfc("\u56FD", font);
}
function $1a2563e7d7856dd8$export$866cc30a33805630(text, font) {
    return (0, $c7ef4e2442c05203$export$ef5e599365494451).measureText(text, font);
}
function $1a2563e7d7856dd8$export$e8514cb5a5e2b40f(value, maxValue) {
    if (typeof value === "string") {
        if (value.lastIndexOf("%") >= 0) return parseFloat(value) / 100 * maxValue;
        return parseFloat(value);
    }
    return value;
}
function $1a2563e7d7856dd8$export$eee3603b512feab7(out, opts, rect) {
    var textPosition = opts.position || "inside";
    var distance = opts.distance != null ? opts.distance : 5;
    var height = rect.height;
    var width = rect.width;
    var halfHeight = height / 2;
    var x = rect.x;
    var y = rect.y;
    var textAlign = "left";
    var textVerticalAlign = "top";
    if (textPosition instanceof Array) {
        x += $1a2563e7d7856dd8$export$e8514cb5a5e2b40f(textPosition[0], rect.width);
        y += $1a2563e7d7856dd8$export$e8514cb5a5e2b40f(textPosition[1], rect.height);
        textAlign = null;
        textVerticalAlign = null;
    } else switch(textPosition){
        case "left":
            x -= distance;
            y += halfHeight;
            textAlign = "right";
            textVerticalAlign = "middle";
            break;
        case "right":
            x += distance + width;
            y += halfHeight;
            textVerticalAlign = "middle";
            break;
        case "top":
            x += width / 2;
            y -= distance;
            textAlign = "center";
            textVerticalAlign = "bottom";
            break;
        case "bottom":
            x += width / 2;
            y += height + distance;
            textAlign = "center";
            break;
        case "inside":
            x += width / 2;
            y += halfHeight;
            textAlign = "center";
            textVerticalAlign = "middle";
            break;
        case "insideLeft":
            x += distance;
            y += halfHeight;
            textVerticalAlign = "middle";
            break;
        case "insideRight":
            x += width - distance;
            y += halfHeight;
            textAlign = "right";
            textVerticalAlign = "middle";
            break;
        case "insideTop":
            x += width / 2;
            y += distance;
            textAlign = "center";
            break;
        case "insideBottom":
            x += width / 2;
            y += height - distance;
            textAlign = "center";
            textVerticalAlign = "bottom";
            break;
        case "insideTopLeft":
            x += distance;
            y += distance;
            break;
        case "insideTopRight":
            x += width - distance;
            y += distance;
            textAlign = "right";
            break;
        case "insideBottomLeft":
            x += distance;
            y += height - distance;
            textVerticalAlign = "bottom";
            break;
        case "insideBottomRight":
            x += width - distance;
            y += height - distance;
            textAlign = "right";
            textVerticalAlign = "bottom";
            break;
    }
    out = out || {};
    out.x = x;
    out.y = y;
    out.align = textAlign;
    out.verticalAlign = textVerticalAlign;
    return out;
}






var $9527b4855b5d4333$export$97b5e845c7286801 = "__zr_normal__";
var $9527b4855b5d4333$var$PRIMARY_STATES_KEYS = (0, $039fe2b24eabe4b4$export$98ab6203ec3396e2).concat([
    "ignore"
]);
var $9527b4855b5d4333$var$DEFAULT_ANIMATABLE_MAP = (0, $e44eb14c4271d0f9$export$533b26079ad0b4b)((0, $039fe2b24eabe4b4$export$98ab6203ec3396e2), function(obj, key) {
    obj[key] = true;
    return obj;
}, {
    ignore: false
});
var $9527b4855b5d4333$var$tmpTextPosCalcRes = {};
var $9527b4855b5d4333$var$tmpBoundingRect = new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)(0, 0, 0, 0);
var $9527b4855b5d4333$var$Element = function() {
    function Element(props) {
        this.id = (0, $e44eb14c4271d0f9$export$46e8f25c7328f77e)();
        this.animators = [];
        this.currentStates = [];
        this.states = {};
        this._init(props);
    }
    Element.prototype._init = function(props) {
        this.attr(props);
    };
    Element.prototype.drift = function(dx, dy, e) {
        switch(this.draggable){
            case "horizontal":
                dy = 0;
                break;
            case "vertical":
                dx = 0;
                break;
        }
        var m = this.transform;
        if (!m) m = this.transform = [
            1,
            0,
            0,
            1,
            0,
            0
        ];
        m[4] += dx;
        m[5] += dy;
        this.decomposeTransform();
        this.markRedraw();
    };
    Element.prototype.beforeUpdate = function() {};
    Element.prototype.afterUpdate = function() {};
    Element.prototype.update = function() {
        this.updateTransform();
        if (this.__dirty) this.updateInnerText();
    };
    Element.prototype.updateInnerText = function(forceUpdate) {
        var textEl = this._textContent;
        if (textEl && (!textEl.ignore || forceUpdate)) {
            if (!this.textConfig) this.textConfig = {};
            var textConfig = this.textConfig;
            var isLocal = textConfig.local;
            var innerTransformable = textEl.innerTransformable;
            var textAlign = void 0;
            var textVerticalAlign = void 0;
            var textStyleChanged = false;
            innerTransformable.parent = isLocal ? this : null;
            var innerOrigin = false;
            innerTransformable.copyTransform(textEl);
            if (textConfig.position != null) {
                var layoutRect = $9527b4855b5d4333$var$tmpBoundingRect;
                if (textConfig.layoutRect) layoutRect.copy(textConfig.layoutRect);
                else layoutRect.copy(this.getBoundingRect());
                if (!isLocal) layoutRect.applyTransform(this.transform);
                if (this.calculateTextPosition) this.calculateTextPosition($9527b4855b5d4333$var$tmpTextPosCalcRes, textConfig, layoutRect);
                else (0, $1a2563e7d7856dd8$export$eee3603b512feab7)($9527b4855b5d4333$var$tmpTextPosCalcRes, textConfig, layoutRect);
                innerTransformable.x = $9527b4855b5d4333$var$tmpTextPosCalcRes.x;
                innerTransformable.y = $9527b4855b5d4333$var$tmpTextPosCalcRes.y;
                textAlign = $9527b4855b5d4333$var$tmpTextPosCalcRes.align;
                textVerticalAlign = $9527b4855b5d4333$var$tmpTextPosCalcRes.verticalAlign;
                var textOrigin = textConfig.origin;
                if (textOrigin && textConfig.rotation != null) {
                    var relOriginX = void 0;
                    var relOriginY = void 0;
                    if (textOrigin === "center") {
                        relOriginX = layoutRect.width * 0.5;
                        relOriginY = layoutRect.height * 0.5;
                    } else {
                        relOriginX = (0, $1a2563e7d7856dd8$export$e8514cb5a5e2b40f)(textOrigin[0], layoutRect.width);
                        relOriginY = (0, $1a2563e7d7856dd8$export$e8514cb5a5e2b40f)(textOrigin[1], layoutRect.height);
                    }
                    innerOrigin = true;
                    innerTransformable.originX = -innerTransformable.x + relOriginX + (isLocal ? 0 : layoutRect.x);
                    innerTransformable.originY = -innerTransformable.y + relOriginY + (isLocal ? 0 : layoutRect.y);
                }
            }
            if (textConfig.rotation != null) innerTransformable.rotation = textConfig.rotation;
            var textOffset = textConfig.offset;
            if (textOffset) {
                innerTransformable.x += textOffset[0];
                innerTransformable.y += textOffset[1];
                if (!innerOrigin) {
                    innerTransformable.originX = -textOffset[0];
                    innerTransformable.originY = -textOffset[1];
                }
            }
            var isInside = textConfig.inside == null ? typeof textConfig.position === "string" && textConfig.position.indexOf("inside") >= 0 : textConfig.inside;
            var innerTextDefaultStyle = this._innerTextDefaultStyle || (this._innerTextDefaultStyle = {});
            var textFill = void 0;
            var textStroke = void 0;
            var autoStroke = void 0;
            if (isInside && this.canBeInsideText()) {
                textFill = textConfig.insideFill;
                textStroke = textConfig.insideStroke;
                if (textFill == null || textFill === "auto") textFill = this.getInsideTextFill();
                if (textStroke == null || textStroke === "auto") {
                    textStroke = this.getInsideTextStroke(textFill);
                    autoStroke = true;
                }
            } else {
                textFill = textConfig.outsideFill;
                textStroke = textConfig.outsideStroke;
                if (textFill == null || textFill === "auto") textFill = this.getOutsideFill();
                if (textStroke == null || textStroke === "auto") {
                    textStroke = this.getOutsideStroke(textFill);
                    autoStroke = true;
                }
            }
            textFill = textFill || "#000";
            if (textFill !== innerTextDefaultStyle.fill || textStroke !== innerTextDefaultStyle.stroke || autoStroke !== innerTextDefaultStyle.autoStroke || textAlign !== innerTextDefaultStyle.align || textVerticalAlign !== innerTextDefaultStyle.verticalAlign) {
                textStyleChanged = true;
                innerTextDefaultStyle.fill = textFill;
                innerTextDefaultStyle.stroke = textStroke;
                innerTextDefaultStyle.autoStroke = autoStroke;
                innerTextDefaultStyle.align = textAlign;
                innerTextDefaultStyle.verticalAlign = textVerticalAlign;
                textEl.setDefaultTextStyle(innerTextDefaultStyle);
            }
            textEl.__dirty |= (0, $b870c418b8d2135e$export$a7b6db622c6c7dbd);
            if (textStyleChanged) textEl.dirtyStyle(true);
        }
    };
    Element.prototype.canBeInsideText = function() {
        return true;
    };
    Element.prototype.getInsideTextFill = function() {
        return "#fff";
    };
    Element.prototype.getInsideTextStroke = function(textFill) {
        return "#000";
    };
    Element.prototype.getOutsideFill = function() {
        return this.__zr && this.__zr.isDarkMode() ? (0, $a9c042e5e4c73c13$export$3c6e95f318c8369b) : (0, $a9c042e5e4c73c13$export$f8ce94761f39398d);
    };
    Element.prototype.getOutsideStroke = function(textFill) {
        var backgroundColor = this.__zr && this.__zr.getBackgroundColor();
        var colorArr = typeof backgroundColor === "string" && (0, $5373993605fe25d6$export$98e6a39c04603d36)(backgroundColor);
        if (!colorArr) colorArr = [
            255,
            255,
            255,
            1
        ];
        var alpha = colorArr[3];
        var isDark = this.__zr.isDarkMode();
        for(var i = 0; i < 3; i++)colorArr[i] = colorArr[i] * alpha + (isDark ? 0 : 255) * (1 - alpha);
        colorArr[3] = 1;
        return (0, $5373993605fe25d6$export$fac44ee5b035f737)(colorArr, "rgba");
    };
    Element.prototype.traverse = function(cb, context) {};
    Element.prototype.attrKV = function(key, value) {
        if (key === "textConfig") this.setTextConfig(value);
        else if (key === "textContent") this.setTextContent(value);
        else if (key === "clipPath") this.setClipPath(value);
        else if (key === "extra") {
            this.extra = this.extra || {};
            (0, $e44eb14c4271d0f9$export$8b58be045bf06082)(this.extra, value);
        } else this[key] = value;
    };
    Element.prototype.hide = function() {
        this.ignore = true;
        this.markRedraw();
    };
    Element.prototype.show = function() {
        this.ignore = false;
        this.markRedraw();
    };
    Element.prototype.attr = function(keyOrObj, value) {
        if (typeof keyOrObj === "string") this.attrKV(keyOrObj, value);
        else if ((0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(keyOrObj)) {
            var obj = keyOrObj;
            var keysArr = (0, $e44eb14c4271d0f9$export$ed97f33186d4b816)(obj);
            for(var i = 0; i < keysArr.length; i++){
                var key = keysArr[i];
                this.attrKV(key, keyOrObj[key]);
            }
        }
        this.markRedraw();
        return this;
    };
    Element.prototype.saveCurrentToNormalState = function(toState) {
        this._innerSaveToNormal(toState);
        var normalState = this._normalState;
        for(var i = 0; i < this.animators.length; i++){
            var animator = this.animators[i];
            var fromStateTransition = animator.__fromStateTransition;
            if (animator.getLoop() || fromStateTransition && fromStateTransition !== $9527b4855b5d4333$export$97b5e845c7286801) continue;
            var targetName = animator.targetName;
            var target = targetName ? normalState[targetName] : normalState;
            animator.saveTo(target);
        }
    };
    Element.prototype._innerSaveToNormal = function(toState) {
        var normalState = this._normalState;
        if (!normalState) normalState = this._normalState = {};
        if (toState.textConfig && !normalState.textConfig) normalState.textConfig = this.textConfig;
        this._savePrimaryToNormal(toState, normalState, $9527b4855b5d4333$var$PRIMARY_STATES_KEYS);
    };
    Element.prototype._savePrimaryToNormal = function(toState, normalState, primaryKeys) {
        for(var i = 0; i < primaryKeys.length; i++){
            var key = primaryKeys[i];
            if (toState[key] != null && !(key in normalState)) normalState[key] = this[key];
        }
    };
    Element.prototype.hasState = function() {
        return this.currentStates.length > 0;
    };
    Element.prototype.getState = function(name) {
        return this.states[name];
    };
    Element.prototype.ensureState = function(name) {
        var states = this.states;
        if (!states[name]) states[name] = {};
        return states[name];
    };
    Element.prototype.clearStates = function(noAnimation) {
        this.useState($9527b4855b5d4333$export$97b5e845c7286801, false, noAnimation);
    };
    Element.prototype.useState = function(stateName, keepCurrentStates, noAnimation, forceUseHoverLayer) {
        var toNormalState = stateName === $9527b4855b5d4333$export$97b5e845c7286801;
        var hasStates = this.hasState();
        if (!hasStates && toNormalState) return;
        var currentStates = this.currentStates;
        var animationCfg = this.stateTransition;
        if ((0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)(currentStates, stateName) >= 0 && (keepCurrentStates || currentStates.length === 1)) return;
        var state;
        if (this.stateProxy && !toNormalState) state = this.stateProxy(stateName);
        if (!state) state = this.states && this.states[stateName];
        if (!state && !toNormalState) {
            (0, $e44eb14c4271d0f9$export$58da9968c3170cb1)("State " + stateName + " not exists.");
            return;
        }
        if (!toNormalState) this.saveCurrentToNormalState(state);
        var useHoverLayer = !!(state && state.hoverLayer || forceUseHoverLayer);
        if (useHoverLayer) this._toggleHoverLayerFlag(true);
        this._applyStateObj(stateName, state, this._normalState, keepCurrentStates, !noAnimation && !this.__inHover && animationCfg && animationCfg.duration > 0, animationCfg);
        var textContent = this._textContent;
        var textGuide = this._textGuide;
        if (textContent) textContent.useState(stateName, keepCurrentStates, noAnimation, useHoverLayer);
        if (textGuide) textGuide.useState(stateName, keepCurrentStates, noAnimation, useHoverLayer);
        if (toNormalState) {
            this.currentStates = [];
            this._normalState = {};
        } else if (!keepCurrentStates) this.currentStates = [
            stateName
        ];
        else this.currentStates.push(stateName);
        this._updateAnimationTargets();
        this.markRedraw();
        if (!useHoverLayer && this.__inHover) {
            this._toggleHoverLayerFlag(false);
            this.__dirty &= ~(0, $b870c418b8d2135e$export$a7b6db622c6c7dbd);
        }
        return state;
    };
    Element.prototype.useStates = function(states, noAnimation, forceUseHoverLayer) {
        if (!states.length) this.clearStates();
        else {
            var stateObjects = [];
            var currentStates = this.currentStates;
            var len = states.length;
            var notChange = len === currentStates.length;
            if (notChange) {
                for(var i = 0; i < len; i++)if (states[i] !== currentStates[i]) {
                    notChange = false;
                    break;
                }
            }
            if (notChange) return;
            for(var i = 0; i < len; i++){
                var stateName = states[i];
                var stateObj = void 0;
                if (this.stateProxy) stateObj = this.stateProxy(stateName, states);
                if (!stateObj) stateObj = this.states[stateName];
                if (stateObj) stateObjects.push(stateObj);
            }
            var lastStateObj = stateObjects[len - 1];
            var useHoverLayer = !!(lastStateObj && lastStateObj.hoverLayer || forceUseHoverLayer);
            if (useHoverLayer) this._toggleHoverLayerFlag(true);
            var mergedState = this._mergeStates(stateObjects);
            var animationCfg = this.stateTransition;
            this.saveCurrentToNormalState(mergedState);
            this._applyStateObj(states.join(","), mergedState, this._normalState, false, !noAnimation && !this.__inHover && animationCfg && animationCfg.duration > 0, animationCfg);
            var textContent = this._textContent;
            var textGuide = this._textGuide;
            if (textContent) textContent.useStates(states, noAnimation, useHoverLayer);
            if (textGuide) textGuide.useStates(states, noAnimation, useHoverLayer);
            this._updateAnimationTargets();
            this.currentStates = states.slice();
            this.markRedraw();
            if (!useHoverLayer && this.__inHover) {
                this._toggleHoverLayerFlag(false);
                this.__dirty &= ~(0, $b870c418b8d2135e$export$a7b6db622c6c7dbd);
            }
        }
    };
    Element.prototype.isSilent = function() {
        var isSilent = this.silent;
        var ancestor = this.parent;
        while(!isSilent && ancestor){
            if (ancestor.silent) {
                isSilent = true;
                break;
            }
            ancestor = ancestor.parent;
        }
        return isSilent;
    };
    Element.prototype._updateAnimationTargets = function() {
        for(var i = 0; i < this.animators.length; i++){
            var animator = this.animators[i];
            if (animator.targetName) animator.changeTarget(this[animator.targetName]);
        }
    };
    Element.prototype.removeState = function(state) {
        var idx = (0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)(this.currentStates, state);
        if (idx >= 0) {
            var currentStates = this.currentStates.slice();
            currentStates.splice(idx, 1);
            this.useStates(currentStates);
        }
    };
    Element.prototype.replaceState = function(oldState, newState, forceAdd) {
        var currentStates = this.currentStates.slice();
        var idx = (0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)(currentStates, oldState);
        var newStateExists = (0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)(currentStates, newState) >= 0;
        if (idx >= 0) {
            if (!newStateExists) currentStates[idx] = newState;
            else currentStates.splice(idx, 1);
        } else if (forceAdd && !newStateExists) currentStates.push(newState);
        this.useStates(currentStates);
    };
    Element.prototype.toggleState = function(state, enable) {
        if (enable) this.useState(state, true);
        else this.removeState(state);
    };
    Element.prototype._mergeStates = function(states) {
        var mergedState = {};
        var mergedTextConfig;
        for(var i = 0; i < states.length; i++){
            var state = states[i];
            (0, $e44eb14c4271d0f9$export$8b58be045bf06082)(mergedState, state);
            if (state.textConfig) {
                mergedTextConfig = mergedTextConfig || {};
                (0, $e44eb14c4271d0f9$export$8b58be045bf06082)(mergedTextConfig, state.textConfig);
            }
        }
        if (mergedTextConfig) mergedState.textConfig = mergedTextConfig;
        return mergedState;
    };
    Element.prototype._applyStateObj = function(stateName, state, normalState, keepCurrentStates, transition, animationCfg) {
        var needsRestoreToNormal = !(state && keepCurrentStates);
        if (state && state.textConfig) {
            this.textConfig = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, keepCurrentStates ? this.textConfig : normalState.textConfig);
            (0, $e44eb14c4271d0f9$export$8b58be045bf06082)(this.textConfig, state.textConfig);
        } else if (needsRestoreToNormal) {
            if (normalState.textConfig) this.textConfig = normalState.textConfig;
        }
        var transitionTarget = {};
        var hasTransition = false;
        for(var i = 0; i < $9527b4855b5d4333$var$PRIMARY_STATES_KEYS.length; i++){
            var key = $9527b4855b5d4333$var$PRIMARY_STATES_KEYS[i];
            var propNeedsTransition = transition && $9527b4855b5d4333$var$DEFAULT_ANIMATABLE_MAP[key];
            if (state && state[key] != null) {
                if (propNeedsTransition) {
                    hasTransition = true;
                    transitionTarget[key] = state[key];
                } else this[key] = state[key];
            } else if (needsRestoreToNormal) {
                if (normalState[key] != null) {
                    if (propNeedsTransition) {
                        hasTransition = true;
                        transitionTarget[key] = normalState[key];
                    } else this[key] = normalState[key];
                }
            }
        }
        if (!transition) for(var i = 0; i < this.animators.length; i++){
            var animator = this.animators[i];
            var targetName = animator.targetName;
            if (!animator.getLoop()) animator.__changeFinalValue(targetName ? (state || normalState)[targetName] : state || normalState);
        }
        if (hasTransition) this._transitionState(stateName, transitionTarget, animationCfg);
    };
    Element.prototype._attachComponent = function(componentEl) {
        if (componentEl.__zr && !componentEl.__hostTarget) throw new Error("Text element has been added to zrender.");
        if (componentEl === this) throw new Error("Recursive component attachment.");
        var zr = this.__zr;
        if (zr) componentEl.addSelfToZr(zr);
        componentEl.__zr = zr;
        componentEl.__hostTarget = this;
    };
    Element.prototype._detachComponent = function(componentEl) {
        if (componentEl.__zr) componentEl.removeSelfFromZr(componentEl.__zr);
        componentEl.__zr = null;
        componentEl.__hostTarget = null;
    };
    Element.prototype.getClipPath = function() {
        return this._clipPath;
    };
    Element.prototype.setClipPath = function(clipPath) {
        if (this._clipPath && this._clipPath !== clipPath) this.removeClipPath();
        this._attachComponent(clipPath);
        this._clipPath = clipPath;
        this.markRedraw();
    };
    Element.prototype.removeClipPath = function() {
        var clipPath = this._clipPath;
        if (clipPath) {
            this._detachComponent(clipPath);
            this._clipPath = null;
            this.markRedraw();
        }
    };
    Element.prototype.getTextContent = function() {
        return this._textContent;
    };
    Element.prototype.setTextContent = function(textEl) {
        var previousTextContent = this._textContent;
        if (previousTextContent === textEl) return;
        if (previousTextContent && previousTextContent !== textEl) this.removeTextContent();
        if (textEl.__zr && !textEl.__hostTarget) throw new Error("Text element has been added to zrender.");
        textEl.innerTransformable = new (0, $039fe2b24eabe4b4$export$2e2bcd8739ae039)();
        this._attachComponent(textEl);
        this._textContent = textEl;
        this.markRedraw();
    };
    Element.prototype.setTextConfig = function(cfg) {
        if (!this.textConfig) this.textConfig = {};
        (0, $e44eb14c4271d0f9$export$8b58be045bf06082)(this.textConfig, cfg);
        this.markRedraw();
    };
    Element.prototype.removeTextConfig = function() {
        this.textConfig = null;
        this.markRedraw();
    };
    Element.prototype.removeTextContent = function() {
        var textEl = this._textContent;
        if (textEl) {
            textEl.innerTransformable = null;
            this._detachComponent(textEl);
            this._textContent = null;
            this._innerTextDefaultStyle = null;
            this.markRedraw();
        }
    };
    Element.prototype.getTextGuideLine = function() {
        return this._textGuide;
    };
    Element.prototype.setTextGuideLine = function(guideLine) {
        if (this._textGuide && this._textGuide !== guideLine) this.removeTextGuideLine();
        this._attachComponent(guideLine);
        this._textGuide = guideLine;
        this.markRedraw();
    };
    Element.prototype.removeTextGuideLine = function() {
        var textGuide = this._textGuide;
        if (textGuide) {
            this._detachComponent(textGuide);
            this._textGuide = null;
            this.markRedraw();
        }
    };
    Element.prototype.markRedraw = function() {
        this.__dirty |= (0, $b870c418b8d2135e$export$a7b6db622c6c7dbd);
        var zr = this.__zr;
        if (zr) {
            if (this.__inHover) zr.refreshHover();
            else zr.refresh();
        }
        if (this.__hostTarget) this.__hostTarget.markRedraw();
    };
    Element.prototype.dirty = function() {
        this.markRedraw();
    };
    Element.prototype._toggleHoverLayerFlag = function(inHover) {
        this.__inHover = inHover;
        var textContent = this._textContent;
        var textGuide = this._textGuide;
        if (textContent) textContent.__inHover = inHover;
        if (textGuide) textGuide.__inHover = inHover;
    };
    Element.prototype.addSelfToZr = function(zr) {
        if (this.__zr === zr) return;
        this.__zr = zr;
        var animators = this.animators;
        if (animators) for(var i = 0; i < animators.length; i++)zr.animation.addAnimator(animators[i]);
        if (this._clipPath) this._clipPath.addSelfToZr(zr);
        if (this._textContent) this._textContent.addSelfToZr(zr);
        if (this._textGuide) this._textGuide.addSelfToZr(zr);
    };
    Element.prototype.removeSelfFromZr = function(zr) {
        if (!this.__zr) return;
        this.__zr = null;
        var animators = this.animators;
        if (animators) for(var i = 0; i < animators.length; i++)zr.animation.removeAnimator(animators[i]);
        if (this._clipPath) this._clipPath.removeSelfFromZr(zr);
        if (this._textContent) this._textContent.removeSelfFromZr(zr);
        if (this._textGuide) this._textGuide.removeSelfFromZr(zr);
    };
    Element.prototype.animate = function(key, loop, allowDiscreteAnimation) {
        var target = key ? this[key] : this;
        if (!target) {
            (0, $e44eb14c4271d0f9$export$58da9968c3170cb1)('Property "' + key + '" is not existed in element ' + this.id);
            return;
        }
        var animator = new (0, $d03d5f018aba2b0f$export$2e2bcd8739ae039)(target, loop, allowDiscreteAnimation);
        key && (animator.targetName = key);
        this.addAnimator(animator, key);
        return animator;
    };
    Element.prototype.addAnimator = function(animator, key) {
        var zr = this.__zr;
        var el = this;
        animator.during(function() {
            el.updateDuringAnimation(key);
        }).done(function() {
            var animators = el.animators;
            var idx = (0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)(animators, animator);
            if (idx >= 0) animators.splice(idx, 1);
        });
        this.animators.push(animator);
        if (zr) zr.animation.addAnimator(animator);
        zr && zr.wakeUp();
    };
    Element.prototype.updateDuringAnimation = function(key) {
        this.markRedraw();
    };
    Element.prototype.stopAnimation = function(scope, forwardToLast) {
        var animators = this.animators;
        var len = animators.length;
        var leftAnimators = [];
        for(var i = 0; i < len; i++){
            var animator = animators[i];
            if (!scope || scope === animator.scope) animator.stop(forwardToLast);
            else leftAnimators.push(animator);
        }
        this.animators = leftAnimators;
        return this;
    };
    Element.prototype.animateTo = function(target, cfg, animationProps) {
        $9527b4855b5d4333$var$animateTo(this, target, cfg, animationProps);
    };
    Element.prototype.animateFrom = function(target, cfg, animationProps) {
        $9527b4855b5d4333$var$animateTo(this, target, cfg, animationProps, true);
    };
    Element.prototype._transitionState = function(stateName, target, cfg, animationProps) {
        var animators = $9527b4855b5d4333$var$animateTo(this, target, cfg, animationProps);
        for(var i = 0; i < animators.length; i++)animators[i].__fromStateTransition = stateName;
    };
    Element.prototype.getBoundingRect = function() {
        return null;
    };
    Element.prototype.getPaintRect = function() {
        return null;
    };
    Element.initDefaultProps = function() {
        var elProto = Element.prototype;
        elProto.type = "element";
        elProto.name = "";
        elProto.ignore = elProto.silent = elProto.isGroup = elProto.draggable = elProto.dragging = elProto.ignoreClip = elProto.__inHover = false;
        elProto.__dirty = (0, $b870c418b8d2135e$export$a7b6db622c6c7dbd);
        var logs = {};
        function logDeprecatedError(key, xKey, yKey) {
            if (!logs[key + xKey + yKey]) {
                console.warn("DEPRECATED: '" + key + "' has been deprecated. use '" + xKey + "', '" + yKey + "' instead");
                logs[key + xKey + yKey] = true;
            }
        }
        function createLegacyProperty(key, privateKey, xKey, yKey) {
            Object.defineProperty(elProto, key, {
                get: function() {
                    logDeprecatedError(key, xKey, yKey);
                    if (!this[privateKey]) {
                        var pos = this[privateKey] = [];
                        enhanceArray(this, pos);
                    }
                    return this[privateKey];
                },
                set: function(pos) {
                    logDeprecatedError(key, xKey, yKey);
                    this[xKey] = pos[0];
                    this[yKey] = pos[1];
                    this[privateKey] = pos;
                    enhanceArray(this, pos);
                }
            });
            function enhanceArray(self, pos) {
                Object.defineProperty(pos, 0, {
                    get: function() {
                        return self[xKey];
                    },
                    set: function(val) {
                        self[xKey] = val;
                    }
                });
                Object.defineProperty(pos, 1, {
                    get: function() {
                        return self[yKey];
                    },
                    set: function(val) {
                        self[yKey] = val;
                    }
                });
            }
        }
        if (Object.defineProperty) {
            createLegacyProperty("position", "_legacyPos", "x", "y");
            createLegacyProperty("scale", "_legacyScale", "scaleX", "scaleY");
            createLegacyProperty("origin", "_legacyOrigin", "originX", "originY");
        }
    }();
    return Element;
}();
(0, $e44eb14c4271d0f9$export$e36fc9d62a853069)($9527b4855b5d4333$var$Element, (0, $a2a21788c772d0fe$export$2e2bcd8739ae039));
(0, $e44eb14c4271d0f9$export$e36fc9d62a853069)($9527b4855b5d4333$var$Element, (0, $039fe2b24eabe4b4$export$2e2bcd8739ae039));
function $9527b4855b5d4333$var$animateTo(animatable, target, cfg, animationProps, reverse) {
    cfg = cfg || {};
    var animators = [];
    $9527b4855b5d4333$var$animateToShallow(animatable, "", animatable, target, cfg, animationProps, animators, reverse);
    var finishCount = animators.length;
    var doneHappened = false;
    var cfgDone = cfg.done;
    var cfgAborted = cfg.aborted;
    var doneCb = function() {
        doneHappened = true;
        finishCount--;
        if (finishCount <= 0) doneHappened ? cfgDone && cfgDone() : cfgAborted && cfgAborted();
    };
    var abortedCb = function() {
        finishCount--;
        if (finishCount <= 0) doneHappened ? cfgDone && cfgDone() : cfgAborted && cfgAborted();
    };
    if (!finishCount) cfgDone && cfgDone();
    if (animators.length > 0 && cfg.during) animators[0].during(function(target, percent) {
        cfg.during(percent);
    });
    for(var i = 0; i < animators.length; i++){
        var animator = animators[i];
        if (doneCb) animator.done(doneCb);
        if (abortedCb) animator.aborted(abortedCb);
        if (cfg.force) animator.duration(cfg.duration);
        animator.start(cfg.easing);
    }
    return animators;
}
function $9527b4855b5d4333$var$copyArrShallow(source, target, len) {
    for(var i = 0; i < len; i++)source[i] = target[i];
}
function $9527b4855b5d4333$var$is2DArray(value) {
    return (0, $e44eb14c4271d0f9$export$1e2f57719e155213)(value[0]);
}
function $9527b4855b5d4333$var$copyValue(target, source, key) {
    if ((0, $e44eb14c4271d0f9$export$1e2f57719e155213)(source[key])) {
        if (!(0, $e44eb14c4271d0f9$export$1e2f57719e155213)(target[key])) target[key] = [];
        if ((0, $e44eb14c4271d0f9$export$b119cc7e1840e59c)(source[key])) {
            var len = source[key].length;
            if (target[key].length !== len) {
                target[key] = new source[key].constructor(len);
                $9527b4855b5d4333$var$copyArrShallow(target[key], source[key], len);
            }
        } else {
            var sourceArr = source[key];
            var targetArr = target[key];
            var len0 = sourceArr.length;
            if ($9527b4855b5d4333$var$is2DArray(sourceArr)) {
                var len1 = sourceArr[0].length;
                for(var i = 0; i < len0; i++)if (!targetArr[i]) targetArr[i] = Array.prototype.slice.call(sourceArr[i]);
                else $9527b4855b5d4333$var$copyArrShallow(targetArr[i], sourceArr[i], len1);
            } else $9527b4855b5d4333$var$copyArrShallow(targetArr, sourceArr, len0);
            targetArr.length = sourceArr.length;
        }
    } else target[key] = source[key];
}
function $9527b4855b5d4333$var$isValueSame(val1, val2) {
    return val1 === val2 || (0, $e44eb14c4271d0f9$export$1e2f57719e155213)(val1) && (0, $e44eb14c4271d0f9$export$1e2f57719e155213)(val2) && $9527b4855b5d4333$var$is1DArraySame(val1, val2);
}
function $9527b4855b5d4333$var$is1DArraySame(arr0, arr1) {
    var len = arr0.length;
    if (len !== arr1.length) return false;
    for(var i = 0; i < len; i++){
        if (arr0[i] !== arr1[i]) return false;
    }
    return true;
}
function $9527b4855b5d4333$var$animateToShallow(animatable, topKey, animateObj, target, cfg, animationProps, animators, reverse) {
    var targetKeys = (0, $e44eb14c4271d0f9$export$ed97f33186d4b816)(target);
    var duration = cfg.duration;
    var delay = cfg.delay;
    var additive = cfg.additive;
    var setToFinal = cfg.setToFinal;
    var animateAll = !(0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(animationProps);
    var existsAnimators = animatable.animators;
    var animationKeys = [];
    for(var k = 0; k < targetKeys.length; k++){
        var innerKey = targetKeys[k];
        var targetVal = target[innerKey];
        if (targetVal != null && animateObj[innerKey] != null && (animateAll || animationProps[innerKey])) {
            if ((0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(targetVal) && !(0, $e44eb14c4271d0f9$export$1e2f57719e155213)(targetVal) && !(0, $e44eb14c4271d0f9$export$fa2c283003ed971c)(targetVal)) {
                if (topKey) {
                    if (!reverse) {
                        animateObj[innerKey] = targetVal;
                        animatable.updateDuringAnimation(topKey);
                    }
                    continue;
                }
                $9527b4855b5d4333$var$animateToShallow(animatable, innerKey, animateObj[innerKey], targetVal, cfg, animationProps && animationProps[innerKey], animators, reverse);
            } else animationKeys.push(innerKey);
        } else if (!reverse) {
            animateObj[innerKey] = targetVal;
            animatable.updateDuringAnimation(topKey);
            animationKeys.push(innerKey);
        }
    }
    var keyLen = animationKeys.length;
    if (!additive && keyLen) for(var i = 0; i < existsAnimators.length; i++){
        var animator = existsAnimators[i];
        if (animator.targetName === topKey) {
            var allAborted = animator.stopTracks(animationKeys);
            if (allAborted) {
                var idx = (0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)(existsAnimators, animator);
                existsAnimators.splice(idx, 1);
            }
        }
    }
    if (!cfg.force) {
        animationKeys = (0, $e44eb14c4271d0f9$export$3dea766d36a8935f)(animationKeys, function(key) {
            return !$9527b4855b5d4333$var$isValueSame(target[key], animateObj[key]);
        });
        keyLen = animationKeys.length;
    }
    if (keyLen > 0 || cfg.force && !animators.length) {
        var revertedSource = void 0;
        var reversedTarget = void 0;
        var sourceClone = void 0;
        if (reverse) {
            reversedTarget = {};
            if (setToFinal) revertedSource = {};
            for(var i = 0; i < keyLen; i++){
                var innerKey = animationKeys[i];
                reversedTarget[innerKey] = animateObj[innerKey];
                if (setToFinal) revertedSource[innerKey] = target[innerKey];
                else animateObj[innerKey] = target[innerKey];
            }
        } else if (setToFinal) {
            sourceClone = {};
            for(var i = 0; i < keyLen; i++){
                var innerKey = animationKeys[i];
                sourceClone[innerKey] = (0, $d03d5f018aba2b0f$export$c5e92b7f105af84e)(animateObj[innerKey]);
                $9527b4855b5d4333$var$copyValue(animateObj, target, innerKey);
            }
        }
        var animator = new (0, $d03d5f018aba2b0f$export$2e2bcd8739ae039)(animateObj, false, false, additive ? (0, $e44eb14c4271d0f9$export$3dea766d36a8935f)(existsAnimators, function(animator) {
            return animator.targetName === topKey;
        }) : null);
        animator.targetName = topKey;
        if (cfg.scope) animator.scope = cfg.scope;
        if (setToFinal && revertedSource) animator.whenWithKeys(0, revertedSource, animationKeys);
        if (sourceClone) animator.whenWithKeys(0, sourceClone, animationKeys);
        animator.whenWithKeys(duration == null ? 500 : duration, reverse ? reversedTarget : target, animationKeys).delay(delay || 0);
        animatable.addAnimator(animator, topKey);
        animators.push(animator);
    }
}
var $9527b4855b5d4333$export$2e2bcd8739ae039 = $9527b4855b5d4333$var$Element;



var $748aea24eee93173$var$Group = function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(Group, _super);
    function Group(opts) {
        var _this = _super.call(this) || this;
        _this.isGroup = true;
        _this._children = [];
        _this.attr(opts);
        return _this;
    }
    Group.prototype.childrenRef = function() {
        return this._children;
    };
    Group.prototype.children = function() {
        return this._children.slice();
    };
    Group.prototype.childAt = function(idx) {
        return this._children[idx];
    };
    Group.prototype.childOfName = function(name) {
        var children = this._children;
        for(var i = 0; i < children.length; i++){
            if (children[i].name === name) return children[i];
        }
    };
    Group.prototype.childCount = function() {
        return this._children.length;
    };
    Group.prototype.add = function(child) {
        if (child) {
            if (child !== this && child.parent !== this) {
                this._children.push(child);
                this._doAdd(child);
            }
            if (child.__hostTarget) throw "This elemenet has been used as an attachment";
        }
        return this;
    };
    Group.prototype.addBefore = function(child, nextSibling) {
        if (child && child !== this && child.parent !== this && nextSibling && nextSibling.parent === this) {
            var children = this._children;
            var idx = children.indexOf(nextSibling);
            if (idx >= 0) {
                children.splice(idx, 0, child);
                this._doAdd(child);
            }
        }
        return this;
    };
    Group.prototype.replace = function(oldChild, newChild) {
        var idx = $e44eb14c4271d0f9$export$305f7d4e9d4624f2(this._children, oldChild);
        if (idx >= 0) this.replaceAt(newChild, idx);
        return this;
    };
    Group.prototype.replaceAt = function(child, index) {
        var children = this._children;
        var old = children[index];
        if (child && child !== this && child.parent !== this && child !== old) {
            children[index] = child;
            old.parent = null;
            var zr = this.__zr;
            if (zr) old.removeSelfFromZr(zr);
            this._doAdd(child);
        }
        return this;
    };
    Group.prototype._doAdd = function(child) {
        if (child.parent) child.parent.remove(child);
        child.parent = this;
        var zr = this.__zr;
        if (zr && zr !== child.__zr) child.addSelfToZr(zr);
        zr && zr.refresh();
    };
    Group.prototype.remove = function(child) {
        var zr = this.__zr;
        var children = this._children;
        var idx = $e44eb14c4271d0f9$export$305f7d4e9d4624f2(children, child);
        if (idx < 0) return this;
        children.splice(idx, 1);
        child.parent = null;
        if (zr) child.removeSelfFromZr(zr);
        zr && zr.refresh();
        return this;
    };
    Group.prototype.removeAll = function() {
        var children = this._children;
        var zr = this.__zr;
        for(var i = 0; i < children.length; i++){
            var child = children[i];
            if (zr) child.removeSelfFromZr(zr);
            child.parent = null;
        }
        children.length = 0;
        return this;
    };
    Group.prototype.eachChild = function(cb, context) {
        var children = this._children;
        for(var i = 0; i < children.length; i++){
            var child = children[i];
            cb.call(context, child, i);
        }
        return this;
    };
    Group.prototype.traverse = function(cb, context) {
        for(var i = 0; i < this._children.length; i++){
            var child = this._children[i];
            var stopped = cb.call(context, child);
            if (child.isGroup && !stopped) child.traverse(cb, context);
        }
        return this;
    };
    Group.prototype.addSelfToZr = function(zr) {
        _super.prototype.addSelfToZr.call(this, zr);
        for(var i = 0; i < this._children.length; i++){
            var child = this._children[i];
            child.addSelfToZr(zr);
        }
    };
    Group.prototype.removeSelfFromZr = function(zr) {
        _super.prototype.removeSelfFromZr.call(this, zr);
        for(var i = 0; i < this._children.length; i++){
            var child = this._children[i];
            child.removeSelfFromZr(zr);
        }
    };
    Group.prototype.getBoundingRect = function(includeChildren) {
        var tmpRect = new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)(0, 0, 0, 0);
        var children = includeChildren || this._children;
        var tmpMat = [];
        var rect = null;
        for(var i = 0; i < children.length; i++){
            var child = children[i];
            if (child.ignore || child.invisible) continue;
            var childRect = child.getBoundingRect();
            var transform = child.getLocalTransform(tmpMat);
            if (transform) {
                (0, $bf33be5184c664d0$export$2e2bcd8739ae039).applyTransform(tmpRect, childRect, transform);
                rect = rect || tmpRect.clone();
                rect.union(tmpRect);
            } else {
                rect = rect || childRect.clone();
                rect.union(childRect);
            }
        }
        return rect || tmpRect;
    };
    return Group;
}((0, $9527b4855b5d4333$export$2e2bcd8739ae039));
$748aea24eee93173$var$Group.prototype.type = "group";
var $748aea24eee93173$export$2e2bcd8739ae039 = $748aea24eee93173$var$Group;


var $2d04db0a24ba5285$var$painterCtors = {};
var $2d04db0a24ba5285$var$instances = {};
function $2d04db0a24ba5285$var$delInstance(id) {
    delete $2d04db0a24ba5285$var$instances[id];
}
function $2d04db0a24ba5285$var$isDarkMode(backgroundColor) {
    if (!backgroundColor) return false;
    if (typeof backgroundColor === "string") return (0, $5373993605fe25d6$export$16c0ec21a6f9ef95)(backgroundColor, 1) < (0, $a9c042e5e4c73c13$export$fd81e7ebc7dae256);
    else if (backgroundColor.colorStops) {
        var colorStops = backgroundColor.colorStops;
        var totalLum = 0;
        var len = colorStops.length;
        for(var i = 0; i < len; i++)totalLum += (0, $5373993605fe25d6$export$16c0ec21a6f9ef95)(colorStops[i].color, 1);
        totalLum /= len;
        return totalLum < (0, $a9c042e5e4c73c13$export$fd81e7ebc7dae256);
    }
    return false;
}
var $2d04db0a24ba5285$var$ZRender = function() {
    function ZRender(id, dom, opts) {
        var _this = this;
        this._sleepAfterStill = 10;
        this._stillFrameAccum = 0;
        this._needsRefresh = true;
        this._needsRefreshHover = true;
        this._darkMode = false;
        opts = opts || {};
        this.dom = dom;
        this.id = id;
        var storage = new (0, $af787ad638cafa4e$export$2e2bcd8739ae039)();
        var rendererType = opts.renderer || "canvas";
        if (!$2d04db0a24ba5285$var$painterCtors[rendererType]) rendererType = $e44eb14c4271d0f9$export$ed97f33186d4b816($2d04db0a24ba5285$var$painterCtors)[0];
        if (!$2d04db0a24ba5285$var$painterCtors[rendererType]) throw new Error("Renderer '" + rendererType + "' is not imported. Please import it first.");
        opts.useDirtyRect = opts.useDirtyRect == null ? false : opts.useDirtyRect;
        var painter = new $2d04db0a24ba5285$var$painterCtors[rendererType](dom, storage, opts, id);
        var ssrMode = opts.ssr || painter.ssrOnly;
        this.storage = storage;
        this.painter = painter;
        var handlerProxy = !(0, $de9e931273a116c1$export$2e2bcd8739ae039).node && !(0, $de9e931273a116c1$export$2e2bcd8739ae039).worker && !ssrMode ? new (0, $fc18d2be4c4380ac$export$2e2bcd8739ae039)(painter.getViewportRoot(), painter.root) : null;
        var useCoarsePointer = opts.useCoarsePointer;
        var usePointerSize = useCoarsePointer == null || useCoarsePointer === "auto" ? (0, $de9e931273a116c1$export$2e2bcd8739ae039).touchEventsSupported : !!useCoarsePointer;
        var defaultPointerSize = 44;
        var pointerSize;
        if (usePointerSize) pointerSize = $e44eb14c4271d0f9$export$995e01f2f5c9d030(opts.pointerSize, defaultPointerSize);
        this.handler = new (0, $26bcd6f2c00f1f23$export$2e2bcd8739ae039)(storage, painter, handlerProxy, painter.root, pointerSize);
        this.animation = new (0, $f7d782223a765565$export$2e2bcd8739ae039)({
            stage: {
                update: ssrMode ? null : function() {
                    return _this._flush(true);
                }
            }
        });
        if (!ssrMode) this.animation.start();
    }
    ZRender.prototype.add = function(el) {
        if (this._disposed || !el) return;
        this.storage.addRoot(el);
        el.addSelfToZr(this);
        this.refresh();
    };
    ZRender.prototype.remove = function(el) {
        if (this._disposed || !el) return;
        this.storage.delRoot(el);
        el.removeSelfFromZr(this);
        this.refresh();
    };
    ZRender.prototype.configLayer = function(zLevel, config) {
        if (this._disposed) return;
        if (this.painter.configLayer) this.painter.configLayer(zLevel, config);
        this.refresh();
    };
    ZRender.prototype.setBackgroundColor = function(backgroundColor) {
        if (this._disposed) return;
        if (this.painter.setBackgroundColor) this.painter.setBackgroundColor(backgroundColor);
        this.refresh();
        this._backgroundColor = backgroundColor;
        this._darkMode = $2d04db0a24ba5285$var$isDarkMode(backgroundColor);
    };
    ZRender.prototype.getBackgroundColor = function() {
        return this._backgroundColor;
    };
    ZRender.prototype.setDarkMode = function(darkMode) {
        this._darkMode = darkMode;
    };
    ZRender.prototype.isDarkMode = function() {
        return this._darkMode;
    };
    ZRender.prototype.refreshImmediately = function(fromInside) {
        if (this._disposed) return;
        if (!fromInside) this.animation.update(true);
        this._needsRefresh = false;
        this.painter.refresh();
        this._needsRefresh = false;
    };
    ZRender.prototype.refresh = function() {
        if (this._disposed) return;
        this._needsRefresh = true;
        this.animation.start();
    };
    ZRender.prototype.flush = function() {
        if (this._disposed) return;
        this._flush(false);
    };
    ZRender.prototype._flush = function(fromInside) {
        var triggerRendered;
        var start = (0, $f7d782223a765565$export$1428f42a7de81803)();
        if (this._needsRefresh) {
            triggerRendered = true;
            this.refreshImmediately(fromInside);
        }
        if (this._needsRefreshHover) {
            triggerRendered = true;
            this.refreshHoverImmediately();
        }
        var end = (0, $f7d782223a765565$export$1428f42a7de81803)();
        if (triggerRendered) {
            this._stillFrameAccum = 0;
            this.trigger("rendered", {
                elapsedTime: end - start
            });
        } else if (this._sleepAfterStill > 0) {
            this._stillFrameAccum++;
            if (this._stillFrameAccum > this._sleepAfterStill) this.animation.stop();
        }
    };
    ZRender.prototype.setSleepAfterStill = function(stillFramesCount) {
        this._sleepAfterStill = stillFramesCount;
    };
    ZRender.prototype.wakeUp = function() {
        if (this._disposed) return;
        this.animation.start();
        this._stillFrameAccum = 0;
    };
    ZRender.prototype.refreshHover = function() {
        this._needsRefreshHover = true;
    };
    ZRender.prototype.refreshHoverImmediately = function() {
        if (this._disposed) return;
        this._needsRefreshHover = false;
        if (this.painter.refreshHover && this.painter.getType() === "canvas") this.painter.refreshHover();
    };
    ZRender.prototype.resize = function(opts) {
        if (this._disposed) return;
        opts = opts || {};
        this.painter.resize(opts.width, opts.height);
        this.handler.resize();
    };
    ZRender.prototype.clearAnimation = function() {
        if (this._disposed) return;
        this.animation.clear();
    };
    ZRender.prototype.getWidth = function() {
        if (this._disposed) return;
        return this.painter.getWidth();
    };
    ZRender.prototype.getHeight = function() {
        if (this._disposed) return;
        return this.painter.getHeight();
    };
    ZRender.prototype.setCursorStyle = function(cursorStyle) {
        if (this._disposed) return;
        this.handler.setCursorStyle(cursorStyle);
    };
    ZRender.prototype.findHover = function(x, y) {
        if (this._disposed) return;
        return this.handler.findHover(x, y);
    };
    ZRender.prototype.on = function(eventName, eventHandler, context) {
        if (!this._disposed) this.handler.on(eventName, eventHandler, context);
        return this;
    };
    ZRender.prototype.off = function(eventName, eventHandler) {
        if (this._disposed) return;
        this.handler.off(eventName, eventHandler);
    };
    ZRender.prototype.trigger = function(eventName, event) {
        if (this._disposed) return;
        this.handler.trigger(eventName, event);
    };
    ZRender.prototype.clear = function() {
        if (this._disposed) return;
        var roots = this.storage.getRoots();
        for(var i = 0; i < roots.length; i++)if (roots[i] instanceof (0, $748aea24eee93173$export$2e2bcd8739ae039)) roots[i].removeSelfFromZr(this);
        this.storage.delAllRoots();
        this.painter.clear();
    };
    ZRender.prototype.dispose = function() {
        if (this._disposed) return;
        this.animation.stop();
        this.clear();
        this.storage.dispose();
        this.painter.dispose();
        this.handler.dispose();
        this.animation = this.storage = this.painter = this.handler = null;
        this._disposed = true;
        $2d04db0a24ba5285$var$delInstance(this.id);
    };
    return ZRender;
}();
function $2d04db0a24ba5285$export$2cd8252107eb640b(dom, opts) {
    var zr = new $2d04db0a24ba5285$var$ZRender($e44eb14c4271d0f9$export$46e8f25c7328f77e(), dom, opts);
    $2d04db0a24ba5285$var$instances[zr.id] = zr;
    return zr;
}
function $2d04db0a24ba5285$export$fcfbbcec2cb820d5(zr) {
    zr.dispose();
}
function $2d04db0a24ba5285$export$825f692fb04800ef() {
    for(var key in $2d04db0a24ba5285$var$instances)if ($2d04db0a24ba5285$var$instances.hasOwnProperty(key)) $2d04db0a24ba5285$var$instances[key].dispose();
    $2d04db0a24ba5285$var$instances = {};
}
function $2d04db0a24ba5285$export$8bedcca5bbd73999(id) {
    return $2d04db0a24ba5285$var$instances[id];
}
function $2d04db0a24ba5285$export$a3e793ccb11823a5(name, Ctor) {
    $2d04db0a24ba5285$var$painterCtors[name] = Ctor;
}
var $2d04db0a24ba5285$var$ssrDataGetter;
function $2d04db0a24ba5285$export$dd7015a5412ca583(el) {
    if (typeof $2d04db0a24ba5285$var$ssrDataGetter === "function") return $2d04db0a24ba5285$var$ssrDataGetter(el);
}
function $2d04db0a24ba5285$export$e7a09d7fe68a4f7(getter) {
    $2d04db0a24ba5285$var$ssrDataGetter = getter;
}
var $2d04db0a24ba5285$export$83d89fbfd8236492 = "5.5.0";






/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /*
* A third-party license is embedded for some of the code in this file:
* The method "quantile" was copied from "d3.js".
* (See more details in the comment of the method below.)
* The use of the source code of this file is also subject to the terms
* and consitions of the license of "d3.js" (BSD-3Clause, see
* </licenses/LICENSE-d3>).
*/ 
var $13e6a1a716300dd4$var$RADIAN_EPSILON = 1e-4;
// Although chrome already enlarge this number to 100 for `toFixed`, but
// we sill follow the spec for compatibility.
var $13e6a1a716300dd4$var$ROUND_SUPPORTED_PRECISION_MAX = 20;
function $13e6a1a716300dd4$var$_trim(str) {
    return str.replace(/^\s+|\s+$/g, "");
}
function $13e6a1a716300dd4$export$d3f68fbaa670562(val, domain, range, clamp) {
    var d0 = domain[0];
    var d1 = domain[1];
    var r0 = range[0];
    var r1 = range[1];
    var subDomain = d1 - d0;
    var subRange = r1 - r0;
    if (subDomain === 0) return subRange === 0 ? r0 : (r0 + r1) / 2;
    // Avoid accuracy problem in edge, such as
    // 146.39 - 62.83 === 83.55999999999999.
    // See echarts/test/ut/spec/util/number.js#linearMap#accuracyError
    // It is a little verbose for efficiency considering this method
    // is a hotspot.
    if (clamp) {
        if (subDomain > 0) {
            if (val <= d0) return r0;
            else if (val >= d1) return r1;
        } else {
            if (val >= d0) return r0;
            else if (val <= d1) return r1;
        }
    } else {
        if (val === d0) return r0;
        if (val === d1) return r1;
    }
    return (val - d0) / subDomain * subRange + r0;
}
function $13e6a1a716300dd4$export$e8514cb5a5e2b40f(percent, all) {
    switch(percent){
        case "center":
        case "middle":
            percent = "50%";
            break;
        case "left":
        case "top":
            percent = "0%";
            break;
        case "right":
        case "bottom":
            percent = "100%";
            break;
    }
    if ($e44eb14c4271d0f9$export$844ec244b1367d54(percent)) {
        if ($13e6a1a716300dd4$var$_trim(percent).match(/%$/)) return parseFloat(percent) / 100 * all;
        return parseFloat(percent);
    }
    return percent == null ? NaN : +percent;
}
function $13e6a1a716300dd4$export$2077e0241d6afd3c(x, precision, returnStr) {
    if (precision == null) precision = 10;
    // Avoid range error
    precision = Math.min(Math.max(0, precision), $13e6a1a716300dd4$var$ROUND_SUPPORTED_PRECISION_MAX);
    // PENDING: 1.005.toFixed(2) is '1.00' rather than '1.01'
    x = (+x).toFixed(precision);
    return returnStr ? x : +x;
}
function $13e6a1a716300dd4$export$debe6e778e0a6d32(arr) {
    arr.sort(function(a, b) {
        return a - b;
    });
    return arr;
}
function $13e6a1a716300dd4$export$e0c74b50bbd10f68(val) {
    val = +val;
    if (isNaN(val)) return 0;
    // It is much faster than methods converting number to string as follows
    //      let tmp = val.toString();
    //      return tmp.length - 1 - tmp.indexOf('.');
    // especially when precision is low
    // Notice:
    // (1) If the loop count is over about 20, it is slower than `getPrecisionSafe`.
    //     (see https://jsbench.me/2vkpcekkvw/1)
    // (2) If the val is less than for example 1e-15, the result may be incorrect.
    //     (see test/ut/spec/util/number.test.ts `getPrecision_equal_random`)
    if (val > 1e-14) {
        var e = 1;
        for(var i = 0; i < 15; i++, e *= 10){
            if (Math.round(val * e) / e === val) return i;
        }
    }
    return $13e6a1a716300dd4$export$6d86ba4ca4984d31(val);
}
function $13e6a1a716300dd4$export$6d86ba4ca4984d31(val) {
    // toLowerCase for: '3.4E-12'
    var str = val.toString().toLowerCase();
    // Consider scientific notation: '3.4e-12' '3.4e+12'
    var eIndex = str.indexOf("e");
    var exp = eIndex > 0 ? +str.slice(eIndex + 1) : 0;
    var significandPartLen = eIndex > 0 ? eIndex : str.length;
    var dotIndex = str.indexOf(".");
    var decimalPartLen = dotIndex < 0 ? 0 : significandPartLen - 1 - dotIndex;
    return Math.max(0, decimalPartLen - exp);
}
function $13e6a1a716300dd4$export$666260d9a2dda8a7(dataExtent, pixelExtent) {
    var log = Math.log;
    var LN10 = Math.LN10;
    var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);
    var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10);
    // toFixed() digits argument must be between 0 and 20.
    var precision = Math.min(Math.max(-dataQuantity + sizeQuantity, 0), 20);
    return !isFinite(precision) ? 20 : precision;
}
function $13e6a1a716300dd4$export$70cc11b075afeb90(valueList, idx, precision) {
    if (!valueList[idx]) return 0;
    var seats = $13e6a1a716300dd4$export$222dabb13d5320df(valueList, precision);
    return seats[idx] || 0;
}
function $13e6a1a716300dd4$export$222dabb13d5320df(valueList, precision) {
    var sum = $e44eb14c4271d0f9$export$533b26079ad0b4b(valueList, function(acc, val) {
        return acc + (isNaN(val) ? 0 : val);
    }, 0);
    if (sum === 0) return [];
    var digits = Math.pow(10, precision);
    var votesPerQuota = $e44eb14c4271d0f9$export$871de8747c9eaa88(valueList, function(val) {
        return (isNaN(val) ? 0 : val) / sum * digits * 100;
    });
    var targetSeats = digits * 100;
    var seats = $e44eb14c4271d0f9$export$871de8747c9eaa88(votesPerQuota, function(votes) {
        // Assign automatic seats.
        return Math.floor(votes);
    });
    var currentSum = $e44eb14c4271d0f9$export$533b26079ad0b4b(seats, function(acc, val) {
        return acc + val;
    }, 0);
    var remainder = $e44eb14c4271d0f9$export$871de8747c9eaa88(votesPerQuota, function(votes, idx) {
        return votes - seats[idx];
    });
    // Has remainding votes.
    while(currentSum < targetSeats){
        // Find next largest remainder.
        var max = Number.NEGATIVE_INFINITY;
        var maxId = null;
        for(var i = 0, len = remainder.length; i < len; ++i)if (remainder[i] > max) {
            max = remainder[i];
            maxId = i;
        }
        // Add a vote to max remainder.
        ++seats[maxId];
        remainder[maxId] = 0;
        ++currentSum;
    }
    return $e44eb14c4271d0f9$export$871de8747c9eaa88(seats, function(seat) {
        return seat / digits;
    });
}
function $13e6a1a716300dd4$export$d3389a301c3a5706(val0, val1) {
    var maxPrecision = Math.max($13e6a1a716300dd4$export$e0c74b50bbd10f68(val0), $13e6a1a716300dd4$export$e0c74b50bbd10f68(val1));
    // const multiplier = Math.pow(10, maxPrecision);
    // return (Math.round(val0 * multiplier) + Math.round(val1 * multiplier)) / multiplier;
    var sum = val0 + val1;
    // // PENDING: support more?
    return maxPrecision > $13e6a1a716300dd4$var$ROUND_SUPPORTED_PRECISION_MAX ? sum : $13e6a1a716300dd4$export$2077e0241d6afd3c(sum, maxPrecision);
}
var $13e6a1a716300dd4$export$18510406f204a1b9 = 9007199254740991;
function $13e6a1a716300dd4$export$2ca6dd70a288b1c3(radian) {
    var pi2 = Math.PI * 2;
    return (radian % pi2 + pi2) % pi2;
}
function $13e6a1a716300dd4$export$d1df570aea2868f(val) {
    return val > -$13e6a1a716300dd4$var$RADIAN_EPSILON && val < $13e6a1a716300dd4$var$RADIAN_EPSILON;
}
// eslint-disable-next-line
var $13e6a1a716300dd4$var$TIME_REG = /^(?:(\d{4})(?:[-\/](\d{1,2})(?:[-\/](\d{1,2})(?:[T ](\d{1,2})(?::(\d{1,2})(?::(\d{1,2})(?:[.,](\d+))?)?)?(Z|[\+\-]\d\d:?\d\d)?)?)?)?)?$/; // jshint ignore:line
function $13e6a1a716300dd4$export$6b862160d295c8e(value) {
    if (value instanceof Date) return value;
    else if ($e44eb14c4271d0f9$export$844ec244b1367d54(value)) {
        // Different browsers parse date in different way, so we parse it manually.
        // Some other issues:
        // new Date('1970-01-01') is UTC,
        // new Date('1970/01/01') and new Date('1970-1-01') is local.
        // See issue #3623
        var match = $13e6a1a716300dd4$var$TIME_REG.exec(value);
        if (!match) // return Invalid Date.
        return new Date(NaN);
        // Use local time when no timezone offset is specified.
        if (!match[8]) // match[n] can only be string or undefined.
        // But take care of '12' + 1 => '121'.
        return new Date(+match[1], +(match[2] || 1) - 1, +match[3] || 1, +match[4] || 0, +(match[5] || 0), +match[6] || 0, match[7] ? +match[7].substring(0, 3) : 0);
        else {
            var hour = +match[4] || 0;
            if (match[8].toUpperCase() !== "Z") hour -= +match[8].slice(0, 3);
            return new Date(Date.UTC(+match[1], +(match[2] || 1) - 1, +match[3] || 1, hour, +(match[5] || 0), +match[6] || 0, match[7] ? +match[7].substring(0, 3) : 0));
        }
    } else if (value == null) return new Date(NaN);
    return new Date(Math.round(value));
}
function $13e6a1a716300dd4$export$82dd68b83a44b253(val) {
    return Math.pow(10, $13e6a1a716300dd4$export$97256a17b20a0c24(val));
}
function $13e6a1a716300dd4$export$97256a17b20a0c24(val) {
    if (val === 0) return 0;
    var exp = Math.floor(Math.log(val) / Math.LN10);
    /**
   * exp is expected to be the rounded-down result of the base-10 log of val.
   * But due to the precision loss with Math.log(val), we need to restore it
   * using 10^exp to make sure we can get val back from exp. #11249
   */ if (val / Math.pow(10, exp) >= 10) exp++;
    return exp;
}
function $13e6a1a716300dd4$export$7a695fe44258210b(val, round) {
    var exponent = $13e6a1a716300dd4$export$97256a17b20a0c24(val);
    var exp10 = Math.pow(10, exponent);
    var f = val / exp10; // 1 <= f < 10
    var nf;
    if (round) {
        if (f < 1.5) nf = 1;
        else if (f < 2.5) nf = 2;
        else if (f < 4) nf = 3;
        else if (f < 7) nf = 5;
        else nf = 10;
    } else {
        if (f < 1) nf = 1;
        else if (f < 2) nf = 2;
        else if (f < 3) nf = 3;
        else if (f < 5) nf = 5;
        else nf = 10;
    }
    val = nf * exp10;
    // Fix 3 * 0.1 === 0.30000000000000004 issue (see IEEE 754).
    // 20 is the uppper bound of toFixed.
    return exponent >= -20 ? +val.toFixed(exponent < 0 ? -exponent : 0) : val;
}
function $13e6a1a716300dd4$export$651fb4afdb6caa4b(ascArr, p) {
    var H = (ascArr.length - 1) * p + 1;
    var h = Math.floor(H);
    var v = +ascArr[h - 1];
    var e = H - h;
    return e ? v + e * (ascArr[h] - v) : v;
}
function $13e6a1a716300dd4$export$12f7386070bc380a(list) {
    list.sort(function(a, b) {
        return littleThan(a, b, 0) ? -1 : 1;
    });
    var curr = -Infinity;
    var currClose = 1;
    for(var i = 0; i < list.length;){
        var interval = list[i].interval;
        var close_1 = list[i].close;
        for(var lg = 0; lg < 2; lg++){
            if (interval[lg] <= curr) {
                interval[lg] = curr;
                close_1[lg] = !lg ? 1 - currClose : 1;
            }
            curr = interval[lg];
            currClose = close_1[lg];
        }
        if (interval[0] === interval[1] && close_1[0] * close_1[1] !== 1) list.splice(i, 1);
        else i++;
    }
    return list;
    function littleThan(a, b, lg) {
        return a.interval[lg] < b.interval[lg] || a.interval[lg] === b.interval[lg] && (a.close[lg] - b.close[lg] === (!lg ? 1 : -1) || !lg && littleThan(a, b, 1));
    }
}
function $13e6a1a716300dd4$export$8b4007b942b45a96(val) {
    var valFloat = parseFloat(val);
    return valFloat == val // eslint-disable-line eqeqeq
     && (valFloat !== 0 || !$e44eb14c4271d0f9$export$844ec244b1367d54(val) || val.indexOf("x") <= 0 // For case ' 0x0 '.
    ) ? valFloat : NaN;
}
function $13e6a1a716300dd4$export$e90fb89750dba83f(val) {
    return !isNaN($13e6a1a716300dd4$export$8b4007b942b45a96(val));
}
function $13e6a1a716300dd4$export$474d2ec9aa44a22() {
    return Math.round(Math.random() * 9);
}
function $13e6a1a716300dd4$export$a368fd580c0d0fe4(a, b) {
    if (b === 0) return a;
    return $13e6a1a716300dd4$export$a368fd580c0d0fe4(b, a % b);
}
function $13e6a1a716300dd4$export$680a45b749323f49(a, b) {
    if (a == null) return b;
    if (b == null) return a;
    return a * b / $13e6a1a716300dd4$export$a368fd580c0d0fe4(a, b);
}


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
var $4796c55e8b767685$var$ECHARTS_PREFIX = "[ECharts] ";
var $4796c55e8b767685$var$storedLogs = {};
var $4796c55e8b767685$var$hasConsole = typeof console !== "undefined" && console.warn && console.log;
function $4796c55e8b767685$var$outputLog(type, str, onlyOnce) {
    if ($4796c55e8b767685$var$hasConsole) {
        if (onlyOnce) {
            if ($4796c55e8b767685$var$storedLogs[str]) return;
            $4796c55e8b767685$var$storedLogs[str] = true;
        }
        // eslint-disable-next-line
        console[type]($4796c55e8b767685$var$ECHARTS_PREFIX + str);
    }
}
function $4796c55e8b767685$export$bef1f36f5486a6a3(str, onlyOnce) {
    $4796c55e8b767685$var$outputLog("log", str, onlyOnce);
}
function $4796c55e8b767685$export$c106dd0671a0fc2d(str, onlyOnce) {
    $4796c55e8b767685$var$outputLog("warn", str, onlyOnce);
}
function $4796c55e8b767685$export$a3bc9b8ed74fc(str, onlyOnce) {
    $4796c55e8b767685$var$outputLog("error", str, onlyOnce);
}
function $4796c55e8b767685$export$4a9c0b74eb885aa1(str) {
    // Not display duplicate message.
    $4796c55e8b767685$var$outputLog("warn", "DEPRECATED: " + str, true);
}
function $4796c55e8b767685$export$bbd91d66002c4ea6(oldOpt, newOpt, scope) {
    $4796c55e8b767685$export$4a9c0b74eb885aa1((scope ? "[" + scope + "]" : "") + (oldOpt + " is deprecated, use " + newOpt + " instead."));
}
function $4796c55e8b767685$export$a68bb8b222a6bd43() {
    var hintInfo = [];
    for(var _i = 0; _i < arguments.length; _i++)hintInfo[_i] = arguments[_i];
    var msg = "";
    // Fuzzy stringify for print.
    // This code only exist in dev environment.
    var makePrintableStringIfPossible_1 = function(val) {
        return val === void 0 ? "undefined" : val === Infinity ? "Infinity" : val === -Infinity ? "-Infinity" : (0, $e44eb14c4271d0f9$export$7d667b9a0c48c975)(val) ? "NaN" : val instanceof Date ? "Date(" + val.toISOString() + ")" : (0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(val) ? "function () { ... }" : (0, $e44eb14c4271d0f9$export$49841c62b9eff15)(val) ? val + "" : null;
    };
    msg = (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(hintInfo, function(arg) {
        if ((0, $e44eb14c4271d0f9$export$844ec244b1367d54)(arg)) // Print without quotation mark for some statement.
        return arg;
        else {
            var printableStr = makePrintableStringIfPossible_1(arg);
            if (printableStr != null) return printableStr;
            else if (typeof JSON !== "undefined" && JSON.stringify) try {
                return JSON.stringify(arg, function(n, val) {
                    var printableStr = makePrintableStringIfPossible_1(val);
                    return printableStr == null ? val : printableStr;
                });
            // In most cases the info object is small, so do not line break.
            } catch (err) {
                return "?";
            }
            else return "?";
        }
    }).join(" ");
    return msg;
}
function $4796c55e8b767685$export$8bf7aba4a9e09055(msg) {
    throw new Error(msg);
}


function $8917c02fd8256c67$var$interpolateNumber(p0, p1, percent) {
    return (p1 - p0) * percent + p0;
}
/**
 * Make the name displayable. But we should
 * make sure it is not duplicated with user
 * specified name, so use '\0';
 */ var $8917c02fd8256c67$var$DUMMY_COMPONENT_NAME_PREFIX = "series\0";
var $8917c02fd8256c67$var$INTERNAL_COMPONENT_ID_PREFIX = "\0_ec_\0";
function $8917c02fd8256c67$export$4f07b212a02c8051(value) {
    return value instanceof Array ? value : value == null ? [] : [
        value
    ];
}
function $8917c02fd8256c67$export$abdcc6a26372f94b(opt, key, subOpts) {
    // Caution: performance sensitive.
    if (opt) {
        opt[key] = opt[key] || {};
        opt.emphasis = opt.emphasis || {};
        opt.emphasis[key] = opt.emphasis[key] || {};
        // Default emphasis option from normal
        for(var i = 0, len = subOpts.length; i < len; i++){
            var subOptName = subOpts[i];
            if (!opt.emphasis[key].hasOwnProperty(subOptName) && opt[key].hasOwnProperty(subOptName)) opt.emphasis[key][subOptName] = opt[key][subOptName];
        }
    }
}
var $8917c02fd8256c67$export$df45610347a602ad = [
    "fontStyle",
    "fontWeight",
    "fontSize",
    "fontFamily",
    "rich",
    "tag",
    "color",
    "textBorderColor",
    "textBorderWidth",
    "width",
    "height",
    "lineHeight",
    "align",
    "verticalAlign",
    "baseline",
    "shadowColor",
    "shadowBlur",
    "shadowOffsetX",
    "shadowOffsetY",
    "textShadowColor",
    "textShadowBlur",
    "textShadowOffsetX",
    "textShadowOffsetY",
    "backgroundColor",
    "borderColor",
    "borderWidth",
    "borderRadius",
    "padding"
];
function $8917c02fd8256c67$export$2c944e12edb48d4b(dataItem) {
    return (0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(dataItem) && !(0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(dataItem) && !(dataItem instanceof Date) ? dataItem.value : dataItem;
}
function $8917c02fd8256c67$export$3e1a543f33ef6883(dataItem) {
    return (0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(dataItem) && !(dataItem instanceof Array);
// // markLine data can be array
// && !(dataItem[0] && isObject(dataItem[0]) && !(dataItem[0] instanceof Array));
}
function $8917c02fd8256c67$export$574f818966e4da87(existings, newCmptOptions, mode) {
    var isNormalMergeMode = mode === "normalMerge";
    var isReplaceMergeMode = mode === "replaceMerge";
    var isReplaceAllMode = mode === "replaceAll";
    existings = existings || [];
    newCmptOptions = (newCmptOptions || []).slice();
    var existingIdIdxMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
    // Validate id and name on user input option.
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(newCmptOptions, function(cmptOption, index) {
        if (!(0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(cmptOption)) {
            newCmptOptions[index] = null;
            return;
        }
        // There is some legacy case that name is set as `false`.
        // But should work normally rather than throw error.
        if (cmptOption.id != null && !$8917c02fd8256c67$var$isValidIdOrName(cmptOption.id)) $8917c02fd8256c67$var$warnInvalidateIdOrName(cmptOption.id);
        if (cmptOption.name != null && !$8917c02fd8256c67$var$isValidIdOrName(cmptOption.name)) $8917c02fd8256c67$var$warnInvalidateIdOrName(cmptOption.name);
    });
    var result = $8917c02fd8256c67$var$prepareResult(existings, existingIdIdxMap, mode);
    if (isNormalMergeMode || isReplaceMergeMode) $8917c02fd8256c67$var$mappingById(result, existings, existingIdIdxMap, newCmptOptions);
    if (isNormalMergeMode) $8917c02fd8256c67$var$mappingByName(result, newCmptOptions);
    if (isNormalMergeMode || isReplaceMergeMode) $8917c02fd8256c67$var$mappingByIndex(result, newCmptOptions, isReplaceMergeMode);
    else if (isReplaceAllMode) $8917c02fd8256c67$var$mappingInReplaceAllMode(result, newCmptOptions);
    $8917c02fd8256c67$var$makeIdAndName(result);
    // The array `result` MUST NOT contain elided items, otherwise the
    // forEach will omit those items and result in incorrect result.
    return result;
}
function $8917c02fd8256c67$var$prepareResult(existings, existingIdIdxMap, mode) {
    var result = [];
    if (mode === "replaceAll") return result;
    // Do not use native `map` to in case that the array `existings`
    // contains elided items, which will be omitted.
    for(var index = 0; index < existings.length; index++){
        var existing = existings[index];
        // Because of replaceMerge, `existing` may be null/undefined.
        if (existing && existing.id != null) existingIdIdxMap.set(existing.id, index);
        // For non-internal-componnets:
        //     Mode "normalMerge": all existings kept.
        //     Mode "replaceMerge": all existing removed unless mapped by id.
        // For internal-components:
        //     go with "replaceMerge" approach in both mode.
        result.push({
            existing: mode === "replaceMerge" || $8917c02fd8256c67$export$feece3e7d52a102b(existing) ? null : existing,
            newOption: null,
            keyInfo: null,
            brandNew: null
        });
    }
    return result;
}
function $8917c02fd8256c67$var$mappingById(result, existings, existingIdIdxMap, newCmptOptions) {
    // Mapping by id if specified.
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(newCmptOptions, function(cmptOption, index) {
        if (!cmptOption || cmptOption.id == null) return;
        var optionId = $8917c02fd8256c67$var$makeComparableKey(cmptOption.id);
        var existingIdx = existingIdIdxMap.get(optionId);
        if (existingIdx != null) {
            var resultItem = result[existingIdx];
            (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(!resultItem.newOption, 'Duplicated option on id "' + optionId + '".');
            resultItem.newOption = cmptOption;
            // In both mode, if id matched, new option will be merged to
            // the existings rather than creating new component model.
            resultItem.existing = existings[existingIdx];
            newCmptOptions[index] = null;
        }
    });
}
function $8917c02fd8256c67$var$mappingByName(result, newCmptOptions) {
    // Mapping by name if specified.
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(newCmptOptions, function(cmptOption, index) {
        if (!cmptOption || cmptOption.name == null) return;
        for(var i = 0; i < result.length; i++){
            var existing = result[i].existing;
            if (!result[i].newOption // Consider name: two map to one.
             && existing && (existing.id == null || cmptOption.id == null) && !$8917c02fd8256c67$export$feece3e7d52a102b(cmptOption) && !$8917c02fd8256c67$export$feece3e7d52a102b(existing) && $8917c02fd8256c67$var$keyExistAndEqual("name", existing, cmptOption)) {
                result[i].newOption = cmptOption;
                newCmptOptions[index] = null;
                return;
            }
        }
    });
}
function $8917c02fd8256c67$var$mappingByIndex(result, newCmptOptions, brandNew) {
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(newCmptOptions, function(cmptOption) {
        if (!cmptOption) return;
        // Find the first place that not mapped by id and not internal component (consider the "hole").
        var resultItem;
        var nextIdx = 0;
        while(// Be `!resultItem` only when `nextIdx >= result.length`.
        (resultItem = result[nextIdx]) && (resultItem.newOption || $8917c02fd8256c67$export$feece3e7d52a102b(resultItem.existing) || // In mode "replaceMerge", here no not-mapped-non-internal-existing.
        resultItem.existing && cmptOption.id != null && !$8917c02fd8256c67$var$keyExistAndEqual("id", cmptOption, resultItem.existing)))nextIdx++;
        if (resultItem) {
            resultItem.newOption = cmptOption;
            resultItem.brandNew = brandNew;
        } else result.push({
            newOption: cmptOption,
            brandNew: brandNew,
            existing: null,
            keyInfo: null
        });
        nextIdx++;
    });
}
function $8917c02fd8256c67$var$mappingInReplaceAllMode(result, newCmptOptions) {
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(newCmptOptions, function(cmptOption) {
        // The feature "reproduce" requires "hole" will also reproduced
        // in case that component index referring are broken.
        result.push({
            newOption: cmptOption,
            brandNew: true,
            existing: null,
            keyInfo: null
        });
    });
}
/**
 * Make id and name for mapping result (result of mappingToExists)
 * into `keyInfo` field.
 */ function $8917c02fd8256c67$var$makeIdAndName(mapResult) {
    // We use this id to hash component models and view instances
    // in echarts. id can be specified by user, or auto generated.
    // The id generation rule ensures new view instance are able
    // to mapped to old instance when setOption are called in
    // no-merge mode. So we generate model id by name and plus
    // type in view id.
    // name can be duplicated among components, which is convenient
    // to specify multi components (like series) by one name.
    // Ensure that each id is distinct.
    var idMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(mapResult, function(item) {
        var existing = item.existing;
        existing && idMap.set(existing.id, item);
    });
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(mapResult, function(item) {
        var opt = item.newOption;
        // Force ensure id not duplicated.
        (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(!opt || opt.id == null || !idMap.get(opt.id) || idMap.get(opt.id) === item, "id duplicates: " + (opt && opt.id));
        opt && opt.id != null && idMap.set(opt.id, item);
        !item.keyInfo && (item.keyInfo = {});
    });
    // Make name and id.
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(mapResult, function(item, index) {
        var existing = item.existing;
        var opt = item.newOption;
        var keyInfo = item.keyInfo;
        if (!(0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(opt)) return;
        // Name can be overwritten. Consider case: axis.name = '20km'.
        // But id generated by name will not be changed, which affect
        // only in that case: setOption with 'not merge mode' and view
        // instance will be recreated, which can be accepted.
        keyInfo.name = opt.name != null ? $8917c02fd8256c67$var$makeComparableKey(opt.name) : existing ? existing.name : $8917c02fd8256c67$var$DUMMY_COMPONENT_NAME_PREFIX + index;
        if (existing) keyInfo.id = $8917c02fd8256c67$var$makeComparableKey(existing.id);
        else if (opt.id != null) keyInfo.id = $8917c02fd8256c67$var$makeComparableKey(opt.id);
        else {
            // Consider this situatoin:
            //  optionA: [{name: 'a'}, {name: 'a'}, {..}]
            //  optionB [{..}, {name: 'a'}, {name: 'a'}]
            // Series with the same name between optionA and optionB
            // should be mapped.
            var idNum = 0;
            do keyInfo.id = "\0" + keyInfo.name + "\0" + idNum++;
            while (idMap.get(keyInfo.id));
        }
        idMap.set(keyInfo.id, item);
    });
}
function $8917c02fd8256c67$var$keyExistAndEqual(attr, obj1, obj2) {
    var key1 = $8917c02fd8256c67$export$fb1a222ba5dd6e51(obj1[attr], null);
    var key2 = $8917c02fd8256c67$export$fb1a222ba5dd6e51(obj2[attr], null);
    // See `MappingExistingItem`. `id` and `name` trade string equals to number.
    return key1 != null && key2 != null && key1 === key2;
}
/**
 * @return return null if not exist.
 */ function $8917c02fd8256c67$var$makeComparableKey(val) {
    if (val == null) throw new Error();
    return $8917c02fd8256c67$export$fb1a222ba5dd6e51(val, "");
}
function $8917c02fd8256c67$export$fb1a222ba5dd6e51(idOrName, defaultValue) {
    if (idOrName == null) return defaultValue;
    return (0, $e44eb14c4271d0f9$export$844ec244b1367d54)(idOrName) ? idOrName : (0, $e44eb14c4271d0f9$export$7e4aa119212bc614)(idOrName) || (0, $e44eb14c4271d0f9$export$29d0bb2a4e07b252)(idOrName) ? idOrName + "" : defaultValue;
}
function $8917c02fd8256c67$var$warnInvalidateIdOrName(idOrName) {
    (0, $4796c55e8b767685$export$c106dd0671a0fc2d)("`" + idOrName + "` is invalid id or name. Must be a string or number.");
}
function $8917c02fd8256c67$var$isValidIdOrName(idOrName) {
    return (0, $e44eb14c4271d0f9$export$29d0bb2a4e07b252)(idOrName) || (0, $13e6a1a716300dd4$export$e90fb89750dba83f)(idOrName);
}
function $8917c02fd8256c67$export$beae19a2652b3368(componentModel) {
    var name = componentModel.name;
    // Is specified when `indexOf` get -1 or > 0.
    return !!(name && name.indexOf($8917c02fd8256c67$var$DUMMY_COMPONENT_NAME_PREFIX));
}
function $8917c02fd8256c67$export$feece3e7d52a102b(cmptOption) {
    return cmptOption && cmptOption.id != null && $8917c02fd8256c67$var$makeComparableKey(cmptOption.id).indexOf($8917c02fd8256c67$var$INTERNAL_COMPONENT_ID_PREFIX) === 0;
}
function $8917c02fd8256c67$export$1753133c42e665e8(idSuffix) {
    return $8917c02fd8256c67$var$INTERNAL_COMPONENT_ID_PREFIX + idSuffix;
}
function $8917c02fd8256c67$export$5ac61aca2ba0282d(mappingResult, mainType, componentModelCtor) {
    // Set mainType and complete subType.
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(mappingResult, function(item) {
        var newOption = item.newOption;
        if ((0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(newOption)) {
            item.keyInfo.mainType = mainType;
            item.keyInfo.subType = $8917c02fd8256c67$var$determineSubType(mainType, newOption, item.existing, componentModelCtor);
        }
    });
}
function $8917c02fd8256c67$var$determineSubType(mainType, newCmptOption, existComponent, componentModelCtor) {
    var subType = newCmptOption.type ? newCmptOption.type : existComponent ? existComponent.subType : componentModelCtor.determineSubType(mainType, newCmptOption);
    // tooltip, markline, markpoint may always has no subType
    return subType;
}
function $8917c02fd8256c67$export$6d12cabb0c9bf8e3(batchA, batchB) {
    var mapA = {};
    var mapB = {};
    makeMap(batchA || [], mapA);
    makeMap(batchB || [], mapB, mapA);
    return [
        mapToArray(mapA),
        mapToArray(mapB)
    ];
    function makeMap(sourceBatch, map, otherMap) {
        for(var i = 0, len = sourceBatch.length; i < len; i++){
            var seriesId = $8917c02fd8256c67$export$fb1a222ba5dd6e51(sourceBatch[i].seriesId, null);
            if (seriesId == null) return;
            var dataIndices = $8917c02fd8256c67$export$4f07b212a02c8051(sourceBatch[i].dataIndex);
            var otherDataIndices = otherMap && otherMap[seriesId];
            for(var j = 0, lenj = dataIndices.length; j < lenj; j++){
                var dataIndex = dataIndices[j];
                if (otherDataIndices && otherDataIndices[dataIndex]) otherDataIndices[dataIndex] = null;
                else (map[seriesId] || (map[seriesId] = {}))[dataIndex] = 1;
            }
        }
    }
    function mapToArray(map, isData) {
        var result = [];
        for(var i in map)if (map.hasOwnProperty(i) && map[i] != null) {
            if (isData) result.push(+i);
            else {
                var dataIndices = mapToArray(map[i], true);
                dataIndices.length && result.push({
                    seriesId: i,
                    dataIndex: dataIndices
                });
            }
        }
        return result;
    }
}
function $8917c02fd8256c67$export$42b26cae8b8d10(data, payload) {
    if (payload.dataIndexInside != null) return payload.dataIndexInside;
    else if (payload.dataIndex != null) return (0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(payload.dataIndex) ? (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(payload.dataIndex, function(value) {
        return data.indexOfRawIndex(value);
    }) : data.indexOfRawIndex(payload.dataIndex);
    else if (payload.name != null) return (0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(payload.name) ? (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(payload.name, function(value) {
        return data.indexOfName(value);
    }) : data.indexOfName(payload.name);
}
function $8917c02fd8256c67$export$64df9f8d92ae083f() {
    var key = "__ec_inner_" + $8917c02fd8256c67$var$innerUniqueIndex++;
    return function(hostObj) {
        return hostObj[key] || (hostObj[key] = {});
    };
}
var $8917c02fd8256c67$var$innerUniqueIndex = (0, $13e6a1a716300dd4$export$474d2ec9aa44a22)();
function $8917c02fd8256c67$export$95de80076abac814(ecModel, finderInput, opt) {
    var _a = $8917c02fd8256c67$export$fe600815775d9400(finderInput, opt), mainTypeSpecified = _a.mainTypeSpecified, queryOptionMap = _a.queryOptionMap, others = _a.others;
    var result = others;
    var defaultMainType = opt ? opt.defaultMainType : null;
    if (!mainTypeSpecified && defaultMainType) queryOptionMap.set(defaultMainType, {});
    queryOptionMap.each(function(queryOption, mainType) {
        var queryResult = $8917c02fd8256c67$export$dc741340f7e5f186(ecModel, mainType, queryOption, {
            useDefault: defaultMainType === mainType,
            enableAll: opt && opt.enableAll != null ? opt.enableAll : true,
            enableNone: opt && opt.enableNone != null ? opt.enableNone : true
        });
        result[mainType + "Models"] = queryResult.models;
        result[mainType + "Model"] = queryResult.models[0];
    });
    return result;
}
function $8917c02fd8256c67$export$fe600815775d9400(finderInput, opt) {
    var finder;
    if ((0, $e44eb14c4271d0f9$export$844ec244b1367d54)(finderInput)) {
        var obj = {};
        obj[finderInput + "Index"] = 0;
        finder = obj;
    } else finder = finderInput;
    var queryOptionMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
    var others = {};
    var mainTypeSpecified = false;
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(finder, function(value, key) {
        // Exclude 'dataIndex' and other illgal keys.
        if (key === "dataIndex" || key === "dataIndexInside") {
            others[key] = value;
            return;
        }
        var parsedKey = key.match(/^(\w+)(Index|Id|Name)$/) || [];
        var mainType = parsedKey[1];
        var queryType = (parsedKey[2] || "").toLowerCase();
        if (!mainType || !queryType || opt && opt.includeMainTypes && (0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)(opt.includeMainTypes, mainType) < 0) return;
        mainTypeSpecified = mainTypeSpecified || !!mainType;
        var queryOption = queryOptionMap.get(mainType) || queryOptionMap.set(mainType, {});
        queryOption[queryType] = value;
    });
    return {
        mainTypeSpecified: mainTypeSpecified,
        queryOptionMap: queryOptionMap,
        others: others
    };
}
var $8917c02fd8256c67$export$f076738ec84e693c = {
    useDefault: true,
    enableAll: false,
    enableNone: false
};
var $8917c02fd8256c67$export$48d598924ce4892c = {
    useDefault: false,
    enableAll: true,
    enableNone: true
};
function $8917c02fd8256c67$export$dc741340f7e5f186(ecModel, mainType, userOption, opt) {
    opt = opt || $8917c02fd8256c67$export$f076738ec84e693c;
    var indexOption = userOption.index;
    var idOption = userOption.id;
    var nameOption = userOption.name;
    var result = {
        models: null,
        specified: indexOption != null || idOption != null || nameOption != null
    };
    if (!result.specified) {
        // Use the first as default if `useDefault`.
        var firstCmpt = void 0;
        result.models = opt.useDefault && (firstCmpt = ecModel.getComponent(mainType)) ? [
            firstCmpt
        ] : [];
        return result;
    }
    if (indexOption === "none" || indexOption === false) {
        (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(opt.enableNone, '`"none"` or `false` is not a valid value on index option.');
        result.models = [];
        return result;
    }
    // `queryComponents` will return all components if
    // both all of index/id/name are null/undefined.
    if (indexOption === "all") {
        (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(opt.enableAll, '`"all"` is not a valid value on index option.');
        indexOption = idOption = nameOption = null;
    }
    result.models = ecModel.queryComponents({
        mainType: mainType,
        index: indexOption,
        id: idOption,
        name: nameOption
    });
    return result;
}
function $8917c02fd8256c67$export$9fec4d97f1922e0b(dom, key, value) {
    dom.setAttribute ? dom.setAttribute(key, value) : dom[key] = value;
}
function $8917c02fd8256c67$export$735ee1799fd02602(dom, key) {
    return dom.getAttribute ? dom.getAttribute(key) : dom[key];
}
function $8917c02fd8256c67$export$cc0a17a5d27b4e17(renderModeOption) {
    if (renderModeOption === "auto") // Using html when `document` exists, use richText otherwise
    return (0, $de9e931273a116c1$export$2e2bcd8739ae039).domSupported ? "html" : "richText";
    else return renderModeOption || "html";
}
function $8917c02fd8256c67$export$7ab5bda43e13168f(array, getKey // return key
) {
    var buckets = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
    var keys = [];
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(array, function(item) {
        var key = getKey(item);
        (buckets.get(key) || (keys.push(key), buckets.set(key, []))).push(item);
    });
    return {
        keys: keys,
        buckets: buckets
    };
}
function $8917c02fd8256c67$export$bd0439821a1869f3(data, precision, sourceValue, targetValue, percent) {
    var isAutoPrecision = precision == null || precision === "auto";
    if (targetValue == null) return targetValue;
    if ((0, $e44eb14c4271d0f9$export$7e4aa119212bc614)(targetValue)) {
        var value = $8917c02fd8256c67$var$interpolateNumber(sourceValue || 0, targetValue, percent);
        return (0, $13e6a1a716300dd4$export$2077e0241d6afd3c)(value, isAutoPrecision ? Math.max((0, $13e6a1a716300dd4$export$e0c74b50bbd10f68)(sourceValue || 0), (0, $13e6a1a716300dd4$export$e0c74b50bbd10f68)(targetValue)) : precision);
    } else if ((0, $e44eb14c4271d0f9$export$844ec244b1367d54)(targetValue)) return percent < 1 ? sourceValue : targetValue;
    else {
        var interpolated = [];
        var leftArr = sourceValue;
        var rightArr = targetValue;
        var length_1 = Math.max(leftArr ? leftArr.length : 0, rightArr.length);
        for(var i = 0; i < length_1; ++i){
            var info = data.getDimensionInfo(i);
            // Don't interpolate ordinal dims
            if (info && info.type === "ordinal") // In init, there is no `sourceValue`, but should better not to get undefined result.
            interpolated[i] = (percent < 1 && leftArr ? leftArr : rightArr)[i];
            else {
                var leftVal = leftArr && leftArr[i] ? leftArr[i] : 0;
                var rightVal = rightArr[i];
                var value = $8917c02fd8256c67$var$interpolateNumber(leftVal, rightVal, percent);
                interpolated[i] = (0, $13e6a1a716300dd4$export$2077e0241d6afd3c)(value, isAutoPrecision ? Math.max((0, $13e6a1a716300dd4$export$e0c74b50bbd10f68)(leftVal), (0, $13e6a1a716300dd4$export$e0c74b50bbd10f68)(rightVal)) : precision);
            }
        }
        return interpolated;
    }
}


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

var $0a7732deba457ada$var$TYPE_DELIMITER = ".";
var $0a7732deba457ada$var$IS_CONTAINER = "___EC__COMPONENT__CONTAINER___";
var $0a7732deba457ada$var$IS_EXTENDED_CLASS = "___EC__EXTENDED_CLASS___";
function $0a7732deba457ada$export$fbe18865d303bf01(componentType) {
    var ret = {
        main: "",
        sub: ""
    };
    if (componentType) {
        var typeArr = componentType.split($0a7732deba457ada$var$TYPE_DELIMITER);
        ret.main = typeArr[0] || "";
        ret.sub = typeArr[1] || "";
    }
    return ret;
}
/**
 * @public
 */ function $0a7732deba457ada$var$checkClassType(componentType) {
    $e44eb14c4271d0f9$export$a7a9523472993e97(/^[a-zA-Z0-9_]+([.][a-zA-Z0-9_]+)?$/.test(componentType), 'componentType "' + componentType + '" illegal');
}
function $0a7732deba457ada$export$4f3b818f3dd2d182(clz) {
    return !!(clz && clz[$0a7732deba457ada$var$IS_EXTENDED_CLASS]);
}
function $0a7732deba457ada$export$cd4c3a4dca301c70(rootClz, mandatoryMethods) {
    rootClz.$constructor = rootClz; // FIXME: not necessary?
    rootClz.extend = function(proto) {
        $e44eb14c4271d0f9$export$79b2f7037acddd43(mandatoryMethods, function(method) {
            if (!proto[method]) console.warn("Method `" + method + "` should be implemented" + (proto.type ? " in " + proto.type : "") + ".");
        });
        var superClass = this;
        var ExtendedClass;
        if ($0a7732deba457ada$var$isESClass(superClass)) ExtendedClass = /** @class */ function(_super) {
            (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(class_1, _super);
            function class_1() {
                return _super.apply(this, arguments) || this;
            }
            return class_1;
        }(superClass);
        else {
            // For backward compat, we both support ts class inheritance and this
            // "extend" approach.
            // The constructor should keep the same behavior as ts class inheritance:
            // If this constructor/$constructor is not declared, auto invoke the super
            // constructor.
            // If this constructor/$constructor is declared, it is responsible for
            // calling the super constructor.
            ExtendedClass = function() {
                (proto.$constructor || superClass).apply(this, arguments);
            };
            $e44eb14c4271d0f9$export$69f1b2dcda23c5f8(ExtendedClass, this);
        }
        $e44eb14c4271d0f9$export$8b58be045bf06082(ExtendedClass.prototype, proto);
        ExtendedClass[$0a7732deba457ada$var$IS_EXTENDED_CLASS] = true;
        ExtendedClass.extend = this.extend;
        ExtendedClass.superCall = $0a7732deba457ada$var$superCall;
        ExtendedClass.superApply = $0a7732deba457ada$var$superApply;
        ExtendedClass.superClass = superClass;
        return ExtendedClass;
    };
}
function $0a7732deba457ada$var$isESClass(fn) {
    return $e44eb14c4271d0f9$export$f6e2535fb5126e54(fn) && /^class\s/.test(Function.prototype.toString.call(fn));
}
function $0a7732deba457ada$export$c9c2d87774f1275d(SubClz, SupperClz) {
    SubClz.extend = SupperClz.extend;
}
// A random offset.
var $0a7732deba457ada$var$classBase = Math.round(Math.random() * 10);
function $0a7732deba457ada$export$e1aac4552ae82081(target) {
    var classAttr = [
        "__\0is_clz",
        $0a7732deba457ada$var$classBase++
    ].join("_");
    target.prototype[classAttr] = true;
    $e44eb14c4271d0f9$export$a7a9523472993e97(!target.isInstance, 'The method "is" can not be defined.');
    target.isInstance = function(obj) {
        return !!(obj && obj[classAttr]);
    };
}
// superCall should have class info, which can not be fetched from 'this'.
// Consider this case:
// class A has method f,
// class B inherits class A, overrides method f, f call superApply('f'),
// class C inherits class B, does not override method f,
// then when method of class C is called, dead loop occurred.
function $0a7732deba457ada$var$superCall(context, methodName) {
    var args = [];
    for(var _i = 2; _i < arguments.length; _i++)args[_i - 2] = arguments[_i];
    return this.superClass.prototype[methodName].apply(context, args);
}
function $0a7732deba457ada$var$superApply(context, methodName, args) {
    return this.superClass.prototype[methodName].apply(context, args);
}
function $0a7732deba457ada$export$241315e45585454d(target) {
    /**
   * Component model classes
   * key: componentType,
   * value:
   *     componentClass, when componentType is 'a'
   *     or Object.<subKey, componentClass>, when componentType is 'a.b'
   */ var storage = {};
    target.registerClass = function(clz) {
        // `type` should not be a "instance member".
        // If using TS class, should better declared as `static type = 'series.pie'`.
        // otherwise users have to mount `type` on prototype manually.
        // For backward compat and enable instance visit type via `this.type`,
        // we still support fetch `type` from prototype.
        var componentFullType = clz.type || clz.prototype.type;
        if (componentFullType) {
            $0a7732deba457ada$var$checkClassType(componentFullType);
            // If only static type declared, we assign it to prototype mandatorily.
            clz.prototype.type = componentFullType;
            var componentTypeInfo = $0a7732deba457ada$export$fbe18865d303bf01(componentFullType);
            if (!componentTypeInfo.sub) {
                if (storage[componentTypeInfo.main]) console.warn(componentTypeInfo.main + " exists.");
                storage[componentTypeInfo.main] = clz;
            } else if (componentTypeInfo.sub !== $0a7732deba457ada$var$IS_CONTAINER) {
                var container = makeContainer(componentTypeInfo);
                container[componentTypeInfo.sub] = clz;
            }
        }
        return clz;
    };
    target.getClass = function(mainType, subType, throwWhenNotFound) {
        var clz = storage[mainType];
        if (clz && clz[$0a7732deba457ada$var$IS_CONTAINER]) clz = subType ? clz[subType] : null;
        if (throwWhenNotFound && !clz) throw new Error(!subType ? mainType + "." + "type should be specified." : "Component " + mainType + "." + (subType || "") + " is used but not imported.");
        return clz;
    };
    target.getClassesByMainType = function(componentType) {
        var componentTypeInfo = $0a7732deba457ada$export$fbe18865d303bf01(componentType);
        var result = [];
        var obj = storage[componentTypeInfo.main];
        if (obj && obj[$0a7732deba457ada$var$IS_CONTAINER]) $e44eb14c4271d0f9$export$79b2f7037acddd43(obj, function(o, type) {
            type !== $0a7732deba457ada$var$IS_CONTAINER && result.push(o);
        });
        else result.push(obj);
        return result;
    };
    target.hasClass = function(componentType) {
        // Just consider componentType.main.
        var componentTypeInfo = $0a7732deba457ada$export$fbe18865d303bf01(componentType);
        return !!storage[componentTypeInfo.main];
    };
    /**
   * @return Like ['aa', 'bb'], but can not be ['aa.xx']
   */ target.getAllClassMainTypes = function() {
        var types = [];
        $e44eb14c4271d0f9$export$79b2f7037acddd43(storage, function(obj, type) {
            types.push(type);
        });
        return types;
    };
    /**
   * If a main type is container and has sub types
   */ target.hasSubTypes = function(componentType) {
        var componentTypeInfo = $0a7732deba457ada$export$fbe18865d303bf01(componentType);
        var obj = storage[componentTypeInfo.main];
        return obj && obj[$0a7732deba457ada$var$IS_CONTAINER];
    };
    function makeContainer(componentTypeInfo) {
        var container = storage[componentTypeInfo.main];
        if (!container || !container[$0a7732deba457ada$var$IS_CONTAINER]) {
            container = storage[componentTypeInfo.main] = {};
            container[$0a7732deba457ada$var$IS_CONTAINER] = true;
        }
        return container;
    }
} // /**
 //  * @param {string|Array.<string>} properties
 //  */
 // export function setReadOnly(obj, properties) {
 // FIXME It seems broken in IE8 simulation of IE11
 // if (!zrUtil.isArray(properties)) {
 //     properties = properties != null ? [properties] : [];
 // }
 // zrUtil.each(properties, function (prop) {
 //     let value = obj[prop];
 //     Object.defineProperty
 //         && Object.defineProperty(obj, prop, {
 //             value: value, writable: false
 //         });
 //     zrUtil.isArray(obj[prop])
 //         && Object.freeze
 //         && Object.freeze(obj[prop]);
 // });
 // }


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ // TODO Parse shadow style
// TODO Only shallow path support

function $d16f2547da76dd85$export$2e2bcd8739ae039(properties, ignoreParent) {
    // Normalize
    for(var i = 0; i < properties.length; i++)if (!properties[i][1]) properties[i][1] = properties[i][0];
    ignoreParent = ignoreParent || false;
    return function(model, excludes, includes) {
        var style = {};
        for(var i = 0; i < properties.length; i++){
            var propName = properties[i][1];
            if (excludes && $e44eb14c4271d0f9$export$305f7d4e9d4624f2(excludes, propName) >= 0 || includes && $e44eb14c4271d0f9$export$305f7d4e9d4624f2(includes, propName) < 0) continue;
            var val = model.getShallow(propName, ignoreParent);
            if (val != null) style[properties[i][0]] = val;
        }
        // TODO Text or image?
        return style;
    };
}


var $ee097da8601b6de9$export$52de6e304d934d85 = [
    [
        "fill",
        "color"
    ],
    [
        "shadowBlur"
    ],
    [
        "shadowOffsetX"
    ],
    [
        "shadowOffsetY"
    ],
    [
        "opacity"
    ],
    [
        "shadowColor"
    ]
];
var $ee097da8601b6de9$var$getAreaStyle = (0, $d16f2547da76dd85$export$2e2bcd8739ae039)($ee097da8601b6de9$export$52de6e304d934d85);
var $ee097da8601b6de9$export$a3a0ed7e2dd84c9e = /** @class */ function() {
    function AreaStyleMixin() {}
    AreaStyleMixin.prototype.getAreaStyle = function(excludes, includes) {
        return $ee097da8601b6de9$var$getAreaStyle(this, excludes, includes);
    };
    return AreaStyleMixin;
}();


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 


var $f816ee77c6c298e8$var$globalImageCache = new (0, $46a227aab1eccb53$export$2e2bcd8739ae039)(50);
function $f816ee77c6c298e8$export$1b614f30ac2c8867(newImageOrSrc) {
    if (typeof newImageOrSrc === "string") {
        var cachedImgObj = $f816ee77c6c298e8$var$globalImageCache.get(newImageOrSrc);
        return cachedImgObj && cachedImgObj.image;
    } else return newImageOrSrc;
}
function $f816ee77c6c298e8$export$46c791b69ff9a0f(newImageOrSrc, image, hostEl, onload, cbPayload) {
    if (!newImageOrSrc) return image;
    else if (typeof newImageOrSrc === "string") {
        if (image && image.__zrImageSrc === newImageOrSrc || !hostEl) return image;
        var cachedImgObj = $f816ee77c6c298e8$var$globalImageCache.get(newImageOrSrc);
        var pendingWrap = {
            hostEl: hostEl,
            cb: onload,
            cbPayload: cbPayload
        };
        if (cachedImgObj) {
            image = cachedImgObj.image;
            !$f816ee77c6c298e8$export$37ca7dd901d0236d(image) && cachedImgObj.pending.push(pendingWrap);
        } else {
            image = (0, $c7ef4e2442c05203$export$ef5e599365494451).loadImage(newImageOrSrc, $f816ee77c6c298e8$var$imageOnLoad, $f816ee77c6c298e8$var$imageOnLoad);
            image.__zrImageSrc = newImageOrSrc;
            $f816ee77c6c298e8$var$globalImageCache.put(newImageOrSrc, image.__cachedImgObj = {
                image: image,
                pending: [
                    pendingWrap
                ]
            });
        }
        return image;
    } else return newImageOrSrc;
}
function $f816ee77c6c298e8$var$imageOnLoad() {
    var cachedImgObj = this.__cachedImgObj;
    this.onload = this.onerror = this.__cachedImgObj = null;
    for(var i = 0; i < cachedImgObj.pending.length; i++){
        var pendingWrap = cachedImgObj.pending[i];
        var cb = pendingWrap.cb;
        cb && cb(this, pendingWrap.cbPayload);
        pendingWrap.hostEl.dirty();
    }
    cachedImgObj.pending.length = 0;
}
function $f816ee77c6c298e8$export$37ca7dd901d0236d(image) {
    return image && image.width && image.height;
}




var $ccb606359753c5d0$var$STYLE_REG = /\{([a-zA-Z0-9_]+)\|([^}]*)\}/g;
function $ccb606359753c5d0$export$59a943b34a82e690(text, containerWidth, font, ellipsis, options) {
    if (!containerWidth) return "";
    var textLines = (text + "").split("\n");
    options = $ccb606359753c5d0$var$prepareTruncateOptions(containerWidth, font, ellipsis, options);
    for(var i = 0, len = textLines.length; i < len; i++)textLines[i] = $ccb606359753c5d0$var$truncateSingleLine(textLines[i], options);
    return textLines.join("\n");
}
function $ccb606359753c5d0$var$prepareTruncateOptions(containerWidth, font, ellipsis, options) {
    options = options || {};
    var preparedOpts = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, options);
    preparedOpts.font = font;
    ellipsis = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(ellipsis, "...");
    preparedOpts.maxIterations = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(options.maxIterations, 2);
    var minChar = preparedOpts.minChar = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(options.minChar, 0);
    preparedOpts.cnCharWidth = (0, $1a2563e7d7856dd8$export$3c49c185de0c2bfc)("\u56FD", font);
    var ascCharWidth = preparedOpts.ascCharWidth = (0, $1a2563e7d7856dd8$export$3c49c185de0c2bfc)("a", font);
    preparedOpts.placeholder = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(options.placeholder, "");
    var contentWidth = containerWidth = Math.max(0, containerWidth - 1);
    for(var i = 0; i < minChar && contentWidth >= ascCharWidth; i++)contentWidth -= ascCharWidth;
    var ellipsisWidth = (0, $1a2563e7d7856dd8$export$3c49c185de0c2bfc)(ellipsis, font);
    if (ellipsisWidth > contentWidth) {
        ellipsis = "";
        ellipsisWidth = 0;
    }
    contentWidth = containerWidth - ellipsisWidth;
    preparedOpts.ellipsis = ellipsis;
    preparedOpts.ellipsisWidth = ellipsisWidth;
    preparedOpts.contentWidth = contentWidth;
    preparedOpts.containerWidth = containerWidth;
    return preparedOpts;
}
function $ccb606359753c5d0$var$truncateSingleLine(textLine, options) {
    var containerWidth = options.containerWidth;
    var font = options.font;
    var contentWidth = options.contentWidth;
    if (!containerWidth) return "";
    var lineWidth = (0, $1a2563e7d7856dd8$export$3c49c185de0c2bfc)(textLine, font);
    if (lineWidth <= containerWidth) return textLine;
    for(var j = 0;; j++){
        if (lineWidth <= contentWidth || j >= options.maxIterations) {
            textLine += options.ellipsis;
            break;
        }
        var subLength = j === 0 ? $ccb606359753c5d0$var$estimateLength(textLine, contentWidth, options.ascCharWidth, options.cnCharWidth) : lineWidth > 0 ? Math.floor(textLine.length * contentWidth / lineWidth) : 0;
        textLine = textLine.substr(0, subLength);
        lineWidth = (0, $1a2563e7d7856dd8$export$3c49c185de0c2bfc)(textLine, font);
    }
    if (textLine === "") textLine = options.placeholder;
    return textLine;
}
function $ccb606359753c5d0$var$estimateLength(text, contentWidth, ascCharWidth, cnCharWidth) {
    var width = 0;
    var i = 0;
    for(var len = text.length; i < len && width < contentWidth; i++){
        var charCode = text.charCodeAt(i);
        width += 0 <= charCode && charCode <= 127 ? ascCharWidth : cnCharWidth;
    }
    return i;
}
function $ccb606359753c5d0$export$5772575e34ef80f9(text, style) {
    text != null && (text += "");
    var overflow = style.overflow;
    var padding = style.padding;
    var font = style.font;
    var truncate = overflow === "truncate";
    var calculatedLineHeight = (0, $1a2563e7d7856dd8$export$56204a27a2958a55)(font);
    var lineHeight = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(style.lineHeight, calculatedLineHeight);
    var bgColorDrawn = !!style.backgroundColor;
    var truncateLineOverflow = style.lineOverflow === "truncate";
    var width = style.width;
    var lines;
    if (width != null && (overflow === "break" || overflow === "breakAll")) lines = text ? $ccb606359753c5d0$var$wrapText(text, style.font, width, overflow === "breakAll", 0).lines : [];
    else lines = text ? text.split("\n") : [];
    var contentHeight = lines.length * lineHeight;
    var height = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(style.height, contentHeight);
    if (contentHeight > height && truncateLineOverflow) {
        var lineCount = Math.floor(height / lineHeight);
        lines = lines.slice(0, lineCount);
    }
    if (text && truncate && width != null) {
        var options = $ccb606359753c5d0$var$prepareTruncateOptions(width, font, style.ellipsis, {
            minChar: style.truncateMinChar,
            placeholder: style.placeholder
        });
        for(var i = 0; i < lines.length; i++)lines[i] = $ccb606359753c5d0$var$truncateSingleLine(lines[i], options);
    }
    var outerHeight = height;
    var contentWidth = 0;
    for(var i = 0; i < lines.length; i++)contentWidth = Math.max((0, $1a2563e7d7856dd8$export$3c49c185de0c2bfc)(lines[i], font), contentWidth);
    if (width == null) width = contentWidth;
    var outerWidth = contentWidth;
    if (padding) {
        outerHeight += padding[0] + padding[2];
        outerWidth += padding[1] + padding[3];
        width += padding[1] + padding[3];
    }
    if (bgColorDrawn) outerWidth = width;
    return {
        lines: lines,
        height: height,
        outerWidth: outerWidth,
        outerHeight: outerHeight,
        lineHeight: lineHeight,
        calculatedLineHeight: calculatedLineHeight,
        contentWidth: contentWidth,
        contentHeight: contentHeight,
        width: width
    };
}
var $ccb606359753c5d0$var$RichTextToken = function() {
    function RichTextToken() {}
    return RichTextToken;
}();
var $ccb606359753c5d0$var$RichTextLine = function() {
    function RichTextLine(tokens) {
        this.tokens = [];
        if (tokens) this.tokens = tokens;
    }
    return RichTextLine;
}();
var $ccb606359753c5d0$export$ca607d3c98caaf7e = function() {
    function RichTextContentBlock() {
        this.width = 0;
        this.height = 0;
        this.contentWidth = 0;
        this.contentHeight = 0;
        this.outerWidth = 0;
        this.outerHeight = 0;
        this.lines = [];
    }
    return RichTextContentBlock;
}();
function $ccb606359753c5d0$export$15ec9472ff2d721(text, style) {
    var contentBlock = new $ccb606359753c5d0$export$ca607d3c98caaf7e();
    text != null && (text += "");
    if (!text) return contentBlock;
    var topWidth = style.width;
    var topHeight = style.height;
    var overflow = style.overflow;
    var wrapInfo = (overflow === "break" || overflow === "breakAll") && topWidth != null ? {
        width: topWidth,
        accumWidth: 0,
        breakAll: overflow === "breakAll"
    } : null;
    var lastIndex = $ccb606359753c5d0$var$STYLE_REG.lastIndex = 0;
    var result;
    while((result = $ccb606359753c5d0$var$STYLE_REG.exec(text)) != null){
        var matchedIndex = result.index;
        if (matchedIndex > lastIndex) $ccb606359753c5d0$var$pushTokens(contentBlock, text.substring(lastIndex, matchedIndex), style, wrapInfo);
        $ccb606359753c5d0$var$pushTokens(contentBlock, result[2], style, wrapInfo, result[1]);
        lastIndex = $ccb606359753c5d0$var$STYLE_REG.lastIndex;
    }
    if (lastIndex < text.length) $ccb606359753c5d0$var$pushTokens(contentBlock, text.substring(lastIndex, text.length), style, wrapInfo);
    var pendingList = [];
    var calculatedHeight = 0;
    var calculatedWidth = 0;
    var stlPadding = style.padding;
    var truncate = overflow === "truncate";
    var truncateLine = style.lineOverflow === "truncate";
    function finishLine(line, lineWidth, lineHeight) {
        line.width = lineWidth;
        line.lineHeight = lineHeight;
        calculatedHeight += lineHeight;
        calculatedWidth = Math.max(calculatedWidth, lineWidth);
    }
    outer: for(var i = 0; i < contentBlock.lines.length; i++){
        var line = contentBlock.lines[i];
        var lineHeight = 0;
        var lineWidth = 0;
        for(var j = 0; j < line.tokens.length; j++){
            var token = line.tokens[j];
            var tokenStyle = token.styleName && style.rich[token.styleName] || {};
            var textPadding = token.textPadding = tokenStyle.padding;
            var paddingH = textPadding ? textPadding[1] + textPadding[3] : 0;
            var font = token.font = tokenStyle.font || style.font;
            token.contentHeight = (0, $1a2563e7d7856dd8$export$56204a27a2958a55)(font);
            var tokenHeight = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(tokenStyle.height, token.contentHeight);
            token.innerHeight = tokenHeight;
            textPadding && (tokenHeight += textPadding[0] + textPadding[2]);
            token.height = tokenHeight;
            token.lineHeight = (0, $e44eb14c4271d0f9$export$2e94551289abb95b)(tokenStyle.lineHeight, style.lineHeight, tokenHeight);
            token.align = tokenStyle && tokenStyle.align || style.align;
            token.verticalAlign = tokenStyle && tokenStyle.verticalAlign || "middle";
            if (truncateLine && topHeight != null && calculatedHeight + token.lineHeight > topHeight) {
                if (j > 0) {
                    line.tokens = line.tokens.slice(0, j);
                    finishLine(line, lineWidth, lineHeight);
                    contentBlock.lines = contentBlock.lines.slice(0, i + 1);
                } else contentBlock.lines = contentBlock.lines.slice(0, i);
                break outer;
            }
            var styleTokenWidth = tokenStyle.width;
            var tokenWidthNotSpecified = styleTokenWidth == null || styleTokenWidth === "auto";
            if (typeof styleTokenWidth === "string" && styleTokenWidth.charAt(styleTokenWidth.length - 1) === "%") {
                token.percentWidth = styleTokenWidth;
                pendingList.push(token);
                token.contentWidth = (0, $1a2563e7d7856dd8$export$3c49c185de0c2bfc)(token.text, font);
            } else {
                if (tokenWidthNotSpecified) {
                    var textBackgroundColor = tokenStyle.backgroundColor;
                    var bgImg = textBackgroundColor && textBackgroundColor.image;
                    if (bgImg) {
                        bgImg = $f816ee77c6c298e8$export$1b614f30ac2c8867(bgImg);
                        if ($f816ee77c6c298e8$export$37ca7dd901d0236d(bgImg)) token.width = Math.max(token.width, bgImg.width * tokenHeight / bgImg.height);
                    }
                }
                var remainTruncWidth = truncate && topWidth != null ? topWidth - lineWidth : null;
                if (remainTruncWidth != null && remainTruncWidth < token.width) {
                    if (!tokenWidthNotSpecified || remainTruncWidth < paddingH) {
                        token.text = "";
                        token.width = token.contentWidth = 0;
                    } else {
                        token.text = $ccb606359753c5d0$export$59a943b34a82e690(token.text, remainTruncWidth - paddingH, font, style.ellipsis, {
                            minChar: style.truncateMinChar
                        });
                        token.width = token.contentWidth = (0, $1a2563e7d7856dd8$export$3c49c185de0c2bfc)(token.text, font);
                    }
                } else token.contentWidth = (0, $1a2563e7d7856dd8$export$3c49c185de0c2bfc)(token.text, font);
            }
            token.width += paddingH;
            lineWidth += token.width;
            tokenStyle && (lineHeight = Math.max(lineHeight, token.lineHeight));
        }
        finishLine(line, lineWidth, lineHeight);
    }
    contentBlock.outerWidth = contentBlock.width = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(topWidth, calculatedWidth);
    contentBlock.outerHeight = contentBlock.height = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(topHeight, calculatedHeight);
    contentBlock.contentHeight = calculatedHeight;
    contentBlock.contentWidth = calculatedWidth;
    if (stlPadding) {
        contentBlock.outerWidth += stlPadding[1] + stlPadding[3];
        contentBlock.outerHeight += stlPadding[0] + stlPadding[2];
    }
    for(var i = 0; i < pendingList.length; i++){
        var token = pendingList[i];
        var percentWidth = token.percentWidth;
        token.width = parseInt(percentWidth, 10) / 100 * contentBlock.width;
    }
    return contentBlock;
}
function $ccb606359753c5d0$var$pushTokens(block, str, style, wrapInfo, styleName) {
    var isEmptyStr = str === "";
    var tokenStyle = styleName && style.rich[styleName] || {};
    var lines = block.lines;
    var font = tokenStyle.font || style.font;
    var newLine = false;
    var strLines;
    var linesWidths;
    if (wrapInfo) {
        var tokenPadding = tokenStyle.padding;
        var tokenPaddingH = tokenPadding ? tokenPadding[1] + tokenPadding[3] : 0;
        if (tokenStyle.width != null && tokenStyle.width !== "auto") {
            var outerWidth_1 = (0, $1a2563e7d7856dd8$export$e8514cb5a5e2b40f)(tokenStyle.width, wrapInfo.width) + tokenPaddingH;
            if (lines.length > 0) {
                if (outerWidth_1 + wrapInfo.accumWidth > wrapInfo.width) {
                    strLines = str.split("\n");
                    newLine = true;
                }
            }
            wrapInfo.accumWidth = outerWidth_1;
        } else {
            var res = $ccb606359753c5d0$var$wrapText(str, font, wrapInfo.width, wrapInfo.breakAll, wrapInfo.accumWidth);
            wrapInfo.accumWidth = res.accumWidth + tokenPaddingH;
            linesWidths = res.linesWidths;
            strLines = res.lines;
        }
    } else strLines = str.split("\n");
    for(var i = 0; i < strLines.length; i++){
        var text = strLines[i];
        var token = new $ccb606359753c5d0$var$RichTextToken();
        token.styleName = styleName;
        token.text = text;
        token.isLineHolder = !text && !isEmptyStr;
        if (typeof tokenStyle.width === "number") token.width = tokenStyle.width;
        else token.width = linesWidths ? linesWidths[i] : (0, $1a2563e7d7856dd8$export$3c49c185de0c2bfc)(text, font);
        if (!i && !newLine) {
            var tokens = (lines[lines.length - 1] || (lines[0] = new $ccb606359753c5d0$var$RichTextLine())).tokens;
            var tokensLen = tokens.length;
            tokensLen === 1 && tokens[0].isLineHolder ? tokens[0] = token : (text || !tokensLen || isEmptyStr) && tokens.push(token);
        } else lines.push(new $ccb606359753c5d0$var$RichTextLine([
            token
        ]));
    }
}
function $ccb606359753c5d0$var$isAlphabeticLetter(ch) {
    var code = ch.charCodeAt(0);
    return code >= 0x20 && code <= 0x24F || code >= 0x370 && code <= 0x10FF || code >= 0x1200 && code <= 0x13FF || code >= 0x1E00 && code <= 0x206F;
}
var $ccb606359753c5d0$var$breakCharMap = (0, $e44eb14c4271d0f9$export$533b26079ad0b4b)(",&?/;] ".split(""), function(obj, ch) {
    obj[ch] = true;
    return obj;
}, {});
function $ccb606359753c5d0$var$isWordBreakChar(ch) {
    if ($ccb606359753c5d0$var$isAlphabeticLetter(ch)) {
        if ($ccb606359753c5d0$var$breakCharMap[ch]) return true;
        return false;
    }
    return true;
}
function $ccb606359753c5d0$var$wrapText(text, font, lineWidth, isBreakAll, lastAccumWidth) {
    var lines = [];
    var linesWidths = [];
    var line = "";
    var currentWord = "";
    var currentWordWidth = 0;
    var accumWidth = 0;
    for(var i = 0; i < text.length; i++){
        var ch = text.charAt(i);
        if (ch === "\n") {
            if (currentWord) {
                line += currentWord;
                accumWidth += currentWordWidth;
            }
            lines.push(line);
            linesWidths.push(accumWidth);
            line = "";
            currentWord = "";
            currentWordWidth = 0;
            accumWidth = 0;
            continue;
        }
        var chWidth = (0, $1a2563e7d7856dd8$export$3c49c185de0c2bfc)(ch, font);
        var inWord = isBreakAll ? false : !$ccb606359753c5d0$var$isWordBreakChar(ch);
        if (!lines.length ? lastAccumWidth + accumWidth + chWidth > lineWidth : accumWidth + chWidth > lineWidth) {
            if (!accumWidth) {
                if (inWord) {
                    lines.push(currentWord);
                    linesWidths.push(currentWordWidth);
                    currentWord = ch;
                    currentWordWidth = chWidth;
                } else {
                    lines.push(ch);
                    linesWidths.push(chWidth);
                }
            } else if (line || currentWord) {
                if (inWord) {
                    if (!line) {
                        line = currentWord;
                        currentWord = "";
                        currentWordWidth = 0;
                        accumWidth = currentWordWidth;
                    }
                    lines.push(line);
                    linesWidths.push(accumWidth - currentWordWidth);
                    currentWord += ch;
                    currentWordWidth += chWidth;
                    line = "";
                    accumWidth = currentWordWidth;
                } else {
                    if (currentWord) {
                        line += currentWord;
                        currentWord = "";
                        currentWordWidth = 0;
                    }
                    lines.push(line);
                    linesWidths.push(accumWidth);
                    line = ch;
                    accumWidth = chWidth;
                }
            }
            continue;
        }
        accumWidth += chWidth;
        if (inWord) {
            currentWord += ch;
            currentWordWidth += chWidth;
        } else {
            if (currentWord) {
                line += currentWord;
                currentWord = "";
                currentWordWidth = 0;
            }
            line += ch;
        }
    }
    if (!lines.length && !line) {
        line = text;
        currentWord = "";
        currentWordWidth = 0;
    }
    if (currentWord) line += currentWord;
    if (line) {
        lines.push(line);
        linesWidths.push(accumWidth);
    }
    if (lines.length === 1) accumWidth += lastAccumWidth;
    return {
        accumWidth: accumWidth,
        lines: lines,
        linesWidths: linesWidths
    };
}








var $42aae97fd255cbd2$var$STYLE_MAGIC_KEY = "__zr_style_" + Math.round(Math.random() * 10);
var $42aae97fd255cbd2$export$737672163db00fe3 = {
    shadowBlur: 0,
    shadowOffsetX: 0,
    shadowOffsetY: 0,
    shadowColor: "#000",
    opacity: 1,
    blend: "source-over"
};
var $42aae97fd255cbd2$export$9908943fb57fbe51 = {
    style: {
        shadowBlur: true,
        shadowOffsetX: true,
        shadowOffsetY: true,
        shadowColor: true,
        opacity: true
    }
};
$42aae97fd255cbd2$export$737672163db00fe3[$42aae97fd255cbd2$var$STYLE_MAGIC_KEY] = true;
var $42aae97fd255cbd2$var$PRIMARY_STATES_KEYS = [
    "z",
    "z2",
    "invisible"
];
var $42aae97fd255cbd2$var$PRIMARY_STATES_KEYS_IN_HOVER_LAYER = [
    "invisible"
];
var $42aae97fd255cbd2$var$Displayable = function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(Displayable, _super);
    function Displayable(props) {
        return _super.call(this, props) || this;
    }
    Displayable.prototype._init = function(props) {
        var keysArr = (0, $e44eb14c4271d0f9$export$ed97f33186d4b816)(props);
        for(var i = 0; i < keysArr.length; i++){
            var key = keysArr[i];
            if (key === "style") this.useStyle(props[key]);
            else _super.prototype.attrKV.call(this, key, props[key]);
        }
        if (!this.style) this.useStyle({});
    };
    Displayable.prototype.beforeBrush = function() {};
    Displayable.prototype.afterBrush = function() {};
    Displayable.prototype.innerBeforeBrush = function() {};
    Displayable.prototype.innerAfterBrush = function() {};
    Displayable.prototype.shouldBePainted = function(viewWidth, viewHeight, considerClipPath, considerAncestors) {
        var m = this.transform;
        if (this.ignore || this.invisible || this.style.opacity === 0 || this.culling && $42aae97fd255cbd2$var$isDisplayableCulled(this, viewWidth, viewHeight) || m && !m[0] && !m[3]) return false;
        if (considerClipPath && this.__clipPaths) for(var i = 0; i < this.__clipPaths.length; ++i){
            if (this.__clipPaths[i].isZeroArea()) return false;
        }
        if (considerAncestors && this.parent) {
            var parent_1 = this.parent;
            while(parent_1){
                if (parent_1.ignore) return false;
                parent_1 = parent_1.parent;
            }
        }
        return true;
    };
    Displayable.prototype.contain = function(x, y) {
        return this.rectContain(x, y);
    };
    Displayable.prototype.traverse = function(cb, context) {
        cb.call(context, this);
    };
    Displayable.prototype.rectContain = function(x, y) {
        var coord = this.transformCoordToLocal(x, y);
        var rect = this.getBoundingRect();
        return rect.contain(coord[0], coord[1]);
    };
    Displayable.prototype.getPaintRect = function() {
        var rect = this._paintRect;
        if (!this._paintRect || this.__dirty) {
            var transform = this.transform;
            var elRect = this.getBoundingRect();
            var style = this.style;
            var shadowSize = style.shadowBlur || 0;
            var shadowOffsetX = style.shadowOffsetX || 0;
            var shadowOffsetY = style.shadowOffsetY || 0;
            rect = this._paintRect || (this._paintRect = new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)(0, 0, 0, 0));
            if (transform) (0, $bf33be5184c664d0$export$2e2bcd8739ae039).applyTransform(rect, elRect, transform);
            else rect.copy(elRect);
            if (shadowSize || shadowOffsetX || shadowOffsetY) {
                rect.width += shadowSize * 2 + Math.abs(shadowOffsetX);
                rect.height += shadowSize * 2 + Math.abs(shadowOffsetY);
                rect.x = Math.min(rect.x, rect.x + shadowOffsetX - shadowSize);
                rect.y = Math.min(rect.y, rect.y + shadowOffsetY - shadowSize);
            }
            var tolerance = this.dirtyRectTolerance;
            if (!rect.isZero()) {
                rect.x = Math.floor(rect.x - tolerance);
                rect.y = Math.floor(rect.y - tolerance);
                rect.width = Math.ceil(rect.width + 1 + tolerance * 2);
                rect.height = Math.ceil(rect.height + 1 + tolerance * 2);
            }
        }
        return rect;
    };
    Displayable.prototype.setPrevPaintRect = function(paintRect) {
        if (paintRect) {
            this._prevPaintRect = this._prevPaintRect || new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)(0, 0, 0, 0);
            this._prevPaintRect.copy(paintRect);
        } else this._prevPaintRect = null;
    };
    Displayable.prototype.getPrevPaintRect = function() {
        return this._prevPaintRect;
    };
    Displayable.prototype.animateStyle = function(loop) {
        return this.animate("style", loop);
    };
    Displayable.prototype.updateDuringAnimation = function(targetKey) {
        if (targetKey === "style") this.dirtyStyle();
        else this.markRedraw();
    };
    Displayable.prototype.attrKV = function(key, value) {
        if (key !== "style") _super.prototype.attrKV.call(this, key, value);
        else if (!this.style) this.useStyle(value);
        else this.setStyle(value);
    };
    Displayable.prototype.setStyle = function(keyOrObj, value) {
        if (typeof keyOrObj === "string") this.style[keyOrObj] = value;
        else (0, $e44eb14c4271d0f9$export$8b58be045bf06082)(this.style, keyOrObj);
        this.dirtyStyle();
        return this;
    };
    Displayable.prototype.dirtyStyle = function(notRedraw) {
        if (!notRedraw) this.markRedraw();
        this.__dirty |= (0, $b870c418b8d2135e$export$ada8b2beb3d76671);
        if (this._rect) this._rect = null;
    };
    Displayable.prototype.dirty = function() {
        this.dirtyStyle();
    };
    Displayable.prototype.styleChanged = function() {
        return !!(this.__dirty & (0, $b870c418b8d2135e$export$ada8b2beb3d76671));
    };
    Displayable.prototype.styleUpdated = function() {
        this.__dirty &= ~(0, $b870c418b8d2135e$export$ada8b2beb3d76671);
    };
    Displayable.prototype.createStyle = function(obj) {
        return (0, $e44eb14c4271d0f9$export$79c7e160a7743efd)($42aae97fd255cbd2$export$737672163db00fe3, obj);
    };
    Displayable.prototype.useStyle = function(obj) {
        if (!obj[$42aae97fd255cbd2$var$STYLE_MAGIC_KEY]) obj = this.createStyle(obj);
        if (this.__inHover) this.__hoverStyle = obj;
        else this.style = obj;
        this.dirtyStyle();
    };
    Displayable.prototype.isStyleObject = function(obj) {
        return obj[$42aae97fd255cbd2$var$STYLE_MAGIC_KEY];
    };
    Displayable.prototype._innerSaveToNormal = function(toState) {
        _super.prototype._innerSaveToNormal.call(this, toState);
        var normalState = this._normalState;
        if (toState.style && !normalState.style) normalState.style = this._mergeStyle(this.createStyle(), this.style);
        this._savePrimaryToNormal(toState, normalState, $42aae97fd255cbd2$var$PRIMARY_STATES_KEYS);
    };
    Displayable.prototype._applyStateObj = function(stateName, state, normalState, keepCurrentStates, transition, animationCfg) {
        _super.prototype._applyStateObj.call(this, stateName, state, normalState, keepCurrentStates, transition, animationCfg);
        var needsRestoreToNormal = !(state && keepCurrentStates);
        var targetStyle;
        if (state && state.style) {
            if (transition) {
                if (keepCurrentStates) targetStyle = state.style;
                else {
                    targetStyle = this._mergeStyle(this.createStyle(), normalState.style);
                    this._mergeStyle(targetStyle, state.style);
                }
            } else {
                targetStyle = this._mergeStyle(this.createStyle(), keepCurrentStates ? this.style : normalState.style);
                this._mergeStyle(targetStyle, state.style);
            }
        } else if (needsRestoreToNormal) targetStyle = normalState.style;
        if (targetStyle) {
            if (transition) {
                var sourceStyle = this.style;
                this.style = this.createStyle(needsRestoreToNormal ? {} : sourceStyle);
                if (needsRestoreToNormal) {
                    var changedKeys = (0, $e44eb14c4271d0f9$export$ed97f33186d4b816)(sourceStyle);
                    for(var i = 0; i < changedKeys.length; i++){
                        var key = changedKeys[i];
                        if (key in targetStyle) {
                            targetStyle[key] = targetStyle[key];
                            this.style[key] = sourceStyle[key];
                        }
                    }
                }
                var targetKeys = (0, $e44eb14c4271d0f9$export$ed97f33186d4b816)(targetStyle);
                for(var i = 0; i < targetKeys.length; i++){
                    var key = targetKeys[i];
                    this.style[key] = this.style[key];
                }
                this._transitionState(stateName, {
                    style: targetStyle
                }, animationCfg, this.getAnimationStyleProps());
            } else this.useStyle(targetStyle);
        }
        var statesKeys = this.__inHover ? $42aae97fd255cbd2$var$PRIMARY_STATES_KEYS_IN_HOVER_LAYER : $42aae97fd255cbd2$var$PRIMARY_STATES_KEYS;
        for(var i = 0; i < statesKeys.length; i++){
            var key = statesKeys[i];
            if (state && state[key] != null) this[key] = state[key];
            else if (needsRestoreToNormal) {
                if (normalState[key] != null) this[key] = normalState[key];
            }
        }
    };
    Displayable.prototype._mergeStates = function(states) {
        var mergedState = _super.prototype._mergeStates.call(this, states);
        var mergedStyle;
        for(var i = 0; i < states.length; i++){
            var state = states[i];
            if (state.style) {
                mergedStyle = mergedStyle || {};
                this._mergeStyle(mergedStyle, state.style);
            }
        }
        if (mergedStyle) mergedState.style = mergedStyle;
        return mergedState;
    };
    Displayable.prototype._mergeStyle = function(targetStyle, sourceStyle) {
        (0, $e44eb14c4271d0f9$export$8b58be045bf06082)(targetStyle, sourceStyle);
        return targetStyle;
    };
    Displayable.prototype.getAnimationStyleProps = function() {
        return $42aae97fd255cbd2$export$9908943fb57fbe51;
    };
    Displayable.initDefaultProps = function() {
        var dispProto = Displayable.prototype;
        dispProto.type = "displayable";
        dispProto.invisible = false;
        dispProto.z = 0;
        dispProto.z2 = 0;
        dispProto.zlevel = 0;
        dispProto.culling = false;
        dispProto.cursor = "pointer";
        dispProto.rectHover = false;
        dispProto.incremental = false;
        dispProto._rect = null;
        dispProto.dirtyRectTolerance = 0;
        dispProto.__dirty = (0, $b870c418b8d2135e$export$a7b6db622c6c7dbd) | (0, $b870c418b8d2135e$export$ada8b2beb3d76671);
    }();
    return Displayable;
}((0, $9527b4855b5d4333$export$2e2bcd8739ae039));
var $42aae97fd255cbd2$var$tmpRect = new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)(0, 0, 0, 0);
var $42aae97fd255cbd2$var$viewRect = new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)(0, 0, 0, 0);
function $42aae97fd255cbd2$var$isDisplayableCulled(el, width, height) {
    $42aae97fd255cbd2$var$tmpRect.copy(el.getBoundingRect());
    if (el.transform) $42aae97fd255cbd2$var$tmpRect.applyTransform(el.transform);
    $42aae97fd255cbd2$var$viewRect.width = width;
    $42aae97fd255cbd2$var$viewRect.height = height;
    return !$42aae97fd255cbd2$var$tmpRect.intersect($42aae97fd255cbd2$var$viewRect);
}
var $42aae97fd255cbd2$export$2e2bcd8739ae039 = $42aae97fd255cbd2$var$Displayable;










var $eb78f055659ac299$var$mathMin = Math.min;
var $eb78f055659ac299$var$mathMax = Math.max;
var $eb78f055659ac299$var$mathSin = Math.sin;
var $eb78f055659ac299$var$mathCos = Math.cos;
var $eb78f055659ac299$var$PI2 = Math.PI * 2;
var $eb78f055659ac299$var$start = $187eb1bf1a49fd34$export$185802fd694ee1f5();
var $eb78f055659ac299$var$end = $187eb1bf1a49fd34$export$185802fd694ee1f5();
var $eb78f055659ac299$var$extremity = $187eb1bf1a49fd34$export$185802fd694ee1f5();
function $eb78f055659ac299$export$188c3cd07b4129dd(points, min, max) {
    if (points.length === 0) return;
    var p = points[0];
    var left = p[0];
    var right = p[0];
    var top = p[1];
    var bottom = p[1];
    for(var i = 1; i < points.length; i++){
        p = points[i];
        left = $eb78f055659ac299$var$mathMin(left, p[0]);
        right = $eb78f055659ac299$var$mathMax(right, p[0]);
        top = $eb78f055659ac299$var$mathMin(top, p[1]);
        bottom = $eb78f055659ac299$var$mathMax(bottom, p[1]);
    }
    min[0] = left;
    min[1] = top;
    max[0] = right;
    max[1] = bottom;
}
function $eb78f055659ac299$export$d2b1491e4450bf2c(x0, y0, x1, y1, min, max) {
    min[0] = $eb78f055659ac299$var$mathMin(x0, x1);
    min[1] = $eb78f055659ac299$var$mathMin(y0, y1);
    max[0] = $eb78f055659ac299$var$mathMax(x0, x1);
    max[1] = $eb78f055659ac299$var$mathMax(y0, y1);
}
var $eb78f055659ac299$var$xDim = [];
var $eb78f055659ac299$var$yDim = [];
function $eb78f055659ac299$export$c1bc6be456bb6609(x0, y0, x1, y1, x2, y2, x3, y3, min, max) {
    var cubicExtrema = $b1facc0bcf653177$export$df1a172f100d0457;
    var cubicAt = $b1facc0bcf653177$export$547c21de482bbcb2;
    var n = cubicExtrema(x0, x1, x2, x3, $eb78f055659ac299$var$xDim);
    min[0] = Infinity;
    min[1] = Infinity;
    max[0] = -Infinity;
    max[1] = -Infinity;
    for(var i = 0; i < n; i++){
        var x = cubicAt(x0, x1, x2, x3, $eb78f055659ac299$var$xDim[i]);
        min[0] = $eb78f055659ac299$var$mathMin(x, min[0]);
        max[0] = $eb78f055659ac299$var$mathMax(x, max[0]);
    }
    n = cubicExtrema(y0, y1, y2, y3, $eb78f055659ac299$var$yDim);
    for(var i = 0; i < n; i++){
        var y = cubicAt(y0, y1, y2, y3, $eb78f055659ac299$var$yDim[i]);
        min[1] = $eb78f055659ac299$var$mathMin(y, min[1]);
        max[1] = $eb78f055659ac299$var$mathMax(y, max[1]);
    }
    min[0] = $eb78f055659ac299$var$mathMin(x0, min[0]);
    max[0] = $eb78f055659ac299$var$mathMax(x0, max[0]);
    min[0] = $eb78f055659ac299$var$mathMin(x3, min[0]);
    max[0] = $eb78f055659ac299$var$mathMax(x3, max[0]);
    min[1] = $eb78f055659ac299$var$mathMin(y0, min[1]);
    max[1] = $eb78f055659ac299$var$mathMax(y0, max[1]);
    min[1] = $eb78f055659ac299$var$mathMin(y3, min[1]);
    max[1] = $eb78f055659ac299$var$mathMax(y3, max[1]);
}
function $eb78f055659ac299$export$16fbe795323a1f4c(x0, y0, x1, y1, x2, y2, min, max) {
    var quadraticExtremum = $b1facc0bcf653177$export$752e1f8c6e7f7e11;
    var quadraticAt = $b1facc0bcf653177$export$af17094a950f5073;
    var tx = $eb78f055659ac299$var$mathMax($eb78f055659ac299$var$mathMin(quadraticExtremum(x0, x1, x2), 1), 0);
    var ty = $eb78f055659ac299$var$mathMax($eb78f055659ac299$var$mathMin(quadraticExtremum(y0, y1, y2), 1), 0);
    var x = quadraticAt(x0, x1, x2, tx);
    var y = quadraticAt(y0, y1, y2, ty);
    min[0] = $eb78f055659ac299$var$mathMin(x0, x2, x);
    min[1] = $eb78f055659ac299$var$mathMin(y0, y2, y);
    max[0] = $eb78f055659ac299$var$mathMax(x0, x2, x);
    max[1] = $eb78f055659ac299$var$mathMax(y0, y2, y);
}
function $eb78f055659ac299$export$161c8bb0e1d9ef49(x, y, rx, ry, startAngle, endAngle, anticlockwise, min, max) {
    var vec2Min = $187eb1bf1a49fd34$export$96ec731ed4dcb222;
    var vec2Max = $187eb1bf1a49fd34$export$8960430cfd85939f;
    var diff = Math.abs(startAngle - endAngle);
    if (diff % $eb78f055659ac299$var$PI2 < 1e-4 && diff > 1e-4) {
        min[0] = x - rx;
        min[1] = y - ry;
        max[0] = x + rx;
        max[1] = y + ry;
        return;
    }
    $eb78f055659ac299$var$start[0] = $eb78f055659ac299$var$mathCos(startAngle) * rx + x;
    $eb78f055659ac299$var$start[1] = $eb78f055659ac299$var$mathSin(startAngle) * ry + y;
    $eb78f055659ac299$var$end[0] = $eb78f055659ac299$var$mathCos(endAngle) * rx + x;
    $eb78f055659ac299$var$end[1] = $eb78f055659ac299$var$mathSin(endAngle) * ry + y;
    vec2Min(min, $eb78f055659ac299$var$start, $eb78f055659ac299$var$end);
    vec2Max(max, $eb78f055659ac299$var$start, $eb78f055659ac299$var$end);
    startAngle = startAngle % $eb78f055659ac299$var$PI2;
    if (startAngle < 0) startAngle = startAngle + $eb78f055659ac299$var$PI2;
    endAngle = endAngle % $eb78f055659ac299$var$PI2;
    if (endAngle < 0) endAngle = endAngle + $eb78f055659ac299$var$PI2;
    if (startAngle > endAngle && !anticlockwise) endAngle += $eb78f055659ac299$var$PI2;
    else if (startAngle < endAngle && anticlockwise) startAngle += $eb78f055659ac299$var$PI2;
    if (anticlockwise) {
        var tmp = endAngle;
        endAngle = startAngle;
        startAngle = tmp;
    }
    for(var angle = 0; angle < endAngle; angle += Math.PI / 2)if (angle > startAngle) {
        $eb78f055659ac299$var$extremity[0] = $eb78f055659ac299$var$mathCos(angle) * rx + x;
        $eb78f055659ac299$var$extremity[1] = $eb78f055659ac299$var$mathSin(angle) * ry + y;
        vec2Min(min, $eb78f055659ac299$var$extremity, min);
        vec2Max(max, $eb78f055659ac299$var$extremity, max);
    }
}



var $9638c378ac086dea$var$CMD = {
    M: 1,
    L: 2,
    C: 3,
    Q: 4,
    A: 5,
    Z: 6,
    R: 7
};
var $9638c378ac086dea$var$tmpOutX = [];
var $9638c378ac086dea$var$tmpOutY = [];
var $9638c378ac086dea$var$min = [];
var $9638c378ac086dea$var$max = [];
var $9638c378ac086dea$var$min2 = [];
var $9638c378ac086dea$var$max2 = [];
var $9638c378ac086dea$var$mathMin = Math.min;
var $9638c378ac086dea$var$mathMax = Math.max;
var $9638c378ac086dea$var$mathCos = Math.cos;
var $9638c378ac086dea$var$mathSin = Math.sin;
var $9638c378ac086dea$var$mathAbs = Math.abs;
var $9638c378ac086dea$var$PI = Math.PI;
var $9638c378ac086dea$var$PI2 = $9638c378ac086dea$var$PI * 2;
var $9638c378ac086dea$var$hasTypedArray = typeof Float32Array !== "undefined";
var $9638c378ac086dea$var$tmpAngles = [];
function $9638c378ac086dea$var$modPI2(radian) {
    var n = Math.round(radian / $9638c378ac086dea$var$PI * 1e8) / 1e8;
    return n % 2 * $9638c378ac086dea$var$PI;
}
function $9638c378ac086dea$export$bc668021e937022a(angles, anticlockwise) {
    var newStartAngle = $9638c378ac086dea$var$modPI2(angles[0]);
    if (newStartAngle < 0) newStartAngle += $9638c378ac086dea$var$PI2;
    var delta = newStartAngle - angles[0];
    var newEndAngle = angles[1];
    newEndAngle += delta;
    if (!anticlockwise && newEndAngle - newStartAngle >= $9638c378ac086dea$var$PI2) newEndAngle = newStartAngle + $9638c378ac086dea$var$PI2;
    else if (anticlockwise && newStartAngle - newEndAngle >= $9638c378ac086dea$var$PI2) newEndAngle = newStartAngle - $9638c378ac086dea$var$PI2;
    else if (!anticlockwise && newStartAngle > newEndAngle) newEndAngle = newStartAngle + ($9638c378ac086dea$var$PI2 - $9638c378ac086dea$var$modPI2(newStartAngle - newEndAngle));
    else if (anticlockwise && newStartAngle < newEndAngle) newEndAngle = newStartAngle - ($9638c378ac086dea$var$PI2 - $9638c378ac086dea$var$modPI2(newEndAngle - newStartAngle));
    angles[0] = newStartAngle;
    angles[1] = newEndAngle;
}
var $9638c378ac086dea$var$PathProxy = function() {
    function PathProxy(notSaveData) {
        this.dpr = 1;
        this._xi = 0;
        this._yi = 0;
        this._x0 = 0;
        this._y0 = 0;
        this._len = 0;
        if (notSaveData) this._saveData = false;
        if (this._saveData) this.data = [];
    }
    PathProxy.prototype.increaseVersion = function() {
        this._version++;
    };
    PathProxy.prototype.getVersion = function() {
        return this._version;
    };
    PathProxy.prototype.setScale = function(sx, sy, segmentIgnoreThreshold) {
        segmentIgnoreThreshold = segmentIgnoreThreshold || 0;
        if (segmentIgnoreThreshold > 0) {
            this._ux = $9638c378ac086dea$var$mathAbs(segmentIgnoreThreshold / (0, $a9c042e5e4c73c13$export$508f096bfcdaac40) / sx) || 0;
            this._uy = $9638c378ac086dea$var$mathAbs(segmentIgnoreThreshold / (0, $a9c042e5e4c73c13$export$508f096bfcdaac40) / sy) || 0;
        }
    };
    PathProxy.prototype.setDPR = function(dpr) {
        this.dpr = dpr;
    };
    PathProxy.prototype.setContext = function(ctx) {
        this._ctx = ctx;
    };
    PathProxy.prototype.getContext = function() {
        return this._ctx;
    };
    PathProxy.prototype.beginPath = function() {
        this._ctx && this._ctx.beginPath();
        this.reset();
        return this;
    };
    PathProxy.prototype.reset = function() {
        if (this._saveData) this._len = 0;
        if (this._pathSegLen) {
            this._pathSegLen = null;
            this._pathLen = 0;
        }
        this._version++;
    };
    PathProxy.prototype.moveTo = function(x, y) {
        this._drawPendingPt();
        this.addData($9638c378ac086dea$var$CMD.M, x, y);
        this._ctx && this._ctx.moveTo(x, y);
        this._x0 = x;
        this._y0 = y;
        this._xi = x;
        this._yi = y;
        return this;
    };
    PathProxy.prototype.lineTo = function(x, y) {
        var dx = $9638c378ac086dea$var$mathAbs(x - this._xi);
        var dy = $9638c378ac086dea$var$mathAbs(y - this._yi);
        var exceedUnit = dx > this._ux || dy > this._uy;
        this.addData($9638c378ac086dea$var$CMD.L, x, y);
        if (this._ctx && exceedUnit) this._ctx.lineTo(x, y);
        if (exceedUnit) {
            this._xi = x;
            this._yi = y;
            this._pendingPtDist = 0;
        } else {
            var d2 = dx * dx + dy * dy;
            if (d2 > this._pendingPtDist) {
                this._pendingPtX = x;
                this._pendingPtY = y;
                this._pendingPtDist = d2;
            }
        }
        return this;
    };
    PathProxy.prototype.bezierCurveTo = function(x1, y1, x2, y2, x3, y3) {
        this._drawPendingPt();
        this.addData($9638c378ac086dea$var$CMD.C, x1, y1, x2, y2, x3, y3);
        if (this._ctx) this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);
        this._xi = x3;
        this._yi = y3;
        return this;
    };
    PathProxy.prototype.quadraticCurveTo = function(x1, y1, x2, y2) {
        this._drawPendingPt();
        this.addData($9638c378ac086dea$var$CMD.Q, x1, y1, x2, y2);
        if (this._ctx) this._ctx.quadraticCurveTo(x1, y1, x2, y2);
        this._xi = x2;
        this._yi = y2;
        return this;
    };
    PathProxy.prototype.arc = function(cx, cy, r, startAngle, endAngle, anticlockwise) {
        this._drawPendingPt();
        $9638c378ac086dea$var$tmpAngles[0] = startAngle;
        $9638c378ac086dea$var$tmpAngles[1] = endAngle;
        $9638c378ac086dea$export$bc668021e937022a($9638c378ac086dea$var$tmpAngles, anticlockwise);
        startAngle = $9638c378ac086dea$var$tmpAngles[0];
        endAngle = $9638c378ac086dea$var$tmpAngles[1];
        var delta = endAngle - startAngle;
        this.addData($9638c378ac086dea$var$CMD.A, cx, cy, r, r, startAngle, delta, 0, anticlockwise ? 0 : 1);
        this._ctx && this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);
        this._xi = $9638c378ac086dea$var$mathCos(endAngle) * r + cx;
        this._yi = $9638c378ac086dea$var$mathSin(endAngle) * r + cy;
        return this;
    };
    PathProxy.prototype.arcTo = function(x1, y1, x2, y2, radius) {
        this._drawPendingPt();
        if (this._ctx) this._ctx.arcTo(x1, y1, x2, y2, radius);
        return this;
    };
    PathProxy.prototype.rect = function(x, y, w, h) {
        this._drawPendingPt();
        this._ctx && this._ctx.rect(x, y, w, h);
        this.addData($9638c378ac086dea$var$CMD.R, x, y, w, h);
        return this;
    };
    PathProxy.prototype.closePath = function() {
        this._drawPendingPt();
        this.addData($9638c378ac086dea$var$CMD.Z);
        var ctx = this._ctx;
        var x0 = this._x0;
        var y0 = this._y0;
        if (ctx) ctx.closePath();
        this._xi = x0;
        this._yi = y0;
        return this;
    };
    PathProxy.prototype.fill = function(ctx) {
        ctx && ctx.fill();
        this.toStatic();
    };
    PathProxy.prototype.stroke = function(ctx) {
        ctx && ctx.stroke();
        this.toStatic();
    };
    PathProxy.prototype.len = function() {
        return this._len;
    };
    PathProxy.prototype.setData = function(data) {
        var len = data.length;
        if (!(this.data && this.data.length === len) && $9638c378ac086dea$var$hasTypedArray) this.data = new Float32Array(len);
        for(var i = 0; i < len; i++)this.data[i] = data[i];
        this._len = len;
    };
    PathProxy.prototype.appendPath = function(path) {
        if (!(path instanceof Array)) path = [
            path
        ];
        var len = path.length;
        var appendSize = 0;
        var offset = this._len;
        for(var i = 0; i < len; i++)appendSize += path[i].len();
        if ($9638c378ac086dea$var$hasTypedArray && this.data instanceof Float32Array) this.data = new Float32Array(offset + appendSize);
        for(var i = 0; i < len; i++){
            var appendPathData = path[i].data;
            for(var k = 0; k < appendPathData.length; k++)this.data[offset++] = appendPathData[k];
        }
        this._len = offset;
    };
    PathProxy.prototype.addData = function(cmd, a, b, c, d, e, f, g, h) {
        if (!this._saveData) return;
        var data = this.data;
        if (this._len + arguments.length > data.length) {
            this._expandData();
            data = this.data;
        }
        for(var i = 0; i < arguments.length; i++)data[this._len++] = arguments[i];
    };
    PathProxy.prototype._drawPendingPt = function() {
        if (this._pendingPtDist > 0) {
            this._ctx && this._ctx.lineTo(this._pendingPtX, this._pendingPtY);
            this._pendingPtDist = 0;
        }
    };
    PathProxy.prototype._expandData = function() {
        if (!(this.data instanceof Array)) {
            var newData = [];
            for(var i = 0; i < this._len; i++)newData[i] = this.data[i];
            this.data = newData;
        }
    };
    PathProxy.prototype.toStatic = function() {
        if (!this._saveData) return;
        this._drawPendingPt();
        var data = this.data;
        if (data instanceof Array) {
            data.length = this._len;
            if ($9638c378ac086dea$var$hasTypedArray && this._len > 11) this.data = new Float32Array(data);
        }
    };
    PathProxy.prototype.getBoundingRect = function() {
        $9638c378ac086dea$var$min[0] = $9638c378ac086dea$var$min[1] = $9638c378ac086dea$var$min2[0] = $9638c378ac086dea$var$min2[1] = Number.MAX_VALUE;
        $9638c378ac086dea$var$max[0] = $9638c378ac086dea$var$max[1] = $9638c378ac086dea$var$max2[0] = $9638c378ac086dea$var$max2[1] = -Number.MAX_VALUE;
        var data = this.data;
        var xi = 0;
        var yi = 0;
        var x0 = 0;
        var y0 = 0;
        var i;
        for(i = 0; i < this._len;){
            var cmd = data[i++];
            var isFirst = i === 1;
            if (isFirst) {
                xi = data[i];
                yi = data[i + 1];
                x0 = xi;
                y0 = yi;
            }
            switch(cmd){
                case $9638c378ac086dea$var$CMD.M:
                    xi = x0 = data[i++];
                    yi = y0 = data[i++];
                    $9638c378ac086dea$var$min2[0] = x0;
                    $9638c378ac086dea$var$min2[1] = y0;
                    $9638c378ac086dea$var$max2[0] = x0;
                    $9638c378ac086dea$var$max2[1] = y0;
                    break;
                case $9638c378ac086dea$var$CMD.L:
                    (0, $eb78f055659ac299$export$d2b1491e4450bf2c)(xi, yi, data[i], data[i + 1], $9638c378ac086dea$var$min2, $9638c378ac086dea$var$max2);
                    xi = data[i++];
                    yi = data[i++];
                    break;
                case $9638c378ac086dea$var$CMD.C:
                    (0, $eb78f055659ac299$export$c1bc6be456bb6609)(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], $9638c378ac086dea$var$min2, $9638c378ac086dea$var$max2);
                    xi = data[i++];
                    yi = data[i++];
                    break;
                case $9638c378ac086dea$var$CMD.Q:
                    (0, $eb78f055659ac299$export$16fbe795323a1f4c)(xi, yi, data[i++], data[i++], data[i], data[i + 1], $9638c378ac086dea$var$min2, $9638c378ac086dea$var$max2);
                    xi = data[i++];
                    yi = data[i++];
                    break;
                case $9638c378ac086dea$var$CMD.A:
                    var cx = data[i++];
                    var cy = data[i++];
                    var rx = data[i++];
                    var ry = data[i++];
                    var startAngle = data[i++];
                    var endAngle = data[i++] + startAngle;
                    i += 1;
                    var anticlockwise = !data[i++];
                    if (isFirst) {
                        x0 = $9638c378ac086dea$var$mathCos(startAngle) * rx + cx;
                        y0 = $9638c378ac086dea$var$mathSin(startAngle) * ry + cy;
                    }
                    (0, $eb78f055659ac299$export$161c8bb0e1d9ef49)(cx, cy, rx, ry, startAngle, endAngle, anticlockwise, $9638c378ac086dea$var$min2, $9638c378ac086dea$var$max2);
                    xi = $9638c378ac086dea$var$mathCos(endAngle) * rx + cx;
                    yi = $9638c378ac086dea$var$mathSin(endAngle) * ry + cy;
                    break;
                case $9638c378ac086dea$var$CMD.R:
                    x0 = xi = data[i++];
                    y0 = yi = data[i++];
                    var width = data[i++];
                    var height = data[i++];
                    (0, $eb78f055659ac299$export$d2b1491e4450bf2c)(x0, y0, x0 + width, y0 + height, $9638c378ac086dea$var$min2, $9638c378ac086dea$var$max2);
                    break;
                case $9638c378ac086dea$var$CMD.Z:
                    xi = x0;
                    yi = y0;
                    break;
            }
            $187eb1bf1a49fd34$export$96ec731ed4dcb222($9638c378ac086dea$var$min, $9638c378ac086dea$var$min, $9638c378ac086dea$var$min2);
            $187eb1bf1a49fd34$export$8960430cfd85939f($9638c378ac086dea$var$max, $9638c378ac086dea$var$max, $9638c378ac086dea$var$max2);
        }
        if (i === 0) $9638c378ac086dea$var$min[0] = $9638c378ac086dea$var$min[1] = $9638c378ac086dea$var$max[0] = $9638c378ac086dea$var$max[1] = 0;
        return new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)($9638c378ac086dea$var$min[0], $9638c378ac086dea$var$min[1], $9638c378ac086dea$var$max[0] - $9638c378ac086dea$var$min[0], $9638c378ac086dea$var$max[1] - $9638c378ac086dea$var$min[1]);
    };
    PathProxy.prototype._calculateLength = function() {
        var data = this.data;
        var len = this._len;
        var ux = this._ux;
        var uy = this._uy;
        var xi = 0;
        var yi = 0;
        var x0 = 0;
        var y0 = 0;
        if (!this._pathSegLen) this._pathSegLen = [];
        var pathSegLen = this._pathSegLen;
        var pathTotalLen = 0;
        var segCount = 0;
        for(var i = 0; i < len;){
            var cmd = data[i++];
            var isFirst = i === 1;
            if (isFirst) {
                xi = data[i];
                yi = data[i + 1];
                x0 = xi;
                y0 = yi;
            }
            var l = -1;
            switch(cmd){
                case $9638c378ac086dea$var$CMD.M:
                    xi = x0 = data[i++];
                    yi = y0 = data[i++];
                    break;
                case $9638c378ac086dea$var$CMD.L:
                    var x2 = data[i++];
                    var y2 = data[i++];
                    var dx = x2 - xi;
                    var dy = y2 - yi;
                    if ($9638c378ac086dea$var$mathAbs(dx) > ux || $9638c378ac086dea$var$mathAbs(dy) > uy || i === len - 1) {
                        l = Math.sqrt(dx * dx + dy * dy);
                        xi = x2;
                        yi = y2;
                    }
                    break;
                case $9638c378ac086dea$var$CMD.C:
                    var x1 = data[i++];
                    var y1 = data[i++];
                    var x2 = data[i++];
                    var y2 = data[i++];
                    var x3 = data[i++];
                    var y3 = data[i++];
                    l = (0, $b1facc0bcf653177$export$af1875d576f60d7c)(xi, yi, x1, y1, x2, y2, x3, y3, 10);
                    xi = x3;
                    yi = y3;
                    break;
                case $9638c378ac086dea$var$CMD.Q:
                    var x1 = data[i++];
                    var y1 = data[i++];
                    var x2 = data[i++];
                    var y2 = data[i++];
                    l = (0, $b1facc0bcf653177$export$8a68adee46f3cf55)(xi, yi, x1, y1, x2, y2, 10);
                    xi = x2;
                    yi = y2;
                    break;
                case $9638c378ac086dea$var$CMD.A:
                    var cx = data[i++];
                    var cy = data[i++];
                    var rx = data[i++];
                    var ry = data[i++];
                    var startAngle = data[i++];
                    var delta = data[i++];
                    var endAngle = delta + startAngle;
                    i += 1;
                    if (isFirst) {
                        x0 = $9638c378ac086dea$var$mathCos(startAngle) * rx + cx;
                        y0 = $9638c378ac086dea$var$mathSin(startAngle) * ry + cy;
                    }
                    l = $9638c378ac086dea$var$mathMax(rx, ry) * $9638c378ac086dea$var$mathMin($9638c378ac086dea$var$PI2, Math.abs(delta));
                    xi = $9638c378ac086dea$var$mathCos(endAngle) * rx + cx;
                    yi = $9638c378ac086dea$var$mathSin(endAngle) * ry + cy;
                    break;
                case $9638c378ac086dea$var$CMD.R:
                    x0 = xi = data[i++];
                    y0 = yi = data[i++];
                    var width = data[i++];
                    var height = data[i++];
                    l = width * 2 + height * 2;
                    break;
                case $9638c378ac086dea$var$CMD.Z:
                    var dx = x0 - xi;
                    var dy = y0 - yi;
                    l = Math.sqrt(dx * dx + dy * dy);
                    xi = x0;
                    yi = y0;
                    break;
            }
            if (l >= 0) {
                pathSegLen[segCount++] = l;
                pathTotalLen += l;
            }
        }
        this._pathLen = pathTotalLen;
        return pathTotalLen;
    };
    PathProxy.prototype.rebuildPath = function(ctx, percent) {
        var d = this.data;
        var ux = this._ux;
        var uy = this._uy;
        var len = this._len;
        var x0;
        var y0;
        var xi;
        var yi;
        var x;
        var y;
        var drawPart = percent < 1;
        var pathSegLen;
        var pathTotalLen;
        var accumLength = 0;
        var segCount = 0;
        var displayedLength;
        var pendingPtDist = 0;
        var pendingPtX;
        var pendingPtY;
        if (drawPart) {
            if (!this._pathSegLen) this._calculateLength();
            pathSegLen = this._pathSegLen;
            pathTotalLen = this._pathLen;
            displayedLength = percent * pathTotalLen;
            if (!displayedLength) return;
        }
        lo: for(var i = 0; i < len;){
            var cmd = d[i++];
            var isFirst = i === 1;
            if (isFirst) {
                xi = d[i];
                yi = d[i + 1];
                x0 = xi;
                y0 = yi;
            }
            if (cmd !== $9638c378ac086dea$var$CMD.L && pendingPtDist > 0) {
                ctx.lineTo(pendingPtX, pendingPtY);
                pendingPtDist = 0;
            }
            switch(cmd){
                case $9638c378ac086dea$var$CMD.M:
                    x0 = xi = d[i++];
                    y0 = yi = d[i++];
                    ctx.moveTo(xi, yi);
                    break;
                case $9638c378ac086dea$var$CMD.L:
                    x = d[i++];
                    y = d[i++];
                    var dx = $9638c378ac086dea$var$mathAbs(x - xi);
                    var dy = $9638c378ac086dea$var$mathAbs(y - yi);
                    if (dx > ux || dy > uy) {
                        if (drawPart) {
                            var l = pathSegLen[segCount++];
                            if (accumLength + l > displayedLength) {
                                var t = (displayedLength - accumLength) / l;
                                ctx.lineTo(xi * (1 - t) + x * t, yi * (1 - t) + y * t);
                                break lo;
                            }
                            accumLength += l;
                        }
                        ctx.lineTo(x, y);
                        xi = x;
                        yi = y;
                        pendingPtDist = 0;
                    } else {
                        var d2 = dx * dx + dy * dy;
                        if (d2 > pendingPtDist) {
                            pendingPtX = x;
                            pendingPtY = y;
                            pendingPtDist = d2;
                        }
                    }
                    break;
                case $9638c378ac086dea$var$CMD.C:
                    var x1 = d[i++];
                    var y1 = d[i++];
                    var x2 = d[i++];
                    var y2 = d[i++];
                    var x3 = d[i++];
                    var y3 = d[i++];
                    if (drawPart) {
                        var l = pathSegLen[segCount++];
                        if (accumLength + l > displayedLength) {
                            var t = (displayedLength - accumLength) / l;
                            (0, $b1facc0bcf653177$export$a2ee23a0567039da)(xi, x1, x2, x3, t, $9638c378ac086dea$var$tmpOutX);
                            (0, $b1facc0bcf653177$export$a2ee23a0567039da)(yi, y1, y2, y3, t, $9638c378ac086dea$var$tmpOutY);
                            ctx.bezierCurveTo($9638c378ac086dea$var$tmpOutX[1], $9638c378ac086dea$var$tmpOutY[1], $9638c378ac086dea$var$tmpOutX[2], $9638c378ac086dea$var$tmpOutY[2], $9638c378ac086dea$var$tmpOutX[3], $9638c378ac086dea$var$tmpOutY[3]);
                            break lo;
                        }
                        accumLength += l;
                    }
                    ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);
                    xi = x3;
                    yi = y3;
                    break;
                case $9638c378ac086dea$var$CMD.Q:
                    var x1 = d[i++];
                    var y1 = d[i++];
                    var x2 = d[i++];
                    var y2 = d[i++];
                    if (drawPart) {
                        var l = pathSegLen[segCount++];
                        if (accumLength + l > displayedLength) {
                            var t = (displayedLength - accumLength) / l;
                            (0, $b1facc0bcf653177$export$117c659e21a7a060)(xi, x1, x2, t, $9638c378ac086dea$var$tmpOutX);
                            (0, $b1facc0bcf653177$export$117c659e21a7a060)(yi, y1, y2, t, $9638c378ac086dea$var$tmpOutY);
                            ctx.quadraticCurveTo($9638c378ac086dea$var$tmpOutX[1], $9638c378ac086dea$var$tmpOutY[1], $9638c378ac086dea$var$tmpOutX[2], $9638c378ac086dea$var$tmpOutY[2]);
                            break lo;
                        }
                        accumLength += l;
                    }
                    ctx.quadraticCurveTo(x1, y1, x2, y2);
                    xi = x2;
                    yi = y2;
                    break;
                case $9638c378ac086dea$var$CMD.A:
                    var cx = d[i++];
                    var cy = d[i++];
                    var rx = d[i++];
                    var ry = d[i++];
                    var startAngle = d[i++];
                    var delta = d[i++];
                    var psi = d[i++];
                    var anticlockwise = !d[i++];
                    var r = rx > ry ? rx : ry;
                    var isEllipse = $9638c378ac086dea$var$mathAbs(rx - ry) > 1e-3;
                    var endAngle = startAngle + delta;
                    var breakBuild = false;
                    if (drawPart) {
                        var l = pathSegLen[segCount++];
                        if (accumLength + l > displayedLength) {
                            endAngle = startAngle + delta * (displayedLength - accumLength) / l;
                            breakBuild = true;
                        }
                        accumLength += l;
                    }
                    if (isEllipse && ctx.ellipse) ctx.ellipse(cx, cy, rx, ry, psi, startAngle, endAngle, anticlockwise);
                    else ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);
                    if (breakBuild) break lo;
                    if (isFirst) {
                        x0 = $9638c378ac086dea$var$mathCos(startAngle) * rx + cx;
                        y0 = $9638c378ac086dea$var$mathSin(startAngle) * ry + cy;
                    }
                    xi = $9638c378ac086dea$var$mathCos(endAngle) * rx + cx;
                    yi = $9638c378ac086dea$var$mathSin(endAngle) * ry + cy;
                    break;
                case $9638c378ac086dea$var$CMD.R:
                    x0 = xi = d[i];
                    y0 = yi = d[i + 1];
                    x = d[i++];
                    y = d[i++];
                    var width = d[i++];
                    var height = d[i++];
                    if (drawPart) {
                        var l = pathSegLen[segCount++];
                        if (accumLength + l > displayedLength) {
                            var d_1 = displayedLength - accumLength;
                            ctx.moveTo(x, y);
                            ctx.lineTo(x + $9638c378ac086dea$var$mathMin(d_1, width), y);
                            d_1 -= width;
                            if (d_1 > 0) ctx.lineTo(x + width, y + $9638c378ac086dea$var$mathMin(d_1, height));
                            d_1 -= height;
                            if (d_1 > 0) ctx.lineTo(x + $9638c378ac086dea$var$mathMax(width - d_1, 0), y + height);
                            d_1 -= width;
                            if (d_1 > 0) ctx.lineTo(x, y + $9638c378ac086dea$var$mathMax(height - d_1, 0));
                            break lo;
                        }
                        accumLength += l;
                    }
                    ctx.rect(x, y, width, height);
                    break;
                case $9638c378ac086dea$var$CMD.Z:
                    if (drawPart) {
                        var l = pathSegLen[segCount++];
                        if (accumLength + l > displayedLength) {
                            var t = (displayedLength - accumLength) / l;
                            ctx.lineTo(xi * (1 - t) + x0 * t, yi * (1 - t) + y0 * t);
                            break lo;
                        }
                        accumLength += l;
                    }
                    ctx.closePath();
                    xi = x0;
                    yi = y0;
            }
        }
    };
    PathProxy.prototype.clone = function() {
        var newProxy = new PathProxy();
        var data = this.data;
        newProxy.data = data.slice ? data.slice() : Array.prototype.slice.call(data);
        newProxy._len = this._len;
        return newProxy;
    };
    PathProxy.CMD = $9638c378ac086dea$var$CMD;
    PathProxy.initDefaultProps = function() {
        var proto = PathProxy.prototype;
        proto._saveData = true;
        proto._ux = 0;
        proto._uy = 0;
        proto._pendingPtDist = 0;
        proto._version = 0;
    }();
    return PathProxy;
}();
var $9638c378ac086dea$export$2e2bcd8739ae039 = $9638c378ac086dea$var$PathProxy;



function $f9e460df1595cf36$export$8d36b1b5d19157c5(x0, y0, x1, y1, lineWidth, x, y) {
    if (lineWidth === 0) return false;
    var _l = lineWidth;
    var _a = 0;
    var _b = x0;
    if (y > y0 + _l && y > y1 + _l || y < y0 - _l && y < y1 - _l || x > x0 + _l && x > x1 + _l || x < x0 - _l && x < x1 - _l) return false;
    if (x0 !== x1) {
        _a = (y0 - y1) / (x0 - x1);
        _b = (x0 * y1 - x1 * y0) / (x0 - x1);
    } else return Math.abs(x - x0) <= _l / 2;
    var tmp = _a * x - y + _b;
    var _s = tmp * tmp / (_a * _a + 1);
    return _s <= _l / 2 * _l / 2;
}



function $4de6511681a2d78c$export$8d36b1b5d19157c5(x0, y0, x1, y1, x2, y2, x3, y3, lineWidth, x, y) {
    if (lineWidth === 0) return false;
    var _l = lineWidth;
    if (y > y0 + _l && y > y1 + _l && y > y2 + _l && y > y3 + _l || y < y0 - _l && y < y1 - _l && y < y2 - _l && y < y3 - _l || x > x0 + _l && x > x1 + _l && x > x2 + _l && x > x3 + _l || x < x0 - _l && x < x1 - _l && x < x2 - _l && x < x3 - _l) return false;
    var d = $b1facc0bcf653177$export$dbaa3801d1284367(x0, y0, x1, y1, x2, y2, x3, y3, x, y, null);
    return d <= _l / 2;
}



function $a1c5f49fe4580199$export$8d36b1b5d19157c5(x0, y0, x1, y1, x2, y2, lineWidth, x, y) {
    if (lineWidth === 0) return false;
    var _l = lineWidth;
    if (y > y0 + _l && y > y1 + _l && y > y2 + _l || y < y0 - _l && y < y1 - _l && y < y2 - _l || x > x0 + _l && x > x1 + _l && x > x2 + _l || x < x0 - _l && x < x1 - _l && x < x2 - _l) return false;
    var d = (0, $b1facc0bcf653177$export$81915a594fe10dee)(x0, y0, x1, y1, x2, y2, x, y, null);
    return d <= _l / 2;
}


var $aa92342602f64ba4$var$PI2 = Math.PI * 2;
function $aa92342602f64ba4$export$d44861331f213635(angle) {
    angle %= $aa92342602f64ba4$var$PI2;
    if (angle < 0) angle += $aa92342602f64ba4$var$PI2;
    return angle;
}


var $b522d61caa50e79e$var$PI2 = Math.PI * 2;
function $b522d61caa50e79e$export$8d36b1b5d19157c5(cx, cy, r, startAngle, endAngle, anticlockwise, lineWidth, x, y) {
    if (lineWidth === 0) return false;
    var _l = lineWidth;
    x -= cx;
    y -= cy;
    var d = Math.sqrt(x * x + y * y);
    if (d - _l > r || d + _l < r) return false;
    if (Math.abs(startAngle - endAngle) % $b522d61caa50e79e$var$PI2 < 1e-4) return true;
    if (anticlockwise) {
        var tmp = startAngle;
        startAngle = (0, $aa92342602f64ba4$export$d44861331f213635)(endAngle);
        endAngle = (0, $aa92342602f64ba4$export$d44861331f213635)(tmp);
    } else {
        startAngle = (0, $aa92342602f64ba4$export$d44861331f213635)(startAngle);
        endAngle = (0, $aa92342602f64ba4$export$d44861331f213635)(endAngle);
    }
    if (startAngle > endAngle) endAngle += $b522d61caa50e79e$var$PI2;
    var angle = Math.atan2(y, x);
    if (angle < 0) angle += $b522d61caa50e79e$var$PI2;
    return angle >= startAngle && angle <= endAngle || angle + $b522d61caa50e79e$var$PI2 >= startAngle && angle + $b522d61caa50e79e$var$PI2 <= endAngle;
}



function $3721d02567c6714d$export$2e2bcd8739ae039(x0, y0, x1, y1, x, y) {
    if (y > y0 && y > y1 || y < y0 && y < y1) return 0;
    if (y1 === y0) return 0;
    var t = (y - y0) / (y1 - y0);
    var dir = y1 < y0 ? 1 : -1;
    if (t === 1 || t === 0) dir = y1 < y0 ? 0.5 : -0.5;
    var x_ = t * (x1 - x0) + x0;
    return x_ === x ? Infinity : x_ > x ? dir : 0;
}


var $7a8799ca43c7afee$var$CMD = (0, $9638c378ac086dea$export$2e2bcd8739ae039).CMD;
var $7a8799ca43c7afee$var$PI2 = Math.PI * 2;
var $7a8799ca43c7afee$var$EPSILON = 1e-4;
function $7a8799ca43c7afee$var$isAroundEqual(a, b) {
    return Math.abs(a - b) < $7a8799ca43c7afee$var$EPSILON;
}
var $7a8799ca43c7afee$var$roots = [
    -1,
    -1,
    -1
];
var $7a8799ca43c7afee$var$extrema = [
    -1,
    -1
];
function $7a8799ca43c7afee$var$swapExtrema() {
    var tmp = $7a8799ca43c7afee$var$extrema[0];
    $7a8799ca43c7afee$var$extrema[0] = $7a8799ca43c7afee$var$extrema[1];
    $7a8799ca43c7afee$var$extrema[1] = tmp;
}
function $7a8799ca43c7afee$var$windingCubic(x0, y0, x1, y1, x2, y2, x3, y3, x, y) {
    if (y > y0 && y > y1 && y > y2 && y > y3 || y < y0 && y < y1 && y < y2 && y < y3) return 0;
    var nRoots = $b1facc0bcf653177$export$ca5d13faa10b167e(y0, y1, y2, y3, y, $7a8799ca43c7afee$var$roots);
    if (nRoots === 0) return 0;
    else {
        var w = 0;
        var nExtrema = -1;
        var y0_ = void 0;
        var y1_ = void 0;
        for(var i = 0; i < nRoots; i++){
            var t = $7a8799ca43c7afee$var$roots[i];
            var unit = t === 0 || t === 1 ? 0.5 : 1;
            var x_ = $b1facc0bcf653177$export$547c21de482bbcb2(x0, x1, x2, x3, t);
            if (x_ < x) continue;
            if (nExtrema < 0) {
                nExtrema = $b1facc0bcf653177$export$df1a172f100d0457(y0, y1, y2, y3, $7a8799ca43c7afee$var$extrema);
                if ($7a8799ca43c7afee$var$extrema[1] < $7a8799ca43c7afee$var$extrema[0] && nExtrema > 1) $7a8799ca43c7afee$var$swapExtrema();
                y0_ = $b1facc0bcf653177$export$547c21de482bbcb2(y0, y1, y2, y3, $7a8799ca43c7afee$var$extrema[0]);
                if (nExtrema > 1) y1_ = $b1facc0bcf653177$export$547c21de482bbcb2(y0, y1, y2, y3, $7a8799ca43c7afee$var$extrema[1]);
            }
            if (nExtrema === 2) {
                if (t < $7a8799ca43c7afee$var$extrema[0]) w += y0_ < y0 ? unit : -unit;
                else if (t < $7a8799ca43c7afee$var$extrema[1]) w += y1_ < y0_ ? unit : -unit;
                else w += y3 < y1_ ? unit : -unit;
            } else if (t < $7a8799ca43c7afee$var$extrema[0]) w += y0_ < y0 ? unit : -unit;
            else w += y3 < y0_ ? unit : -unit;
        }
        return w;
    }
}
function $7a8799ca43c7afee$var$windingQuadratic(x0, y0, x1, y1, x2, y2, x, y) {
    if (y > y0 && y > y1 && y > y2 || y < y0 && y < y1 && y < y2) return 0;
    var nRoots = $b1facc0bcf653177$export$fd895ac7ee764967(y0, y1, y2, y, $7a8799ca43c7afee$var$roots);
    if (nRoots === 0) return 0;
    else {
        var t = $b1facc0bcf653177$export$752e1f8c6e7f7e11(y0, y1, y2);
        if (t >= 0 && t <= 1) {
            var w = 0;
            var y_ = $b1facc0bcf653177$export$af17094a950f5073(y0, y1, y2, t);
            for(var i = 0; i < nRoots; i++){
                var unit = $7a8799ca43c7afee$var$roots[i] === 0 || $7a8799ca43c7afee$var$roots[i] === 1 ? 0.5 : 1;
                var x_ = $b1facc0bcf653177$export$af17094a950f5073(x0, x1, x2, $7a8799ca43c7afee$var$roots[i]);
                if (x_ < x) continue;
                if ($7a8799ca43c7afee$var$roots[i] < t) w += y_ < y0 ? unit : -unit;
                else w += y2 < y_ ? unit : -unit;
            }
            return w;
        } else {
            var unit = $7a8799ca43c7afee$var$roots[0] === 0 || $7a8799ca43c7afee$var$roots[0] === 1 ? 0.5 : 1;
            var x_ = $b1facc0bcf653177$export$af17094a950f5073(x0, x1, x2, $7a8799ca43c7afee$var$roots[0]);
            if (x_ < x) return 0;
            return y2 < y0 ? unit : -unit;
        }
    }
}
function $7a8799ca43c7afee$var$windingArc(cx, cy, r, startAngle, endAngle, anticlockwise, x, y) {
    y -= cy;
    if (y > r || y < -r) return 0;
    var tmp = Math.sqrt(r * r - y * y);
    $7a8799ca43c7afee$var$roots[0] = -tmp;
    $7a8799ca43c7afee$var$roots[1] = tmp;
    var dTheta = Math.abs(startAngle - endAngle);
    if (dTheta < 1e-4) return 0;
    if (dTheta >= $7a8799ca43c7afee$var$PI2 - 1e-4) {
        startAngle = 0;
        endAngle = $7a8799ca43c7afee$var$PI2;
        var dir = anticlockwise ? 1 : -1;
        if (x >= $7a8799ca43c7afee$var$roots[0] + cx && x <= $7a8799ca43c7afee$var$roots[1] + cx) return dir;
        else return 0;
    }
    if (startAngle > endAngle) {
        var tmp_1 = startAngle;
        startAngle = endAngle;
        endAngle = tmp_1;
    }
    if (startAngle < 0) {
        startAngle += $7a8799ca43c7afee$var$PI2;
        endAngle += $7a8799ca43c7afee$var$PI2;
    }
    var w = 0;
    for(var i = 0; i < 2; i++){
        var x_ = $7a8799ca43c7afee$var$roots[i];
        if (x_ + cx > x) {
            var angle = Math.atan2(y, x_);
            var dir = anticlockwise ? 1 : -1;
            if (angle < 0) angle = $7a8799ca43c7afee$var$PI2 + angle;
            if (angle >= startAngle && angle <= endAngle || angle + $7a8799ca43c7afee$var$PI2 >= startAngle && angle + $7a8799ca43c7afee$var$PI2 <= endAngle) {
                if (angle > Math.PI / 2 && angle < Math.PI * 1.5) dir = -dir;
                w += dir;
            }
        }
    }
    return w;
}
function $7a8799ca43c7afee$var$containPath(path, lineWidth, isStroke, x, y) {
    var data = path.data;
    var len = path.len();
    var w = 0;
    var xi = 0;
    var yi = 0;
    var x0 = 0;
    var y0 = 0;
    var x1;
    var y1;
    for(var i = 0; i < len;){
        var cmd = data[i++];
        var isFirst = i === 1;
        if (cmd === $7a8799ca43c7afee$var$CMD.M && i > 1) {
            if (!isStroke) w += (0, $3721d02567c6714d$export$2e2bcd8739ae039)(xi, yi, x0, y0, x, y);
        }
        if (isFirst) {
            xi = data[i];
            yi = data[i + 1];
            x0 = xi;
            y0 = yi;
        }
        switch(cmd){
            case $7a8799ca43c7afee$var$CMD.M:
                x0 = data[i++];
                y0 = data[i++];
                xi = x0;
                yi = y0;
                break;
            case $7a8799ca43c7afee$var$CMD.L:
                if (isStroke) {
                    if ($f9e460df1595cf36$export$8d36b1b5d19157c5(xi, yi, data[i], data[i + 1], lineWidth, x, y)) return true;
                } else w += (0, $3721d02567c6714d$export$2e2bcd8739ae039)(xi, yi, data[i], data[i + 1], x, y) || 0;
                xi = data[i++];
                yi = data[i++];
                break;
            case $7a8799ca43c7afee$var$CMD.C:
                if (isStroke) {
                    if ($4de6511681a2d78c$export$8d36b1b5d19157c5(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], lineWidth, x, y)) return true;
                } else w += $7a8799ca43c7afee$var$windingCubic(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], x, y) || 0;
                xi = data[i++];
                yi = data[i++];
                break;
            case $7a8799ca43c7afee$var$CMD.Q:
                if (isStroke) {
                    if ($a1c5f49fe4580199$export$8d36b1b5d19157c5(xi, yi, data[i++], data[i++], data[i], data[i + 1], lineWidth, x, y)) return true;
                } else w += $7a8799ca43c7afee$var$windingQuadratic(xi, yi, data[i++], data[i++], data[i], data[i + 1], x, y) || 0;
                xi = data[i++];
                yi = data[i++];
                break;
            case $7a8799ca43c7afee$var$CMD.A:
                var cx = data[i++];
                var cy = data[i++];
                var rx = data[i++];
                var ry = data[i++];
                var theta = data[i++];
                var dTheta = data[i++];
                i += 1;
                var anticlockwise = !!(1 - data[i++]);
                x1 = Math.cos(theta) * rx + cx;
                y1 = Math.sin(theta) * ry + cy;
                if (!isFirst) w += (0, $3721d02567c6714d$export$2e2bcd8739ae039)(xi, yi, x1, y1, x, y);
                else {
                    x0 = x1;
                    y0 = y1;
                }
                var _x = (x - cx) * ry / rx + cx;
                if (isStroke) {
                    if ($b522d61caa50e79e$export$8d36b1b5d19157c5(cx, cy, ry, theta, theta + dTheta, anticlockwise, lineWidth, _x, y)) return true;
                } else w += $7a8799ca43c7afee$var$windingArc(cx, cy, ry, theta, theta + dTheta, anticlockwise, _x, y);
                xi = Math.cos(theta + dTheta) * rx + cx;
                yi = Math.sin(theta + dTheta) * ry + cy;
                break;
            case $7a8799ca43c7afee$var$CMD.R:
                x0 = xi = data[i++];
                y0 = yi = data[i++];
                var width = data[i++];
                var height = data[i++];
                x1 = x0 + width;
                y1 = y0 + height;
                if (isStroke) {
                    if ($f9e460df1595cf36$export$8d36b1b5d19157c5(x0, y0, x1, y0, lineWidth, x, y) || $f9e460df1595cf36$export$8d36b1b5d19157c5(x1, y0, x1, y1, lineWidth, x, y) || $f9e460df1595cf36$export$8d36b1b5d19157c5(x1, y1, x0, y1, lineWidth, x, y) || $f9e460df1595cf36$export$8d36b1b5d19157c5(x0, y1, x0, y0, lineWidth, x, y)) return true;
                } else {
                    w += (0, $3721d02567c6714d$export$2e2bcd8739ae039)(x1, y0, x1, y1, x, y);
                    w += (0, $3721d02567c6714d$export$2e2bcd8739ae039)(x0, y1, x0, y0, x, y);
                }
                break;
            case $7a8799ca43c7afee$var$CMD.Z:
                if (isStroke) {
                    if ($f9e460df1595cf36$export$8d36b1b5d19157c5(xi, yi, x0, y0, lineWidth, x, y)) return true;
                } else w += (0, $3721d02567c6714d$export$2e2bcd8739ae039)(xi, yi, x0, y0, x, y);
                xi = x0;
                yi = y0;
                break;
        }
    }
    if (!isStroke && !$7a8799ca43c7afee$var$isAroundEqual(yi, y0)) w += (0, $3721d02567c6714d$export$2e2bcd8739ae039)(xi, yi, x0, y0, x, y) || 0;
    return w !== 0;
}
function $7a8799ca43c7afee$export$8893e2b90ba10d92(pathProxy, x, y) {
    return $7a8799ca43c7afee$var$containPath(pathProxy, 0, false, x, y);
}
function $7a8799ca43c7afee$export$8d36b1b5d19157c5(pathProxy, lineWidth, x, y) {
    return $7a8799ca43c7afee$var$containPath(pathProxy, lineWidth, true, x, y);
}







var $97f9f9aac9c7fd52$export$deade517576e293a = (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)({
    fill: "#000",
    stroke: null,
    strokePercent: 1,
    fillOpacity: 1,
    strokeOpacity: 1,
    lineDashOffset: 0,
    lineWidth: 1,
    lineCap: "butt",
    miterLimit: 10,
    strokeNoScale: false,
    strokeFirst: false
}, (0, $42aae97fd255cbd2$export$737672163db00fe3));
var $97f9f9aac9c7fd52$export$71bb6c3c6862c6a5 = {
    style: (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)({
        fill: true,
        stroke: true,
        strokePercent: true,
        fillOpacity: true,
        strokeOpacity: true,
        lineDashOffset: true,
        lineWidth: true,
        miterLimit: true
    }, (0, $42aae97fd255cbd2$export$9908943fb57fbe51).style)
};
var $97f9f9aac9c7fd52$var$pathCopyParams = (0, $039fe2b24eabe4b4$export$98ab6203ec3396e2).concat([
    "invisible",
    "culling",
    "z",
    "z2",
    "zlevel",
    "parent"
]);
var $97f9f9aac9c7fd52$var$Path = function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(Path, _super);
    function Path(opts) {
        return _super.call(this, opts) || this;
    }
    Path.prototype.update = function() {
        var _this = this;
        _super.prototype.update.call(this);
        var style = this.style;
        if (style.decal) {
            var decalEl = this._decalEl = this._decalEl || new Path();
            if (decalEl.buildPath === Path.prototype.buildPath) decalEl.buildPath = function(ctx) {
                _this.buildPath(ctx, _this.shape);
            };
            decalEl.silent = true;
            var decalElStyle = decalEl.style;
            for(var key in style)if (decalElStyle[key] !== style[key]) decalElStyle[key] = style[key];
            decalElStyle.fill = style.fill ? style.decal : null;
            decalElStyle.decal = null;
            decalElStyle.shadowColor = null;
            style.strokeFirst && (decalElStyle.stroke = null);
            for(var i = 0; i < $97f9f9aac9c7fd52$var$pathCopyParams.length; ++i)decalEl[$97f9f9aac9c7fd52$var$pathCopyParams[i]] = this[$97f9f9aac9c7fd52$var$pathCopyParams[i]];
            decalEl.__dirty |= (0, $b870c418b8d2135e$export$a7b6db622c6c7dbd);
        } else if (this._decalEl) this._decalEl = null;
    };
    Path.prototype.getDecalElement = function() {
        return this._decalEl;
    };
    Path.prototype._init = function(props) {
        var keysArr = (0, $e44eb14c4271d0f9$export$ed97f33186d4b816)(props);
        this.shape = this.getDefaultShape();
        var defaultStyle = this.getDefaultStyle();
        if (defaultStyle) this.useStyle(defaultStyle);
        for(var i = 0; i < keysArr.length; i++){
            var key = keysArr[i];
            var value = props[key];
            if (key === "style") {
                if (!this.style) this.useStyle(value);
                else (0, $e44eb14c4271d0f9$export$8b58be045bf06082)(this.style, value);
            } else if (key === "shape") (0, $e44eb14c4271d0f9$export$8b58be045bf06082)(this.shape, value);
            else _super.prototype.attrKV.call(this, key, value);
        }
        if (!this.style) this.useStyle({});
    };
    Path.prototype.getDefaultStyle = function() {
        return null;
    };
    Path.prototype.getDefaultShape = function() {
        return {};
    };
    Path.prototype.canBeInsideText = function() {
        return this.hasFill();
    };
    Path.prototype.getInsideTextFill = function() {
        var pathFill = this.style.fill;
        if (pathFill !== "none") {
            if ((0, $e44eb14c4271d0f9$export$844ec244b1367d54)(pathFill)) {
                var fillLum = (0, $5373993605fe25d6$export$16c0ec21a6f9ef95)(pathFill, 0);
                if (fillLum > 0.5) return 0, $a9c042e5e4c73c13$export$f8ce94761f39398d;
                else if (fillLum > 0.2) return 0, $a9c042e5e4c73c13$export$27682248795c3c6b;
                return 0, $a9c042e5e4c73c13$export$3c6e95f318c8369b;
            } else if (pathFill) return 0, $a9c042e5e4c73c13$export$3c6e95f318c8369b;
        }
        return 0, $a9c042e5e4c73c13$export$f8ce94761f39398d;
    };
    Path.prototype.getInsideTextStroke = function(textFill) {
        var pathFill = this.style.fill;
        if ((0, $e44eb14c4271d0f9$export$844ec244b1367d54)(pathFill)) {
            var zr = this.__zr;
            var isDarkMode = !!(zr && zr.isDarkMode());
            var isDarkLabel = (0, $5373993605fe25d6$export$16c0ec21a6f9ef95)(textFill, 0) < (0, $a9c042e5e4c73c13$export$fd81e7ebc7dae256);
            if (isDarkMode === isDarkLabel) return pathFill;
        }
    };
    Path.prototype.buildPath = function(ctx, shapeCfg, inBatch) {};
    Path.prototype.pathUpdated = function() {
        this.__dirty &= ~(0, $b870c418b8d2135e$export$f75fe89a33ebe115);
    };
    Path.prototype.getUpdatedPathProxy = function(inBatch) {
        !this.path && this.createPathProxy();
        this.path.beginPath();
        this.buildPath(this.path, this.shape, inBatch);
        return this.path;
    };
    Path.prototype.createPathProxy = function() {
        this.path = new (0, $9638c378ac086dea$export$2e2bcd8739ae039)(false);
    };
    Path.prototype.hasStroke = function() {
        var style = this.style;
        var stroke = style.stroke;
        return !(stroke == null || stroke === "none" || !(style.lineWidth > 0));
    };
    Path.prototype.hasFill = function() {
        var style = this.style;
        var fill = style.fill;
        return fill != null && fill !== "none";
    };
    Path.prototype.getBoundingRect = function() {
        var rect = this._rect;
        var style = this.style;
        var needsUpdateRect = !rect;
        if (needsUpdateRect) {
            var firstInvoke = false;
            if (!this.path) {
                firstInvoke = true;
                this.createPathProxy();
            }
            var path = this.path;
            if (firstInvoke || this.__dirty & (0, $b870c418b8d2135e$export$f75fe89a33ebe115)) {
                path.beginPath();
                this.buildPath(path, this.shape, false);
                this.pathUpdated();
            }
            rect = path.getBoundingRect();
        }
        this._rect = rect;
        if (this.hasStroke() && this.path && this.path.len() > 0) {
            var rectStroke = this._rectStroke || (this._rectStroke = rect.clone());
            if (this.__dirty || needsUpdateRect) {
                rectStroke.copy(rect);
                var lineScale = style.strokeNoScale ? this.getLineScale() : 1;
                var w = style.lineWidth;
                if (!this.hasFill()) {
                    var strokeContainThreshold = this.strokeContainThreshold;
                    w = Math.max(w, strokeContainThreshold == null ? 4 : strokeContainThreshold);
                }
                if (lineScale > 1e-10) {
                    rectStroke.width += w / lineScale;
                    rectStroke.height += w / lineScale;
                    rectStroke.x -= w / lineScale / 2;
                    rectStroke.y -= w / lineScale / 2;
                }
            }
            return rectStroke;
        }
        return rect;
    };
    Path.prototype.contain = function(x, y) {
        var localPos = this.transformCoordToLocal(x, y);
        var rect = this.getBoundingRect();
        var style = this.style;
        x = localPos[0];
        y = localPos[1];
        if (rect.contain(x, y)) {
            var pathProxy = this.path;
            if (this.hasStroke()) {
                var lineWidth = style.lineWidth;
                var lineScale = style.strokeNoScale ? this.getLineScale() : 1;
                if (lineScale > 1e-10) {
                    if (!this.hasFill()) lineWidth = Math.max(lineWidth, this.strokeContainThreshold);
                    if ($7a8799ca43c7afee$export$8d36b1b5d19157c5(pathProxy, lineWidth / lineScale, x, y)) return true;
                }
            }
            if (this.hasFill()) return $7a8799ca43c7afee$export$8893e2b90ba10d92(pathProxy, x, y);
        }
        return false;
    };
    Path.prototype.dirtyShape = function() {
        this.__dirty |= (0, $b870c418b8d2135e$export$f75fe89a33ebe115);
        if (this._rect) this._rect = null;
        if (this._decalEl) this._decalEl.dirtyShape();
        this.markRedraw();
    };
    Path.prototype.dirty = function() {
        this.dirtyStyle();
        this.dirtyShape();
    };
    Path.prototype.animateShape = function(loop) {
        return this.animate("shape", loop);
    };
    Path.prototype.updateDuringAnimation = function(targetKey) {
        if (targetKey === "style") this.dirtyStyle();
        else if (targetKey === "shape") this.dirtyShape();
        else this.markRedraw();
    };
    Path.prototype.attrKV = function(key, value) {
        if (key === "shape") this.setShape(value);
        else _super.prototype.attrKV.call(this, key, value);
    };
    Path.prototype.setShape = function(keyOrObj, value) {
        var shape = this.shape;
        if (!shape) shape = this.shape = {};
        if (typeof keyOrObj === "string") shape[keyOrObj] = value;
        else (0, $e44eb14c4271d0f9$export$8b58be045bf06082)(shape, keyOrObj);
        this.dirtyShape();
        return this;
    };
    Path.prototype.shapeChanged = function() {
        return !!(this.__dirty & (0, $b870c418b8d2135e$export$f75fe89a33ebe115));
    };
    Path.prototype.createStyle = function(obj) {
        return (0, $e44eb14c4271d0f9$export$79c7e160a7743efd)($97f9f9aac9c7fd52$export$deade517576e293a, obj);
    };
    Path.prototype._innerSaveToNormal = function(toState) {
        _super.prototype._innerSaveToNormal.call(this, toState);
        var normalState = this._normalState;
        if (toState.shape && !normalState.shape) normalState.shape = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, this.shape);
    };
    Path.prototype._applyStateObj = function(stateName, state, normalState, keepCurrentStates, transition, animationCfg) {
        _super.prototype._applyStateObj.call(this, stateName, state, normalState, keepCurrentStates, transition, animationCfg);
        var needsRestoreToNormal = !(state && keepCurrentStates);
        var targetShape;
        if (state && state.shape) {
            if (transition) {
                if (keepCurrentStates) targetShape = state.shape;
                else {
                    targetShape = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, normalState.shape);
                    (0, $e44eb14c4271d0f9$export$8b58be045bf06082)(targetShape, state.shape);
                }
            } else {
                targetShape = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, keepCurrentStates ? this.shape : normalState.shape);
                (0, $e44eb14c4271d0f9$export$8b58be045bf06082)(targetShape, state.shape);
            }
        } else if (needsRestoreToNormal) targetShape = normalState.shape;
        if (targetShape) {
            if (transition) {
                this.shape = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, this.shape);
                var targetShapePrimaryProps = {};
                var shapeKeys = (0, $e44eb14c4271d0f9$export$ed97f33186d4b816)(targetShape);
                for(var i = 0; i < shapeKeys.length; i++){
                    var key = shapeKeys[i];
                    if (typeof targetShape[key] === "object") this.shape[key] = targetShape[key];
                    else targetShapePrimaryProps[key] = targetShape[key];
                }
                this._transitionState(stateName, {
                    shape: targetShapePrimaryProps
                }, animationCfg);
            } else {
                this.shape = targetShape;
                this.dirtyShape();
            }
        }
    };
    Path.prototype._mergeStates = function(states) {
        var mergedState = _super.prototype._mergeStates.call(this, states);
        var mergedShape;
        for(var i = 0; i < states.length; i++){
            var state = states[i];
            if (state.shape) {
                mergedShape = mergedShape || {};
                this._mergeStyle(mergedShape, state.shape);
            }
        }
        if (mergedShape) mergedState.shape = mergedShape;
        return mergedState;
    };
    Path.prototype.getAnimationStyleProps = function() {
        return $97f9f9aac9c7fd52$export$71bb6c3c6862c6a5;
    };
    Path.prototype.isZeroArea = function() {
        return false;
    };
    Path.extend = function(defaultProps) {
        var Sub = function(_super) {
            (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(Sub, _super);
            function Sub(opts) {
                var _this = _super.call(this, opts) || this;
                defaultProps.init && defaultProps.init.call(_this, opts);
                return _this;
            }
            Sub.prototype.getDefaultStyle = function() {
                return (0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(defaultProps.style);
            };
            Sub.prototype.getDefaultShape = function() {
                return (0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(defaultProps.shape);
            };
            return Sub;
        }(Path);
        for(var key in defaultProps)if (typeof defaultProps[key] === "function") Sub.prototype[key] = defaultProps[key];
        return Sub;
    };
    Path.initDefaultProps = function() {
        var pathProto = Path.prototype;
        pathProto.type = "path";
        pathProto.strokeContainThreshold = 5;
        pathProto.segmentIgnoreThreshold = 0;
        pathProto.subPixelOptimize = false;
        pathProto.autoBatch = false;
        pathProto.__dirty = (0, $b870c418b8d2135e$export$a7b6db622c6c7dbd) | (0, $b870c418b8d2135e$export$ada8b2beb3d76671) | (0, $b870c418b8d2135e$export$f75fe89a33ebe115);
    }();
    return Path;
}((0, $42aae97fd255cbd2$export$2e2bcd8739ae039));
var $97f9f9aac9c7fd52$export$2e2bcd8739ae039 = $97f9f9aac9c7fd52$var$Path;




var $80ac97d0df21d0b5$export$5fbb6d98091bcb56 = (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)({
    strokeFirst: true,
    font: (0, $c7ef4e2442c05203$export$7d7a232b6d2cc80c),
    x: 0,
    y: 0,
    textAlign: "left",
    textBaseline: "top",
    miterLimit: 2
}, (0, $97f9f9aac9c7fd52$export$deade517576e293a));
var $80ac97d0df21d0b5$var$TSpan = function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(TSpan, _super);
    function TSpan() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TSpan.prototype.hasStroke = function() {
        var style = this.style;
        var stroke = style.stroke;
        return stroke != null && stroke !== "none" && style.lineWidth > 0;
    };
    TSpan.prototype.hasFill = function() {
        var style = this.style;
        var fill = style.fill;
        return fill != null && fill !== "none";
    };
    TSpan.prototype.createStyle = function(obj) {
        return (0, $e44eb14c4271d0f9$export$79c7e160a7743efd)($80ac97d0df21d0b5$export$5fbb6d98091bcb56, obj);
    };
    TSpan.prototype.setBoundingRect = function(rect) {
        this._rect = rect;
    };
    TSpan.prototype.getBoundingRect = function() {
        var style = this.style;
        if (!this._rect) {
            var text = style.text;
            text != null ? text += "" : text = "";
            var rect = (0, $1a2563e7d7856dd8$export$c381147bfed79d9f)(text, style.font, style.textAlign, style.textBaseline);
            rect.x += style.x || 0;
            rect.y += style.y || 0;
            if (this.hasStroke()) {
                var w = style.lineWidth;
                rect.x -= w / 2;
                rect.y -= w / 2;
                rect.width += w;
                rect.height += w;
            }
            this._rect = rect;
        }
        return this._rect;
    };
    TSpan.initDefaultProps = function() {
        var tspanProto = TSpan.prototype;
        tspanProto.dirtyRectTolerance = 10;
    }();
    return TSpan;
}((0, $42aae97fd255cbd2$export$2e2bcd8739ae039));
$80ac97d0df21d0b5$var$TSpan.prototype.type = "tspan";
var $80ac97d0df21d0b5$export$2e2bcd8739ae039 = $80ac97d0df21d0b5$var$TSpan;








var $7fb187ddd76ee1dc$export$8993f922aeeac642 = (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)({
    x: 0,
    y: 0
}, (0, $42aae97fd255cbd2$export$737672163db00fe3));
var $7fb187ddd76ee1dc$export$4aba8ad70847a488 = {
    style: (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)({
        x: true,
        y: true,
        width: true,
        height: true,
        sx: true,
        sy: true,
        sWidth: true,
        sHeight: true
    }, (0, $42aae97fd255cbd2$export$9908943fb57fbe51).style)
};
function $7fb187ddd76ee1dc$var$isImageLike(source) {
    return !!(source && typeof source !== "string" && source.width && source.height);
}
var $7fb187ddd76ee1dc$var$ZRImage = function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(ZRImage, _super);
    function ZRImage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ZRImage.prototype.createStyle = function(obj) {
        return (0, $e44eb14c4271d0f9$export$79c7e160a7743efd)($7fb187ddd76ee1dc$export$8993f922aeeac642, obj);
    };
    ZRImage.prototype._getSize = function(dim) {
        var style = this.style;
        var size = style[dim];
        if (size != null) return size;
        var imageSource = $7fb187ddd76ee1dc$var$isImageLike(style.image) ? style.image : this.__image;
        if (!imageSource) return 0;
        var otherDim = dim === "width" ? "height" : "width";
        var otherDimSize = style[otherDim];
        if (otherDimSize == null) return imageSource[dim];
        else return imageSource[dim] / imageSource[otherDim] * otherDimSize;
    };
    ZRImage.prototype.getWidth = function() {
        return this._getSize("width");
    };
    ZRImage.prototype.getHeight = function() {
        return this._getSize("height");
    };
    ZRImage.prototype.getAnimationStyleProps = function() {
        return $7fb187ddd76ee1dc$export$4aba8ad70847a488;
    };
    ZRImage.prototype.getBoundingRect = function() {
        var style = this.style;
        if (!this._rect) this._rect = new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)(style.x || 0, style.y || 0, this.getWidth(), this.getHeight());
        return this._rect;
    };
    return ZRImage;
}((0, $42aae97fd255cbd2$export$2e2bcd8739ae039));
$7fb187ddd76ee1dc$var$ZRImage.prototype.type = "image";
var $7fb187ddd76ee1dc$export$2e2bcd8739ae039 = $7fb187ddd76ee1dc$var$ZRImage;




function $7876d9d161779388$export$5cc7f731b5937e99(ctx, shape) {
    var x = shape.x;
    var y = shape.y;
    var width = shape.width;
    var height = shape.height;
    var r = shape.r;
    var r1;
    var r2;
    var r3;
    var r4;
    if (width < 0) {
        x = x + width;
        width = -width;
    }
    if (height < 0) {
        y = y + height;
        height = -height;
    }
    if (typeof r === "number") r1 = r2 = r3 = r4 = r;
    else if (r instanceof Array) {
        if (r.length === 1) r1 = r2 = r3 = r4 = r[0];
        else if (r.length === 2) {
            r1 = r3 = r[0];
            r2 = r4 = r[1];
        } else if (r.length === 3) {
            r1 = r[0];
            r2 = r4 = r[1];
            r3 = r[2];
        } else {
            r1 = r[0];
            r2 = r[1];
            r3 = r[2];
            r4 = r[3];
        }
    } else r1 = r2 = r3 = r4 = 0;
    var total;
    if (r1 + r2 > width) {
        total = r1 + r2;
        r1 *= width / total;
        r2 *= width / total;
    }
    if (r3 + r4 > width) {
        total = r3 + r4;
        r3 *= width / total;
        r4 *= width / total;
    }
    if (r2 + r3 > height) {
        total = r2 + r3;
        r2 *= height / total;
        r3 *= height / total;
    }
    if (r1 + r4 > height) {
        total = r1 + r4;
        r1 *= height / total;
        r4 *= height / total;
    }
    ctx.moveTo(x + r1, y);
    ctx.lineTo(x + width - r2, y);
    r2 !== 0 && ctx.arc(x + width - r2, y + r2, r2, -Math.PI / 2, 0);
    ctx.lineTo(x + width, y + height - r3);
    r3 !== 0 && ctx.arc(x + width - r3, y + height - r3, r3, 0, Math.PI / 2);
    ctx.lineTo(x + r4, y + height);
    r4 !== 0 && ctx.arc(x + r4, y + height - r4, r4, Math.PI / 2, Math.PI);
    ctx.lineTo(x, y + r1);
    r1 !== 0 && ctx.arc(x + r1, y + r1, r1, Math.PI, Math.PI * 1.5);
}


var $e6df98dd860ad415$var$round = Math.round;
function $e6df98dd860ad415$export$8b4b620d7f4aad1b(outputShape, inputShape, style) {
    if (!inputShape) return;
    var x1 = inputShape.x1;
    var x2 = inputShape.x2;
    var y1 = inputShape.y1;
    var y2 = inputShape.y2;
    outputShape.x1 = x1;
    outputShape.x2 = x2;
    outputShape.y1 = y1;
    outputShape.y2 = y2;
    var lineWidth = style && style.lineWidth;
    if (!lineWidth) return outputShape;
    if ($e6df98dd860ad415$var$round(x1 * 2) === $e6df98dd860ad415$var$round(x2 * 2)) outputShape.x1 = outputShape.x2 = $e6df98dd860ad415$export$72c4fd4c1b8fcb10(x1, lineWidth, true);
    if ($e6df98dd860ad415$var$round(y1 * 2) === $e6df98dd860ad415$var$round(y2 * 2)) outputShape.y1 = outputShape.y2 = $e6df98dd860ad415$export$72c4fd4c1b8fcb10(y1, lineWidth, true);
    return outputShape;
}
function $e6df98dd860ad415$export$60e2aa74957d0b9d(outputShape, inputShape, style) {
    if (!inputShape) return;
    var originX = inputShape.x;
    var originY = inputShape.y;
    var originWidth = inputShape.width;
    var originHeight = inputShape.height;
    outputShape.x = originX;
    outputShape.y = originY;
    outputShape.width = originWidth;
    outputShape.height = originHeight;
    var lineWidth = style && style.lineWidth;
    if (!lineWidth) return outputShape;
    outputShape.x = $e6df98dd860ad415$export$72c4fd4c1b8fcb10(originX, lineWidth, true);
    outputShape.y = $e6df98dd860ad415$export$72c4fd4c1b8fcb10(originY, lineWidth, true);
    outputShape.width = Math.max($e6df98dd860ad415$export$72c4fd4c1b8fcb10(originX + originWidth, lineWidth, false) - outputShape.x, originWidth === 0 ? 0 : 1);
    outputShape.height = Math.max($e6df98dd860ad415$export$72c4fd4c1b8fcb10(originY + originHeight, lineWidth, false) - outputShape.y, originHeight === 0 ? 0 : 1);
    return outputShape;
}
function $e6df98dd860ad415$export$72c4fd4c1b8fcb10(position, lineWidth, positiveOrNegative) {
    if (!lineWidth) return position;
    var doubledPosition = $e6df98dd860ad415$var$round(position * 2);
    return (doubledPosition + $e6df98dd860ad415$var$round(lineWidth)) % 2 === 0 ? doubledPosition / 2 : (doubledPosition + (positiveOrNegative ? 1 : -1)) / 2;
}


var $538026eba361a92a$export$51140d6b71bb4ed5 = function() {
    function RectShape() {
        this.x = 0;
        this.y = 0;
        this.width = 0;
        this.height = 0;
    }
    return RectShape;
}();
var $538026eba361a92a$var$subPixelOptimizeOutputShape = {};
var $538026eba361a92a$var$Rect = function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(Rect, _super);
    function Rect(opts) {
        return _super.call(this, opts) || this;
    }
    Rect.prototype.getDefaultShape = function() {
        return new $538026eba361a92a$export$51140d6b71bb4ed5();
    };
    Rect.prototype.buildPath = function(ctx, shape) {
        var x;
        var y;
        var width;
        var height;
        if (this.subPixelOptimize) {
            var optimizedShape = (0, $e6df98dd860ad415$export$60e2aa74957d0b9d)($538026eba361a92a$var$subPixelOptimizeOutputShape, shape, this.style);
            x = optimizedShape.x;
            y = optimizedShape.y;
            width = optimizedShape.width;
            height = optimizedShape.height;
            optimizedShape.r = shape.r;
            shape = optimizedShape;
        } else {
            x = shape.x;
            y = shape.y;
            width = shape.width;
            height = shape.height;
        }
        if (!shape.r) ctx.rect(x, y, width, height);
        else $7876d9d161779388$export$5cc7f731b5937e99(ctx, shape);
    };
    Rect.prototype.isZeroArea = function() {
        return !this.shape.width || !this.shape.height;
    };
    return Rect;
}((0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039));
$538026eba361a92a$var$Rect.prototype.type = "rect";
var $538026eba361a92a$export$2e2bcd8739ae039 = $538026eba361a92a$var$Rect;





var $6d12d9a137e168c2$var$DEFAULT_RICH_TEXT_COLOR = {
    fill: "#000"
};
var $6d12d9a137e168c2$var$DEFAULT_STROKE_LINE_WIDTH = 2;
var $6d12d9a137e168c2$export$21aaaa0607ee0e2b = {
    style: (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)({
        fill: true,
        stroke: true,
        fillOpacity: true,
        strokeOpacity: true,
        lineWidth: true,
        fontSize: true,
        lineHeight: true,
        width: true,
        height: true,
        textShadowColor: true,
        textShadowBlur: true,
        textShadowOffsetX: true,
        textShadowOffsetY: true,
        backgroundColor: true,
        padding: true,
        borderColor: true,
        borderWidth: true,
        borderRadius: true
    }, (0, $42aae97fd255cbd2$export$9908943fb57fbe51).style)
};
var $6d12d9a137e168c2$var$ZRText = function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(ZRText, _super);
    function ZRText(opts) {
        var _this = _super.call(this) || this;
        _this.type = "text";
        _this._children = [];
        _this._defaultStyle = $6d12d9a137e168c2$var$DEFAULT_RICH_TEXT_COLOR;
        _this.attr(opts);
        return _this;
    }
    ZRText.prototype.childrenRef = function() {
        return this._children;
    };
    ZRText.prototype.update = function() {
        _super.prototype.update.call(this);
        if (this.styleChanged()) this._updateSubTexts();
        for(var i = 0; i < this._children.length; i++){
            var child = this._children[i];
            child.zlevel = this.zlevel;
            child.z = this.z;
            child.z2 = this.z2;
            child.culling = this.culling;
            child.cursor = this.cursor;
            child.invisible = this.invisible;
        }
    };
    ZRText.prototype.updateTransform = function() {
        var innerTransformable = this.innerTransformable;
        if (innerTransformable) {
            innerTransformable.updateTransform();
            if (innerTransformable.transform) this.transform = innerTransformable.transform;
        } else _super.prototype.updateTransform.call(this);
    };
    ZRText.prototype.getLocalTransform = function(m) {
        var innerTransformable = this.innerTransformable;
        return innerTransformable ? innerTransformable.getLocalTransform(m) : _super.prototype.getLocalTransform.call(this, m);
    };
    ZRText.prototype.getComputedTransform = function() {
        if (this.__hostTarget) {
            this.__hostTarget.getComputedTransform();
            this.__hostTarget.updateInnerText(true);
        }
        return _super.prototype.getComputedTransform.call(this);
    };
    ZRText.prototype._updateSubTexts = function() {
        this._childCursor = 0;
        $6d12d9a137e168c2$export$176336068cc5371f(this.style);
        this.style.rich ? this._updateRichTexts() : this._updatePlainTexts();
        this._children.length = this._childCursor;
        this.styleUpdated();
    };
    ZRText.prototype.addSelfToZr = function(zr) {
        _super.prototype.addSelfToZr.call(this, zr);
        for(var i = 0; i < this._children.length; i++)this._children[i].__zr = zr;
    };
    ZRText.prototype.removeSelfFromZr = function(zr) {
        _super.prototype.removeSelfFromZr.call(this, zr);
        for(var i = 0; i < this._children.length; i++)this._children[i].__zr = null;
    };
    ZRText.prototype.getBoundingRect = function() {
        if (this.styleChanged()) this._updateSubTexts();
        if (!this._rect) {
            var tmpRect = new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)(0, 0, 0, 0);
            var children = this._children;
            var tmpMat = [];
            var rect = null;
            for(var i = 0; i < children.length; i++){
                var child = children[i];
                var childRect = child.getBoundingRect();
                var transform = child.getLocalTransform(tmpMat);
                if (transform) {
                    tmpRect.copy(childRect);
                    tmpRect.applyTransform(transform);
                    rect = rect || tmpRect.clone();
                    rect.union(tmpRect);
                } else {
                    rect = rect || childRect.clone();
                    rect.union(childRect);
                }
            }
            this._rect = rect || tmpRect;
        }
        return this._rect;
    };
    ZRText.prototype.setDefaultTextStyle = function(defaultTextStyle) {
        this._defaultStyle = defaultTextStyle || $6d12d9a137e168c2$var$DEFAULT_RICH_TEXT_COLOR;
    };
    ZRText.prototype.setTextContent = function(textContent) {
        throw new Error("Can't attach text on another text");
    };
    ZRText.prototype._mergeStyle = function(targetStyle, sourceStyle) {
        if (!sourceStyle) return targetStyle;
        var sourceRich = sourceStyle.rich;
        var targetRich = targetStyle.rich || sourceRich && {};
        (0, $e44eb14c4271d0f9$export$8b58be045bf06082)(targetStyle, sourceStyle);
        if (sourceRich && targetRich) {
            this._mergeRich(targetRich, sourceRich);
            targetStyle.rich = targetRich;
        } else if (targetRich) targetStyle.rich = targetRich;
        return targetStyle;
    };
    ZRText.prototype._mergeRich = function(targetRich, sourceRich) {
        var richNames = (0, $e44eb14c4271d0f9$export$ed97f33186d4b816)(sourceRich);
        for(var i = 0; i < richNames.length; i++){
            var richName = richNames[i];
            targetRich[richName] = targetRich[richName] || {};
            (0, $e44eb14c4271d0f9$export$8b58be045bf06082)(targetRich[richName], sourceRich[richName]);
        }
    };
    ZRText.prototype.getAnimationStyleProps = function() {
        return $6d12d9a137e168c2$export$21aaaa0607ee0e2b;
    };
    ZRText.prototype._getOrCreateChild = function(Ctor) {
        var child = this._children[this._childCursor];
        if (!child || !(child instanceof Ctor)) child = new Ctor();
        this._children[this._childCursor++] = child;
        child.__zr = this.__zr;
        child.parent = this;
        return child;
    };
    ZRText.prototype._updatePlainTexts = function() {
        var style = this.style;
        var textFont = style.font || (0, $c7ef4e2442c05203$export$7d7a232b6d2cc80c);
        var textPadding = style.padding;
        var text = $6d12d9a137e168c2$var$getStyleText(style);
        var contentBlock = (0, $ccb606359753c5d0$export$5772575e34ef80f9)(text, style);
        var needDrawBg = $6d12d9a137e168c2$var$needDrawBackground(style);
        var bgColorDrawn = !!style.backgroundColor;
        var outerHeight = contentBlock.outerHeight;
        var outerWidth = contentBlock.outerWidth;
        var contentWidth = contentBlock.contentWidth;
        var textLines = contentBlock.lines;
        var lineHeight = contentBlock.lineHeight;
        var defaultStyle = this._defaultStyle;
        var baseX = style.x || 0;
        var baseY = style.y || 0;
        var textAlign = style.align || defaultStyle.align || "left";
        var verticalAlign = style.verticalAlign || defaultStyle.verticalAlign || "top";
        var textX = baseX;
        var textY = (0, $1a2563e7d7856dd8$export$bf7d6802d2badd9)(baseY, contentBlock.contentHeight, verticalAlign);
        if (needDrawBg || textPadding) {
            var boxX = (0, $1a2563e7d7856dd8$export$eb5a525ef00ef9a4)(baseX, outerWidth, textAlign);
            var boxY = (0, $1a2563e7d7856dd8$export$bf7d6802d2badd9)(baseY, outerHeight, verticalAlign);
            needDrawBg && this._renderBackground(style, style, boxX, boxY, outerWidth, outerHeight);
        }
        textY += lineHeight / 2;
        if (textPadding) {
            textX = $6d12d9a137e168c2$var$getTextXForPadding(baseX, textAlign, textPadding);
            if (verticalAlign === "top") textY += textPadding[0];
            else if (verticalAlign === "bottom") textY -= textPadding[2];
        }
        var defaultLineWidth = 0;
        var useDefaultFill = false;
        var textFill = $6d12d9a137e168c2$var$getFill("fill" in style ? style.fill : (useDefaultFill = true, defaultStyle.fill));
        var textStroke = $6d12d9a137e168c2$var$getStroke("stroke" in style ? style.stroke : !bgColorDrawn && (!defaultStyle.autoStroke || useDefaultFill) ? (defaultLineWidth = $6d12d9a137e168c2$var$DEFAULT_STROKE_LINE_WIDTH, defaultStyle.stroke) : null);
        var hasShadow = style.textShadowBlur > 0;
        var fixedBoundingRect = style.width != null && (style.overflow === "truncate" || style.overflow === "break" || style.overflow === "breakAll");
        var calculatedLineHeight = contentBlock.calculatedLineHeight;
        for(var i = 0; i < textLines.length; i++){
            var el = this._getOrCreateChild((0, $80ac97d0df21d0b5$export$2e2bcd8739ae039));
            var subElStyle = el.createStyle();
            el.useStyle(subElStyle);
            subElStyle.text = textLines[i];
            subElStyle.x = textX;
            subElStyle.y = textY;
            if (textAlign) subElStyle.textAlign = textAlign;
            subElStyle.textBaseline = "middle";
            subElStyle.opacity = style.opacity;
            subElStyle.strokeFirst = true;
            if (hasShadow) {
                subElStyle.shadowBlur = style.textShadowBlur || 0;
                subElStyle.shadowColor = style.textShadowColor || "transparent";
                subElStyle.shadowOffsetX = style.textShadowOffsetX || 0;
                subElStyle.shadowOffsetY = style.textShadowOffsetY || 0;
            }
            subElStyle.stroke = textStroke;
            subElStyle.fill = textFill;
            if (textStroke) {
                subElStyle.lineWidth = style.lineWidth || defaultLineWidth;
                subElStyle.lineDash = style.lineDash;
                subElStyle.lineDashOffset = style.lineDashOffset || 0;
            }
            subElStyle.font = textFont;
            $6d12d9a137e168c2$var$setSeparateFont(subElStyle, style);
            textY += lineHeight;
            if (fixedBoundingRect) el.setBoundingRect(new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)((0, $1a2563e7d7856dd8$export$eb5a525ef00ef9a4)(subElStyle.x, style.width, subElStyle.textAlign), (0, $1a2563e7d7856dd8$export$bf7d6802d2badd9)(subElStyle.y, calculatedLineHeight, subElStyle.textBaseline), contentWidth, calculatedLineHeight));
        }
    };
    ZRText.prototype._updateRichTexts = function() {
        var style = this.style;
        var text = $6d12d9a137e168c2$var$getStyleText(style);
        var contentBlock = (0, $ccb606359753c5d0$export$15ec9472ff2d721)(text, style);
        var contentWidth = contentBlock.width;
        var outerWidth = contentBlock.outerWidth;
        var outerHeight = contentBlock.outerHeight;
        var textPadding = style.padding;
        var baseX = style.x || 0;
        var baseY = style.y || 0;
        var defaultStyle = this._defaultStyle;
        var textAlign = style.align || defaultStyle.align;
        var verticalAlign = style.verticalAlign || defaultStyle.verticalAlign;
        var boxX = (0, $1a2563e7d7856dd8$export$eb5a525ef00ef9a4)(baseX, outerWidth, textAlign);
        var boxY = (0, $1a2563e7d7856dd8$export$bf7d6802d2badd9)(baseY, outerHeight, verticalAlign);
        var xLeft = boxX;
        var lineTop = boxY;
        if (textPadding) {
            xLeft += textPadding[3];
            lineTop += textPadding[0];
        }
        var xRight = xLeft + contentWidth;
        if ($6d12d9a137e168c2$var$needDrawBackground(style)) this._renderBackground(style, style, boxX, boxY, outerWidth, outerHeight);
        var bgColorDrawn = !!style.backgroundColor;
        for(var i = 0; i < contentBlock.lines.length; i++){
            var line = contentBlock.lines[i];
            var tokens = line.tokens;
            var tokenCount = tokens.length;
            var lineHeight = line.lineHeight;
            var remainedWidth = line.width;
            var leftIndex = 0;
            var lineXLeft = xLeft;
            var lineXRight = xRight;
            var rightIndex = tokenCount - 1;
            var token = void 0;
            while(leftIndex < tokenCount && (token = tokens[leftIndex], !token.align || token.align === "left")){
                this._placeToken(token, style, lineHeight, lineTop, lineXLeft, "left", bgColorDrawn);
                remainedWidth -= token.width;
                lineXLeft += token.width;
                leftIndex++;
            }
            while(rightIndex >= 0 && (token = tokens[rightIndex], token.align === "right")){
                this._placeToken(token, style, lineHeight, lineTop, lineXRight, "right", bgColorDrawn);
                remainedWidth -= token.width;
                lineXRight -= token.width;
                rightIndex--;
            }
            lineXLeft += (contentWidth - (lineXLeft - xLeft) - (xRight - lineXRight) - remainedWidth) / 2;
            while(leftIndex <= rightIndex){
                token = tokens[leftIndex];
                this._placeToken(token, style, lineHeight, lineTop, lineXLeft + token.width / 2, "center", bgColorDrawn);
                lineXLeft += token.width;
                leftIndex++;
            }
            lineTop += lineHeight;
        }
    };
    ZRText.prototype._placeToken = function(token, style, lineHeight, lineTop, x, textAlign, parentBgColorDrawn) {
        var tokenStyle = style.rich[token.styleName] || {};
        tokenStyle.text = token.text;
        var verticalAlign = token.verticalAlign;
        var y = lineTop + lineHeight / 2;
        if (verticalAlign === "top") y = lineTop + token.height / 2;
        else if (verticalAlign === "bottom") y = lineTop + lineHeight - token.height / 2;
        var needDrawBg = !token.isLineHolder && $6d12d9a137e168c2$var$needDrawBackground(tokenStyle);
        needDrawBg && this._renderBackground(tokenStyle, style, textAlign === "right" ? x - token.width : textAlign === "center" ? x - token.width / 2 : x, y - token.height / 2, token.width, token.height);
        var bgColorDrawn = !!tokenStyle.backgroundColor;
        var textPadding = token.textPadding;
        if (textPadding) {
            x = $6d12d9a137e168c2$var$getTextXForPadding(x, textAlign, textPadding);
            y -= token.height / 2 - textPadding[0] - token.innerHeight / 2;
        }
        var el = this._getOrCreateChild((0, $80ac97d0df21d0b5$export$2e2bcd8739ae039));
        var subElStyle = el.createStyle();
        el.useStyle(subElStyle);
        var defaultStyle = this._defaultStyle;
        var useDefaultFill = false;
        var defaultLineWidth = 0;
        var textFill = $6d12d9a137e168c2$var$getFill("fill" in tokenStyle ? tokenStyle.fill : "fill" in style ? style.fill : (useDefaultFill = true, defaultStyle.fill));
        var textStroke = $6d12d9a137e168c2$var$getStroke("stroke" in tokenStyle ? tokenStyle.stroke : "stroke" in style ? style.stroke : !bgColorDrawn && !parentBgColorDrawn && (!defaultStyle.autoStroke || useDefaultFill) ? (defaultLineWidth = $6d12d9a137e168c2$var$DEFAULT_STROKE_LINE_WIDTH, defaultStyle.stroke) : null);
        var hasShadow = tokenStyle.textShadowBlur > 0 || style.textShadowBlur > 0;
        subElStyle.text = token.text;
        subElStyle.x = x;
        subElStyle.y = y;
        if (hasShadow) {
            subElStyle.shadowBlur = tokenStyle.textShadowBlur || style.textShadowBlur || 0;
            subElStyle.shadowColor = tokenStyle.textShadowColor || style.textShadowColor || "transparent";
            subElStyle.shadowOffsetX = tokenStyle.textShadowOffsetX || style.textShadowOffsetX || 0;
            subElStyle.shadowOffsetY = tokenStyle.textShadowOffsetY || style.textShadowOffsetY || 0;
        }
        subElStyle.textAlign = textAlign;
        subElStyle.textBaseline = "middle";
        subElStyle.font = token.font || (0, $c7ef4e2442c05203$export$7d7a232b6d2cc80c);
        subElStyle.opacity = (0, $e44eb14c4271d0f9$export$2e94551289abb95b)(tokenStyle.opacity, style.opacity, 1);
        $6d12d9a137e168c2$var$setSeparateFont(subElStyle, tokenStyle);
        if (textStroke) {
            subElStyle.lineWidth = (0, $e44eb14c4271d0f9$export$2e94551289abb95b)(tokenStyle.lineWidth, style.lineWidth, defaultLineWidth);
            subElStyle.lineDash = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(tokenStyle.lineDash, style.lineDash);
            subElStyle.lineDashOffset = style.lineDashOffset || 0;
            subElStyle.stroke = textStroke;
        }
        if (textFill) subElStyle.fill = textFill;
        var textWidth = token.contentWidth;
        var textHeight = token.contentHeight;
        el.setBoundingRect(new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)((0, $1a2563e7d7856dd8$export$eb5a525ef00ef9a4)(subElStyle.x, textWidth, subElStyle.textAlign), (0, $1a2563e7d7856dd8$export$bf7d6802d2badd9)(subElStyle.y, textHeight, subElStyle.textBaseline), textWidth, textHeight));
    };
    ZRText.prototype._renderBackground = function(style, topStyle, x, y, width, height) {
        var textBackgroundColor = style.backgroundColor;
        var textBorderWidth = style.borderWidth;
        var textBorderColor = style.borderColor;
        var isImageBg = textBackgroundColor && textBackgroundColor.image;
        var isPlainOrGradientBg = textBackgroundColor && !isImageBg;
        var textBorderRadius = style.borderRadius;
        var self = this;
        var rectEl;
        var imgEl;
        if (isPlainOrGradientBg || style.lineHeight || textBorderWidth && textBorderColor) {
            rectEl = this._getOrCreateChild((0, $538026eba361a92a$export$2e2bcd8739ae039));
            rectEl.useStyle(rectEl.createStyle());
            rectEl.style.fill = null;
            var rectShape = rectEl.shape;
            rectShape.x = x;
            rectShape.y = y;
            rectShape.width = width;
            rectShape.height = height;
            rectShape.r = textBorderRadius;
            rectEl.dirtyShape();
        }
        if (isPlainOrGradientBg) {
            var rectStyle = rectEl.style;
            rectStyle.fill = textBackgroundColor || null;
            rectStyle.fillOpacity = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(style.fillOpacity, 1);
        } else if (isImageBg) {
            imgEl = this._getOrCreateChild((0, $7fb187ddd76ee1dc$export$2e2bcd8739ae039));
            imgEl.onload = function() {
                self.dirtyStyle();
            };
            var imgStyle = imgEl.style;
            imgStyle.image = textBackgroundColor.image;
            imgStyle.x = x;
            imgStyle.y = y;
            imgStyle.width = width;
            imgStyle.height = height;
        }
        if (textBorderWidth && textBorderColor) {
            var rectStyle = rectEl.style;
            rectStyle.lineWidth = textBorderWidth;
            rectStyle.stroke = textBorderColor;
            rectStyle.strokeOpacity = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(style.strokeOpacity, 1);
            rectStyle.lineDash = style.borderDash;
            rectStyle.lineDashOffset = style.borderDashOffset || 0;
            rectEl.strokeContainThreshold = 0;
            if (rectEl.hasFill() && rectEl.hasStroke()) {
                rectStyle.strokeFirst = true;
                rectStyle.lineWidth *= 2;
            }
        }
        var commonStyle = (rectEl || imgEl).style;
        commonStyle.shadowBlur = style.shadowBlur || 0;
        commonStyle.shadowColor = style.shadowColor || "transparent";
        commonStyle.shadowOffsetX = style.shadowOffsetX || 0;
        commonStyle.shadowOffsetY = style.shadowOffsetY || 0;
        commonStyle.opacity = (0, $e44eb14c4271d0f9$export$2e94551289abb95b)(style.opacity, topStyle.opacity, 1);
    };
    ZRText.makeFont = function(style) {
        var font = "";
        if ($6d12d9a137e168c2$export$4685c95d5118e76a(style)) font = [
            style.fontStyle,
            style.fontWeight,
            $6d12d9a137e168c2$export$51b066d9cfc2578e(style.fontSize),
            style.fontFamily || "sans-serif"
        ].join(" ");
        return font && (0, $e44eb14c4271d0f9$export$87c2784dc9fc4ab)(font) || style.textFont || style.font;
    };
    return ZRText;
}((0, $42aae97fd255cbd2$export$2e2bcd8739ae039));
var $6d12d9a137e168c2$var$VALID_TEXT_ALIGN = {
    left: true,
    right: 1,
    center: 1
};
var $6d12d9a137e168c2$var$VALID_TEXT_VERTICAL_ALIGN = {
    top: 1,
    bottom: 1,
    middle: 1
};
var $6d12d9a137e168c2$var$FONT_PARTS = [
    "fontStyle",
    "fontWeight",
    "fontSize",
    "fontFamily"
];
function $6d12d9a137e168c2$export$51b066d9cfc2578e(fontSize) {
    if (typeof fontSize === "string" && (fontSize.indexOf("px") !== -1 || fontSize.indexOf("rem") !== -1 || fontSize.indexOf("em") !== -1)) return fontSize;
    else if (!isNaN(+fontSize)) return fontSize + "px";
    else return (0, $c7ef4e2442c05203$export$b1461457ea2c1179) + "px";
}
function $6d12d9a137e168c2$var$setSeparateFont(targetStyle, sourceStyle) {
    for(var i = 0; i < $6d12d9a137e168c2$var$FONT_PARTS.length; i++){
        var fontProp = $6d12d9a137e168c2$var$FONT_PARTS[i];
        var val = sourceStyle[fontProp];
        if (val != null) targetStyle[fontProp] = val;
    }
}
function $6d12d9a137e168c2$export$4685c95d5118e76a(style) {
    return style.fontSize != null || style.fontFamily || style.fontWeight;
}
function $6d12d9a137e168c2$export$176336068cc5371f(style) {
    $6d12d9a137e168c2$var$normalizeStyle(style);
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(style.rich, $6d12d9a137e168c2$var$normalizeStyle);
    return style;
}
function $6d12d9a137e168c2$var$normalizeStyle(style) {
    if (style) {
        style.font = $6d12d9a137e168c2$var$ZRText.makeFont(style);
        var textAlign = style.align;
        textAlign === "middle" && (textAlign = "center");
        style.align = textAlign == null || $6d12d9a137e168c2$var$VALID_TEXT_ALIGN[textAlign] ? textAlign : "left";
        var verticalAlign = style.verticalAlign;
        verticalAlign === "center" && (verticalAlign = "middle");
        style.verticalAlign = verticalAlign == null || $6d12d9a137e168c2$var$VALID_TEXT_VERTICAL_ALIGN[verticalAlign] ? verticalAlign : "top";
        var textPadding = style.padding;
        if (textPadding) style.padding = (0, $e44eb14c4271d0f9$export$f3a38102c49f4268)(style.padding);
    }
}
function $6d12d9a137e168c2$var$getStroke(stroke, lineWidth) {
    return stroke == null || lineWidth <= 0 || stroke === "transparent" || stroke === "none" ? null : stroke.image || stroke.colorStops ? "#000" : stroke;
}
function $6d12d9a137e168c2$var$getFill(fill) {
    return fill == null || fill === "none" ? null : fill.image || fill.colorStops ? "#000" : fill;
}
function $6d12d9a137e168c2$var$getTextXForPadding(x, textAlign, textPadding) {
    return textAlign === "right" ? x - textPadding[1] : textAlign === "center" ? x + textPadding[3] / 2 - textPadding[1] / 2 : x + textPadding[3];
}
function $6d12d9a137e168c2$var$getStyleText(style) {
    var text = style.text;
    text != null && (text += "");
    return text;
}
function $6d12d9a137e168c2$var$needDrawBackground(style) {
    return !!(style.backgroundColor || style.lineHeight || style.borderWidth && style.borderColor);
}
var $6d12d9a137e168c2$export$2e2bcd8739ae039 = $6d12d9a137e168c2$var$ZRText;



/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
var $85ade22ad4768945$export$b1c39b2bacd1ddc2 = (0, $8917c02fd8256c67$export$64df9f8d92ae083f)();
var $85ade22ad4768945$export$30d6736ebb8e18d5 = function(seriesIndex, dataType, dataIdx, el) {
    if (el) {
        var ecData = $85ade22ad4768945$export$b1c39b2bacd1ddc2(el);
        // Add data index and series index for indexing the data by element
        // Useful in tooltip
        ecData.dataIndex = dataIdx;
        ecData.dataType = dataType;
        ecData.seriesIndex = seriesIndex;
        ecData.ssrType = "chart";
        // TODO: not store dataIndex on children.
        if (el.type === "group") el.traverse(function(child) {
            var childECData = $85ade22ad4768945$export$b1c39b2bacd1ddc2(child);
            childECData.seriesIndex = seriesIndex;
            childECData.dataIndex = dataIdx;
            childECData.dataType = dataType;
            childECData.ssrType = "chart";
        });
    }
};






// Reserve 0 as default.
var $e3c0a36328c28ac4$var$_highlightNextDigit = 1;
var $e3c0a36328c28ac4$var$_highlightKeyMap = {};
var $e3c0a36328c28ac4$var$getSavedStates = (0, $8917c02fd8256c67$export$64df9f8d92ae083f)();
var $e3c0a36328c28ac4$var$getComponentStates = (0, $8917c02fd8256c67$export$64df9f8d92ae083f)();
var $e3c0a36328c28ac4$export$5542daa30722333e = 0;
var $e3c0a36328c28ac4$export$1307d6a87d56baa = 1;
var $e3c0a36328c28ac4$export$f0f2bee145debb31 = 2;
var $e3c0a36328c28ac4$export$151308dceb52d5b = [
    "emphasis",
    "blur",
    "select"
];
var $e3c0a36328c28ac4$export$57ee5306b85ad7d5 = [
    "normal",
    "emphasis",
    "blur",
    "select"
];
var $e3c0a36328c28ac4$export$1cb9fc6ed5b9836c = 10;
var $e3c0a36328c28ac4$export$3a2f97d39514bbc = 9;
var $e3c0a36328c28ac4$export$df035d873a9de64f = "highlight";
var $e3c0a36328c28ac4$export$f8a2f7807cc185ea = "downplay";
var $e3c0a36328c28ac4$export$89616263e7d38fe9 = "select";
var $e3c0a36328c28ac4$export$7636ad95c0f68a79 = "unselect";
var $e3c0a36328c28ac4$export$1e90ed8a25542516 = "toggleSelect";
function $e3c0a36328c28ac4$var$hasFillOrStroke(fillOrStroke) {
    return fillOrStroke != null && fillOrStroke !== "none";
}
function $e3c0a36328c28ac4$var$doChangeHoverState(el, stateName, hoverStateEnum) {
    if (el.onHoverStateChange && (el.hoverState || 0) !== hoverStateEnum) el.onHoverStateChange(stateName);
    el.hoverState = hoverStateEnum;
}
function $e3c0a36328c28ac4$var$singleEnterEmphasis(el) {
    // Only mark the flag.
    // States will be applied in the echarts.ts in next frame.
    $e3c0a36328c28ac4$var$doChangeHoverState(el, "emphasis", $e3c0a36328c28ac4$export$f0f2bee145debb31);
}
function $e3c0a36328c28ac4$var$singleLeaveEmphasis(el) {
    // Only mark the flag.
    // States will be applied in the echarts.ts in next frame.
    if (el.hoverState === $e3c0a36328c28ac4$export$f0f2bee145debb31) $e3c0a36328c28ac4$var$doChangeHoverState(el, "normal", $e3c0a36328c28ac4$export$5542daa30722333e);
}
function $e3c0a36328c28ac4$var$singleEnterBlur(el) {
    $e3c0a36328c28ac4$var$doChangeHoverState(el, "blur", $e3c0a36328c28ac4$export$1307d6a87d56baa);
}
function $e3c0a36328c28ac4$var$singleLeaveBlur(el) {
    if (el.hoverState === $e3c0a36328c28ac4$export$1307d6a87d56baa) $e3c0a36328c28ac4$var$doChangeHoverState(el, "normal", $e3c0a36328c28ac4$export$5542daa30722333e);
}
function $e3c0a36328c28ac4$var$singleEnterSelect(el) {
    el.selected = true;
}
function $e3c0a36328c28ac4$var$singleLeaveSelect(el) {
    el.selected = false;
}
function $e3c0a36328c28ac4$var$updateElementState(el, updater, commonParam) {
    updater(el, commonParam);
}
function $e3c0a36328c28ac4$var$traverseUpdateState(el, updater, commonParam) {
    $e3c0a36328c28ac4$var$updateElementState(el, updater, commonParam);
    el.isGroup && el.traverse(function(child) {
        $e3c0a36328c28ac4$var$updateElementState(child, updater, commonParam);
    });
}
function $e3c0a36328c28ac4$export$868ba38adffa9e39(el, stateName) {
    switch(stateName){
        case "emphasis":
            el.hoverState = $e3c0a36328c28ac4$export$f0f2bee145debb31;
            break;
        case "normal":
            el.hoverState = $e3c0a36328c28ac4$export$5542daa30722333e;
            break;
        case "blur":
            el.hoverState = $e3c0a36328c28ac4$export$1307d6a87d56baa;
            break;
        case "select":
            el.selected = true;
    }
}
function $e3c0a36328c28ac4$export$35330f949342a669(el) {
    if (el.isGroup) el.traverse(function(child) {
        child.clearStates();
    });
    else el.clearStates();
}
function $e3c0a36328c28ac4$var$getFromStateStyle(el, props, toStateName, defaultValue) {
    var style = el.style;
    var fromState = {};
    for(var i = 0; i < props.length; i++){
        var propName = props[i];
        var val = style[propName];
        fromState[propName] = val == null ? defaultValue && defaultValue[propName] : val;
    }
    for(var i = 0; i < el.animators.length; i++){
        var animator = el.animators[i];
        if (animator.__fromStateTransition && animator.__fromStateTransition.indexOf(toStateName) < 0 && animator.targetName === "style") animator.saveTo(fromState, props);
    }
    return fromState;
}
function $e3c0a36328c28ac4$var$createEmphasisDefaultState(el, stateName, targetStates, state) {
    var hasSelect = targetStates && (0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)(targetStates, "select") >= 0;
    var cloned = false;
    if (el instanceof (0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039)) {
        var store = $e3c0a36328c28ac4$var$getSavedStates(el);
        var fromFill = hasSelect ? store.selectFill || store.normalFill : store.normalFill;
        var fromStroke = hasSelect ? store.selectStroke || store.normalStroke : store.normalStroke;
        if ($e3c0a36328c28ac4$var$hasFillOrStroke(fromFill) || $e3c0a36328c28ac4$var$hasFillOrStroke(fromStroke)) {
            state = state || {};
            var emphasisStyle = state.style || {};
            // inherit case
            if (emphasisStyle.fill === "inherit") {
                cloned = true;
                state = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, state);
                emphasisStyle = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, emphasisStyle);
                emphasisStyle.fill = fromFill;
            } else if (!$e3c0a36328c28ac4$var$hasFillOrStroke(emphasisStyle.fill) && $e3c0a36328c28ac4$var$hasFillOrStroke(fromFill)) {
                cloned = true;
                // Not modify the original value.
                state = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, state);
                emphasisStyle = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, emphasisStyle);
                // Already being applied 'emphasis'. DON'T lift color multiple times.
                emphasisStyle.fill = (0, $5373993605fe25d6$export$2b47e247dfb87a73)(fromFill);
            } else if (!$e3c0a36328c28ac4$var$hasFillOrStroke(emphasisStyle.stroke) && $e3c0a36328c28ac4$var$hasFillOrStroke(fromStroke)) {
                if (!cloned) {
                    state = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, state);
                    emphasisStyle = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, emphasisStyle);
                }
                emphasisStyle.stroke = (0, $5373993605fe25d6$export$2b47e247dfb87a73)(fromStroke);
            }
            state.style = emphasisStyle;
        }
    }
    if (state) // TODO Share with textContent?
    {
        if (state.z2 == null) {
            if (!cloned) state = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, state);
            var z2EmphasisLift = el.z2EmphasisLift;
            state.z2 = el.z2 + (z2EmphasisLift != null ? z2EmphasisLift : $e3c0a36328c28ac4$export$1cb9fc6ed5b9836c);
        }
    }
    return state;
}
function $e3c0a36328c28ac4$var$createSelectDefaultState(el, stateName, state) {
    // const hasSelect = indexOf(el.currentStates, stateName) >= 0;
    if (state) // TODO Share with textContent?
    {
        if (state.z2 == null) {
            state = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, state);
            var z2SelectLift = el.z2SelectLift;
            state.z2 = el.z2 + (z2SelectLift != null ? z2SelectLift : $e3c0a36328c28ac4$export$3a2f97d39514bbc);
        }
    }
    return state;
}
function $e3c0a36328c28ac4$var$createBlurDefaultState(el, stateName, state) {
    var hasBlur = (0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)(el.currentStates, stateName) >= 0;
    var currentOpacity = el.style.opacity;
    var fromState = !hasBlur ? $e3c0a36328c28ac4$var$getFromStateStyle(el, [
        "opacity"
    ], stateName, {
        opacity: 1
    }) : null;
    state = state || {};
    var blurStyle = state.style || {};
    if (blurStyle.opacity == null) {
        // clone state
        state = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, state);
        blurStyle = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({
            // Already being applied 'emphasis'. DON'T mul opacity multiple times.
            opacity: hasBlur ? currentOpacity : fromState.opacity * 0.1
        }, blurStyle);
        state.style = blurStyle;
    }
    return state;
}
function $e3c0a36328c28ac4$var$elementStateProxy(stateName, targetStates) {
    var state = this.states[stateName];
    if (this.style) {
        if (stateName === "emphasis") return $e3c0a36328c28ac4$var$createEmphasisDefaultState(this, stateName, targetStates, state);
        else if (stateName === "blur") return $e3c0a36328c28ac4$var$createBlurDefaultState(this, stateName, state);
        else if (stateName === "select") return $e3c0a36328c28ac4$var$createSelectDefaultState(this, stateName, state);
    }
    return state;
}
function $e3c0a36328c28ac4$export$20f39bbe322fb9ab(el) {
    el.stateProxy = $e3c0a36328c28ac4$var$elementStateProxy;
    var textContent = el.getTextContent();
    var textGuide = el.getTextGuideLine();
    if (textContent) textContent.stateProxy = $e3c0a36328c28ac4$var$elementStateProxy;
    if (textGuide) textGuide.stateProxy = $e3c0a36328c28ac4$var$elementStateProxy;
}
function $e3c0a36328c28ac4$export$d899507e2598e4ae(el, e) {
    !$e3c0a36328c28ac4$var$shouldSilent(el, e) && !el.__highByOuter && $e3c0a36328c28ac4$var$traverseUpdateState(el, $e3c0a36328c28ac4$var$singleEnterEmphasis);
}
function $e3c0a36328c28ac4$export$784cba1f7fe58cca(el, e) {
    !$e3c0a36328c28ac4$var$shouldSilent(el, e) && !el.__highByOuter && $e3c0a36328c28ac4$var$traverseUpdateState(el, $e3c0a36328c28ac4$var$singleLeaveEmphasis);
}
function $e3c0a36328c28ac4$export$b2d02638cc34c042(el, highlightDigit) {
    el.__highByOuter |= 1 << (highlightDigit || 0);
    $e3c0a36328c28ac4$var$traverseUpdateState(el, $e3c0a36328c28ac4$var$singleEnterEmphasis);
}
function $e3c0a36328c28ac4$export$11be6f716239ac55(el, highlightDigit) {
    !(el.__highByOuter &= ~(1 << (highlightDigit || 0))) && $e3c0a36328c28ac4$var$traverseUpdateState(el, $e3c0a36328c28ac4$var$singleLeaveEmphasis);
}
function $e3c0a36328c28ac4$export$207f9cb3e1099375(el) {
    $e3c0a36328c28ac4$var$traverseUpdateState(el, $e3c0a36328c28ac4$var$singleEnterBlur);
}
function $e3c0a36328c28ac4$export$fd4a9ec75456d3c1(el) {
    $e3c0a36328c28ac4$var$traverseUpdateState(el, $e3c0a36328c28ac4$var$singleLeaveBlur);
}
function $e3c0a36328c28ac4$export$252d028dda8ef765(el) {
    $e3c0a36328c28ac4$var$traverseUpdateState(el, $e3c0a36328c28ac4$var$singleEnterSelect);
}
function $e3c0a36328c28ac4$export$ea9a904bd6e32bd3(el) {
    $e3c0a36328c28ac4$var$traverseUpdateState(el, $e3c0a36328c28ac4$var$singleLeaveSelect);
}
function $e3c0a36328c28ac4$var$shouldSilent(el, e) {
    return el.__highDownSilentOnTouch && e.zrByTouch;
}
function $e3c0a36328c28ac4$export$b2a593c7b5243584(api) {
    var model = api.getModel();
    var leaveBlurredSeries = [];
    var allComponentViews = [];
    model.eachComponent(function(componentType, componentModel) {
        var componentStates = $e3c0a36328c28ac4$var$getComponentStates(componentModel);
        var isSeries = componentType === "series";
        var view = isSeries ? api.getViewOfSeriesModel(componentModel) : api.getViewOfComponentModel(componentModel);
        !isSeries && allComponentViews.push(view);
        if (componentStates.isBlured) {
            // Leave blur anyway
            view.group.traverse(function(child) {
                $e3c0a36328c28ac4$var$singleLeaveBlur(child);
            });
            isSeries && leaveBlurredSeries.push(componentModel);
        }
        componentStates.isBlured = false;
    });
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(allComponentViews, function(view) {
        if (view && view.toggleBlurSeries) view.toggleBlurSeries(leaveBlurredSeries, false, model);
    });
}
function $e3c0a36328c28ac4$export$7d399e067d6552e3(targetSeriesIndex, focus, blurScope, api) {
    var ecModel = api.getModel();
    blurScope = blurScope || "coordinateSystem";
    function leaveBlurOfIndices(data, dataIndices) {
        for(var i = 0; i < dataIndices.length; i++){
            var itemEl = data.getItemGraphicEl(dataIndices[i]);
            itemEl && $e3c0a36328c28ac4$export$fd4a9ec75456d3c1(itemEl);
        }
    }
    if (targetSeriesIndex == null) return;
    if (!focus || focus === "none") return;
    var targetSeriesModel = ecModel.getSeriesByIndex(targetSeriesIndex);
    var targetCoordSys = targetSeriesModel.coordinateSystem;
    if (targetCoordSys && targetCoordSys.master) targetCoordSys = targetCoordSys.master;
    var blurredSeries = [];
    ecModel.eachSeries(function(seriesModel) {
        var sameSeries = targetSeriesModel === seriesModel;
        var coordSys = seriesModel.coordinateSystem;
        if (coordSys && coordSys.master) coordSys = coordSys.master;
        var sameCoordSys = coordSys && targetCoordSys ? coordSys === targetCoordSys : sameSeries; // If there is no coordinate system. use sameSeries instead.
        if (!// Not blur other series if blurScope series
        (blurScope === "series" && !sameSeries || blurScope === "coordinateSystem" && !sameCoordSys || focus === "series" && sameSeries)) {
            var view = api.getViewOfSeriesModel(seriesModel);
            view.group.traverse(function(child) {
                // For the elements that have been triggered by other components,
                // and are still required to be highlighted,
                // because the current is directly forced to blur the element,
                // it will cause the focus self to be unable to highlight, so skip the blur of this element.
                if (child.__highByOuter && sameSeries && focus === "self") return;
                $e3c0a36328c28ac4$var$singleEnterBlur(child);
            });
            if ((0, $e44eb14c4271d0f9$export$1e2f57719e155213)(focus)) leaveBlurOfIndices(seriesModel.getData(), focus);
            else if ((0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(focus)) {
                var dataTypes = (0, $e44eb14c4271d0f9$export$ed97f33186d4b816)(focus);
                for(var d = 0; d < dataTypes.length; d++)leaveBlurOfIndices(seriesModel.getData(dataTypes[d]), focus[dataTypes[d]]);
            }
            blurredSeries.push(seriesModel);
            $e3c0a36328c28ac4$var$getComponentStates(seriesModel).isBlured = true;
        }
    });
    ecModel.eachComponent(function(componentType, componentModel) {
        if (componentType === "series") return;
        var view = api.getViewOfComponentModel(componentModel);
        if (view && view.toggleBlurSeries) view.toggleBlurSeries(blurredSeries, true, ecModel);
    });
}
function $e3c0a36328c28ac4$export$569da03256c8a55f(componentMainType, componentIndex, api) {
    if (componentMainType == null || componentIndex == null) return;
    var componentModel = api.getModel().getComponent(componentMainType, componentIndex);
    if (!componentModel) return;
    $e3c0a36328c28ac4$var$getComponentStates(componentModel).isBlured = true;
    var view = api.getViewOfComponentModel(componentModel);
    if (!view || !view.focusBlurEnabled) return;
    view.group.traverse(function(child) {
        $e3c0a36328c28ac4$var$singleEnterBlur(child);
    });
}
function $e3c0a36328c28ac4$export$64f1fd4daefef21b(seriesModel, payload, api) {
    var seriesIndex = seriesModel.seriesIndex;
    var data = seriesModel.getData(payload.dataType);
    if (!data) {
        (0, $4796c55e8b767685$export$a3bc9b8ed74fc)("Unknown dataType " + payload.dataType);
        return;
    }
    var dataIndex = (0, $8917c02fd8256c67$export$42b26cae8b8d10)(data, payload);
    // Pick the first one if there is multiple/none exists.
    dataIndex = ((0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(dataIndex) ? dataIndex[0] : dataIndex) || 0;
    var el = data.getItemGraphicEl(dataIndex);
    if (!el) {
        var count = data.count();
        var current = 0;
        // If data on dataIndex is NaN.
        while(!el && current < count)el = data.getItemGraphicEl(current++);
    }
    if (el) {
        var ecData = (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(el);
        $e3c0a36328c28ac4$export$7d399e067d6552e3(seriesIndex, ecData.focus, ecData.blurScope, api);
    } else {
        // If there is no element put on the data. Try getting it from raw option
        // TODO Should put it on seriesModel?
        var focus_1 = seriesModel.get([
            "emphasis",
            "focus"
        ]);
        var blurScope = seriesModel.get([
            "emphasis",
            "blurScope"
        ]);
        if (focus_1 != null) $e3c0a36328c28ac4$export$7d399e067d6552e3(seriesIndex, focus_1, blurScope, api);
    }
}
function $e3c0a36328c28ac4$export$f31a644ccca0ef23(componentMainType, componentIndex, name, api) {
    var ret = {
        focusSelf: false,
        dispatchers: null
    };
    if (componentMainType == null || componentMainType === "series" || componentIndex == null || name == null) return ret;
    var componentModel = api.getModel().getComponent(componentMainType, componentIndex);
    if (!componentModel) return ret;
    var view = api.getViewOfComponentModel(componentModel);
    if (!view || !view.findHighDownDispatchers) return ret;
    var dispatchers = view.findHighDownDispatchers(name);
    // At presnet, the component (like Geo) only blur inside itself.
    // So we do not use `blurScope` in component.
    var focusSelf;
    for(var i = 0; i < dispatchers.length; i++){
        if (!$e3c0a36328c28ac4$export$77d1445f699c58b5(dispatchers[i])) (0, $4796c55e8b767685$export$a3bc9b8ed74fc)("param should be highDownDispatcher");
        if ((0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(dispatchers[i]).focus === "self") {
            focusSelf = true;
            break;
        }
    }
    return {
        focusSelf: focusSelf,
        dispatchers: dispatchers
    };
}
function $e3c0a36328c28ac4$export$416765b6198234ff(dispatcher, e, api) {
    if (!$e3c0a36328c28ac4$export$77d1445f699c58b5(dispatcher)) (0, $4796c55e8b767685$export$a3bc9b8ed74fc)("param should be highDownDispatcher");
    var ecData = (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(dispatcher);
    var _a = $e3c0a36328c28ac4$export$f31a644ccca0ef23(ecData.componentMainType, ecData.componentIndex, ecData.componentHighDownName, api), dispatchers = _a.dispatchers, focusSelf = _a.focusSelf;
    // If `findHighDownDispatchers` is supported on the component,
    // highlight/downplay elements with the same name.
    if (dispatchers) {
        if (focusSelf) $e3c0a36328c28ac4$export$569da03256c8a55f(ecData.componentMainType, ecData.componentIndex, api);
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(dispatchers, function(dispatcher) {
            return $e3c0a36328c28ac4$export$d899507e2598e4ae(dispatcher, e);
        });
    } else {
        // Try blur all in the related series. Then emphasis the hoverred.
        // TODO. progressive mode.
        $e3c0a36328c28ac4$export$7d399e067d6552e3(ecData.seriesIndex, ecData.focus, ecData.blurScope, api);
        if (ecData.focus === "self") $e3c0a36328c28ac4$export$569da03256c8a55f(ecData.componentMainType, ecData.componentIndex, api);
        // Other than series, component that not support `findHighDownDispatcher` will
        // also use it. But in this case, highlight/downplay are only supported in
        // mouse hover but not in dispatchAction.
        $e3c0a36328c28ac4$export$d899507e2598e4ae(dispatcher, e);
    }
}
function $e3c0a36328c28ac4$export$bb1c7b62436282a(dispatcher, e, api) {
    if (!$e3c0a36328c28ac4$export$77d1445f699c58b5(dispatcher)) (0, $4796c55e8b767685$export$a3bc9b8ed74fc)("param should be highDownDispatcher");
    $e3c0a36328c28ac4$export$b2a593c7b5243584(api);
    var ecData = (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(dispatcher);
    var dispatchers = $e3c0a36328c28ac4$export$f31a644ccca0ef23(ecData.componentMainType, ecData.componentIndex, ecData.componentHighDownName, api).dispatchers;
    if (dispatchers) (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(dispatchers, function(dispatcher) {
        return $e3c0a36328c28ac4$export$784cba1f7fe58cca(dispatcher, e);
    });
    else $e3c0a36328c28ac4$export$784cba1f7fe58cca(dispatcher, e);
}
function $e3c0a36328c28ac4$export$1c7d489f62372d73(seriesModel, payload, api) {
    if (!$e3c0a36328c28ac4$export$72aea10e60e45351(payload)) return;
    var dataType = payload.dataType;
    var data = seriesModel.getData(dataType);
    var dataIndex = (0, $8917c02fd8256c67$export$42b26cae8b8d10)(data, payload);
    if (!(0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(dataIndex)) dataIndex = [
        dataIndex
    ];
    seriesModel[payload.type === $e3c0a36328c28ac4$export$1e90ed8a25542516 ? "toggleSelect" : payload.type === $e3c0a36328c28ac4$export$89616263e7d38fe9 ? "select" : "unselect"](dataIndex, dataType);
}
function $e3c0a36328c28ac4$export$e4ea08ef52e0a73(seriesModel) {
    var allData = seriesModel.getAllData();
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(allData, function(_a) {
        var data = _a.data, type = _a.type;
        data.eachItemGraphicEl(function(el, idx) {
            seriesModel.isSelected(idx, type) ? $e3c0a36328c28ac4$export$252d028dda8ef765(el) : $e3c0a36328c28ac4$export$ea9a904bd6e32bd3(el);
        });
    });
}
function $e3c0a36328c28ac4$export$c529643b619af6b3(ecModel) {
    var ret = [];
    ecModel.eachSeries(function(seriesModel) {
        var allData = seriesModel.getAllData();
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(allData, function(_a) {
            var data = _a.data, type = _a.type;
            var dataIndices = seriesModel.getSelectedDataIndices();
            if (dataIndices.length > 0) {
                var item = {
                    dataIndex: dataIndices,
                    seriesIndex: seriesModel.seriesIndex
                };
                if (type != null) item.dataType = type;
                ret.push(item);
            }
        });
    });
    return ret;
}
function $e3c0a36328c28ac4$export$5f393df0b5aee2e7(el, focus, blurScope) {
    $e3c0a36328c28ac4$export$9ba15aea1e048d48(el, true);
    $e3c0a36328c28ac4$var$traverseUpdateState(el, $e3c0a36328c28ac4$export$20f39bbe322fb9ab);
    $e3c0a36328c28ac4$export$24972466b2b62ac2(el, focus, blurScope);
}
function $e3c0a36328c28ac4$export$912cae7b47c8e437(el) {
    $e3c0a36328c28ac4$export$9ba15aea1e048d48(el, false);
}
function $e3c0a36328c28ac4$export$e51187539ff11209(el, focus, blurScope, isDisabled) {
    isDisabled ? $e3c0a36328c28ac4$export$912cae7b47c8e437(el) : $e3c0a36328c28ac4$export$5f393df0b5aee2e7(el, focus, blurScope);
}
function $e3c0a36328c28ac4$export$24972466b2b62ac2(el, focus, blurScope) {
    var ecData = (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(el);
    if (focus != null) {
        // TODO dataIndex may be set after this function. This check is not useful.
        // if (ecData.dataIndex == null) {
        //     if (__DEV__) {
        //         console.warn('focus can only been set on element with dataIndex');
        //     }
        // }
        // else {
        ecData.focus = focus;
        ecData.blurScope = blurScope;
    // }
    } else if (ecData.focus) ecData.focus = null;
}
var $e3c0a36328c28ac4$var$OTHER_STATES = [
    "emphasis",
    "blur",
    "select"
];
var $e3c0a36328c28ac4$var$defaultStyleGetterMap = {
    itemStyle: "getItemStyle",
    lineStyle: "getLineStyle",
    areaStyle: "getAreaStyle"
};
function $e3c0a36328c28ac4$export$48b68047d330bbc9(el, itemModel, styleType, // default itemStyle
getter) {
    styleType = styleType || "itemStyle";
    for(var i = 0; i < $e3c0a36328c28ac4$var$OTHER_STATES.length; i++){
        var stateName = $e3c0a36328c28ac4$var$OTHER_STATES[i];
        var model = itemModel.getModel([
            stateName,
            styleType
        ]);
        var state = el.ensureState(stateName);
        // Let it throw error if getterType is not found.
        state.style = getter ? getter(model) : model[$e3c0a36328c28ac4$var$defaultStyleGetterMap[styleType]]();
    }
}
function $e3c0a36328c28ac4$export$9ba15aea1e048d48(el, asDispatcher) {
    var disable = asDispatcher === false;
    var extendedEl = el;
    // Make `highDownSilentOnTouch` and `onStateChange` only work after
    // `setAsHighDownDispatcher` called. Avoid it is modified by user unexpectedly.
    if (el.highDownSilentOnTouch) extendedEl.__highDownSilentOnTouch = el.highDownSilentOnTouch;
    // Simple optimize, since this method might be
    // called for each elements of a group in some cases.
    if (!disable || extendedEl.__highDownDispatcher) {
        // Emphasis, normal can be triggered manually by API or other components like hover link.
        // el[method]('emphasis', onElementEmphasisEvent)[method]('normal', onElementNormalEvent);
        // Also keep previous record.
        extendedEl.__highByOuter = extendedEl.__highByOuter || 0;
        extendedEl.__highDownDispatcher = !disable;
    }
}
function $e3c0a36328c28ac4$export$77d1445f699c58b5(el) {
    return !!(el && el.__highDownDispatcher);
}
function $e3c0a36328c28ac4$export$4da05a9639f01954(el, componentModel, componentHighDownName) {
    var ecData = (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(el);
    ecData.componentMainType = componentModel.mainType;
    ecData.componentIndex = componentModel.componentIndex;
    ecData.componentHighDownName = componentHighDownName;
}
function $e3c0a36328c28ac4$export$824af40eb714530d(highlightKey) {
    var highlightDigit = $e3c0a36328c28ac4$var$_highlightKeyMap[highlightKey];
    if (highlightDigit == null && $e3c0a36328c28ac4$var$_highlightNextDigit <= 32) highlightDigit = $e3c0a36328c28ac4$var$_highlightKeyMap[highlightKey] = $e3c0a36328c28ac4$var$_highlightNextDigit++;
    return highlightDigit;
}
function $e3c0a36328c28ac4$export$72aea10e60e45351(payload) {
    var payloadType = payload.type;
    return payloadType === $e3c0a36328c28ac4$export$89616263e7d38fe9 || payloadType === $e3c0a36328c28ac4$export$7636ad95c0f68a79 || payloadType === $e3c0a36328c28ac4$export$1e90ed8a25542516;
}
function $e3c0a36328c28ac4$export$aebe71265c1b77bf(payload) {
    var payloadType = payload.type;
    return payloadType === $e3c0a36328c28ac4$export$df035d873a9de64f || payloadType === $e3c0a36328c28ac4$export$f8a2f7807cc185ea;
}
function $e3c0a36328c28ac4$export$9fe78019e6f395b6(el) {
    var store = $e3c0a36328c28ac4$var$getSavedStates(el);
    store.normalFill = el.style.fill;
    store.normalStroke = el.style.stroke;
    var selectState = el.states.select || {};
    store.selectFill = selectState.style && selectState.style.fill || null;
    store.selectStroke = selectState.style && selectState.style.stroke || null;
}




var $6aec2e68b45f8796$exports = {};

$parcel$export($6aec2e68b45f8796$exports, "extendShape", () => $6aec2e68b45f8796$export$d0d5398c9d612037);
$parcel$export($6aec2e68b45f8796$exports, "extendPath", () => $6aec2e68b45f8796$export$53b54a3137026af0);
$parcel$export($6aec2e68b45f8796$exports, "registerShape", () => $6aec2e68b45f8796$export$2b95b62e3aaf6fdd);
$parcel$export($6aec2e68b45f8796$exports, "getShapeClass", () => $6aec2e68b45f8796$export$51df4b5565a58189);
$parcel$export($6aec2e68b45f8796$exports, "makePath", () => $6aec2e68b45f8796$export$aa9bab72412f5613);
$parcel$export($6aec2e68b45f8796$exports, "resizePath", () => $6aec2e68b45f8796$export$566dbf1c62b04fc7);
$parcel$export($6aec2e68b45f8796$exports, "makeImage", () => $6aec2e68b45f8796$export$7a2bdede98851ac5);
$parcel$export($6aec2e68b45f8796$exports, "mergePath", () => $6aec2e68b45f8796$export$7b1dd269fbc4e903);
$parcel$export($6aec2e68b45f8796$exports, "subPixelOptimizeLine", () => $6aec2e68b45f8796$export$8b4b620d7f4aad1b);
$parcel$export($6aec2e68b45f8796$exports, "subPixelOptimizeRect", () => $6aec2e68b45f8796$export$60e2aa74957d0b9d);
$parcel$export($6aec2e68b45f8796$exports, "subPixelOptimize", () => $6aec2e68b45f8796$export$72c4fd4c1b8fcb10);
$parcel$export($6aec2e68b45f8796$exports, "getTransform", () => $6aec2e68b45f8796$export$fce0c6cfca85ed96);
$parcel$export($6aec2e68b45f8796$exports, "applyTransform", () => $6aec2e68b45f8796$export$9f9dcb98c894b623);
$parcel$export($6aec2e68b45f8796$exports, "transformDirection", () => $6aec2e68b45f8796$export$fff94e9792354cfa);
$parcel$export($6aec2e68b45f8796$exports, "groupTransition", () => $6aec2e68b45f8796$export$64fcab7860c216ae);
$parcel$export($6aec2e68b45f8796$exports, "clipPointsByRect", () => $6aec2e68b45f8796$export$e2f409471bbbc1dc);
$parcel$export($6aec2e68b45f8796$exports, "clipRectByRect", () => $6aec2e68b45f8796$export$d0d3709202b8b2a);
$parcel$export($6aec2e68b45f8796$exports, "createIcon", () => $6aec2e68b45f8796$export$274edc73af1ae9c8);
$parcel$export($6aec2e68b45f8796$exports, "linePolygonIntersect", () => $6aec2e68b45f8796$export$4f47c855a5e9ae9);
$parcel$export($6aec2e68b45f8796$exports, "lineLineIntersect", () => $6aec2e68b45f8796$export$6c0a70ea1d8d158b);
$parcel$export($6aec2e68b45f8796$exports, "setTooltipConfig", () => $6aec2e68b45f8796$export$fc6410d97fab306c);
$parcel$export($6aec2e68b45f8796$exports, "traverseElements", () => $6aec2e68b45f8796$export$3e564442729bf048);
$parcel$export($6aec2e68b45f8796$exports, "updateProps", () => $f7e735722ff36e8c$export$c8dce3c08436e91e);
$parcel$export($6aec2e68b45f8796$exports, "initProps", () => $f7e735722ff36e8c$export$a121566aadcfe021);
$parcel$export($6aec2e68b45f8796$exports, "removeElement", () => $f7e735722ff36e8c$export$f883456a56996078);
$parcel$export($6aec2e68b45f8796$exports, "removeElementWithFadeOut", () => $f7e735722ff36e8c$export$6d0fd725cb4aee8a);
$parcel$export($6aec2e68b45f8796$exports, "isElementRemoved", () => $f7e735722ff36e8c$export$5b89d4b643713034);
$parcel$export($6aec2e68b45f8796$exports, "Group", () => $748aea24eee93173$export$2e2bcd8739ae039);
$parcel$export($6aec2e68b45f8796$exports, "Image", () => $7fb187ddd76ee1dc$export$2e2bcd8739ae039);
$parcel$export($6aec2e68b45f8796$exports, "Text", () => $6d12d9a137e168c2$export$2e2bcd8739ae039);
$parcel$export($6aec2e68b45f8796$exports, "Circle", () => $4901f8246791b36b$export$2e2bcd8739ae039);
$parcel$export($6aec2e68b45f8796$exports, "Ellipse", () => $0796b96400f8654b$export$2e2bcd8739ae039);
$parcel$export($6aec2e68b45f8796$exports, "Sector", () => $55ff835abc77a8e3$export$2e2bcd8739ae039);
$parcel$export($6aec2e68b45f8796$exports, "Ring", () => $22bfa8ba3daa530f$export$2e2bcd8739ae039);
$parcel$export($6aec2e68b45f8796$exports, "Polygon", () => $e9532b79bfd5259a$export$2e2bcd8739ae039);
$parcel$export($6aec2e68b45f8796$exports, "Polyline", () => $8e5cb49aeb92b686$export$2e2bcd8739ae039);
$parcel$export($6aec2e68b45f8796$exports, "Rect", () => $538026eba361a92a$export$2e2bcd8739ae039);
$parcel$export($6aec2e68b45f8796$exports, "Line", () => $bb4cc8f9efee5de5$export$2e2bcd8739ae039);
$parcel$export($6aec2e68b45f8796$exports, "BezierCurve", () => $b9c64e9a47a086f5$export$2e2bcd8739ae039);
$parcel$export($6aec2e68b45f8796$exports, "Arc", () => $4061a8951878289c$export$2e2bcd8739ae039);
$parcel$export($6aec2e68b45f8796$exports, "IncrementalDisplayable", () => $b60032855e4de32e$export$2e2bcd8739ae039);
$parcel$export($6aec2e68b45f8796$exports, "CompoundPath", () => $1327858e0c882e8a$export$2e2bcd8739ae039);
$parcel$export($6aec2e68b45f8796$exports, "LinearGradient", () => $8d46ddd232d9d12f$export$2e2bcd8739ae039);
$parcel$export($6aec2e68b45f8796$exports, "RadialGradient", () => $b34c939dc55d1e35$export$2e2bcd8739ae039);
$parcel$export($6aec2e68b45f8796$exports, "BoundingRect", () => $bf33be5184c664d0$export$2e2bcd8739ae039);
$parcel$export($6aec2e68b45f8796$exports, "OrientedBoundingRect", () => $7c86064f0296c532$export$2e2bcd8739ae039);
$parcel$export($6aec2e68b45f8796$exports, "Point", () => $98bf1aab7582d293$export$2e2bcd8739ae039);
$parcel$export($6aec2e68b45f8796$exports, "Path", () => $97f9f9aac9c7fd52$export$2e2bcd8739ae039);
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 




var $d04b8d80ba94d2e6$var$CMD = (0, $9638c378ac086dea$export$2e2bcd8739ae039).CMD;
var $d04b8d80ba94d2e6$var$points = [
    [],
    [],
    []
];
var $d04b8d80ba94d2e6$var$mathSqrt = Math.sqrt;
var $d04b8d80ba94d2e6$var$mathAtan2 = Math.atan2;
function $d04b8d80ba94d2e6$export$2e2bcd8739ae039(path, m) {
    if (!m) return;
    var data = path.data;
    var len = path.len();
    var cmd;
    var nPoint;
    var i;
    var j;
    var k;
    var p;
    var M = $d04b8d80ba94d2e6$var$CMD.M;
    var C = $d04b8d80ba94d2e6$var$CMD.C;
    var L = $d04b8d80ba94d2e6$var$CMD.L;
    var R = $d04b8d80ba94d2e6$var$CMD.R;
    var A = $d04b8d80ba94d2e6$var$CMD.A;
    var Q = $d04b8d80ba94d2e6$var$CMD.Q;
    for(i = 0, j = 0; i < len;){
        cmd = data[i++];
        j = i;
        nPoint = 0;
        switch(cmd){
            case M:
                nPoint = 1;
                break;
            case L:
                nPoint = 1;
                break;
            case C:
                nPoint = 3;
                break;
            case Q:
                nPoint = 2;
                break;
            case A:
                var x = m[4];
                var y = m[5];
                var sx = $d04b8d80ba94d2e6$var$mathSqrt(m[0] * m[0] + m[1] * m[1]);
                var sy = $d04b8d80ba94d2e6$var$mathSqrt(m[2] * m[2] + m[3] * m[3]);
                var angle = $d04b8d80ba94d2e6$var$mathAtan2(-m[1] / sy, m[0] / sx);
                data[i] *= sx;
                data[i++] += x;
                data[i] *= sy;
                data[i++] += y;
                data[i++] *= sx;
                data[i++] *= sy;
                data[i++] += angle;
                data[i++] += angle;
                i += 2;
                j = i;
                break;
            case R:
                p[0] = data[i++];
                p[1] = data[i++];
                (0, $187eb1bf1a49fd34$export$9f9dcb98c894b623)(p, p, m);
                data[j++] = p[0];
                data[j++] = p[1];
                p[0] += data[i++];
                p[1] += data[i++];
                (0, $187eb1bf1a49fd34$export$9f9dcb98c894b623)(p, p, m);
                data[j++] = p[0];
                data[j++] = p[1];
        }
        for(k = 0; k < nPoint; k++){
            var p_1 = $d04b8d80ba94d2e6$var$points[k];
            p_1[0] = data[i++];
            p_1[1] = data[i++];
            (0, $187eb1bf1a49fd34$export$9f9dcb98c894b623)(p_1, p_1, m);
            data[j++] = p_1[0];
            data[j++] = p_1[1];
        }
    }
    path.increaseVersion();
}



var $76d97862acecea9f$var$mathSqrt = Math.sqrt;
var $76d97862acecea9f$var$mathSin = Math.sin;
var $76d97862acecea9f$var$mathCos = Math.cos;
var $76d97862acecea9f$var$PI = Math.PI;
function $76d97862acecea9f$var$vMag(v) {
    return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
}
function $76d97862acecea9f$var$vRatio(u, v) {
    return (u[0] * v[0] + u[1] * v[1]) / ($76d97862acecea9f$var$vMag(u) * $76d97862acecea9f$var$vMag(v));
}
function $76d97862acecea9f$var$vAngle(u, v) {
    return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos($76d97862acecea9f$var$vRatio(u, v));
}
function $76d97862acecea9f$var$processArc(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg, cmd, path) {
    var psi = psiDeg * ($76d97862acecea9f$var$PI / 180.0);
    var xp = $76d97862acecea9f$var$mathCos(psi) * (x1 - x2) / 2.0 + $76d97862acecea9f$var$mathSin(psi) * (y1 - y2) / 2.0;
    var yp = -1 * $76d97862acecea9f$var$mathSin(psi) * (x1 - x2) / 2.0 + $76d97862acecea9f$var$mathCos(psi) * (y1 - y2) / 2.0;
    var lambda = xp * xp / (rx * rx) + yp * yp / (ry * ry);
    if (lambda > 1) {
        rx *= $76d97862acecea9f$var$mathSqrt(lambda);
        ry *= $76d97862acecea9f$var$mathSqrt(lambda);
    }
    var f = (fa === fs ? -1 : 1) * $76d97862acecea9f$var$mathSqrt((rx * rx * (ry * ry) - rx * rx * (yp * yp) - ry * ry * (xp * xp)) / (rx * rx * (yp * yp) + ry * ry * (xp * xp))) || 0;
    var cxp = f * rx * yp / ry;
    var cyp = f * -ry * xp / rx;
    var cx = (x1 + x2) / 2.0 + $76d97862acecea9f$var$mathCos(psi) * cxp - $76d97862acecea9f$var$mathSin(psi) * cyp;
    var cy = (y1 + y2) / 2.0 + $76d97862acecea9f$var$mathSin(psi) * cxp + $76d97862acecea9f$var$mathCos(psi) * cyp;
    var theta = $76d97862acecea9f$var$vAngle([
        1,
        0
    ], [
        (xp - cxp) / rx,
        (yp - cyp) / ry
    ]);
    var u = [
        (xp - cxp) / rx,
        (yp - cyp) / ry
    ];
    var v = [
        (-1 * xp - cxp) / rx,
        (-1 * yp - cyp) / ry
    ];
    var dTheta = $76d97862acecea9f$var$vAngle(u, v);
    if ($76d97862acecea9f$var$vRatio(u, v) <= -1) dTheta = $76d97862acecea9f$var$PI;
    if ($76d97862acecea9f$var$vRatio(u, v) >= 1) dTheta = 0;
    if (dTheta < 0) {
        var n = Math.round(dTheta / $76d97862acecea9f$var$PI * 1e6) / 1e6;
        dTheta = $76d97862acecea9f$var$PI * 2 + n % 2 * $76d97862acecea9f$var$PI;
    }
    path.addData(cmd, cx, cy, rx, ry, theta, dTheta, psi, fs);
}
var $76d97862acecea9f$var$commandReg = /([mlvhzcqtsa])([^mlvhzcqtsa]*)/ig;
var $76d97862acecea9f$var$numberReg = /-?([0-9]*\.)?[0-9]+([eE]-?[0-9]+)?/g;
function $76d97862acecea9f$var$createPathProxyFromString(data) {
    var path = new (0, $9638c378ac086dea$export$2e2bcd8739ae039)();
    if (!data) return path;
    var cpx = 0;
    var cpy = 0;
    var subpathX = cpx;
    var subpathY = cpy;
    var prevCmd;
    var CMD = (0, $9638c378ac086dea$export$2e2bcd8739ae039).CMD;
    var cmdList = data.match($76d97862acecea9f$var$commandReg);
    if (!cmdList) return path;
    for(var l = 0; l < cmdList.length; l++){
        var cmdText = cmdList[l];
        var cmdStr = cmdText.charAt(0);
        var cmd = void 0;
        var p = cmdText.match($76d97862acecea9f$var$numberReg) || [];
        var pLen = p.length;
        for(var i = 0; i < pLen; i++)p[i] = parseFloat(p[i]);
        var off = 0;
        while(off < pLen){
            var ctlPtx = void 0;
            var ctlPty = void 0;
            var rx = void 0;
            var ry = void 0;
            var psi = void 0;
            var fa = void 0;
            var fs = void 0;
            var x1 = cpx;
            var y1 = cpy;
            var len = void 0;
            var pathData = void 0;
            switch(cmdStr){
                case "l":
                    cpx += p[off++];
                    cpy += p[off++];
                    cmd = CMD.L;
                    path.addData(cmd, cpx, cpy);
                    break;
                case "L":
                    cpx = p[off++];
                    cpy = p[off++];
                    cmd = CMD.L;
                    path.addData(cmd, cpx, cpy);
                    break;
                case "m":
                    cpx += p[off++];
                    cpy += p[off++];
                    cmd = CMD.M;
                    path.addData(cmd, cpx, cpy);
                    subpathX = cpx;
                    subpathY = cpy;
                    cmdStr = "l";
                    break;
                case "M":
                    cpx = p[off++];
                    cpy = p[off++];
                    cmd = CMD.M;
                    path.addData(cmd, cpx, cpy);
                    subpathX = cpx;
                    subpathY = cpy;
                    cmdStr = "L";
                    break;
                case "h":
                    cpx += p[off++];
                    cmd = CMD.L;
                    path.addData(cmd, cpx, cpy);
                    break;
                case "H":
                    cpx = p[off++];
                    cmd = CMD.L;
                    path.addData(cmd, cpx, cpy);
                    break;
                case "v":
                    cpy += p[off++];
                    cmd = CMD.L;
                    path.addData(cmd, cpx, cpy);
                    break;
                case "V":
                    cpy = p[off++];
                    cmd = CMD.L;
                    path.addData(cmd, cpx, cpy);
                    break;
                case "C":
                    cmd = CMD.C;
                    path.addData(cmd, p[off++], p[off++], p[off++], p[off++], p[off++], p[off++]);
                    cpx = p[off - 2];
                    cpy = p[off - 1];
                    break;
                case "c":
                    cmd = CMD.C;
                    path.addData(cmd, p[off++] + cpx, p[off++] + cpy, p[off++] + cpx, p[off++] + cpy, p[off++] + cpx, p[off++] + cpy);
                    cpx += p[off - 2];
                    cpy += p[off - 1];
                    break;
                case "S":
                    ctlPtx = cpx;
                    ctlPty = cpy;
                    len = path.len();
                    pathData = path.data;
                    if (prevCmd === CMD.C) {
                        ctlPtx += cpx - pathData[len - 4];
                        ctlPty += cpy - pathData[len - 3];
                    }
                    cmd = CMD.C;
                    x1 = p[off++];
                    y1 = p[off++];
                    cpx = p[off++];
                    cpy = p[off++];
                    path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
                    break;
                case "s":
                    ctlPtx = cpx;
                    ctlPty = cpy;
                    len = path.len();
                    pathData = path.data;
                    if (prevCmd === CMD.C) {
                        ctlPtx += cpx - pathData[len - 4];
                        ctlPty += cpy - pathData[len - 3];
                    }
                    cmd = CMD.C;
                    x1 = cpx + p[off++];
                    y1 = cpy + p[off++];
                    cpx += p[off++];
                    cpy += p[off++];
                    path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
                    break;
                case "Q":
                    x1 = p[off++];
                    y1 = p[off++];
                    cpx = p[off++];
                    cpy = p[off++];
                    cmd = CMD.Q;
                    path.addData(cmd, x1, y1, cpx, cpy);
                    break;
                case "q":
                    x1 = p[off++] + cpx;
                    y1 = p[off++] + cpy;
                    cpx += p[off++];
                    cpy += p[off++];
                    cmd = CMD.Q;
                    path.addData(cmd, x1, y1, cpx, cpy);
                    break;
                case "T":
                    ctlPtx = cpx;
                    ctlPty = cpy;
                    len = path.len();
                    pathData = path.data;
                    if (prevCmd === CMD.Q) {
                        ctlPtx += cpx - pathData[len - 4];
                        ctlPty += cpy - pathData[len - 3];
                    }
                    cpx = p[off++];
                    cpy = p[off++];
                    cmd = CMD.Q;
                    path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
                    break;
                case "t":
                    ctlPtx = cpx;
                    ctlPty = cpy;
                    len = path.len();
                    pathData = path.data;
                    if (prevCmd === CMD.Q) {
                        ctlPtx += cpx - pathData[len - 4];
                        ctlPty += cpy - pathData[len - 3];
                    }
                    cpx += p[off++];
                    cpy += p[off++];
                    cmd = CMD.Q;
                    path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
                    break;
                case "A":
                    rx = p[off++];
                    ry = p[off++];
                    psi = p[off++];
                    fa = p[off++];
                    fs = p[off++];
                    x1 = cpx, y1 = cpy;
                    cpx = p[off++];
                    cpy = p[off++];
                    cmd = CMD.A;
                    $76d97862acecea9f$var$processArc(x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path);
                    break;
                case "a":
                    rx = p[off++];
                    ry = p[off++];
                    psi = p[off++];
                    fa = p[off++];
                    fs = p[off++];
                    x1 = cpx, y1 = cpy;
                    cpx += p[off++];
                    cpy += p[off++];
                    cmd = CMD.A;
                    $76d97862acecea9f$var$processArc(x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path);
                    break;
            }
        }
        if (cmdStr === "z" || cmdStr === "Z") {
            cmd = CMD.Z;
            path.addData(cmd);
            cpx = subpathX;
            cpy = subpathY;
        }
        prevCmd = cmd;
    }
    path.toStatic();
    return path;
}
var $76d97862acecea9f$var$SVGPath = function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(SVGPath, _super);
    function SVGPath() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SVGPath.prototype.applyTransform = function(m) {};
    return SVGPath;
}((0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039));
function $76d97862acecea9f$var$isPathProxy(path) {
    return path.setData != null;
}
function $76d97862acecea9f$var$createPathOptions(str, opts) {
    var pathProxy = $76d97862acecea9f$var$createPathProxyFromString(str);
    var innerOpts = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, opts);
    innerOpts.buildPath = function(path) {
        if ($76d97862acecea9f$var$isPathProxy(path)) {
            path.setData(pathProxy.data);
            var ctx = path.getContext();
            if (ctx) path.rebuildPath(ctx, 1);
        } else {
            var ctx = path;
            pathProxy.rebuildPath(ctx, 1);
        }
    };
    innerOpts.applyTransform = function(m) {
        (0, $d04b8d80ba94d2e6$export$2e2bcd8739ae039)(pathProxy, m);
        this.dirtyShape();
    };
    return innerOpts;
}
function $76d97862acecea9f$export$ae5b259626f00aeb(str, opts) {
    return new $76d97862acecea9f$var$SVGPath($76d97862acecea9f$var$createPathOptions(str, opts));
}
function $76d97862acecea9f$export$68e3a51ba2ed417c(str, defaultOpts) {
    var innerOpts = $76d97862acecea9f$var$createPathOptions(str, defaultOpts);
    var Sub = function(_super) {
        (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(Sub, _super);
        function Sub(opts) {
            var _this = _super.call(this, opts) || this;
            _this.applyTransform = innerOpts.applyTransform;
            _this.buildPath = innerOpts.buildPath;
            return _this;
        }
        return Sub;
    }($76d97862acecea9f$var$SVGPath);
    return Sub;
}
function $76d97862acecea9f$export$7b1dd269fbc4e903(pathEls, opts) {
    var pathList = [];
    var len = pathEls.length;
    for(var i = 0; i < len; i++){
        var pathEl = pathEls[i];
        pathList.push(pathEl.getUpdatedPathProxy(true));
    }
    var pathBundle = new (0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039)(opts);
    pathBundle.createPathProxy();
    pathBundle.buildPath = function(path) {
        if ($76d97862acecea9f$var$isPathProxy(path)) {
            path.appendPath(pathList);
            var ctx = path.getContext();
            if (ctx) path.rebuildPath(ctx, 1);
        }
    };
    return pathBundle;
}
function $76d97862acecea9f$export$18711d956bf1c3eb(sourcePath, opts) {
    opts = opts || {};
    var path = new (0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039)();
    if (sourcePath.shape) path.setShape(sourcePath.shape);
    path.setStyle(sourcePath.style);
    if (opts.bakeTransform) (0, $d04b8d80ba94d2e6$export$2e2bcd8739ae039)(path.path, sourcePath.getComputedTransform());
    else if (opts.toLocal) path.setLocalTransform(sourcePath.getComputedTransform());
    else path.copyTransform(sourcePath);
    path.buildPath = sourcePath.buildPath;
    path.applyTransform = path.applyTransform;
    path.z = sourcePath.z;
    path.z2 = sourcePath.z2;
    path.zlevel = sourcePath.zlevel;
    return path;
}











var $4901f8246791b36b$export$2c0b65c9c7b57845 = function() {
    function CircleShape() {
        this.cx = 0;
        this.cy = 0;
        this.r = 0;
    }
    return CircleShape;
}();
var $4901f8246791b36b$var$Circle = function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(Circle, _super);
    function Circle(opts) {
        return _super.call(this, opts) || this;
    }
    Circle.prototype.getDefaultShape = function() {
        return new $4901f8246791b36b$export$2c0b65c9c7b57845();
    };
    Circle.prototype.buildPath = function(ctx, shape) {
        ctx.moveTo(shape.cx + shape.r, shape.cy);
        ctx.arc(shape.cx, shape.cy, shape.r, 0, Math.PI * 2);
    };
    return Circle;
}((0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039));
$4901f8246791b36b$var$Circle.prototype.type = "circle";
var $4901f8246791b36b$export$2e2bcd8739ae039 = $4901f8246791b36b$var$Circle;




var $0796b96400f8654b$export$817919dfe2806d31 = function() {
    function EllipseShape() {
        this.cx = 0;
        this.cy = 0;
        this.rx = 0;
        this.ry = 0;
    }
    return EllipseShape;
}();
var $0796b96400f8654b$var$Ellipse = function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(Ellipse, _super);
    function Ellipse(opts) {
        return _super.call(this, opts) || this;
    }
    Ellipse.prototype.getDefaultShape = function() {
        return new $0796b96400f8654b$export$817919dfe2806d31();
    };
    Ellipse.prototype.buildPath = function(ctx, shape) {
        var k = 0.5522848;
        var x = shape.cx;
        var y = shape.cy;
        var a = shape.rx;
        var b = shape.ry;
        var ox = a * k;
        var oy = b * k;
        ctx.moveTo(x - a, y);
        ctx.bezierCurveTo(x - a, y - oy, x - ox, y - b, x, y - b);
        ctx.bezierCurveTo(x + ox, y - b, x + a, y - oy, x + a, y);
        ctx.bezierCurveTo(x + a, y + oy, x + ox, y + b, x, y + b);
        ctx.bezierCurveTo(x - ox, y + b, x - a, y + oy, x - a, y);
        ctx.closePath();
    };
    return Ellipse;
}((0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039));
$0796b96400f8654b$var$Ellipse.prototype.type = "ellipse";
var $0796b96400f8654b$export$2e2bcd8739ae039 = $0796b96400f8654b$var$Ellipse;





var $8ae4d1faecaf64d6$var$PI = Math.PI;
var $8ae4d1faecaf64d6$var$PI2 = $8ae4d1faecaf64d6$var$PI * 2;
var $8ae4d1faecaf64d6$var$mathSin = Math.sin;
var $8ae4d1faecaf64d6$var$mathCos = Math.cos;
var $8ae4d1faecaf64d6$var$mathACos = Math.acos;
var $8ae4d1faecaf64d6$var$mathATan2 = Math.atan2;
var $8ae4d1faecaf64d6$var$mathAbs = Math.abs;
var $8ae4d1faecaf64d6$var$mathSqrt = Math.sqrt;
var $8ae4d1faecaf64d6$var$mathMax = Math.max;
var $8ae4d1faecaf64d6$var$mathMin = Math.min;
var $8ae4d1faecaf64d6$var$e = 1e-4;
function $8ae4d1faecaf64d6$var$intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
    var dx10 = x1 - x0;
    var dy10 = y1 - y0;
    var dx32 = x3 - x2;
    var dy32 = y3 - y2;
    var t = dy32 * dx10 - dx32 * dy10;
    if (t * t < $8ae4d1faecaf64d6$var$e) return;
    t = (dx32 * (y0 - y2) - dy32 * (x0 - x2)) / t;
    return [
        x0 + t * dx10,
        y0 + t * dy10
    ];
}
function $8ae4d1faecaf64d6$var$computeCornerTangents(x0, y0, x1, y1, radius, cr, clockwise) {
    var x01 = x0 - x1;
    var y01 = y0 - y1;
    var lo = (clockwise ? cr : -cr) / $8ae4d1faecaf64d6$var$mathSqrt(x01 * x01 + y01 * y01);
    var ox = lo * y01;
    var oy = -lo * x01;
    var x11 = x0 + ox;
    var y11 = y0 + oy;
    var x10 = x1 + ox;
    var y10 = y1 + oy;
    var x00 = (x11 + x10) / 2;
    var y00 = (y11 + y10) / 2;
    var dx = x10 - x11;
    var dy = y10 - y11;
    var d2 = dx * dx + dy * dy;
    var r = radius - cr;
    var s = x11 * y10 - x10 * y11;
    var d = (dy < 0 ? -1 : 1) * $8ae4d1faecaf64d6$var$mathSqrt($8ae4d1faecaf64d6$var$mathMax(0, r * r * d2 - s * s));
    var cx0 = (s * dy - dx * d) / d2;
    var cy0 = (-s * dx - dy * d) / d2;
    var cx1 = (s * dy + dx * d) / d2;
    var cy1 = (-s * dx + dy * d) / d2;
    var dx0 = cx0 - x00;
    var dy0 = cy0 - y00;
    var dx1 = cx1 - x00;
    var dy1 = cy1 - y00;
    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) {
        cx0 = cx1;
        cy0 = cy1;
    }
    return {
        cx: cx0,
        cy: cy0,
        x0: -ox,
        y0: -oy,
        x1: cx0 * (radius / r - 1),
        y1: cy0 * (radius / r - 1)
    };
}
function $8ae4d1faecaf64d6$var$normalizeCornerRadius(cr) {
    var arr;
    if ((0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(cr)) {
        var len = cr.length;
        if (!len) return cr;
        if (len === 1) arr = [
            cr[0],
            cr[0],
            0,
            0
        ];
        else if (len === 2) arr = [
            cr[0],
            cr[0],
            cr[1],
            cr[1]
        ];
        else if (len === 3) arr = cr.concat(cr[2]);
        else arr = cr;
    } else arr = [
        cr,
        cr,
        cr,
        cr
    ];
    return arr;
}
function $8ae4d1faecaf64d6$export$5cc7f731b5937e99(ctx, shape) {
    var _a;
    var radius = $8ae4d1faecaf64d6$var$mathMax(shape.r, 0);
    var innerRadius = $8ae4d1faecaf64d6$var$mathMax(shape.r0 || 0, 0);
    var hasRadius = radius > 0;
    var hasInnerRadius = innerRadius > 0;
    if (!hasRadius && !hasInnerRadius) return;
    if (!hasRadius) {
        radius = innerRadius;
        innerRadius = 0;
    }
    if (innerRadius > radius) {
        var tmp = radius;
        radius = innerRadius;
        innerRadius = tmp;
    }
    var startAngle = shape.startAngle, endAngle = shape.endAngle;
    if (isNaN(startAngle) || isNaN(endAngle)) return;
    var cx = shape.cx, cy = shape.cy;
    var clockwise = !!shape.clockwise;
    var arc = $8ae4d1faecaf64d6$var$mathAbs(endAngle - startAngle);
    var mod = arc > $8ae4d1faecaf64d6$var$PI2 && arc % $8ae4d1faecaf64d6$var$PI2;
    mod > $8ae4d1faecaf64d6$var$e && (arc = mod);
    if (!(radius > $8ae4d1faecaf64d6$var$e)) ctx.moveTo(cx, cy);
    else if (arc > $8ae4d1faecaf64d6$var$PI2 - $8ae4d1faecaf64d6$var$e) {
        ctx.moveTo(cx + radius * $8ae4d1faecaf64d6$var$mathCos(startAngle), cy + radius * $8ae4d1faecaf64d6$var$mathSin(startAngle));
        ctx.arc(cx, cy, radius, startAngle, endAngle, !clockwise);
        if (innerRadius > $8ae4d1faecaf64d6$var$e) {
            ctx.moveTo(cx + innerRadius * $8ae4d1faecaf64d6$var$mathCos(endAngle), cy + innerRadius * $8ae4d1faecaf64d6$var$mathSin(endAngle));
            ctx.arc(cx, cy, innerRadius, endAngle, startAngle, clockwise);
        }
    } else {
        var icrStart = void 0;
        var icrEnd = void 0;
        var ocrStart = void 0;
        var ocrEnd = void 0;
        var ocrs = void 0;
        var ocre = void 0;
        var icrs = void 0;
        var icre = void 0;
        var ocrMax = void 0;
        var icrMax = void 0;
        var limitedOcrMax = void 0;
        var limitedIcrMax = void 0;
        var xre = void 0;
        var yre = void 0;
        var xirs = void 0;
        var yirs = void 0;
        var xrs = radius * $8ae4d1faecaf64d6$var$mathCos(startAngle);
        var yrs = radius * $8ae4d1faecaf64d6$var$mathSin(startAngle);
        var xire = innerRadius * $8ae4d1faecaf64d6$var$mathCos(endAngle);
        var yire = innerRadius * $8ae4d1faecaf64d6$var$mathSin(endAngle);
        var hasArc = arc > $8ae4d1faecaf64d6$var$e;
        if (hasArc) {
            var cornerRadius = shape.cornerRadius;
            if (cornerRadius) _a = $8ae4d1faecaf64d6$var$normalizeCornerRadius(cornerRadius), icrStart = _a[0], icrEnd = _a[1], ocrStart = _a[2], ocrEnd = _a[3];
            var halfRd = $8ae4d1faecaf64d6$var$mathAbs(radius - innerRadius) / 2;
            ocrs = $8ae4d1faecaf64d6$var$mathMin(halfRd, ocrStart);
            ocre = $8ae4d1faecaf64d6$var$mathMin(halfRd, ocrEnd);
            icrs = $8ae4d1faecaf64d6$var$mathMin(halfRd, icrStart);
            icre = $8ae4d1faecaf64d6$var$mathMin(halfRd, icrEnd);
            limitedOcrMax = ocrMax = $8ae4d1faecaf64d6$var$mathMax(ocrs, ocre);
            limitedIcrMax = icrMax = $8ae4d1faecaf64d6$var$mathMax(icrs, icre);
            if (ocrMax > $8ae4d1faecaf64d6$var$e || icrMax > $8ae4d1faecaf64d6$var$e) {
                xre = radius * $8ae4d1faecaf64d6$var$mathCos(endAngle);
                yre = radius * $8ae4d1faecaf64d6$var$mathSin(endAngle);
                xirs = innerRadius * $8ae4d1faecaf64d6$var$mathCos(startAngle);
                yirs = innerRadius * $8ae4d1faecaf64d6$var$mathSin(startAngle);
                if (arc < $8ae4d1faecaf64d6$var$PI) {
                    var it_1 = $8ae4d1faecaf64d6$var$intersect(xrs, yrs, xirs, yirs, xre, yre, xire, yire);
                    if (it_1) {
                        var x0 = xrs - it_1[0];
                        var y0 = yrs - it_1[1];
                        var x1 = xre - it_1[0];
                        var y1 = yre - it_1[1];
                        var a = 1 / $8ae4d1faecaf64d6$var$mathSin($8ae4d1faecaf64d6$var$mathACos((x0 * x1 + y0 * y1) / ($8ae4d1faecaf64d6$var$mathSqrt(x0 * x0 + y0 * y0) * $8ae4d1faecaf64d6$var$mathSqrt(x1 * x1 + y1 * y1))) / 2);
                        var b = $8ae4d1faecaf64d6$var$mathSqrt(it_1[0] * it_1[0] + it_1[1] * it_1[1]);
                        limitedOcrMax = $8ae4d1faecaf64d6$var$mathMin(ocrMax, (radius - b) / (a + 1));
                        limitedIcrMax = $8ae4d1faecaf64d6$var$mathMin(icrMax, (innerRadius - b) / (a - 1));
                    }
                }
            }
        }
        if (!hasArc) ctx.moveTo(cx + xrs, cy + yrs);
        else if (limitedOcrMax > $8ae4d1faecaf64d6$var$e) {
            var crStart = $8ae4d1faecaf64d6$var$mathMin(ocrStart, limitedOcrMax);
            var crEnd = $8ae4d1faecaf64d6$var$mathMin(ocrEnd, limitedOcrMax);
            var ct0 = $8ae4d1faecaf64d6$var$computeCornerTangents(xirs, yirs, xrs, yrs, radius, crStart, clockwise);
            var ct1 = $8ae4d1faecaf64d6$var$computeCornerTangents(xre, yre, xire, yire, radius, crEnd, clockwise);
            ctx.moveTo(cx + ct0.cx + ct0.x0, cy + ct0.cy + ct0.y0);
            if (limitedOcrMax < ocrMax && crStart === crEnd) ctx.arc(cx + ct0.cx, cy + ct0.cy, limitedOcrMax, $8ae4d1faecaf64d6$var$mathATan2(ct0.y0, ct0.x0), $8ae4d1faecaf64d6$var$mathATan2(ct1.y0, ct1.x0), !clockwise);
            else {
                crStart > 0 && ctx.arc(cx + ct0.cx, cy + ct0.cy, crStart, $8ae4d1faecaf64d6$var$mathATan2(ct0.y0, ct0.x0), $8ae4d1faecaf64d6$var$mathATan2(ct0.y1, ct0.x1), !clockwise);
                ctx.arc(cx, cy, radius, $8ae4d1faecaf64d6$var$mathATan2(ct0.cy + ct0.y1, ct0.cx + ct0.x1), $8ae4d1faecaf64d6$var$mathATan2(ct1.cy + ct1.y1, ct1.cx + ct1.x1), !clockwise);
                crEnd > 0 && ctx.arc(cx + ct1.cx, cy + ct1.cy, crEnd, $8ae4d1faecaf64d6$var$mathATan2(ct1.y1, ct1.x1), $8ae4d1faecaf64d6$var$mathATan2(ct1.y0, ct1.x0), !clockwise);
            }
        } else {
            ctx.moveTo(cx + xrs, cy + yrs);
            ctx.arc(cx, cy, radius, startAngle, endAngle, !clockwise);
        }
        if (!(innerRadius > $8ae4d1faecaf64d6$var$e) || !hasArc) ctx.lineTo(cx + xire, cy + yire);
        else if (limitedIcrMax > $8ae4d1faecaf64d6$var$e) {
            var crStart = $8ae4d1faecaf64d6$var$mathMin(icrStart, limitedIcrMax);
            var crEnd = $8ae4d1faecaf64d6$var$mathMin(icrEnd, limitedIcrMax);
            var ct0 = $8ae4d1faecaf64d6$var$computeCornerTangents(xire, yire, xre, yre, innerRadius, -crEnd, clockwise);
            var ct1 = $8ae4d1faecaf64d6$var$computeCornerTangents(xrs, yrs, xirs, yirs, innerRadius, -crStart, clockwise);
            ctx.lineTo(cx + ct0.cx + ct0.x0, cy + ct0.cy + ct0.y0);
            if (limitedIcrMax < icrMax && crStart === crEnd) ctx.arc(cx + ct0.cx, cy + ct0.cy, limitedIcrMax, $8ae4d1faecaf64d6$var$mathATan2(ct0.y0, ct0.x0), $8ae4d1faecaf64d6$var$mathATan2(ct1.y0, ct1.x0), !clockwise);
            else {
                crEnd > 0 && ctx.arc(cx + ct0.cx, cy + ct0.cy, crEnd, $8ae4d1faecaf64d6$var$mathATan2(ct0.y0, ct0.x0), $8ae4d1faecaf64d6$var$mathATan2(ct0.y1, ct0.x1), !clockwise);
                ctx.arc(cx, cy, innerRadius, $8ae4d1faecaf64d6$var$mathATan2(ct0.cy + ct0.y1, ct0.cx + ct0.x1), $8ae4d1faecaf64d6$var$mathATan2(ct1.cy + ct1.y1, ct1.cx + ct1.x1), clockwise);
                crStart > 0 && ctx.arc(cx + ct1.cx, cy + ct1.cy, crStart, $8ae4d1faecaf64d6$var$mathATan2(ct1.y1, ct1.x1), $8ae4d1faecaf64d6$var$mathATan2(ct1.y0, ct1.x0), !clockwise);
            }
        } else {
            ctx.lineTo(cx + xire, cy + yire);
            ctx.arc(cx, cy, innerRadius, endAngle, startAngle, clockwise);
        }
    }
    ctx.closePath();
}


var $55ff835abc77a8e3$export$98af62de8a972c99 = function() {
    function SectorShape() {
        this.cx = 0;
        this.cy = 0;
        this.r0 = 0;
        this.r = 0;
        this.startAngle = 0;
        this.endAngle = Math.PI * 2;
        this.clockwise = true;
        this.cornerRadius = 0;
    }
    return SectorShape;
}();
var $55ff835abc77a8e3$var$Sector = function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(Sector, _super);
    function Sector(opts) {
        return _super.call(this, opts) || this;
    }
    Sector.prototype.getDefaultShape = function() {
        return new $55ff835abc77a8e3$export$98af62de8a972c99();
    };
    Sector.prototype.buildPath = function(ctx, shape) {
        $8ae4d1faecaf64d6$export$5cc7f731b5937e99(ctx, shape);
    };
    Sector.prototype.isZeroArea = function() {
        return this.shape.startAngle === this.shape.endAngle || this.shape.r === this.shape.r0;
    };
    return Sector;
}((0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039));
$55ff835abc77a8e3$var$Sector.prototype.type = "sector";
var $55ff835abc77a8e3$export$2e2bcd8739ae039 = $55ff835abc77a8e3$var$Sector;




var $22bfa8ba3daa530f$export$4a506b3cd4ea73db = function() {
    function RingShape() {
        this.cx = 0;
        this.cy = 0;
        this.r = 0;
        this.r0 = 0;
    }
    return RingShape;
}();
var $22bfa8ba3daa530f$var$Ring = function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(Ring, _super);
    function Ring(opts) {
        return _super.call(this, opts) || this;
    }
    Ring.prototype.getDefaultShape = function() {
        return new $22bfa8ba3daa530f$export$4a506b3cd4ea73db();
    };
    Ring.prototype.buildPath = function(ctx, shape) {
        var x = shape.cx;
        var y = shape.cy;
        var PI2 = Math.PI * 2;
        ctx.moveTo(x + shape.r, y);
        ctx.arc(x, y, shape.r, 0, PI2, false);
        ctx.moveTo(x + shape.r0, y);
        ctx.arc(x, y, shape.r0, 0, PI2, true);
    };
    return Ring;
}((0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039));
$22bfa8ba3daa530f$var$Ring.prototype.type = "ring";
var $22bfa8ba3daa530f$export$2e2bcd8739ae039 = $22bfa8ba3daa530f$var$Ring;





function $0f2727cc32136914$export$2e2bcd8739ae039(points, smooth, isLoop, constraint) {
    var cps = [];
    var v = [];
    var v1 = [];
    var v2 = [];
    var prevPoint;
    var nextPoint;
    var min;
    var max;
    if (constraint) {
        min = [
            Infinity,
            Infinity
        ];
        max = [
            -Infinity,
            -Infinity
        ];
        for(var i = 0, len = points.length; i < len; i++){
            (0, $187eb1bf1a49fd34$export$96ec731ed4dcb222)(min, min, points[i]);
            (0, $187eb1bf1a49fd34$export$8960430cfd85939f)(max, max, points[i]);
        }
        (0, $187eb1bf1a49fd34$export$96ec731ed4dcb222)(min, min, constraint[0]);
        (0, $187eb1bf1a49fd34$export$8960430cfd85939f)(max, max, constraint[1]);
    }
    for(var i = 0, len = points.length; i < len; i++){
        var point = points[i];
        if (isLoop) {
            prevPoint = points[i ? i - 1 : len - 1];
            nextPoint = points[(i + 1) % len];
        } else if (i === 0 || i === len - 1) {
            cps.push((0, $187eb1bf1a49fd34$export$9cd59f9826255e47)(points[i]));
            continue;
        } else {
            prevPoint = points[i - 1];
            nextPoint = points[i + 1];
        }
        (0, $187eb1bf1a49fd34$export$f93b5905241a7cca)(v, nextPoint, prevPoint);
        (0, $187eb1bf1a49fd34$export$dcdf75081b88279d)(v, v, smooth);
        var d0 = (0, $187eb1bf1a49fd34$export$9f17032d917177de)(point, prevPoint);
        var d1 = (0, $187eb1bf1a49fd34$export$9f17032d917177de)(point, nextPoint);
        var sum = d0 + d1;
        if (sum !== 0) {
            d0 /= sum;
            d1 /= sum;
        }
        (0, $187eb1bf1a49fd34$export$dcdf75081b88279d)(v1, v, -d0);
        (0, $187eb1bf1a49fd34$export$dcdf75081b88279d)(v2, v, d1);
        var cp0 = (0, $187eb1bf1a49fd34$export$e16d8520af44a096)([], point, v1);
        var cp1 = (0, $187eb1bf1a49fd34$export$e16d8520af44a096)([], point, v2);
        if (constraint) {
            (0, $187eb1bf1a49fd34$export$8960430cfd85939f)(cp0, cp0, min);
            (0, $187eb1bf1a49fd34$export$96ec731ed4dcb222)(cp0, cp0, max);
            (0, $187eb1bf1a49fd34$export$8960430cfd85939f)(cp1, cp1, min);
            (0, $187eb1bf1a49fd34$export$96ec731ed4dcb222)(cp1, cp1, max);
        }
        cps.push(cp0);
        cps.push(cp1);
    }
    if (isLoop) cps.push(cps.shift());
    return cps;
}


function $bf7e06cfcb45be16$export$5cc7f731b5937e99(ctx, shape, closePath) {
    var smooth = shape.smooth;
    var points = shape.points;
    if (points && points.length >= 2) {
        if (smooth) {
            var controlPoints = (0, $0f2727cc32136914$export$2e2bcd8739ae039)(points, smooth, closePath, shape.smoothConstraint);
            ctx.moveTo(points[0][0], points[0][1]);
            var len = points.length;
            for(var i = 0; i < (closePath ? len : len - 1); i++){
                var cp1 = controlPoints[i * 2];
                var cp2 = controlPoints[i * 2 + 1];
                var p = points[(i + 1) % len];
                ctx.bezierCurveTo(cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]);
            }
        } else {
            ctx.moveTo(points[0][0], points[0][1]);
            for(var i = 1, l = points.length; i < l; i++)ctx.lineTo(points[i][0], points[i][1]);
        }
        closePath && ctx.closePath();
    }
}


var $e9532b79bfd5259a$export$a34d87b9aaeedd46 = function() {
    function PolygonShape() {
        this.points = null;
        this.smooth = 0;
        this.smoothConstraint = null;
    }
    return PolygonShape;
}();
var $e9532b79bfd5259a$var$Polygon = function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(Polygon, _super);
    function Polygon(opts) {
        return _super.call(this, opts) || this;
    }
    Polygon.prototype.getDefaultShape = function() {
        return new $e9532b79bfd5259a$export$a34d87b9aaeedd46();
    };
    Polygon.prototype.buildPath = function(ctx, shape) {
        $bf7e06cfcb45be16$export$5cc7f731b5937e99(ctx, shape, true);
    };
    return Polygon;
}((0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039));
$e9532b79bfd5259a$var$Polygon.prototype.type = "polygon";
var $e9532b79bfd5259a$export$2e2bcd8739ae039 = $e9532b79bfd5259a$var$Polygon;





var $8e5cb49aeb92b686$export$e9e5cc3985e19d11 = function() {
    function PolylineShape() {
        this.points = null;
        this.percent = 1;
        this.smooth = 0;
        this.smoothConstraint = null;
    }
    return PolylineShape;
}();
var $8e5cb49aeb92b686$var$Polyline = function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(Polyline, _super);
    function Polyline(opts) {
        return _super.call(this, opts) || this;
    }
    Polyline.prototype.getDefaultStyle = function() {
        return {
            stroke: "#000",
            fill: null
        };
    };
    Polyline.prototype.getDefaultShape = function() {
        return new $8e5cb49aeb92b686$export$e9e5cc3985e19d11();
    };
    Polyline.prototype.buildPath = function(ctx, shape) {
        $bf7e06cfcb45be16$export$5cc7f731b5937e99(ctx, shape, false);
    };
    return Polyline;
}((0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039));
$8e5cb49aeb92b686$var$Polyline.prototype.type = "polyline";
var $8e5cb49aeb92b686$export$2e2bcd8739ae039 = $8e5cb49aeb92b686$var$Polyline;






var $bb4cc8f9efee5de5$var$subPixelOptimizeOutputShape = {};
var $bb4cc8f9efee5de5$export$64b674d0815308 = function() {
    function LineShape() {
        this.x1 = 0;
        this.y1 = 0;
        this.x2 = 0;
        this.y2 = 0;
        this.percent = 1;
    }
    return LineShape;
}();
var $bb4cc8f9efee5de5$var$Line = function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(Line, _super);
    function Line(opts) {
        return _super.call(this, opts) || this;
    }
    Line.prototype.getDefaultStyle = function() {
        return {
            stroke: "#000",
            fill: null
        };
    };
    Line.prototype.getDefaultShape = function() {
        return new $bb4cc8f9efee5de5$export$64b674d0815308();
    };
    Line.prototype.buildPath = function(ctx, shape) {
        var x1;
        var y1;
        var x2;
        var y2;
        if (this.subPixelOptimize) {
            var optimizedShape = (0, $e6df98dd860ad415$export$8b4b620d7f4aad1b)($bb4cc8f9efee5de5$var$subPixelOptimizeOutputShape, shape, this.style);
            x1 = optimizedShape.x1;
            y1 = optimizedShape.y1;
            x2 = optimizedShape.x2;
            y2 = optimizedShape.y2;
        } else {
            x1 = shape.x1;
            y1 = shape.y1;
            x2 = shape.x2;
            y2 = shape.y2;
        }
        var percent = shape.percent;
        if (percent === 0) return;
        ctx.moveTo(x1, y1);
        if (percent < 1) {
            x2 = x1 * (1 - percent) + x2 * percent;
            y2 = y1 * (1 - percent) + y2 * percent;
        }
        ctx.lineTo(x2, y2);
    };
    Line.prototype.pointAt = function(p) {
        var shape = this.shape;
        return [
            shape.x1 * (1 - p) + shape.x2 * p,
            shape.y1 * (1 - p) + shape.y2 * p
        ];
    };
    return Line;
}((0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039));
$bb4cc8f9efee5de5$var$Line.prototype.type = "line";
var $bb4cc8f9efee5de5$export$2e2bcd8739ae039 = $bb4cc8f9efee5de5$var$Line;






var $b9c64e9a47a086f5$var$out = [];
var $b9c64e9a47a086f5$export$e10089729fef29aa = function() {
    function BezierCurveShape() {
        this.x1 = 0;
        this.y1 = 0;
        this.x2 = 0;
        this.y2 = 0;
        this.cpx1 = 0;
        this.cpy1 = 0;
        this.percent = 1;
    }
    return BezierCurveShape;
}();
function $b9c64e9a47a086f5$var$someVectorAt(shape, t, isTangent) {
    var cpx2 = shape.cpx2;
    var cpy2 = shape.cpy2;
    if (cpx2 != null || cpy2 != null) return [
        (isTangent ? (0, $b1facc0bcf653177$export$55fce925c60b6271) : (0, $b1facc0bcf653177$export$547c21de482bbcb2))(shape.x1, shape.cpx1, shape.cpx2, shape.x2, t),
        (isTangent ? (0, $b1facc0bcf653177$export$55fce925c60b6271) : (0, $b1facc0bcf653177$export$547c21de482bbcb2))(shape.y1, shape.cpy1, shape.cpy2, shape.y2, t)
    ];
    else return [
        (isTangent ? (0, $b1facc0bcf653177$export$7e161e77e6fff8cb) : (0, $b1facc0bcf653177$export$af17094a950f5073))(shape.x1, shape.cpx1, shape.x2, t),
        (isTangent ? (0, $b1facc0bcf653177$export$7e161e77e6fff8cb) : (0, $b1facc0bcf653177$export$af17094a950f5073))(shape.y1, shape.cpy1, shape.y2, t)
    ];
}
var $b9c64e9a47a086f5$var$BezierCurve = function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(BezierCurve, _super);
    function BezierCurve(opts) {
        return _super.call(this, opts) || this;
    }
    BezierCurve.prototype.getDefaultStyle = function() {
        return {
            stroke: "#000",
            fill: null
        };
    };
    BezierCurve.prototype.getDefaultShape = function() {
        return new $b9c64e9a47a086f5$export$e10089729fef29aa();
    };
    BezierCurve.prototype.buildPath = function(ctx, shape) {
        var x1 = shape.x1;
        var y1 = shape.y1;
        var x2 = shape.x2;
        var y2 = shape.y2;
        var cpx1 = shape.cpx1;
        var cpy1 = shape.cpy1;
        var cpx2 = shape.cpx2;
        var cpy2 = shape.cpy2;
        var percent = shape.percent;
        if (percent === 0) return;
        ctx.moveTo(x1, y1);
        if (cpx2 == null || cpy2 == null) {
            if (percent < 1) {
                (0, $b1facc0bcf653177$export$117c659e21a7a060)(x1, cpx1, x2, percent, $b9c64e9a47a086f5$var$out);
                cpx1 = $b9c64e9a47a086f5$var$out[1];
                x2 = $b9c64e9a47a086f5$var$out[2];
                (0, $b1facc0bcf653177$export$117c659e21a7a060)(y1, cpy1, y2, percent, $b9c64e9a47a086f5$var$out);
                cpy1 = $b9c64e9a47a086f5$var$out[1];
                y2 = $b9c64e9a47a086f5$var$out[2];
            }
            ctx.quadraticCurveTo(cpx1, cpy1, x2, y2);
        } else {
            if (percent < 1) {
                (0, $b1facc0bcf653177$export$a2ee23a0567039da)(x1, cpx1, cpx2, x2, percent, $b9c64e9a47a086f5$var$out);
                cpx1 = $b9c64e9a47a086f5$var$out[1];
                cpx2 = $b9c64e9a47a086f5$var$out[2];
                x2 = $b9c64e9a47a086f5$var$out[3];
                (0, $b1facc0bcf653177$export$a2ee23a0567039da)(y1, cpy1, cpy2, y2, percent, $b9c64e9a47a086f5$var$out);
                cpy1 = $b9c64e9a47a086f5$var$out[1];
                cpy2 = $b9c64e9a47a086f5$var$out[2];
                y2 = $b9c64e9a47a086f5$var$out[3];
            }
            ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);
        }
    };
    BezierCurve.prototype.pointAt = function(t) {
        return $b9c64e9a47a086f5$var$someVectorAt(this.shape, t, false);
    };
    BezierCurve.prototype.tangentAt = function(t) {
        var p = $b9c64e9a47a086f5$var$someVectorAt(this.shape, t, true);
        return $187eb1bf1a49fd34$export$a3295358bff77e(p, p);
    };
    return BezierCurve;
}((0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039));
$b9c64e9a47a086f5$var$BezierCurve.prototype.type = "bezier-curve";
var $b9c64e9a47a086f5$export$2e2bcd8739ae039 = $b9c64e9a47a086f5$var$BezierCurve;




var $4061a8951878289c$export$a259dbdc51948277 = function() {
    function ArcShape() {
        this.cx = 0;
        this.cy = 0;
        this.r = 0;
        this.startAngle = 0;
        this.endAngle = Math.PI * 2;
        this.clockwise = true;
    }
    return ArcShape;
}();
var $4061a8951878289c$var$Arc = function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(Arc, _super);
    function Arc(opts) {
        return _super.call(this, opts) || this;
    }
    Arc.prototype.getDefaultStyle = function() {
        return {
            stroke: "#000",
            fill: null
        };
    };
    Arc.prototype.getDefaultShape = function() {
        return new $4061a8951878289c$export$a259dbdc51948277();
    };
    Arc.prototype.buildPath = function(ctx, shape) {
        var x = shape.cx;
        var y = shape.cy;
        var r = Math.max(shape.r, 0);
        var startAngle = shape.startAngle;
        var endAngle = shape.endAngle;
        var clockwise = shape.clockwise;
        var unitX = Math.cos(startAngle);
        var unitY = Math.sin(startAngle);
        ctx.moveTo(unitX * r + x, unitY * r + y);
        ctx.arc(x, y, r, startAngle, endAngle, !clockwise);
    };
    return Arc;
}((0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039));
$4061a8951878289c$var$Arc.prototype.type = "arc";
var $4061a8951878289c$export$2e2bcd8739ae039 = $4061a8951878289c$var$Arc;




var $1327858e0c882e8a$var$CompoundPath = function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(CompoundPath, _super);
    function CompoundPath() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "compound";
        return _this;
    }
    CompoundPath.prototype._updatePathDirty = function() {
        var paths = this.shape.paths;
        var dirtyPath = this.shapeChanged();
        for(var i = 0; i < paths.length; i++)dirtyPath = dirtyPath || paths[i].shapeChanged();
        if (dirtyPath) this.dirtyShape();
    };
    CompoundPath.prototype.beforeBrush = function() {
        this._updatePathDirty();
        var paths = this.shape.paths || [];
        var scale = this.getGlobalScale();
        for(var i = 0; i < paths.length; i++){
            if (!paths[i].path) paths[i].createPathProxy();
            paths[i].path.setScale(scale[0], scale[1], paths[i].segmentIgnoreThreshold);
        }
    };
    CompoundPath.prototype.buildPath = function(ctx, shape) {
        var paths = shape.paths || [];
        for(var i = 0; i < paths.length; i++)paths[i].buildPath(ctx, paths[i].shape, true);
    };
    CompoundPath.prototype.afterBrush = function() {
        var paths = this.shape.paths || [];
        for(var i = 0; i < paths.length; i++)paths[i].pathUpdated();
    };
    CompoundPath.prototype.getBoundingRect = function() {
        this._updatePathDirty.call(this);
        return (0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039).prototype.getBoundingRect.call(this);
    };
    return CompoundPath;
}((0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039));
var $1327858e0c882e8a$export$2e2bcd8739ae039 = $1327858e0c882e8a$var$CompoundPath;



var $36ec998ae1bd1e7f$var$Gradient = function() {
    function Gradient(colorStops) {
        this.colorStops = colorStops || [];
    }
    Gradient.prototype.addColorStop = function(offset, color) {
        this.colorStops.push({
            offset: offset,
            color: color
        });
    };
    return Gradient;
}();
var $36ec998ae1bd1e7f$export$2e2bcd8739ae039 = $36ec998ae1bd1e7f$var$Gradient;


var $8d46ddd232d9d12f$var$LinearGradient = function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(LinearGradient, _super);
    function LinearGradient(x, y, x2, y2, colorStops, globalCoord) {
        var _this = _super.call(this, colorStops) || this;
        _this.x = x == null ? 0 : x;
        _this.y = y == null ? 0 : y;
        _this.x2 = x2 == null ? 1 : x2;
        _this.y2 = y2 == null ? 0 : y2;
        _this.type = "linear";
        _this.global = globalCoord || false;
        return _this;
    }
    return LinearGradient;
}((0, $36ec998ae1bd1e7f$export$2e2bcd8739ae039));
var $8d46ddd232d9d12f$export$2e2bcd8739ae039 = $8d46ddd232d9d12f$var$LinearGradient;




var $b34c939dc55d1e35$var$RadialGradient = function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(RadialGradient, _super);
    function RadialGradient(x, y, r, colorStops, globalCoord) {
        var _this = _super.call(this, colorStops) || this;
        _this.x = x == null ? 0.5 : x;
        _this.y = y == null ? 0.5 : y;
        _this.r = r == null ? 0.5 : r;
        _this.type = "radial";
        _this.global = globalCoord || false;
        return _this;
    }
    return RadialGradient;
}((0, $36ec998ae1bd1e7f$export$2e2bcd8739ae039));
var $b34c939dc55d1e35$export$2e2bcd8739ae039 = $b34c939dc55d1e35$var$RadialGradient;




var $7c86064f0296c532$var$extent = [
    0,
    0
];
var $7c86064f0296c532$var$extent2 = [
    0,
    0
];
var $7c86064f0296c532$var$minTv = new (0, $98bf1aab7582d293$export$2e2bcd8739ae039)();
var $7c86064f0296c532$var$maxTv = new (0, $98bf1aab7582d293$export$2e2bcd8739ae039)();
var $7c86064f0296c532$var$OrientedBoundingRect = function() {
    function OrientedBoundingRect(rect, transform) {
        this._corners = [];
        this._axes = [];
        this._origin = [
            0,
            0
        ];
        for(var i = 0; i < 4; i++)this._corners[i] = new (0, $98bf1aab7582d293$export$2e2bcd8739ae039)();
        for(var i = 0; i < 2; i++)this._axes[i] = new (0, $98bf1aab7582d293$export$2e2bcd8739ae039)();
        if (rect) this.fromBoundingRect(rect, transform);
    }
    OrientedBoundingRect.prototype.fromBoundingRect = function(rect, transform) {
        var corners = this._corners;
        var axes = this._axes;
        var x = rect.x;
        var y = rect.y;
        var x2 = x + rect.width;
        var y2 = y + rect.height;
        corners[0].set(x, y);
        corners[1].set(x2, y);
        corners[2].set(x2, y2);
        corners[3].set(x, y2);
        if (transform) for(var i = 0; i < 4; i++)corners[i].transform(transform);
        (0, $98bf1aab7582d293$export$2e2bcd8739ae039).sub(axes[0], corners[1], corners[0]);
        (0, $98bf1aab7582d293$export$2e2bcd8739ae039).sub(axes[1], corners[3], corners[0]);
        axes[0].normalize();
        axes[1].normalize();
        for(var i = 0; i < 2; i++)this._origin[i] = axes[i].dot(corners[0]);
    };
    OrientedBoundingRect.prototype.intersect = function(other, mtv) {
        var overlapped = true;
        var noMtv = !mtv;
        $7c86064f0296c532$var$minTv.set(Infinity, Infinity);
        $7c86064f0296c532$var$maxTv.set(0, 0);
        if (!this._intersectCheckOneSide(this, other, $7c86064f0296c532$var$minTv, $7c86064f0296c532$var$maxTv, noMtv, 1)) {
            overlapped = false;
            if (noMtv) return overlapped;
        }
        if (!this._intersectCheckOneSide(other, this, $7c86064f0296c532$var$minTv, $7c86064f0296c532$var$maxTv, noMtv, -1)) {
            overlapped = false;
            if (noMtv) return overlapped;
        }
        if (!noMtv) (0, $98bf1aab7582d293$export$2e2bcd8739ae039).copy(mtv, overlapped ? $7c86064f0296c532$var$minTv : $7c86064f0296c532$var$maxTv);
        return overlapped;
    };
    OrientedBoundingRect.prototype._intersectCheckOneSide = function(self, other, minTv, maxTv, noMtv, inverse) {
        var overlapped = true;
        for(var i = 0; i < 2; i++){
            var axis = this._axes[i];
            this._getProjMinMaxOnAxis(i, self._corners, $7c86064f0296c532$var$extent);
            this._getProjMinMaxOnAxis(i, other._corners, $7c86064f0296c532$var$extent2);
            if ($7c86064f0296c532$var$extent[1] < $7c86064f0296c532$var$extent2[0] || $7c86064f0296c532$var$extent[0] > $7c86064f0296c532$var$extent2[1]) {
                overlapped = false;
                if (noMtv) return overlapped;
                var dist0 = Math.abs($7c86064f0296c532$var$extent2[0] - $7c86064f0296c532$var$extent[1]);
                var dist1 = Math.abs($7c86064f0296c532$var$extent[0] - $7c86064f0296c532$var$extent2[1]);
                if (Math.min(dist0, dist1) > maxTv.len()) {
                    if (dist0 < dist1) (0, $98bf1aab7582d293$export$2e2bcd8739ae039).scale(maxTv, axis, -dist0 * inverse);
                    else (0, $98bf1aab7582d293$export$2e2bcd8739ae039).scale(maxTv, axis, dist1 * inverse);
                }
            } else if (minTv) {
                var dist0 = Math.abs($7c86064f0296c532$var$extent2[0] - $7c86064f0296c532$var$extent[1]);
                var dist1 = Math.abs($7c86064f0296c532$var$extent[0] - $7c86064f0296c532$var$extent2[1]);
                if (Math.min(dist0, dist1) < minTv.len()) {
                    if (dist0 < dist1) (0, $98bf1aab7582d293$export$2e2bcd8739ae039).scale(minTv, axis, dist0 * inverse);
                    else (0, $98bf1aab7582d293$export$2e2bcd8739ae039).scale(minTv, axis, -dist1 * inverse);
                }
            }
        }
        return overlapped;
    };
    OrientedBoundingRect.prototype._getProjMinMaxOnAxis = function(dim, corners, out) {
        var axis = this._axes[dim];
        var origin = this._origin;
        var proj = corners[0].dot(axis) + origin[dim];
        var min = proj;
        var max = proj;
        for(var i = 1; i < corners.length; i++){
            var proj_1 = corners[i].dot(axis) + origin[dim];
            min = Math.min(proj_1, min);
            max = Math.max(proj_1, max);
        }
        out[0] = min;
        out[1] = max;
    };
    return OrientedBoundingRect;
}();
var $7c86064f0296c532$export$2e2bcd8739ae039 = $7c86064f0296c532$var$OrientedBoundingRect;






var $b60032855e4de32e$var$m = [];
var $b60032855e4de32e$var$IncrementalDisplayable = function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(IncrementalDisplayable, _super);
    function IncrementalDisplayable() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.notClear = true;
        _this.incremental = true;
        _this._displayables = [];
        _this._temporaryDisplayables = [];
        _this._cursor = 0;
        return _this;
    }
    IncrementalDisplayable.prototype.traverse = function(cb, context) {
        cb.call(context, this);
    };
    IncrementalDisplayable.prototype.useStyle = function() {
        this.style = {};
    };
    IncrementalDisplayable.prototype.getCursor = function() {
        return this._cursor;
    };
    IncrementalDisplayable.prototype.innerAfterBrush = function() {
        this._cursor = this._displayables.length;
    };
    IncrementalDisplayable.prototype.clearDisplaybles = function() {
        this._displayables = [];
        this._temporaryDisplayables = [];
        this._cursor = 0;
        this.markRedraw();
        this.notClear = false;
    };
    IncrementalDisplayable.prototype.clearTemporalDisplayables = function() {
        this._temporaryDisplayables = [];
    };
    IncrementalDisplayable.prototype.addDisplayable = function(displayable, notPersistent) {
        if (notPersistent) this._temporaryDisplayables.push(displayable);
        else this._displayables.push(displayable);
        this.markRedraw();
    };
    IncrementalDisplayable.prototype.addDisplayables = function(displayables, notPersistent) {
        notPersistent = notPersistent || false;
        for(var i = 0; i < displayables.length; i++)this.addDisplayable(displayables[i], notPersistent);
    };
    IncrementalDisplayable.prototype.getDisplayables = function() {
        return this._displayables;
    };
    IncrementalDisplayable.prototype.getTemporalDisplayables = function() {
        return this._temporaryDisplayables;
    };
    IncrementalDisplayable.prototype.eachPendingDisplayable = function(cb) {
        for(var i = this._cursor; i < this._displayables.length; i++)cb && cb(this._displayables[i]);
        for(var i = 0; i < this._temporaryDisplayables.length; i++)cb && cb(this._temporaryDisplayables[i]);
    };
    IncrementalDisplayable.prototype.update = function() {
        this.updateTransform();
        for(var i = this._cursor; i < this._displayables.length; i++){
            var displayable = this._displayables[i];
            displayable.parent = this;
            displayable.update();
            displayable.parent = null;
        }
        for(var i = 0; i < this._temporaryDisplayables.length; i++){
            var displayable = this._temporaryDisplayables[i];
            displayable.parent = this;
            displayable.update();
            displayable.parent = null;
        }
    };
    IncrementalDisplayable.prototype.getBoundingRect = function() {
        if (!this._rect) {
            var rect = new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)(Infinity, Infinity, -Infinity, -Infinity);
            for(var i = 0; i < this._displayables.length; i++){
                var displayable = this._displayables[i];
                var childRect = displayable.getBoundingRect().clone();
                if (displayable.needLocalTransform()) childRect.applyTransform(displayable.getLocalTransform($b60032855e4de32e$var$m));
                rect.union(childRect);
            }
            this._rect = rect;
        }
        return this._rect;
    };
    IncrementalDisplayable.prototype.contain = function(x, y) {
        var localPos = this.transformCoordToLocal(x, y);
        var rect = this.getBoundingRect();
        if (rect.contain(localPos[0], localPos[1])) for(var i = 0; i < this._displayables.length; i++){
            var displayable = this._displayables[i];
            if (displayable.contain(x, y)) return true;
        }
        return false;
    };
    return IncrementalDisplayable;
}((0, $42aae97fd255cbd2$export$2e2bcd8739ae039));
var $b60032855e4de32e$export$2e2bcd8739ae039 = $b60032855e4de32e$var$IncrementalDisplayable;





/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

var $f7e735722ff36e8c$export$ae7433df314f6ec3 = (0, $8917c02fd8256c67$export$64df9f8d92ae083f)();
function $f7e735722ff36e8c$export$5cc7add7ab591d0a(animationType, animatableModel, dataIndex, // Extra opts can override the option in animatable model.
extraOpts, // TODO It's only for pictorial bar now.
extraDelayParams) {
    var animationPayload;
    // Check if there is global animation configuration from dataZoom/resize can override the config in option.
    // If animation is enabled. Will use this animation config in payload.
    // If animation is disabled. Just ignore it.
    if (animatableModel && animatableModel.ecModel) {
        var updatePayload = animatableModel.ecModel.getUpdatePayload();
        animationPayload = updatePayload && updatePayload.animation;
    }
    var animationEnabled = animatableModel && animatableModel.isAnimationEnabled();
    var isUpdate = animationType === "update";
    if (animationEnabled) {
        var duration = void 0;
        var easing = void 0;
        var delay = void 0;
        if (extraOpts) {
            duration = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(extraOpts.duration, 200);
            easing = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(extraOpts.easing, "cubicOut");
            delay = 0;
        } else {
            duration = animatableModel.getShallow(isUpdate ? "animationDurationUpdate" : "animationDuration");
            easing = animatableModel.getShallow(isUpdate ? "animationEasingUpdate" : "animationEasing");
            delay = animatableModel.getShallow(isUpdate ? "animationDelayUpdate" : "animationDelay");
        }
        // animation from payload has highest priority.
        if (animationPayload) {
            animationPayload.duration != null && (duration = animationPayload.duration);
            animationPayload.easing != null && (easing = animationPayload.easing);
            animationPayload.delay != null && (delay = animationPayload.delay);
        }
        if ((0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(delay)) delay = delay(dataIndex, extraDelayParams);
        if ((0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(duration)) duration = duration(dataIndex);
        var config = {
            duration: duration || 0,
            delay: delay,
            easing: easing
        };
        return config;
    } else return null;
}
function $f7e735722ff36e8c$var$animateOrSetProps(animationType, el, props, animatableModel, dataIndex, cb, during) {
    var isFrom = false;
    var removeOpt;
    if ((0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(dataIndex)) {
        during = cb;
        cb = dataIndex;
        dataIndex = null;
    } else if ((0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(dataIndex)) {
        cb = dataIndex.cb;
        during = dataIndex.during;
        isFrom = dataIndex.isFrom;
        removeOpt = dataIndex.removeOpt;
        dataIndex = dataIndex.dataIndex;
    }
    var isRemove = animationType === "leave";
    if (!isRemove) // Must stop the remove animation.
    el.stopAnimation("leave");
    var animationConfig = $f7e735722ff36e8c$export$5cc7add7ab591d0a(animationType, animatableModel, dataIndex, isRemove ? removeOpt || {} : null, animatableModel && animatableModel.getAnimationDelayParams ? animatableModel.getAnimationDelayParams(el, dataIndex) : null);
    if (animationConfig && animationConfig.duration > 0) {
        var duration = animationConfig.duration;
        var animationDelay = animationConfig.delay;
        var animationEasing = animationConfig.easing;
        var animateConfig = {
            duration: duration,
            delay: animationDelay || 0,
            easing: animationEasing,
            done: cb,
            force: !!cb || !!during,
            // Set to final state in update/init animation.
            // So the post processing based on the path shape can be done correctly.
            setToFinal: !isRemove,
            scope: animationType,
            during: during
        };
        isFrom ? el.animateFrom(props, animateConfig) : el.animateTo(props, animateConfig);
    } else {
        el.stopAnimation();
        // If `isFrom`, the props is the "from" props.
        !isFrom && el.attr(props);
        // Call during at least once.
        during && during(1);
        cb && cb();
    }
}
/**
 * Update graphic element properties with or without animation according to the
 * configuration in series.
 *
 * Caution: this method will stop previous animation.
 * So do not use this method to one element twice before
 * animation starts, unless you know what you are doing.
 * @example
 *     graphic.updateProps(el, {
 *         position: [100, 100]
 *     }, seriesModel, dataIndex, function () { console.log('Animation done!'); });
 *     // Or
 *     graphic.updateProps(el, {
 *         position: [100, 100]
 *     }, seriesModel, function () { console.log('Animation done!'); });
 */ function $f7e735722ff36e8c$export$c8dce3c08436e91e(el, props, // TODO: TYPE AnimatableModel
animatableModel, dataIndex, cb, during) {
    $f7e735722ff36e8c$var$animateOrSetProps("update", el, props, animatableModel, dataIndex, cb, during);
}
function $f7e735722ff36e8c$export$a121566aadcfe021(el, props, animatableModel, dataIndex, cb, during) {
    $f7e735722ff36e8c$var$animateOrSetProps("enter", el, props, animatableModel, dataIndex, cb, during);
}
function $f7e735722ff36e8c$export$5b89d4b643713034(el) {
    if (!el.__zr) return true;
    for(var i = 0; i < el.animators.length; i++){
        var animator = el.animators[i];
        if (animator.scope === "leave") return true;
    }
    return false;
}
function $f7e735722ff36e8c$export$f883456a56996078(el, props, animatableModel, dataIndex, cb, during) {
    // Don't do remove animation twice.
    if ($f7e735722ff36e8c$export$5b89d4b643713034(el)) return;
    $f7e735722ff36e8c$var$animateOrSetProps("leave", el, props, animatableModel, dataIndex, cb, during);
}
function $f7e735722ff36e8c$var$fadeOutDisplayable(el, animatableModel, dataIndex, done) {
    el.removeTextContent();
    el.removeTextGuideLine();
    $f7e735722ff36e8c$export$f883456a56996078(el, {
        style: {
            opacity: 0
        }
    }, animatableModel, dataIndex, done);
}
function $f7e735722ff36e8c$export$6d0fd725cb4aee8a(el, animatableModel, dataIndex) {
    function doRemove() {
        el.parent && el.parent.remove(el);
    }
    // Hide label and labelLine first
    // TODO Also use fade out animation?
    if (!el.isGroup) $f7e735722ff36e8c$var$fadeOutDisplayable(el, animatableModel, dataIndex, doRemove);
    else el.traverse(function(disp) {
        if (!disp.isGroup) // Can invoke doRemove multiple times.
        $f7e735722ff36e8c$var$fadeOutDisplayable(disp, animatableModel, dataIndex, doRemove);
    });
}
function $f7e735722ff36e8c$export$bca7290a9faf0ec9(el) {
    $f7e735722ff36e8c$export$ae7433df314f6ec3(el).oldStyle = el.style;
}
function $f7e735722ff36e8c$export$ccb1f1e4d2fa86ac(el) {
    return $f7e735722ff36e8c$export$ae7433df314f6ec3(el).oldStyle;
}


var $6aec2e68b45f8796$var$mathMax = Math.max;
var $6aec2e68b45f8796$var$mathMin = Math.min;
var $6aec2e68b45f8796$var$_customShapeMap = {};
function $6aec2e68b45f8796$export$d0d5398c9d612037(opts) {
    return (0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039).extend(opts);
}
var $6aec2e68b45f8796$var$extendPathFromString = $76d97862acecea9f$export$68e3a51ba2ed417c;
function $6aec2e68b45f8796$export$53b54a3137026af0(pathData, opts) {
    return $6aec2e68b45f8796$var$extendPathFromString(pathData, opts);
}
function $6aec2e68b45f8796$export$2b95b62e3aaf6fdd(name, ShapeClass) {
    $6aec2e68b45f8796$var$_customShapeMap[name] = ShapeClass;
}
function $6aec2e68b45f8796$export$51df4b5565a58189(name) {
    if ($6aec2e68b45f8796$var$_customShapeMap.hasOwnProperty(name)) return $6aec2e68b45f8796$var$_customShapeMap[name];
}
function $6aec2e68b45f8796$export$aa9bab72412f5613(pathData, opts, rect, layout) {
    var path = $76d97862acecea9f$export$ae5b259626f00aeb(pathData, opts);
    if (rect) {
        if (layout === "center") rect = $6aec2e68b45f8796$var$centerGraphic(rect, path.getBoundingRect());
        $6aec2e68b45f8796$export$566dbf1c62b04fc7(path, rect);
    }
    return path;
}
function $6aec2e68b45f8796$export$7a2bdede98851ac5(imageUrl, rect, layout) {
    var zrImg = new (0, $7fb187ddd76ee1dc$export$2e2bcd8739ae039)({
        style: {
            image: imageUrl,
            x: rect.x,
            y: rect.y,
            width: rect.width,
            height: rect.height
        },
        onload: function(img) {
            if (layout === "center") {
                var boundingRect = {
                    width: img.width,
                    height: img.height
                };
                zrImg.setStyle($6aec2e68b45f8796$var$centerGraphic(rect, boundingRect));
            }
        }
    });
    return zrImg;
}
/**
 * Get position of centered element in bounding box.
 *
 * @param  rect         element local bounding box
 * @param  boundingRect constraint bounding box
 * @return element position containing x, y, width, and height
 */ function $6aec2e68b45f8796$var$centerGraphic(rect, boundingRect) {
    // Set rect to center, keep width / height ratio.
    var aspect = boundingRect.width / boundingRect.height;
    var width = rect.height * aspect;
    var height;
    if (width <= rect.width) height = rect.height;
    else {
        width = rect.width;
        height = width / aspect;
    }
    var cx = rect.x + rect.width / 2;
    var cy = rect.y + rect.height / 2;
    return {
        x: cx - width / 2,
        y: cy - height / 2,
        width: width,
        height: height
    };
}
var $6aec2e68b45f8796$export$7b1dd269fbc4e903 = $76d97862acecea9f$export$7b1dd269fbc4e903;
function $6aec2e68b45f8796$export$566dbf1c62b04fc7(path, rect) {
    if (!path.applyTransform) return;
    var pathRect = path.getBoundingRect();
    var m = pathRect.calculateTransform(rect);
    path.applyTransform(m);
}
function $6aec2e68b45f8796$export$8b4b620d7f4aad1b(shape, lineWidth) {
    $e6df98dd860ad415$export$8b4b620d7f4aad1b(shape, shape, {
        lineWidth: lineWidth
    });
    return shape;
}
function $6aec2e68b45f8796$export$60e2aa74957d0b9d(param) {
    $e6df98dd860ad415$export$60e2aa74957d0b9d(param.shape, param.shape, param.style);
    return param;
}
var $6aec2e68b45f8796$export$72c4fd4c1b8fcb10 = $e6df98dd860ad415$export$72c4fd4c1b8fcb10;
function $6aec2e68b45f8796$export$fce0c6cfca85ed96(target, ancestor) {
    var mat = $27fca49e20b3ee21$export$f0954fd7d5368655([]);
    while(target && target !== ancestor){
        $27fca49e20b3ee21$export$6e3a27864ab166fe(mat, target.getLocalTransform(), mat);
        target = target.parent;
    }
    return mat;
}
function $6aec2e68b45f8796$export$9f9dcb98c894b623(target, transform, invert) {
    if (transform && !(0, $e44eb14c4271d0f9$export$1e2f57719e155213)(transform)) transform = (0, $039fe2b24eabe4b4$export$2e2bcd8739ae039).getLocalTransform(transform);
    if (invert) transform = $27fca49e20b3ee21$export$6897c284b6f9f4dc([], transform);
    return $187eb1bf1a49fd34$export$9f9dcb98c894b623([], target, transform);
}
function $6aec2e68b45f8796$export$fff94e9792354cfa(direction, transform, invert) {
    // Pick a base, ensure that transform result will not be (0, 0).
    var hBase = transform[4] === 0 || transform[5] === 0 || transform[0] === 0 ? 1 : Math.abs(2 * transform[4] / transform[0]);
    var vBase = transform[4] === 0 || transform[5] === 0 || transform[2] === 0 ? 1 : Math.abs(2 * transform[4] / transform[2]);
    var vertex = [
        direction === "left" ? -hBase : direction === "right" ? hBase : 0,
        direction === "top" ? -vBase : direction === "bottom" ? vBase : 0
    ];
    vertex = $6aec2e68b45f8796$export$9f9dcb98c894b623(vertex, transform, invert);
    return Math.abs(vertex[0]) > Math.abs(vertex[1]) ? vertex[0] > 0 ? "right" : "left" : vertex[1] > 0 ? "bottom" : "top";
}
function $6aec2e68b45f8796$var$isNotGroup(el) {
    return !el.isGroup;
}
function $6aec2e68b45f8796$var$isPath(el) {
    return el.shape != null;
}
function $6aec2e68b45f8796$export$64fcab7860c216ae(g1, g2, animatableModel) {
    if (!g1 || !g2) return;
    function getElMap(g) {
        var elMap = {};
        g.traverse(function(el) {
            if ($6aec2e68b45f8796$var$isNotGroup(el) && el.anid) elMap[el.anid] = el;
        });
        return elMap;
    }
    function getAnimatableProps(el) {
        var obj = {
            x: el.x,
            y: el.y,
            rotation: el.rotation
        };
        if ($6aec2e68b45f8796$var$isPath(el)) obj.shape = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, el.shape);
        return obj;
    }
    var elMap1 = getElMap(g1);
    g2.traverse(function(el) {
        if ($6aec2e68b45f8796$var$isNotGroup(el) && el.anid) {
            var oldEl = elMap1[el.anid];
            if (oldEl) {
                var newProp = getAnimatableProps(el);
                el.attr(getAnimatableProps(oldEl));
                (0, $f7e735722ff36e8c$export$c8dce3c08436e91e)(el, newProp, animatableModel, (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(el).dataIndex);
            }
        }
    });
}
function $6aec2e68b45f8796$export$e2f409471bbbc1dc(points, rect) {
    // FIXME: This way might be incorrect when graphic clipped by a corner
    // and when element has a border.
    return (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(points, function(point) {
        var x = point[0];
        x = $6aec2e68b45f8796$var$mathMax(x, rect.x);
        x = $6aec2e68b45f8796$var$mathMin(x, rect.x + rect.width);
        var y = point[1];
        y = $6aec2e68b45f8796$var$mathMax(y, rect.y);
        y = $6aec2e68b45f8796$var$mathMin(y, rect.y + rect.height);
        return [
            x,
            y
        ];
    });
}
function $6aec2e68b45f8796$export$d0d3709202b8b2a(targetRect, rect) {
    var x = $6aec2e68b45f8796$var$mathMax(targetRect.x, rect.x);
    var x2 = $6aec2e68b45f8796$var$mathMin(targetRect.x + targetRect.width, rect.x + rect.width);
    var y = $6aec2e68b45f8796$var$mathMax(targetRect.y, rect.y);
    var y2 = $6aec2e68b45f8796$var$mathMin(targetRect.y + targetRect.height, rect.y + rect.height);
    // If the total rect is cliped, nothing, including the border,
    // should be painted. So return undefined.
    if (x2 >= x && y2 >= y) return {
        x: x,
        y: y,
        width: x2 - x,
        height: y2 - y
    };
}
function $6aec2e68b45f8796$export$274edc73af1ae9c8(iconStr, // Support 'image://' or 'path://' or direct svg path.
opt, rect) {
    var innerOpts = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({
        rectHover: true
    }, opt);
    var style = innerOpts.style = {
        strokeNoScale: true
    };
    rect = rect || {
        x: -1,
        y: -1,
        width: 2,
        height: 2
    };
    if (iconStr) return iconStr.indexOf("image://") === 0 ? (style.image = iconStr.slice(8), (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)(style, rect), new (0, $7fb187ddd76ee1dc$export$2e2bcd8739ae039)(innerOpts)) : $6aec2e68b45f8796$export$aa9bab72412f5613(iconStr.replace("path://", ""), innerOpts, rect, "center");
}
function $6aec2e68b45f8796$export$4f47c855a5e9ae9(a1x, a1y, a2x, a2y, points) {
    for(var i = 0, p2 = points[points.length - 1]; i < points.length; i++){
        var p = points[i];
        if ($6aec2e68b45f8796$export$6c0a70ea1d8d158b(a1x, a1y, a2x, a2y, p[0], p[1], p2[0], p2[1])) return true;
        p2 = p;
    }
}
function $6aec2e68b45f8796$export$6c0a70ea1d8d158b(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y) {
    // let `vec_m` to be `vec_a2 - vec_a1` and `vec_n` to be `vec_b2 - vec_b1`.
    var mx = a2x - a1x;
    var my = a2y - a1y;
    var nx = b2x - b1x;
    var ny = b2y - b1y;
    // `vec_m` and `vec_n` are parallel iff
    //     existing `k` such that `vec_m = k · vec_n`, equivalent to `vec_m X vec_n = 0`.
    var nmCrossProduct = $6aec2e68b45f8796$var$crossProduct2d(nx, ny, mx, my);
    if ($6aec2e68b45f8796$var$nearZero(nmCrossProduct)) return false;
    // `vec_m` and `vec_n` are intersect iff
    //     existing `p` and `q` in [0, 1] such that `vec_a1 + p * vec_m = vec_b1 + q * vec_n`,
    //     such that `q = ((vec_a1 - vec_b1) X vec_m) / (vec_n X vec_m)`
    //           and `p = ((vec_a1 - vec_b1) X vec_n) / (vec_n X vec_m)`.
    var b1a1x = a1x - b1x;
    var b1a1y = a1y - b1y;
    var q = $6aec2e68b45f8796$var$crossProduct2d(b1a1x, b1a1y, mx, my) / nmCrossProduct;
    if (q < 0 || q > 1) return false;
    var p = $6aec2e68b45f8796$var$crossProduct2d(b1a1x, b1a1y, nx, ny) / nmCrossProduct;
    if (p < 0 || p > 1) return false;
    return true;
}
/**
 * Cross product of 2-dimension vector.
 */ function $6aec2e68b45f8796$var$crossProduct2d(x1, y1, x2, y2) {
    return x1 * y2 - x2 * y1;
}
function $6aec2e68b45f8796$var$nearZero(val) {
    return val <= 1e-6 && val >= -0.000001;
}
function $6aec2e68b45f8796$export$fc6410d97fab306c(opt) {
    var itemTooltipOption = opt.itemTooltipOption;
    var componentModel = opt.componentModel;
    var itemName = opt.itemName;
    var itemTooltipOptionObj = (0, $e44eb14c4271d0f9$export$844ec244b1367d54)(itemTooltipOption) ? {
        formatter: itemTooltipOption
    } : itemTooltipOption;
    var mainType = componentModel.mainType;
    var componentIndex = componentModel.componentIndex;
    var formatterParams = {
        componentType: mainType,
        name: itemName,
        $vars: [
            "name"
        ]
    };
    formatterParams[mainType + "Index"] = componentIndex;
    var formatterParamsExtra = opt.formatterParamsExtra;
    if (formatterParamsExtra) (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)((0, $e44eb14c4271d0f9$export$ed97f33186d4b816)(formatterParamsExtra), function(key) {
        if (!(0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(formatterParams, key)) {
            formatterParams[key] = formatterParamsExtra[key];
            formatterParams.$vars.push(key);
        }
    });
    var ecData = (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(opt.el);
    ecData.componentMainType = mainType;
    ecData.componentIndex = componentIndex;
    ecData.tooltipConfig = {
        name: itemName,
        option: (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)({
            content: itemName,
            formatterParams: formatterParams
        }, itemTooltipOptionObj)
    };
}
function $6aec2e68b45f8796$var$traverseElement(el, cb) {
    var stopped;
    // TODO
    // Polyfill for fixing zrender group traverse don't visit it's root issue.
    if (el.isGroup) stopped = cb(el);
    if (!stopped) el.traverse(cb);
}
function $6aec2e68b45f8796$export$3e564442729bf048(els, cb) {
    if (els) {
        if ((0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(els)) for(var i = 0; i < els.length; i++)$6aec2e68b45f8796$var$traverseElement(els[i], cb);
        else $6aec2e68b45f8796$var$traverseElement(els, cb);
    }
}
// Register built-in shapes. These shapes might be overwritten
// by users, although we do not recommend that.
$6aec2e68b45f8796$export$2b95b62e3aaf6fdd("circle", (0, $4901f8246791b36b$export$2e2bcd8739ae039));
$6aec2e68b45f8796$export$2b95b62e3aaf6fdd("ellipse", (0, $0796b96400f8654b$export$2e2bcd8739ae039));
$6aec2e68b45f8796$export$2b95b62e3aaf6fdd("sector", (0, $55ff835abc77a8e3$export$2e2bcd8739ae039));
$6aec2e68b45f8796$export$2b95b62e3aaf6fdd("ring", (0, $22bfa8ba3daa530f$export$2e2bcd8739ae039));
$6aec2e68b45f8796$export$2b95b62e3aaf6fdd("polygon", (0, $e9532b79bfd5259a$export$2e2bcd8739ae039));
$6aec2e68b45f8796$export$2b95b62e3aaf6fdd("polyline", (0, $8e5cb49aeb92b686$export$2e2bcd8739ae039));
$6aec2e68b45f8796$export$2b95b62e3aaf6fdd("rect", (0, $538026eba361a92a$export$2e2bcd8739ae039));
$6aec2e68b45f8796$export$2b95b62e3aaf6fdd("line", (0, $bb4cc8f9efee5de5$export$2e2bcd8739ae039));
$6aec2e68b45f8796$export$2b95b62e3aaf6fdd("bezierCurve", (0, $b9c64e9a47a086f5$export$2e2bcd8739ae039));
$6aec2e68b45f8796$export$2b95b62e3aaf6fdd("arc", (0, $4061a8951878289c$export$2e2bcd8739ae039));


var $75926670b032879d$var$EMPTY_OBJ = {};
function $75926670b032879d$export$b533918394a58529(label, labelTexts) {
    for(var i = 0; i < (0, $e3c0a36328c28ac4$export$151308dceb52d5b).length; i++){
        var stateName = (0, $e3c0a36328c28ac4$export$151308dceb52d5b)[i];
        var text = labelTexts[stateName];
        var state = label.ensureState(stateName);
        state.style = state.style || {};
        state.style.text = text;
    }
    var oldStates = label.currentStates.slice();
    label.clearStates(true);
    label.setStyle({
        text: labelTexts.normal
    });
    label.useStates(oldStates, true);
}
function $75926670b032879d$var$getLabelText(opt, stateModels, interpolatedValue) {
    var labelFetcher = opt.labelFetcher;
    var labelDataIndex = opt.labelDataIndex;
    var labelDimIndex = opt.labelDimIndex;
    var normalModel = stateModels.normal;
    var baseText;
    if (labelFetcher) baseText = labelFetcher.getFormattedLabel(labelDataIndex, "normal", null, labelDimIndex, normalModel && normalModel.get("formatter"), interpolatedValue != null ? {
        interpolatedValue: interpolatedValue
    } : null);
    if (baseText == null) baseText = (0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(opt.defaultText) ? opt.defaultText(labelDataIndex, opt, interpolatedValue) : opt.defaultText;
    var statesText = {
        normal: baseText
    };
    for(var i = 0; i < (0, $e3c0a36328c28ac4$export$151308dceb52d5b).length; i++){
        var stateName = (0, $e3c0a36328c28ac4$export$151308dceb52d5b)[i];
        var stateModel = stateModels[stateName];
        statesText[stateName] = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(labelFetcher ? labelFetcher.getFormattedLabel(labelDataIndex, stateName, null, labelDimIndex, stateModel && stateModel.get("formatter")) : null, baseText);
    }
    return statesText;
}
function $75926670b032879d$export$9a13992917966657(targetEl, labelStatesModels, opt, stateSpecified) {
    opt = opt || $75926670b032879d$var$EMPTY_OBJ;
    var isSetOnText = targetEl instanceof (0, $6d12d9a137e168c2$export$2e2bcd8739ae039);
    var needsCreateText = false;
    for(var i = 0; i < (0, $e3c0a36328c28ac4$export$57ee5306b85ad7d5).length; i++){
        var stateModel = labelStatesModels[(0, $e3c0a36328c28ac4$export$57ee5306b85ad7d5)[i]];
        if (stateModel && stateModel.getShallow("show")) {
            needsCreateText = true;
            break;
        }
    }
    var textContent = isSetOnText ? targetEl : targetEl.getTextContent();
    if (needsCreateText) {
        if (!isSetOnText) {
            // Reuse the previous
            if (!textContent) {
                textContent = new (0, $6d12d9a137e168c2$export$2e2bcd8739ae039)();
                targetEl.setTextContent(textContent);
            }
            // Use same state proxy
            if (targetEl.stateProxy) textContent.stateProxy = targetEl.stateProxy;
        }
        var labelStatesTexts = $75926670b032879d$var$getLabelText(opt, labelStatesModels);
        var normalModel = labelStatesModels.normal;
        var showNormal = !!normalModel.getShallow("show");
        var normalStyle = $75926670b032879d$export$f8998c3d0a13de59(normalModel, stateSpecified && stateSpecified.normal, opt, false, !isSetOnText);
        normalStyle.text = labelStatesTexts.normal;
        if (!isSetOnText) // Always create new
        targetEl.setTextConfig($75926670b032879d$export$e149afab8df6e053(normalModel, opt, false));
        for(var i = 0; i < (0, $e3c0a36328c28ac4$export$151308dceb52d5b).length; i++){
            var stateName = (0, $e3c0a36328c28ac4$export$151308dceb52d5b)[i];
            var stateModel = labelStatesModels[stateName];
            if (stateModel) {
                var stateObj = textContent.ensureState(stateName);
                var stateShow = !!(0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(stateModel.getShallow("show"), showNormal);
                if (stateShow !== showNormal) stateObj.ignore = !stateShow;
                stateObj.style = $75926670b032879d$export$f8998c3d0a13de59(stateModel, stateSpecified && stateSpecified[stateName], opt, true, !isSetOnText);
                stateObj.style.text = labelStatesTexts[stateName];
                if (!isSetOnText) {
                    var targetElEmphasisState = targetEl.ensureState(stateName);
                    targetElEmphasisState.textConfig = $75926670b032879d$export$e149afab8df6e053(stateModel, opt, true);
                }
            }
        }
        // PENDING: if there is many requirements that emphasis position
        // need to be different from normal position, we might consider
        // auto silent is those cases.
        textContent.silent = !!normalModel.getShallow("silent");
        // Keep x and y
        if (textContent.style.x != null) normalStyle.x = textContent.style.x;
        if (textContent.style.y != null) normalStyle.y = textContent.style.y;
        textContent.ignore = !showNormal;
        // Always create new style.
        textContent.useStyle(normalStyle);
        textContent.dirty();
        if (opt.enableTextSetter) $75926670b032879d$export$f62786d3261ab0f4(textContent).setLabelText = function(interpolatedValue) {
            var labelStatesTexts = $75926670b032879d$var$getLabelText(opt, labelStatesModels, interpolatedValue);
            $75926670b032879d$export$b533918394a58529(textContent, labelStatesTexts);
        };
    } else if (textContent) // Not display rich text.
    textContent.ignore = true;
    targetEl.dirty();
}
function $75926670b032879d$export$9739a32674be5893(itemModel, labelName) {
    labelName = labelName || "label";
    var statesModels = {
        normal: itemModel.getModel(labelName)
    };
    for(var i = 0; i < (0, $e3c0a36328c28ac4$export$151308dceb52d5b).length; i++){
        var stateName = (0, $e3c0a36328c28ac4$export$151308dceb52d5b)[i];
        statesModels[stateName] = itemModel.getModel([
            stateName,
            labelName
        ]);
    }
    return statesModels;
}
function $75926670b032879d$export$f8998c3d0a13de59(textStyleModel, specifiedTextStyle, // Fixed style in the code. Can't be set by model.
opt, isNotNormal, isAttached // If text is attached on an element. If so, auto color will handling in zrender.
) {
    var textStyle = {};
    $75926670b032879d$var$setTextStyleCommon(textStyle, textStyleModel, opt, isNotNormal, isAttached);
    specifiedTextStyle && (0, $e44eb14c4271d0f9$export$8b58be045bf06082)(textStyle, specifiedTextStyle);
    // textStyle.host && textStyle.host.dirty && textStyle.host.dirty(false);
    return textStyle;
}
function $75926670b032879d$export$e149afab8df6e053(textStyleModel, opt, isNotNormal) {
    opt = opt || {};
    var textConfig = {};
    var labelPosition;
    var labelRotate = textStyleModel.getShallow("rotate");
    var labelDistance = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(textStyleModel.getShallow("distance"), isNotNormal ? null : 5);
    var labelOffset = textStyleModel.getShallow("offset");
    labelPosition = textStyleModel.getShallow("position") || (isNotNormal ? null : "inside");
    // 'outside' is not a valid zr textPostion value, but used
    // in bar series, and magric type should be considered.
    labelPosition === "outside" && (labelPosition = opt.defaultOutsidePosition || "top");
    if (labelPosition != null) textConfig.position = labelPosition;
    if (labelOffset != null) textConfig.offset = labelOffset;
    if (labelRotate != null) {
        labelRotate *= Math.PI / 180;
        textConfig.rotation = labelRotate;
    }
    if (labelDistance != null) textConfig.distance = labelDistance;
    // fill and auto is determined by the color of path fill if it's not specified by developers.
    textConfig.outsideFill = textStyleModel.get("color") === "inherit" ? opt.inheritColor || null : "auto";
    return textConfig;
}
/**
 * The uniform entry of set text style, that is, retrieve style definitions
 * from `model` and set to `textStyle` object.
 *
 * Never in merge mode, but in overwrite mode, that is, all of the text style
 * properties will be set. (Consider the states of normal and emphasis and
 * default value can be adopted, merge would make the logic too complicated
 * to manage.)
 */ function $75926670b032879d$var$setTextStyleCommon(textStyle, textStyleModel, opt, isNotNormal, isAttached) {
    // Consider there will be abnormal when merge hover style to normal style if given default value.
    opt = opt || $75926670b032879d$var$EMPTY_OBJ;
    var ecModel = textStyleModel.ecModel;
    var globalTextStyle = ecModel && ecModel.option.textStyle;
    // Consider case:
    // {
    //     data: [{
    //         value: 12,
    //         label: {
    //             rich: {
    //                 // no 'a' here but using parent 'a'.
    //             }
    //         }
    //     }],
    //     rich: {
    //         a: { ... }
    //     }
    // }
    var richItemNames = $75926670b032879d$var$getRichItemNames(textStyleModel);
    var richResult;
    if (richItemNames) {
        richResult = {};
        for(var name_1 in richItemNames)if (richItemNames.hasOwnProperty(name_1)) {
            // Cascade is supported in rich.
            var richTextStyle = textStyleModel.getModel([
                "rich",
                name_1
            ]);
            // In rich, never `disableBox`.
            // FIXME: consider `label: {formatter: '{a|xx}', color: 'blue', rich: {a: {}}}`,
            // the default color `'blue'` will not be adopted if no color declared in `rich`.
            // That might confuses users. So probably we should put `textStyleModel` as the
            // root ancestor of the `richTextStyle`. But that would be a break change.
            $75926670b032879d$var$setTokenTextStyle(richResult[name_1] = {}, richTextStyle, globalTextStyle, opt, isNotNormal, isAttached, false, true);
        }
    }
    if (richResult) textStyle.rich = richResult;
    var overflow = textStyleModel.get("overflow");
    if (overflow) textStyle.overflow = overflow;
    var margin = textStyleModel.get("minMargin");
    if (margin != null) textStyle.margin = margin;
    $75926670b032879d$var$setTokenTextStyle(textStyle, textStyleModel, globalTextStyle, opt, isNotNormal, isAttached, true, false);
}
// Consider case:
// {
//     data: [{
//         value: 12,
//         label: {
//             rich: {
//                 // no 'a' here but using parent 'a'.
//             }
//         }
//     }],
//     rich: {
//         a: { ... }
//     }
// }
// TODO TextStyleModel
function $75926670b032879d$var$getRichItemNames(textStyleModel) {
    // Use object to remove duplicated names.
    var richItemNameMap;
    while(textStyleModel && textStyleModel !== textStyleModel.ecModel){
        var rich = (textStyleModel.option || $75926670b032879d$var$EMPTY_OBJ).rich;
        if (rich) {
            richItemNameMap = richItemNameMap || {};
            var richKeys = (0, $e44eb14c4271d0f9$export$ed97f33186d4b816)(rich);
            for(var i = 0; i < richKeys.length; i++){
                var richKey = richKeys[i];
                richItemNameMap[richKey] = 1;
            }
        }
        textStyleModel = textStyleModel.parentModel;
    }
    return richItemNameMap;
}
var $75926670b032879d$var$TEXT_PROPS_WITH_GLOBAL = [
    "fontStyle",
    "fontWeight",
    "fontSize",
    "fontFamily",
    "textShadowColor",
    "textShadowBlur",
    "textShadowOffsetX",
    "textShadowOffsetY"
];
var $75926670b032879d$var$TEXT_PROPS_SELF = [
    "align",
    "lineHeight",
    "width",
    "height",
    "tag",
    "verticalAlign",
    "ellipsis"
];
var $75926670b032879d$var$TEXT_PROPS_BOX = [
    "padding",
    "borderWidth",
    "borderRadius",
    "borderDashOffset",
    "backgroundColor",
    "borderColor",
    "shadowColor",
    "shadowBlur",
    "shadowOffsetX",
    "shadowOffsetY"
];
function $75926670b032879d$var$setTokenTextStyle(textStyle, textStyleModel, globalTextStyle, opt, isNotNormal, isAttached, isBlock, inRich) {
    // In merge mode, default value should not be given.
    globalTextStyle = !isNotNormal && globalTextStyle || $75926670b032879d$var$EMPTY_OBJ;
    var inheritColor = opt && opt.inheritColor;
    var fillColor = textStyleModel.getShallow("color");
    var strokeColor = textStyleModel.getShallow("textBorderColor");
    var opacity = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(textStyleModel.getShallow("opacity"), globalTextStyle.opacity);
    if (fillColor === "inherit" || fillColor === "auto") {
        if (fillColor === "auto") (0, $4796c55e8b767685$export$bbd91d66002c4ea6)("color: 'auto'", "color: 'inherit'");
        if (inheritColor) fillColor = inheritColor;
        else fillColor = null;
    }
    if (strokeColor === "inherit" || strokeColor === "auto") {
        if (strokeColor === "auto") (0, $4796c55e8b767685$export$bbd91d66002c4ea6)("color: 'auto'", "color: 'inherit'");
        if (inheritColor) strokeColor = inheritColor;
        else strokeColor = null;
    }
    if (!isAttached) {
        // Only use default global textStyle.color if text is individual.
        // Otherwise it will use the strategy of attached text color because text may be on a path.
        fillColor = fillColor || globalTextStyle.color;
        strokeColor = strokeColor || globalTextStyle.textBorderColor;
    }
    if (fillColor != null) textStyle.fill = fillColor;
    if (strokeColor != null) textStyle.stroke = strokeColor;
    var textBorderWidth = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(textStyleModel.getShallow("textBorderWidth"), globalTextStyle.textBorderWidth);
    if (textBorderWidth != null) textStyle.lineWidth = textBorderWidth;
    var textBorderType = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(textStyleModel.getShallow("textBorderType"), globalTextStyle.textBorderType);
    if (textBorderType != null) textStyle.lineDash = textBorderType;
    var textBorderDashOffset = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(textStyleModel.getShallow("textBorderDashOffset"), globalTextStyle.textBorderDashOffset);
    if (textBorderDashOffset != null) textStyle.lineDashOffset = textBorderDashOffset;
    if (!isNotNormal && opacity == null && !inRich) opacity = opt && opt.defaultOpacity;
    if (opacity != null) textStyle.opacity = opacity;
    // TODO
    if (!isNotNormal && !isAttached) // Set default finally.
    {
        if (textStyle.fill == null && opt.inheritColor) textStyle.fill = opt.inheritColor;
    }
    // Do not use `getFont` here, because merge should be supported, where
    // part of these properties may be changed in emphasis style, and the
    // others should remain their original value got from normal style.
    for(var i = 0; i < $75926670b032879d$var$TEXT_PROPS_WITH_GLOBAL.length; i++){
        var key = $75926670b032879d$var$TEXT_PROPS_WITH_GLOBAL[i];
        var val = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(textStyleModel.getShallow(key), globalTextStyle[key]);
        if (val != null) textStyle[key] = val;
    }
    for(var i = 0; i < $75926670b032879d$var$TEXT_PROPS_SELF.length; i++){
        var key = $75926670b032879d$var$TEXT_PROPS_SELF[i];
        var val = textStyleModel.getShallow(key);
        if (val != null) textStyle[key] = val;
    }
    if (textStyle.verticalAlign == null) {
        var baseline = textStyleModel.getShallow("baseline");
        if (baseline != null) textStyle.verticalAlign = baseline;
    }
    if (!isBlock || !opt.disableBox) {
        for(var i = 0; i < $75926670b032879d$var$TEXT_PROPS_BOX.length; i++){
            var key = $75926670b032879d$var$TEXT_PROPS_BOX[i];
            var val = textStyleModel.getShallow(key);
            if (val != null) textStyle[key] = val;
        }
        var borderType = textStyleModel.getShallow("borderType");
        if (borderType != null) textStyle.borderDash = borderType;
        if ((textStyle.backgroundColor === "auto" || textStyle.backgroundColor === "inherit") && inheritColor) {
            if (textStyle.backgroundColor === "auto") (0, $4796c55e8b767685$export$bbd91d66002c4ea6)("backgroundColor: 'auto'", "backgroundColor: 'inherit'");
            textStyle.backgroundColor = inheritColor;
        }
        if ((textStyle.borderColor === "auto" || textStyle.borderColor === "inherit") && inheritColor) {
            if (textStyle.borderColor === "auto") (0, $4796c55e8b767685$export$bbd91d66002c4ea6)("borderColor: 'auto'", "borderColor: 'inherit'");
            textStyle.borderColor = inheritColor;
        }
    }
}
function $75926670b032879d$export$155316a870a9d61e(opt, ecModel) {
    var gTextStyleModel = ecModel && ecModel.getModel("textStyle");
    return (0, $e44eb14c4271d0f9$export$87c2784dc9fc4ab)([
        // FIXME in node-canvas fontWeight is before fontStyle
        opt.fontStyle || gTextStyleModel && gTextStyleModel.getShallow("fontStyle") || "",
        opt.fontWeight || gTextStyleModel && gTextStyleModel.getShallow("fontWeight") || "",
        (opt.fontSize || gTextStyleModel && gTextStyleModel.getShallow("fontSize") || 12) + "px",
        opt.fontFamily || gTextStyleModel && gTextStyleModel.getShallow("fontFamily") || "sans-serif"
    ].join(" "));
}
var $75926670b032879d$export$f62786d3261ab0f4 = (0, $8917c02fd8256c67$export$64df9f8d92ae083f)();
function $75926670b032879d$export$7bdbceaf9ab378f2(label, labelStatesModels, value, getDefaultText) {
    if (!label) return;
    var obj = $75926670b032879d$export$f62786d3261ab0f4(label);
    obj.prevValue = obj.value;
    obj.value = value;
    var normalLabelModel = labelStatesModels.normal;
    obj.valueAnimation = normalLabelModel.get("valueAnimation");
    if (obj.valueAnimation) {
        obj.precision = normalLabelModel.get("precision");
        obj.defaultInterpolatedText = getDefaultText;
        obj.statesModels = labelStatesModels;
    }
}
function $75926670b032879d$export$dd6101605f5c186(textEl, dataIndex, data, animatableModel, labelFetcher) {
    var labelInnerStore = $75926670b032879d$export$f62786d3261ab0f4(textEl);
    if (!labelInnerStore.valueAnimation || labelInnerStore.prevValue === labelInnerStore.value) // Value not changed, no new label animation
    return;
    var defaultInterpolatedText = labelInnerStore.defaultInterpolatedText;
    // Consider the case that being animating, do not use the `obj.value`,
    // Otherwise it will jump to the `obj.value` when this new animation started.
    var currValue = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(labelInnerStore.interpolatedValue, labelInnerStore.prevValue);
    var targetValue = labelInnerStore.value;
    function during(percent) {
        var interpolated = (0, $8917c02fd8256c67$export$bd0439821a1869f3)(data, labelInnerStore.precision, currValue, targetValue, percent);
        labelInnerStore.interpolatedValue = percent === 1 ? null : interpolated;
        var labelText = $75926670b032879d$var$getLabelText({
            labelDataIndex: dataIndex,
            labelFetcher: labelFetcher,
            defaultText: defaultInterpolatedText ? defaultInterpolatedText(interpolated) : interpolated + ""
        }, labelInnerStore.statesModels, interpolated);
        $75926670b032879d$export$b533918394a58529(textEl, labelText);
    }
    textEl.percent = 0;
    (labelInnerStore.prevValue == null ? (0, $f7e735722ff36e8c$export$a121566aadcfe021) : (0, $f7e735722ff36e8c$export$c8dce3c08436e91e))(textEl, {
        // percent is used to prevent animation from being aborted #15916
        percent: 1
    }, animatableModel, dataIndex, null, during);
}



var $448420febe0e962a$var$PATH_COLOR = [
    "textStyle",
    "color"
];
var $448420febe0e962a$var$textStyleParams = [
    "fontStyle",
    "fontWeight",
    "fontSize",
    "fontFamily",
    "padding",
    "lineHeight",
    "rich",
    "width",
    "height",
    "overflow"
];
// TODO Performance improvement?
var $448420febe0e962a$var$tmpText = new (0, $6d12d9a137e168c2$export$2e2bcd8739ae039)();
var $448420febe0e962a$var$TextStyleMixin = /** @class */ function() {
    function TextStyleMixin() {}
    /**
   * Get color property or get color from option.textStyle.color
   */ // TODO Callback
    TextStyleMixin.prototype.getTextColor = function(isEmphasis) {
        var ecModel = this.ecModel;
        return this.getShallow("color") || (!isEmphasis && ecModel ? ecModel.get($448420febe0e962a$var$PATH_COLOR) : null);
    };
    /**
   * Create font string from fontStyle, fontWeight, fontSize, fontFamily
   * @return {string}
   */ TextStyleMixin.prototype.getFont = function() {
        return (0, $75926670b032879d$export$155316a870a9d61e)({
            fontStyle: this.getShallow("fontStyle"),
            fontWeight: this.getShallow("fontWeight"),
            fontSize: this.getShallow("fontSize"),
            fontFamily: this.getShallow("fontFamily")
        }, this.ecModel);
    };
    TextStyleMixin.prototype.getTextRect = function(text) {
        var style = {
            text: text,
            verticalAlign: this.getShallow("verticalAlign") || this.getShallow("baseline")
        };
        for(var i = 0; i < $448420febe0e962a$var$textStyleParams.length; i++)style[$448420febe0e962a$var$textStyleParams[i]] = this.getShallow($448420febe0e962a$var$textStyleParams[i]);
        $448420febe0e962a$var$tmpText.useStyle(style);
        $448420febe0e962a$var$tmpText.update();
        return $448420febe0e962a$var$tmpText.getBoundingRect();
    };
    return TextStyleMixin;
}();
var $448420febe0e962a$export$2e2bcd8739ae039 = $448420febe0e962a$var$TextStyleMixin;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
var $8468e72b6ca981af$export$9f34de5b59222949 = [
    [
        "lineWidth",
        "width"
    ],
    [
        "stroke",
        "color"
    ],
    [
        "opacity"
    ],
    [
        "shadowBlur"
    ],
    [
        "shadowOffsetX"
    ],
    [
        "shadowOffsetY"
    ],
    [
        "shadowColor"
    ],
    [
        "lineDash",
        "type"
    ],
    [
        "lineDashOffset",
        "dashOffset"
    ],
    [
        "lineCap",
        "cap"
    ],
    [
        "lineJoin",
        "join"
    ],
    [
        "miterLimit"
    ]
];
var $8468e72b6ca981af$var$getLineStyle = (0, $d16f2547da76dd85$export$2e2bcd8739ae039)($8468e72b6ca981af$export$9f34de5b59222949);
var $8468e72b6ca981af$export$91eeeeed4a69a7e7 = /** @class */ function() {
    function LineStyleMixin() {}
    LineStyleMixin.prototype.getLineStyle = function(excludes) {
        return $8468e72b6ca981af$var$getLineStyle(this, excludes);
    };
    return LineStyleMixin;
}();


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
var $2aab59e6e59c4af1$export$ffb0bba5dde0130b = [
    [
        "fill",
        "color"
    ],
    [
        "stroke",
        "borderColor"
    ],
    [
        "lineWidth",
        "borderWidth"
    ],
    [
        "opacity"
    ],
    [
        "shadowBlur"
    ],
    [
        "shadowOffsetX"
    ],
    [
        "shadowOffsetY"
    ],
    [
        "shadowColor"
    ],
    [
        "lineDash",
        "borderType"
    ],
    [
        "lineDashOffset",
        "borderDashOffset"
    ],
    [
        "lineCap",
        "borderCap"
    ],
    [
        "lineJoin",
        "borderJoin"
    ],
    [
        "miterLimit",
        "borderMiterLimit"
    ]
];
var $2aab59e6e59c4af1$var$getItemStyle = (0, $d16f2547da76dd85$export$2e2bcd8739ae039)($2aab59e6e59c4af1$export$ffb0bba5dde0130b);
var $2aab59e6e59c4af1$export$e4f01e48d6fda412 = /** @class */ function() {
    function ItemStyleMixin() {}
    ItemStyleMixin.prototype.getItemStyle = function(excludes, includes) {
        return $2aab59e6e59c4af1$var$getItemStyle(this, excludes, includes);
    };
    return ItemStyleMixin;
}();



var $d92ec0eb853c4005$var$Model = /** @class */ function() {
    function Model(option, parentModel, ecModel) {
        this.parentModel = parentModel;
        this.ecModel = ecModel;
        this.option = option;
    // Simple optimization
    // if (this.init) {
    //     if (arguments.length <= 4) {
    //         this.init(option, parentModel, ecModel, extraOpt);
    //     }
    //     else {
    //         this.init.apply(this, arguments);
    //     }
    // }
    }
    Model.prototype.init = function(option, parentModel, ecModel) {
        var rest = [];
        for(var _i = 3; _i < arguments.length; _i++)rest[_i - 3] = arguments[_i];
    };
    /**
   * Merge the input option to me.
   */ Model.prototype.mergeOption = function(option, ecModel) {
        (0, $e44eb14c4271d0f9$export$4950aa0f605343fb)(this.option, option, true);
    };
    // `path` can be 'a.b.c', so the return value type have to be `ModelOption`
    // TODO: TYPE strict key check?
    // get(path: string | string[], ignoreParent?: boolean): ModelOption;
    Model.prototype.get = function(path, ignoreParent) {
        if (path == null) return this.option;
        return this._doGet(this.parsePath(path), !ignoreParent && this.parentModel);
    };
    Model.prototype.getShallow = function(key, ignoreParent) {
        var option = this.option;
        var val = option == null ? option : option[key];
        if (val == null && !ignoreParent) {
            var parentModel = this.parentModel;
            if (parentModel) // FIXME:TS do not know how to make it works
            val = parentModel.getShallow(key);
        }
        return val;
    };
    // `path` can be 'a.b.c', so the return value type have to be `Model<ModelOption>`
    // getModel(path: string | string[], parentModel?: Model): Model;
    // TODO 'a.b.c' is deprecated
    Model.prototype.getModel = function(path, parentModel) {
        var hasPath = path != null;
        var pathFinal = hasPath ? this.parsePath(path) : null;
        var obj = hasPath ? this._doGet(pathFinal) : this.option;
        parentModel = parentModel || this.parentModel && this.parentModel.getModel(this.resolveParentPath(pathFinal));
        return new Model(obj, parentModel, this.ecModel);
    };
    /**
   * If model has option
   */ Model.prototype.isEmpty = function() {
        return this.option == null;
    };
    Model.prototype.restoreData = function() {};
    // Pending
    Model.prototype.clone = function() {
        var Ctor = this.constructor;
        return new Ctor((0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(this.option));
    };
    // setReadOnly(properties): void {
    // clazzUtil.setReadOnly(this, properties);
    // }
    // If path is null/undefined, return null/undefined.
    Model.prototype.parsePath = function(path) {
        if (typeof path === "string") return path.split(".");
        return path;
    };
    // Resolve path for parent. Perhaps useful when parent use a different property.
    // Default to be a identity resolver.
    // Can be modified to a different resolver.
    Model.prototype.resolveParentPath = function(path) {
        return path;
    };
    // FIXME:TS check whether put this method here
    Model.prototype.isAnimationEnabled = function() {
        if (!(0, $de9e931273a116c1$export$2e2bcd8739ae039).node && this.option) {
            if (this.option.animation != null) return !!this.option.animation;
            else if (this.parentModel) return this.parentModel.isAnimationEnabled();
        }
    };
    Model.prototype._doGet = function(pathArr, parentModel) {
        var obj = this.option;
        if (!pathArr) return obj;
        for(var i = 0; i < pathArr.length; i++){
            // Ignore empty
            if (!pathArr[i]) continue;
            // obj could be number/string/... (like 0)
            obj = obj && typeof obj === "object" ? obj[pathArr[i]] : null;
            if (obj == null) break;
        }
        if (obj == null && parentModel) obj = parentModel._doGet(this.resolveParentPath(pathArr), parentModel.parentModel);
        return obj;
    };
    return Model;
}();
// Enable Model.extend.
(0, $0a7732deba457ada$export$cd4c3a4dca301c70)($d92ec0eb853c4005$var$Model);
(0, $0a7732deba457ada$export$e1aac4552ae82081)($d92ec0eb853c4005$var$Model);
(0, $e44eb14c4271d0f9$export$e36fc9d62a853069)($d92ec0eb853c4005$var$Model, (0, $8468e72b6ca981af$export$91eeeeed4a69a7e7));
(0, $e44eb14c4271d0f9$export$e36fc9d62a853069)($d92ec0eb853c4005$var$Model, (0, $2aab59e6e59c4af1$export$e4f01e48d6fda412));
(0, $e44eb14c4271d0f9$export$e36fc9d62a853069)($d92ec0eb853c4005$var$Model, (0, $ee097da8601b6de9$export$a3a0ed7e2dd84c9e));
(0, $e44eb14c4271d0f9$export$e36fc9d62a853069)($d92ec0eb853c4005$var$Model, (0, $448420febe0e962a$export$2e2bcd8739ae039));
var $d92ec0eb853c4005$export$2e2bcd8739ae039 = $d92ec0eb853c4005$var$Model;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 


// A random offset
var $5e939fc0112f61e7$var$base = Math.round(Math.random() * 10);
function $5e939fc0112f61e7$export$6d2b3473b0986646(type) {
    // Considering the case of crossing js context,
    // use Math.random to make id as unique as possible.
    return [
        type || "",
        $5e939fc0112f61e7$var$base++
    ].join("_");
}
function $5e939fc0112f61e7$export$b9faf30b7d655a6f(target) {
    var subTypeDefaulters = {};
    target.registerSubTypeDefaulter = function(componentType, defaulter) {
        var componentTypeInfo = (0, $0a7732deba457ada$export$fbe18865d303bf01)(componentType);
        subTypeDefaulters[componentTypeInfo.main] = defaulter;
    };
    target.determineSubType = function(componentType, option) {
        var type = option.type;
        if (!type) {
            var componentTypeMain = (0, $0a7732deba457ada$export$fbe18865d303bf01)(componentType).main;
            if (target.hasSubTypes(componentType) && subTypeDefaulters[componentTypeMain]) type = subTypeDefaulters[componentTypeMain](option);
        }
        return type;
    };
}
function $5e939fc0112f61e7$export$ce592d345a3ec040(entity, dependencyGetter) {
    /**
   * @param targetNameList Target Component type list.
   *                       Can be ['aa', 'bb', 'aa.xx']
   * @param fullNameList By which we can build dependency graph.
   * @param callback Params: componentType, dependencies.
   * @param context Scope of callback.
   */ entity.topologicalTravel = function(targetNameList, fullNameList, callback, context) {
        if (!targetNameList.length) return;
        var result = makeDepndencyGraph(fullNameList);
        var graph = result.graph;
        var noEntryList = result.noEntryList;
        var targetNameSet = {};
        $e44eb14c4271d0f9$export$79b2f7037acddd43(targetNameList, function(name) {
            targetNameSet[name] = true;
        });
        while(noEntryList.length){
            var currComponentType = noEntryList.pop();
            var currVertex = graph[currComponentType];
            var isInTargetNameSet = !!targetNameSet[currComponentType];
            if (isInTargetNameSet) {
                callback.call(context, currComponentType, currVertex.originalDeps.slice());
                delete targetNameSet[currComponentType];
            }
            $e44eb14c4271d0f9$export$79b2f7037acddd43(currVertex.successor, isInTargetNameSet ? removeEdgeAndAdd : removeEdge);
        }
        $e44eb14c4271d0f9$export$79b2f7037acddd43(targetNameSet, function() {
            var errMsg = "";
            errMsg = (0, $4796c55e8b767685$export$a68bb8b222a6bd43)("Circular dependency may exists: ", targetNameSet, targetNameList, fullNameList);
            throw new Error(errMsg);
        });
        function removeEdge(succComponentType) {
            graph[succComponentType].entryCount--;
            if (graph[succComponentType].entryCount === 0) noEntryList.push(succComponentType);
        }
        // Consider this case: legend depends on series, and we call
        // chart.setOption({series: [...]}), where only series is in option.
        // If we do not have 'removeEdgeAndAdd', legendModel.mergeOption will
        // not be called, but only sereis.mergeOption is called. Thus legend
        // have no chance to update its local record about series (like which
        // name of series is available in legend).
        function removeEdgeAndAdd(succComponentType) {
            targetNameSet[succComponentType] = true;
            removeEdge(succComponentType);
        }
    };
    function makeDepndencyGraph(fullNameList) {
        var graph = {};
        var noEntryList = [];
        $e44eb14c4271d0f9$export$79b2f7037acddd43(fullNameList, function(name) {
            var thisItem = createDependencyGraphItem(graph, name);
            var originalDeps = thisItem.originalDeps = dependencyGetter(name);
            var availableDeps = getAvailableDependencies(originalDeps, fullNameList);
            thisItem.entryCount = availableDeps.length;
            if (thisItem.entryCount === 0) noEntryList.push(name);
            $e44eb14c4271d0f9$export$79b2f7037acddd43(availableDeps, function(dependentName) {
                if ($e44eb14c4271d0f9$export$305f7d4e9d4624f2(thisItem.predecessor, dependentName) < 0) thisItem.predecessor.push(dependentName);
                var thatItem = createDependencyGraphItem(graph, dependentName);
                if ($e44eb14c4271d0f9$export$305f7d4e9d4624f2(thatItem.successor, dependentName) < 0) thatItem.successor.push(name);
            });
        });
        return {
            graph: graph,
            noEntryList: noEntryList
        };
    }
    function createDependencyGraphItem(graph, name) {
        if (!graph[name]) graph[name] = {
            predecessor: [],
            successor: []
        };
        return graph[name];
    }
    function getAvailableDependencies(originalDeps, fullNameList) {
        var availableDeps = [];
        $e44eb14c4271d0f9$export$79b2f7037acddd43(originalDeps, function(dep) {
            $e44eb14c4271d0f9$export$305f7d4e9d4624f2(fullNameList, dep) >= 0 && availableDeps.push(dep);
        });
        return availableDeps;
    }
}
function $5e939fc0112f61e7$export$68acc510e46fef2(superOption, subOption) {
    // See also `model/Component.ts#getDefaultOption`
    return $e44eb14c4271d0f9$export$4950aa0f605343fb($e44eb14c4271d0f9$export$4950aa0f605343fb({}, superOption, true), subOption, true);
}




/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ // Layout helpers for each component positioning



/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */ /**
 * Language: English.
 */ var $96ca3a07337cfdcb$export$2e2bcd8739ae039 = {
    time: {
        month: [
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December"
        ],
        monthAbbr: [
            "Jan",
            "Feb",
            "Mar",
            "Apr",
            "May",
            "Jun",
            "Jul",
            "Aug",
            "Sep",
            "Oct",
            "Nov",
            "Dec"
        ],
        dayOfWeek: [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday"
        ],
        dayOfWeekAbbr: [
            "Sun",
            "Mon",
            "Tue",
            "Wed",
            "Thu",
            "Fri",
            "Sat"
        ]
    },
    legend: {
        selector: {
            all: "All",
            inverse: "Inv"
        }
    },
    toolbox: {
        brush: {
            title: {
                rect: "Box Select",
                polygon: "Lasso Select",
                lineX: "Horizontally Select",
                lineY: "Vertically Select",
                keep: "Keep Selections",
                clear: "Clear Selections"
            }
        },
        dataView: {
            title: "Data View",
            lang: [
                "Data View",
                "Close",
                "Refresh"
            ]
        },
        dataZoom: {
            title: {
                zoom: "Zoom",
                back: "Zoom Reset"
            }
        },
        magicType: {
            title: {
                line: "Switch to Line Chart",
                bar: "Switch to Bar Chart",
                stack: "Stack",
                tiled: "Tile"
            }
        },
        restore: {
            title: "Restore"
        },
        saveAsImage: {
            title: "Save as Image",
            lang: [
                "Right Click to Save Image"
            ]
        }
    },
    series: {
        typeNames: {
            pie: "Pie chart",
            bar: "Bar chart",
            line: "Line chart",
            scatter: "Scatter plot",
            effectScatter: "Ripple scatter plot",
            radar: "Radar chart",
            tree: "Tree",
            treemap: "Treemap",
            boxplot: "Boxplot",
            candlestick: "Candlestick",
            k: "K line chart",
            heatmap: "Heat map",
            map: "Map",
            parallel: "Parallel coordinate map",
            lines: "Line graph",
            graph: "Relationship graph",
            sankey: "Sankey diagram",
            funnel: "Funnel chart",
            gauge: "Gauge",
            pictorialBar: "Pictorial bar",
            themeRiver: "Theme River Map",
            sunburst: "Sunburst",
            custom: "Custom chart",
            chart: "Chart"
        }
    },
    aria: {
        general: {
            withTitle: 'This is a chart about "{title}"',
            withoutTitle: "This is a chart"
        },
        series: {
            single: {
                prefix: "",
                withName: " with type {seriesType} named {seriesName}.",
                withoutName: " with type {seriesType}."
            },
            multiple: {
                prefix: ". It consists of {seriesCount} series count.",
                withName: " The {seriesId} series is a {seriesType} representing {seriesName}.",
                withoutName: " The {seriesId} series is a {seriesType}.",
                separator: {
                    middle: "",
                    end: ""
                }
            }
        },
        data: {
            allData: "The data is as follows: ",
            partialData: "The first {displayCnt} items are: ",
            withName: "the data for {name} is {value}",
            withoutName: "{value}",
            separator: {
                middle: ", ",
                end: ". "
            }
        }
    }
};


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */ var $171bd2e724fec652$export$2e2bcd8739ae039 = {
    time: {
        month: [
            "\u4E00\u6708",
            "\u4E8C\u6708",
            "\u4E09\u6708",
            "\u56DB\u6708",
            "\u4E94\u6708",
            "\u516D\u6708",
            "\u4E03\u6708",
            "\u516B\u6708",
            "\u4E5D\u6708",
            "\u5341\u6708",
            "\u5341\u4E00\u6708",
            "\u5341\u4E8C\u6708"
        ],
        monthAbbr: [
            "1\u6708",
            "2\u6708",
            "3\u6708",
            "4\u6708",
            "5\u6708",
            "6\u6708",
            "7\u6708",
            "8\u6708",
            "9\u6708",
            "10\u6708",
            "11\u6708",
            "12\u6708"
        ],
        dayOfWeek: [
            "\u661F\u671F\u65E5",
            "\u661F\u671F\u4E00",
            "\u661F\u671F\u4E8C",
            "\u661F\u671F\u4E09",
            "\u661F\u671F\u56DB",
            "\u661F\u671F\u4E94",
            "\u661F\u671F\u516D"
        ],
        dayOfWeekAbbr: [
            "\u65E5",
            "\u4E00",
            "\u4E8C",
            "\u4E09",
            "\u56DB",
            "\u4E94",
            "\u516D"
        ]
    },
    legend: {
        selector: {
            all: "\u5168\u9009",
            inverse: "\u53CD\u9009"
        }
    },
    toolbox: {
        brush: {
            title: {
                rect: "\u77E9\u5F62\u9009\u62E9",
                polygon: "\u5708\u9009",
                lineX: "\u6A2A\u5411\u9009\u62E9",
                lineY: "\u7EB5\u5411\u9009\u62E9",
                keep: "\u4FDD\u6301\u9009\u62E9",
                clear: "\u6E05\u9664\u9009\u62E9"
            }
        },
        dataView: {
            title: "\u6570\u636E\u89C6\u56FE",
            lang: [
                "\u6570\u636E\u89C6\u56FE",
                "\u5173\u95ED",
                "\u5237\u65B0"
            ]
        },
        dataZoom: {
            title: {
                zoom: "\u533A\u57DF\u7F29\u653E",
                back: "\u533A\u57DF\u7F29\u653E\u8FD8\u539F"
            }
        },
        magicType: {
            title: {
                line: "\u5207\u6362\u4E3A\u6298\u7EBF\u56FE",
                bar: "\u5207\u6362\u4E3A\u67F1\u72B6\u56FE",
                stack: "\u5207\u6362\u4E3A\u5806\u53E0",
                tiled: "\u5207\u6362\u4E3A\u5E73\u94FA"
            }
        },
        restore: {
            title: "\u8FD8\u539F"
        },
        saveAsImage: {
            title: "\u4FDD\u5B58\u4E3A\u56FE\u7247",
            lang: [
                "\u53F3\u952E\u53E6\u5B58\u4E3A\u56FE\u7247"
            ]
        }
    },
    series: {
        typeNames: {
            pie: "\u997C\u56FE",
            bar: "\u67F1\u72B6\u56FE",
            line: "\u6298\u7EBF\u56FE",
            scatter: "\u6563\u70B9\u56FE",
            effectScatter: "\u6D9F\u6F2A\u6563\u70B9\u56FE",
            radar: "\u96F7\u8FBE\u56FE",
            tree: "\u6811\u56FE",
            treemap: "\u77E9\u5F62\u6811\u56FE",
            boxplot: "\u7BB1\u578B\u56FE",
            candlestick: "K\u7EBF\u56FE",
            k: "K\u7EBF\u56FE",
            heatmap: "\u70ED\u529B\u56FE",
            map: "\u5730\u56FE",
            parallel: "\u5E73\u884C\u5750\u6807\u56FE",
            lines: "\u7EBF\u56FE",
            graph: "\u5173\u7CFB\u56FE",
            sankey: "\u6851\u57FA\u56FE",
            funnel: "\u6F0F\u6597\u56FE",
            gauge: "\u4EEA\u8868\u76D8\u56FE",
            pictorialBar: "\u8C61\u5F62\u67F1\u56FE",
            themeRiver: "\u4E3B\u9898\u6CB3\u6D41\u56FE",
            sunburst: "\u65ED\u65E5\u56FE",
            custom: "\u81EA\u5B9A\u4E49\u56FE\u8868",
            chart: "\u56FE\u8868"
        }
    },
    aria: {
        general: {
            withTitle: "\u8FD9\u662F\u4E00\u4E2A\u5173\u4E8E\u201C{title}\u201D\u7684\u56FE\u8868\u3002",
            withoutTitle: "\u8FD9\u662F\u4E00\u4E2A\u56FE\u8868\uFF0C"
        },
        series: {
            single: {
                prefix: "",
                withName: "\u56FE\u8868\u7C7B\u578B\u662F{seriesType}\uFF0C\u8868\u793A{seriesName}\u3002",
                withoutName: "\u56FE\u8868\u7C7B\u578B\u662F{seriesType}\u3002"
            },
            multiple: {
                prefix: "\u5B83\u7531{seriesCount}\u4E2A\u56FE\u8868\u7CFB\u5217\u7EC4\u6210\u3002",
                withName: "\u7B2C{seriesId}\u4E2A\u7CFB\u5217\u662F\u4E00\u4E2A\u8868\u793A{seriesName}\u7684{seriesType}\uFF0C",
                withoutName: "\u7B2C{seriesId}\u4E2A\u7CFB\u5217\u662F\u4E00\u4E2A{seriesType}\uFF0C",
                separator: {
                    middle: "\uFF1B",
                    end: "\u3002"
                }
            }
        },
        data: {
            allData: "\u5176\u6570\u636E\u662F\u2014\u2014",
            partialData: "\u5176\u4E2D\uFF0C\u524D{displayCnt}\u9879\u662F\u2014\u2014",
            withName: "{name}\u7684\u6570\u636E\u662F{value}",
            withoutName: "{value}",
            separator: {
                middle: "\uFF0C",
                end: ""
            }
        }
    }
};



var $f959f4cd6380d6eb$var$LOCALE_ZH = "ZH";
var $f959f4cd6380d6eb$var$LOCALE_EN = "EN";
var $f959f4cd6380d6eb$var$DEFAULT_LOCALE = $f959f4cd6380d6eb$var$LOCALE_EN;
var $f959f4cd6380d6eb$var$localeStorage = {};
var $f959f4cd6380d6eb$var$localeModels = {};
var $f959f4cd6380d6eb$export$9a2147b3808d4c6b = !(0, $de9e931273a116c1$export$2e2bcd8739ae039).domSupported ? $f959f4cd6380d6eb$var$DEFAULT_LOCALE : function() {
    var langStr = /* eslint-disable-next-line */ (document.documentElement.lang || navigator.language || navigator.browserLanguage || $f959f4cd6380d6eb$var$DEFAULT_LOCALE).toUpperCase();
    return langStr.indexOf($f959f4cd6380d6eb$var$LOCALE_ZH) > -1 ? $f959f4cd6380d6eb$var$LOCALE_ZH : $f959f4cd6380d6eb$var$DEFAULT_LOCALE;
}();
function $f959f4cd6380d6eb$export$bab6a7822cc1e2cd(locale, localeObj) {
    locale = locale.toUpperCase();
    $f959f4cd6380d6eb$var$localeModels[locale] = new (0, $d92ec0eb853c4005$export$2e2bcd8739ae039)(localeObj);
    $f959f4cd6380d6eb$var$localeStorage[locale] = localeObj;
}
function $f959f4cd6380d6eb$export$ddc371781a6af754(locale) {
    if ((0, $e44eb14c4271d0f9$export$844ec244b1367d54)(locale)) {
        var localeObj = $f959f4cd6380d6eb$var$localeStorage[locale.toUpperCase()] || {};
        if (locale === $f959f4cd6380d6eb$var$LOCALE_ZH || locale === $f959f4cd6380d6eb$var$LOCALE_EN) return (0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(localeObj);
        else return (0, $e44eb14c4271d0f9$export$4950aa0f605343fb)((0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(localeObj), (0, $e44eb14c4271d0f9$export$9cd59f9826255e47)($f959f4cd6380d6eb$var$localeStorage[$f959f4cd6380d6eb$var$DEFAULT_LOCALE]), false);
    } else return (0, $e44eb14c4271d0f9$export$4950aa0f605343fb)((0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(locale), (0, $e44eb14c4271d0f9$export$9cd59f9826255e47)($f959f4cd6380d6eb$var$localeStorage[$f959f4cd6380d6eb$var$DEFAULT_LOCALE]), false);
}
function $f959f4cd6380d6eb$export$37cc638e0e11865f(lang) {
    return $f959f4cd6380d6eb$var$localeModels[lang];
}
function $f959f4cd6380d6eb$export$1188f179b2597821() {
    return $f959f4cd6380d6eb$var$localeModels[$f959f4cd6380d6eb$var$DEFAULT_LOCALE];
}
// Default locale
$f959f4cd6380d6eb$export$bab6a7822cc1e2cd($f959f4cd6380d6eb$var$LOCALE_EN, (0, $96ca3a07337cfdcb$export$2e2bcd8739ae039));
$f959f4cd6380d6eb$export$bab6a7822cc1e2cd($f959f4cd6380d6eb$var$LOCALE_ZH, (0, $171bd2e724fec652$export$2e2bcd8739ae039));



var $c5a9021cf573c334$export$32c0454ceff7f92d = 1000;
var $c5a9021cf573c334$export$35acaebf644db34e = $c5a9021cf573c334$export$32c0454ceff7f92d * 60;
var $c5a9021cf573c334$export$82541edf19e5e3b0 = $c5a9021cf573c334$export$35acaebf644db34e * 60;
var $c5a9021cf573c334$export$a97a1358cbb650ab = $c5a9021cf573c334$export$82541edf19e5e3b0 * 24;
var $c5a9021cf573c334$export$99cafda57477293d = $c5a9021cf573c334$export$a97a1358cbb650ab * 365;
var $c5a9021cf573c334$export$f7854271ddbda64e = {
    year: "{yyyy}",
    month: "{MMM}",
    day: "{d}",
    hour: "{HH}:{mm}",
    minute: "{HH}:{mm}",
    second: "{HH}:{mm}:{ss}",
    millisecond: "{HH}:{mm}:{ss} {SSS}",
    none: "{yyyy}-{MM}-{dd} {HH}:{mm}:{ss} {SSS}"
};
var $c5a9021cf573c334$var$fullDayFormatter = "{yyyy}-{MM}-{dd}";
var $c5a9021cf573c334$export$445bdbd8d2334e40 = {
    year: "{yyyy}",
    month: "{yyyy}-{MM}",
    day: $c5a9021cf573c334$var$fullDayFormatter,
    hour: $c5a9021cf573c334$var$fullDayFormatter + " " + $c5a9021cf573c334$export$f7854271ddbda64e.hour,
    minute: $c5a9021cf573c334$var$fullDayFormatter + " " + $c5a9021cf573c334$export$f7854271ddbda64e.minute,
    second: $c5a9021cf573c334$var$fullDayFormatter + " " + $c5a9021cf573c334$export$f7854271ddbda64e.second,
    millisecond: $c5a9021cf573c334$export$f7854271ddbda64e.none
};
var $c5a9021cf573c334$export$87100da04d711986 = [
    "year",
    "month",
    "day",
    "hour",
    "minute",
    "second",
    "millisecond"
];
var $c5a9021cf573c334$export$833c398a55654bb7 = [
    "year",
    "half-year",
    "quarter",
    "month",
    "week",
    "half-week",
    "day",
    "half-day",
    "quarter-day",
    "hour",
    "minute",
    "second",
    "millisecond"
];
function $c5a9021cf573c334$export$5d04458e2a6c373e(str, len) {
    str += "";
    return "0000".substr(0, len - str.length) + str;
}
function $c5a9021cf573c334$export$1da4b91a25d7e1c8(timeUnit) {
    switch(timeUnit){
        case "half-year":
        case "quarter":
            return "month";
        case "week":
        case "half-week":
            return "day";
        case "half-day":
        case "quarter-day":
            return "hour";
        default:
            // year, minutes, second, milliseconds
            return timeUnit;
    }
}
function $c5a9021cf573c334$export$beb5920b69c13da(timeUnit) {
    return timeUnit === $c5a9021cf573c334$export$1da4b91a25d7e1c8(timeUnit);
}
function $c5a9021cf573c334$export$124c820721c4f66b(timeUnit) {
    switch(timeUnit){
        case "year":
        case "month":
            return "day";
        case "millisecond":
            return "millisecond";
        default:
            // Also for day, hour, minute, second
            return "second";
    }
}
function $c5a9021cf573c334$export$d9468344d3651243(// Note: The result based on `isUTC` are totally different, which can not be just simply
// substituted by the result without `isUTC`. So we make the param `isUTC` mandatory.
time, template, isUTC, lang) {
    var date = $13e6a1a716300dd4$export$6b862160d295c8e(time);
    var y = date[$c5a9021cf573c334$export$8d046fefed9a548e(isUTC)]();
    var M = date[$c5a9021cf573c334$export$5c242a801a23eec7(isUTC)]() + 1;
    var q = Math.floor((M - 1) / 3) + 1;
    var d = date[$c5a9021cf573c334$export$4189e6cbc9753260(isUTC)]();
    var e = date["get" + (isUTC ? "UTC" : "") + "Day"]();
    var H = date[$c5a9021cf573c334$export$8b40b55b3c06cbe2(isUTC)]();
    var h = (H - 1) % 12 + 1;
    var m = date[$c5a9021cf573c334$export$8807847c5c71eded(isUTC)]();
    var s = date[$c5a9021cf573c334$export$8f49e73e2eebd168(isUTC)]();
    var S = date[$c5a9021cf573c334$export$312207a92d041116(isUTC)]();
    var localeModel = lang instanceof (0, $d92ec0eb853c4005$export$2e2bcd8739ae039) ? lang : (0, $f959f4cd6380d6eb$export$37cc638e0e11865f)(lang || (0, $f959f4cd6380d6eb$export$9a2147b3808d4c6b)) || (0, $f959f4cd6380d6eb$export$1188f179b2597821)();
    var timeModel = localeModel.getModel("time");
    var month = timeModel.get("month");
    var monthAbbr = timeModel.get("monthAbbr");
    var dayOfWeek = timeModel.get("dayOfWeek");
    var dayOfWeekAbbr = timeModel.get("dayOfWeekAbbr");
    return (template || "").replace(/{yyyy}/g, y + "").replace(/{yy}/g, $c5a9021cf573c334$export$5d04458e2a6c373e(y % 100 + "", 2)).replace(/{Q}/g, q + "").replace(/{MMMM}/g, month[M - 1]).replace(/{MMM}/g, monthAbbr[M - 1]).replace(/{MM}/g, $c5a9021cf573c334$export$5d04458e2a6c373e(M, 2)).replace(/{M}/g, M + "").replace(/{dd}/g, $c5a9021cf573c334$export$5d04458e2a6c373e(d, 2)).replace(/{d}/g, d + "").replace(/{eeee}/g, dayOfWeek[e]).replace(/{ee}/g, dayOfWeekAbbr[e]).replace(/{e}/g, e + "").replace(/{HH}/g, $c5a9021cf573c334$export$5d04458e2a6c373e(H, 2)).replace(/{H}/g, H + "").replace(/{hh}/g, $c5a9021cf573c334$export$5d04458e2a6c373e(h + "", 2)).replace(/{h}/g, h + "").replace(/{mm}/g, $c5a9021cf573c334$export$5d04458e2a6c373e(m, 2)).replace(/{m}/g, m + "").replace(/{ss}/g, $c5a9021cf573c334$export$5d04458e2a6c373e(s, 2)).replace(/{s}/g, s + "").replace(/{SSS}/g, $c5a9021cf573c334$export$5d04458e2a6c373e(S, 3)).replace(/{S}/g, S + "");
}
function $c5a9021cf573c334$export$fe777b6293828b5d(tick, idx, formatter, lang, isUTC) {
    var template = null;
    if ($e44eb14c4271d0f9$export$844ec244b1367d54(formatter)) // Single formatter for all units at all levels
    template = formatter;
    else if ($e44eb14c4271d0f9$export$f6e2535fb5126e54(formatter)) // Callback formatter
    template = formatter(tick.value, idx, {
        level: tick.level
    });
    else {
        var defaults = $e44eb14c4271d0f9$export$8b58be045bf06082({}, $c5a9021cf573c334$export$f7854271ddbda64e);
        if (tick.level > 0) for(var i = 0; i < $c5a9021cf573c334$export$87100da04d711986.length; ++i)defaults[$c5a9021cf573c334$export$87100da04d711986[i]] = "{primary|" + defaults[$c5a9021cf573c334$export$87100da04d711986[i]] + "}";
        var mergedFormatter = formatter ? formatter.inherit === false ? formatter // Use formatter with bigger units
         : $e44eb14c4271d0f9$export$ebe90cb607ad99e(formatter, defaults) : defaults;
        var unit = $c5a9021cf573c334$export$4dfb0417ad6555b7(tick.value, isUTC);
        if (mergedFormatter[unit]) template = mergedFormatter[unit];
        else if (mergedFormatter.inherit) {
            // Unit formatter is not defined and should inherit from bigger units
            var targetId = $c5a9021cf573c334$export$833c398a55654bb7.indexOf(unit);
            for(var i = targetId - 1; i >= 0; --i)if (mergedFormatter[unit]) {
                template = mergedFormatter[unit];
                break;
            }
            template = template || defaults.none;
        }
        if ($e44eb14c4271d0f9$export$43bee75e5e14138e(template)) {
            var levelId = tick.level == null ? 0 : tick.level >= 0 ? tick.level : template.length + tick.level;
            levelId = Math.min(levelId, template.length - 1);
            template = template[levelId];
        }
    }
    return $c5a9021cf573c334$export$d9468344d3651243(new Date(tick.value), template, isUTC, lang);
}
function $c5a9021cf573c334$export$4dfb0417ad6555b7(value, isUTC) {
    var date = $13e6a1a716300dd4$export$6b862160d295c8e(value);
    var M = date[$c5a9021cf573c334$export$5c242a801a23eec7(isUTC)]() + 1;
    var d = date[$c5a9021cf573c334$export$4189e6cbc9753260(isUTC)]();
    var h = date[$c5a9021cf573c334$export$8b40b55b3c06cbe2(isUTC)]();
    var m = date[$c5a9021cf573c334$export$8807847c5c71eded(isUTC)]();
    var s = date[$c5a9021cf573c334$export$8f49e73e2eebd168(isUTC)]();
    var S = date[$c5a9021cf573c334$export$312207a92d041116(isUTC)]();
    var isSecond = S === 0;
    var isMinute = isSecond && s === 0;
    var isHour = isMinute && m === 0;
    var isDay = isHour && h === 0;
    var isMonth = isDay && d === 1;
    var isYear = isMonth && M === 1;
    if (isYear) return "year";
    else if (isMonth) return "month";
    else if (isDay) return "day";
    else if (isHour) return "hour";
    else if (isMinute) return "minute";
    else if (isSecond) return "second";
    else return "millisecond";
}
function $c5a9021cf573c334$export$e04e41a1e24ffd3f(value, unit, isUTC) {
    var date = $e44eb14c4271d0f9$export$7e4aa119212bc614(value) ? $13e6a1a716300dd4$export$6b862160d295c8e(value) : value;
    unit = unit || $c5a9021cf573c334$export$4dfb0417ad6555b7(value, isUTC);
    switch(unit){
        case "year":
            return date[$c5a9021cf573c334$export$8d046fefed9a548e(isUTC)]();
        case "half-year":
            return date[$c5a9021cf573c334$export$5c242a801a23eec7(isUTC)]() >= 6 ? 1 : 0;
        case "quarter":
            return Math.floor((date[$c5a9021cf573c334$export$5c242a801a23eec7(isUTC)]() + 1) / 4);
        case "month":
            return date[$c5a9021cf573c334$export$5c242a801a23eec7(isUTC)]();
        case "day":
            return date[$c5a9021cf573c334$export$4189e6cbc9753260(isUTC)]();
        case "half-day":
            return date[$c5a9021cf573c334$export$8b40b55b3c06cbe2(isUTC)]() / 24;
        case "hour":
            return date[$c5a9021cf573c334$export$8b40b55b3c06cbe2(isUTC)]();
        case "minute":
            return date[$c5a9021cf573c334$export$8807847c5c71eded(isUTC)]();
        case "second":
            return date[$c5a9021cf573c334$export$8f49e73e2eebd168(isUTC)]();
        case "millisecond":
            return date[$c5a9021cf573c334$export$312207a92d041116(isUTC)]();
    }
}
function $c5a9021cf573c334$export$8d046fefed9a548e(isUTC) {
    return isUTC ? "getUTCFullYear" : "getFullYear";
}
function $c5a9021cf573c334$export$5c242a801a23eec7(isUTC) {
    return isUTC ? "getUTCMonth" : "getMonth";
}
function $c5a9021cf573c334$export$4189e6cbc9753260(isUTC) {
    return isUTC ? "getUTCDate" : "getDate";
}
function $c5a9021cf573c334$export$8b40b55b3c06cbe2(isUTC) {
    return isUTC ? "getUTCHours" : "getHours";
}
function $c5a9021cf573c334$export$8807847c5c71eded(isUTC) {
    return isUTC ? "getUTCMinutes" : "getMinutes";
}
function $c5a9021cf573c334$export$8f49e73e2eebd168(isUTC) {
    return isUTC ? "getUTCSeconds" : "getSeconds";
}
function $c5a9021cf573c334$export$312207a92d041116(isUTC) {
    return isUTC ? "getUTCMilliseconds" : "getMilliseconds";
}
function $c5a9021cf573c334$export$43fbeac90913b151(isUTC) {
    return isUTC ? "setUTCFullYear" : "setFullYear";
}
function $c5a9021cf573c334$export$233f59998ed71c09(isUTC) {
    return isUTC ? "setUTCMonth" : "setMonth";
}
function $c5a9021cf573c334$export$82fd379a67f37fa0(isUTC) {
    return isUTC ? "setUTCDate" : "setDate";
}
function $c5a9021cf573c334$export$b6f943e8d23c15bb(isUTC) {
    return isUTC ? "setUTCHours" : "setHours";
}
function $c5a9021cf573c334$export$50303078793fc7d(isUTC) {
    return isUTC ? "setUTCMinutes" : "setMinutes";
}
function $c5a9021cf573c334$export$a4a908acda9c3118(isUTC) {
    return isUTC ? "setUTCSeconds" : "setSeconds";
}
function $c5a9021cf573c334$export$c047afab75f6d84(isUTC) {
    return isUTC ? "setUTCMilliseconds" : "setMilliseconds";
}





function $1594f6dc0ce39685$export$b6fe44657ce35c42(x) {
    if (!(0, $13e6a1a716300dd4$export$e90fb89750dba83f)(x)) return $e44eb14c4271d0f9$export$844ec244b1367d54(x) ? x : "-";
    var parts = (x + "").split(".");
    return parts[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g, "$1,") + (parts.length > 1 ? "." + parts[1] : "");
}
function $1594f6dc0ce39685$export$86f54f62aa7a7514(str, upperCaseFirst) {
    str = (str || "").toLowerCase().replace(/-(.)/g, function(match, group1) {
        return group1.toUpperCase();
    });
    if (upperCaseFirst && str) str = str.charAt(0).toUpperCase() + str.slice(1);
    return str;
}
var $1594f6dc0ce39685$export$f3a38102c49f4268 = $e44eb14c4271d0f9$export$f3a38102c49f4268;
function $1594f6dc0ce39685$export$3cd8db88714decfc(value, valueType, useUTC) {
    var USER_READABLE_DEFUALT_TIME_PATTERN = "{yyyy}-{MM}-{dd} {HH}:{mm}:{ss}";
    function stringToUserReadable(str) {
        return str && $e44eb14c4271d0f9$export$87c2784dc9fc4ab(str) ? str : "-";
    }
    function isNumberUserReadable(num) {
        return !!(num != null && !isNaN(num) && isFinite(num));
    }
    var isTypeTime = valueType === "time";
    var isValueDate = value instanceof Date;
    if (isTypeTime || isValueDate) {
        var date = isTypeTime ? (0, $13e6a1a716300dd4$export$6b862160d295c8e)(value) : value;
        if (!isNaN(+date)) return (0, $c5a9021cf573c334$export$d9468344d3651243)(date, USER_READABLE_DEFUALT_TIME_PATTERN, useUTC);
        else if (isValueDate) return "-";
    // In other cases, continue to try to display the value in the following code.
    }
    if (valueType === "ordinal") return $e44eb14c4271d0f9$export$29d0bb2a4e07b252(value) ? stringToUserReadable(value) : $e44eb14c4271d0f9$export$7e4aa119212bc614(value) ? isNumberUserReadable(value) ? value + "" : "-" : "-";
    // By default.
    var numericResult = (0, $13e6a1a716300dd4$export$8b4007b942b45a96)(value);
    return isNumberUserReadable(numericResult) ? $1594f6dc0ce39685$export$b6fe44657ce35c42(numericResult) : $e44eb14c4271d0f9$export$29d0bb2a4e07b252(value) ? stringToUserReadable(value) : typeof value === "boolean" ? value + "" : "-";
}
var $1594f6dc0ce39685$var$TPL_VAR_ALIAS = [
    "a",
    "b",
    "c",
    "d",
    "e",
    "f",
    "g"
];
var $1594f6dc0ce39685$var$wrapVar = function(varName, seriesIdx) {
    return "{" + varName + (seriesIdx == null ? "" : seriesIdx) + "}";
};
function $1594f6dc0ce39685$export$2028496a35766e41(tpl, paramsList, encode) {
    if (!$e44eb14c4271d0f9$export$43bee75e5e14138e(paramsList)) paramsList = [
        paramsList
    ];
    var seriesLen = paramsList.length;
    if (!seriesLen) return "";
    var $vars = paramsList[0].$vars || [];
    for(var i = 0; i < $vars.length; i++){
        var alias = $1594f6dc0ce39685$var$TPL_VAR_ALIAS[i];
        tpl = tpl.replace($1594f6dc0ce39685$var$wrapVar(alias), $1594f6dc0ce39685$var$wrapVar(alias, 0));
    }
    for(var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++)for(var k = 0; k < $vars.length; k++){
        var val = paramsList[seriesIdx][$vars[k]];
        tpl = tpl.replace($1594f6dc0ce39685$var$wrapVar($1594f6dc0ce39685$var$TPL_VAR_ALIAS[k], seriesIdx), encode ? (0, $e8bddf605818feb2$export$f9d6449b9af28dc1)(val) : val);
    }
    return tpl;
}
function $1594f6dc0ce39685$export$2fa08233ee42f8e1(tpl, param, encode) {
    $e44eb14c4271d0f9$export$79b2f7037acddd43(param, function(value, key) {
        tpl = tpl.replace("{" + key + "}", encode ? (0, $e8bddf605818feb2$export$f9d6449b9af28dc1)(value) : value);
    });
    return tpl;
}
function $1594f6dc0ce39685$export$1987a3dbdf3c45ca(inOpt, extraCssText) {
    var opt = $e44eb14c4271d0f9$export$844ec244b1367d54(inOpt) ? {
        color: inOpt,
        extraCssText: extraCssText
    } : inOpt || {};
    var color = opt.color;
    var type = opt.type;
    extraCssText = opt.extraCssText;
    var renderMode = opt.renderMode || "html";
    if (!color) return "";
    if (renderMode === "html") return type === "subItem" ? '<span style="display:inline-block;vertical-align:middle;margin-right:8px;margin-left:3px;border-radius:4px;width:4px;height:4px;background-color:' + (0, $e8bddf605818feb2$export$f9d6449b9af28dc1)(color) + ";" + (extraCssText || "") + '"></span>' : '<span style="display:inline-block;margin-right:4px;border-radius:10px;width:10px;height:10px;background-color:' + (0, $e8bddf605818feb2$export$f9d6449b9af28dc1)(color) + ";" + (extraCssText || "") + '"></span>';
    else {
        // Should better not to auto generate style name by auto-increment number here.
        // Because this util is usually called in tooltip formatter, which is probably
        // called repeatedly when mouse move and the auto-increment number increases fast.
        // Users can make their own style name by theirselves, make it unique and readable.
        var markerId = opt.markerId || "markerX";
        return {
            renderMode: renderMode,
            content: "{" + markerId + "|}  ",
            style: type === "subItem" ? {
                width: 4,
                height: 4,
                borderRadius: 2,
                backgroundColor: color
            } : {
                width: 10,
                height: 10,
                borderRadius: 5,
                backgroundColor: color
            }
        };
    }
}
function $1594f6dc0ce39685$export$3203edd9e5edd663(tpl, value, isUTC) {
    (0, $4796c55e8b767685$export$bbd91d66002c4ea6)("echarts.format.formatTime", "echarts.time.format");
    if (tpl === "week" || tpl === "month" || tpl === "quarter" || tpl === "half-year" || tpl === "year") tpl = "MM-dd\nyyyy";
    var date = (0, $13e6a1a716300dd4$export$6b862160d295c8e)(value);
    var getUTC = isUTC ? "getUTC" : "get";
    var y = date[getUTC + "FullYear"]();
    var M = date[getUTC + "Month"]() + 1;
    var d = date[getUTC + "Date"]();
    var h = date[getUTC + "Hours"]();
    var m = date[getUTC + "Minutes"]();
    var s = date[getUTC + "Seconds"]();
    var S = date[getUTC + "Milliseconds"]();
    tpl = tpl.replace("MM", (0, $c5a9021cf573c334$export$5d04458e2a6c373e)(M, 2)).replace("M", M).replace("yyyy", y).replace("yy", (0, $c5a9021cf573c334$export$5d04458e2a6c373e)(y % 100 + "", 2)).replace("dd", (0, $c5a9021cf573c334$export$5d04458e2a6c373e)(d, 2)).replace("d", d).replace("hh", (0, $c5a9021cf573c334$export$5d04458e2a6c373e)(h, 2)).replace("h", h).replace("mm", (0, $c5a9021cf573c334$export$5d04458e2a6c373e)(m, 2)).replace("m", m).replace("ss", (0, $c5a9021cf573c334$export$5d04458e2a6c373e)(s, 2)).replace("s", s).replace("SSS", (0, $c5a9021cf573c334$export$5d04458e2a6c373e)(S, 3));
    return tpl;
}
function $1594f6dc0ce39685$export$38a1e7552f497c0e(str) {
    return str ? str.charAt(0).toUpperCase() + str.substr(1) : str;
}
function $1594f6dc0ce39685$export$cda04d03233e5555(color, defaultColor) {
    defaultColor = defaultColor || "transparent";
    return $e44eb14c4271d0f9$export$844ec244b1367d54(color) ? color : $e44eb14c4271d0f9$export$a6cdc56e425d0d0a(color) ? color.colorStops && (color.colorStops[0] || {}).color || defaultColor : defaultColor;
}
function $1594f6dc0ce39685$export$13e13f9b96dbe8fa(link, target) {
    /* global window */ if (target === "_blank" || target === "blank") {
        var blank = window.open();
        blank.opener = null;
        blank.location.href = link;
    } else window.open(link, target);
}


var $074356ab3d6b1cdb$var$each = $e44eb14c4271d0f9$export$79b2f7037acddd43;
var $074356ab3d6b1cdb$export$a9aa2cc018afbed = [
    "left",
    "right",
    "top",
    "bottom",
    "width",
    "height"
];
var $074356ab3d6b1cdb$export$d7fd4338c7b20804 = [
    [
        "width",
        "left",
        "right"
    ],
    [
        "height",
        "top",
        "bottom"
    ]
];
function $074356ab3d6b1cdb$var$boxLayout(orient, group, gap, maxWidth, maxHeight) {
    var x = 0;
    var y = 0;
    if (maxWidth == null) maxWidth = Infinity;
    if (maxHeight == null) maxHeight = Infinity;
    var currentLineMaxSize = 0;
    group.eachChild(function(child, idx) {
        var rect = child.getBoundingRect();
        var nextChild = group.childAt(idx + 1);
        var nextChildRect = nextChild && nextChild.getBoundingRect();
        var nextX;
        var nextY;
        if (orient === "horizontal") {
            var moveX = rect.width + (nextChildRect ? -nextChildRect.x + rect.x : 0);
            nextX = x + moveX;
            // Wrap when width exceeds maxWidth or meet a `newline` group
            // FIXME compare before adding gap?
            if (nextX > maxWidth || child.newline) {
                x = 0;
                nextX = moveX;
                y += currentLineMaxSize + gap;
                currentLineMaxSize = rect.height;
            } else // FIXME: consider rect.y is not `0`?
            currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);
        } else {
            var moveY = rect.height + (nextChildRect ? -nextChildRect.y + rect.y : 0);
            nextY = y + moveY;
            // Wrap when width exceeds maxHeight or meet a `newline` group
            if (nextY > maxHeight || child.newline) {
                x += currentLineMaxSize + gap;
                y = 0;
                nextY = moveY;
                currentLineMaxSize = rect.width;
            } else currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);
        }
        if (child.newline) return;
        child.x = x;
        child.y = y;
        child.markRedraw();
        orient === "horizontal" ? x = nextX + gap : y = nextY + gap;
    });
}
var $074356ab3d6b1cdb$export$827f4ee28efc37 = $074356ab3d6b1cdb$var$boxLayout;
var $074356ab3d6b1cdb$export$be20d9158c17374c = $e44eb14c4271d0f9$export$c3095a23b368d1f2($074356ab3d6b1cdb$var$boxLayout, "vertical");
var $074356ab3d6b1cdb$export$ae65a483d943e7a7 = $e44eb14c4271d0f9$export$c3095a23b368d1f2($074356ab3d6b1cdb$var$boxLayout, "horizontal");
function $074356ab3d6b1cdb$export$145a8938a85a22b1(positionInfo, containerRect, margin) {
    var containerWidth = containerRect.width;
    var containerHeight = containerRect.height;
    var x = (0, $13e6a1a716300dd4$export$e8514cb5a5e2b40f)(positionInfo.left, containerWidth);
    var y = (0, $13e6a1a716300dd4$export$e8514cb5a5e2b40f)(positionInfo.top, containerHeight);
    var x2 = (0, $13e6a1a716300dd4$export$e8514cb5a5e2b40f)(positionInfo.right, containerWidth);
    var y2 = (0, $13e6a1a716300dd4$export$e8514cb5a5e2b40f)(positionInfo.bottom, containerHeight);
    (isNaN(x) || isNaN(parseFloat(positionInfo.left))) && (x = 0);
    (isNaN(x2) || isNaN(parseFloat(positionInfo.right))) && (x2 = containerWidth);
    (isNaN(y) || isNaN(parseFloat(positionInfo.top))) && (y = 0);
    (isNaN(y2) || isNaN(parseFloat(positionInfo.bottom))) && (y2 = containerHeight);
    margin = $1594f6dc0ce39685$export$f3a38102c49f4268(margin || 0);
    return {
        width: Math.max(x2 - x - margin[1] - margin[3], 0),
        height: Math.max(y2 - y - margin[0] - margin[2], 0)
    };
}
function $074356ab3d6b1cdb$export$4517a5ca639a7293(positionInfo, containerRect, margin) {
    margin = $1594f6dc0ce39685$export$f3a38102c49f4268(margin || 0);
    var containerWidth = containerRect.width;
    var containerHeight = containerRect.height;
    var left = (0, $13e6a1a716300dd4$export$e8514cb5a5e2b40f)(positionInfo.left, containerWidth);
    var top = (0, $13e6a1a716300dd4$export$e8514cb5a5e2b40f)(positionInfo.top, containerHeight);
    var right = (0, $13e6a1a716300dd4$export$e8514cb5a5e2b40f)(positionInfo.right, containerWidth);
    var bottom = (0, $13e6a1a716300dd4$export$e8514cb5a5e2b40f)(positionInfo.bottom, containerHeight);
    var width = (0, $13e6a1a716300dd4$export$e8514cb5a5e2b40f)(positionInfo.width, containerWidth);
    var height = (0, $13e6a1a716300dd4$export$e8514cb5a5e2b40f)(positionInfo.height, containerHeight);
    var verticalMargin = margin[2] + margin[0];
    var horizontalMargin = margin[1] + margin[3];
    var aspect = positionInfo.aspect;
    // If width is not specified, calculate width from left and right
    if (isNaN(width)) width = containerWidth - right - horizontalMargin - left;
    if (isNaN(height)) height = containerHeight - bottom - verticalMargin - top;
    if (aspect != null) {
        // If width and height are not given
        // 1. Graph should not exceeds the container
        // 2. Aspect must be keeped
        // 3. Graph should take the space as more as possible
        // FIXME
        // Margin is not considered, because there is no case that both
        // using margin and aspect so far.
        if (isNaN(width) && isNaN(height)) {
            if (aspect > containerWidth / containerHeight) width = containerWidth * 0.8;
            else height = containerHeight * 0.8;
        }
        // Calculate width or height with given aspect
        if (isNaN(width)) width = aspect * height;
        if (isNaN(height)) height = width / aspect;
    }
    // If left is not specified, calculate left from right and width
    if (isNaN(left)) left = containerWidth - right - width - horizontalMargin;
    if (isNaN(top)) top = containerHeight - bottom - height - verticalMargin;
    // Align left and top
    switch(positionInfo.left || positionInfo.right){
        case "center":
            left = containerWidth / 2 - width / 2 - margin[3];
            break;
        case "right":
            left = containerWidth - width - horizontalMargin;
            break;
    }
    switch(positionInfo.top || positionInfo.bottom){
        case "middle":
        case "center":
            top = containerHeight / 2 - height / 2 - margin[0];
            break;
        case "bottom":
            top = containerHeight - height - verticalMargin;
            break;
    }
    // If something is wrong and left, top, width, height are calculated as NaN
    left = left || 0;
    top = top || 0;
    if (isNaN(width)) // Width may be NaN if only one value is given except width
    width = containerWidth - horizontalMargin - left - (right || 0);
    if (isNaN(height)) // Height may be NaN if only one value is given except height
    height = containerHeight - verticalMargin - top - (bottom || 0);
    var rect = new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)(left + margin[3], top + margin[0], width, height);
    rect.margin = margin;
    return rect;
}
function $074356ab3d6b1cdb$export$74054bd96b5eeef1(el, positionInfo, containerRect, margin, opt, out) {
    var h = !opt || !opt.hv || opt.hv[0];
    var v = !opt || !opt.hv || opt.hv[1];
    var boundingMode = opt && opt.boundingMode || "all";
    out = out || el;
    out.x = el.x;
    out.y = el.y;
    if (!h && !v) return false;
    var rect;
    if (boundingMode === "raw") rect = el.type === "group" ? new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)(0, 0, +positionInfo.width || 0, +positionInfo.height || 0) : el.getBoundingRect();
    else {
        rect = el.getBoundingRect();
        if (el.needLocalTransform()) {
            var transform = el.getLocalTransform();
            // Notice: raw rect may be inner object of el,
            // which should not be modified.
            rect = rect.clone();
            rect.applyTransform(transform);
        }
    }
    // The real width and height can not be specified but calculated by the given el.
    var layoutRect = $074356ab3d6b1cdb$export$4517a5ca639a7293($e44eb14c4271d0f9$export$ebe90cb607ad99e({
        width: rect.width,
        height: rect.height
    }, positionInfo), containerRect, margin);
    // Because 'tranlate' is the last step in transform
    // (see zrender/core/Transformable#getLocalTransform),
    // we can just only modify el.position to get final result.
    var dx = h ? layoutRect.x - rect.x : 0;
    var dy = v ? layoutRect.y - rect.y : 0;
    if (boundingMode === "raw") {
        out.x = dx;
        out.y = dy;
    } else {
        out.x += dx;
        out.y += dy;
    }
    if (out === el) el.markRedraw();
    return true;
}
function $074356ab3d6b1cdb$export$7ede609e8ebc9650(option, hvIdx) {
    return option[$074356ab3d6b1cdb$export$d7fd4338c7b20804[hvIdx][0]] != null || option[$074356ab3d6b1cdb$export$d7fd4338c7b20804[hvIdx][1]] != null && option[$074356ab3d6b1cdb$export$d7fd4338c7b20804[hvIdx][2]] != null;
}
function $074356ab3d6b1cdb$export$3968a28a7cbd6063(ins) {
    var layoutMode = ins.layoutMode || ins.constructor.layoutMode;
    return $e44eb14c4271d0f9$export$a6cdc56e425d0d0a(layoutMode) ? layoutMode : layoutMode ? {
        type: layoutMode
    } : null;
}
function $074356ab3d6b1cdb$export$1754cb91f16ca028(targetOption, newOption, opt) {
    var ignoreSize = opt && opt.ignoreSize;
    !$e44eb14c4271d0f9$export$43bee75e5e14138e(ignoreSize) && (ignoreSize = [
        ignoreSize,
        ignoreSize
    ]);
    var hResult = merge($074356ab3d6b1cdb$export$d7fd4338c7b20804[0], 0);
    var vResult = merge($074356ab3d6b1cdb$export$d7fd4338c7b20804[1], 1);
    copy($074356ab3d6b1cdb$export$d7fd4338c7b20804[0], targetOption, hResult);
    copy($074356ab3d6b1cdb$export$d7fd4338c7b20804[1], targetOption, vResult);
    function merge(names, hvIdx) {
        var newParams = {};
        var newValueCount = 0;
        var merged = {};
        var mergedValueCount = 0;
        var enoughParamNumber = 2;
        $074356ab3d6b1cdb$var$each(names, function(name) {
            merged[name] = targetOption[name];
        });
        $074356ab3d6b1cdb$var$each(names, function(name) {
            // Consider case: newOption.width is null, which is
            // set by user for removing width setting.
            hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);
            hasValue(newParams, name) && newValueCount++;
            hasValue(merged, name) && mergedValueCount++;
        });
        if (ignoreSize[hvIdx]) {
            // Only one of left/right is premitted to exist.
            if (hasValue(newOption, names[1])) merged[names[2]] = null;
            else if (hasValue(newOption, names[2])) merged[names[1]] = null;
            return merged;
        }
        // Case: newOption: {width: ..., right: ...},
        // or targetOption: {right: ...} and newOption: {width: ...},
        // There is no conflict when merged only has params count
        // little than enoughParamNumber.
        if (mergedValueCount === enoughParamNumber || !newValueCount) return merged;
        else if (newValueCount >= enoughParamNumber) return newParams;
        else {
            // Chose another param from targetOption by priority.
            for(var i = 0; i < names.length; i++){
                var name_1 = names[i];
                if (!hasProp(newParams, name_1) && hasProp(targetOption, name_1)) {
                    newParams[name_1] = targetOption[name_1];
                    break;
                }
            }
            return newParams;
        }
    }
    function hasProp(obj, name) {
        return obj.hasOwnProperty(name);
    }
    function hasValue(obj, name) {
        return obj[name] != null && obj[name] !== "auto";
    }
    function copy(names, target, source) {
        $074356ab3d6b1cdb$var$each(names, function(name) {
            target[name] = source[name];
        });
    }
}
function $074356ab3d6b1cdb$export$4b0d20af19c9875e(source) {
    return $074356ab3d6b1cdb$export$7438999faea9b6cc({}, source);
}
function $074356ab3d6b1cdb$export$7438999faea9b6cc(target, source) {
    source && target && $074356ab3d6b1cdb$var$each($074356ab3d6b1cdb$export$a9aa2cc018afbed, function(name) {
        source.hasOwnProperty(name) && (target[name] = source[name]);
    });
    return target;
}


var $a756077528c07361$var$inner = (0, $8917c02fd8256c67$export$64df9f8d92ae083f)();
var $a756077528c07361$var$ComponentModel = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(ComponentModel, _super);
    function ComponentModel(option, parentModel, ecModel) {
        var _this = _super.call(this, option, parentModel, ecModel) || this;
        _this.uid = $5e939fc0112f61e7$export$6d2b3473b0986646("ec_cpt_model");
        return _this;
    }
    ComponentModel.prototype.init = function(option, parentModel, ecModel) {
        this.mergeDefaultAndTheme(option, ecModel);
    };
    ComponentModel.prototype.mergeDefaultAndTheme = function(option, ecModel) {
        var layoutMode = $074356ab3d6b1cdb$export$3968a28a7cbd6063(this);
        var inputPositionParams = layoutMode ? $074356ab3d6b1cdb$export$4b0d20af19c9875e(option) : {};
        var themeModel = ecModel.getTheme();
        $e44eb14c4271d0f9$export$4950aa0f605343fb(option, themeModel.get(this.mainType));
        $e44eb14c4271d0f9$export$4950aa0f605343fb(option, this.getDefaultOption());
        if (layoutMode) $074356ab3d6b1cdb$export$1754cb91f16ca028(option, inputPositionParams, layoutMode);
    };
    ComponentModel.prototype.mergeOption = function(option, ecModel) {
        $e44eb14c4271d0f9$export$4950aa0f605343fb(this.option, option, true);
        var layoutMode = $074356ab3d6b1cdb$export$3968a28a7cbd6063(this);
        if (layoutMode) $074356ab3d6b1cdb$export$1754cb91f16ca028(this.option, option, layoutMode);
    };
    /**
   * Called immediately after `init` or `mergeOption` of this instance called.
   */ ComponentModel.prototype.optionUpdated = function(newCptOption, isInit) {};
    /**
   * [How to declare defaultOption]:
   *
   * (A) If using class declaration in typescript (since echarts 5):
   * ```ts
   * import {ComponentOption} from '../model/option.js';
   * export interface XxxOption extends ComponentOption {
   *     aaa: number
   * }
   * export class XxxModel extends Component {
   *     static type = 'xxx';
   *     static defaultOption: XxxOption = {
   *         aaa: 123
   *     }
   * }
   * Component.registerClass(XxxModel);
   * ```
   * ```ts
   * import {inheritDefaultOption} from '../util/component.js';
   * import {XxxModel, XxxOption} from './XxxModel.js';
   * export interface XxxSubOption extends XxxOption {
   *     bbb: number
   * }
   * class XxxSubModel extends XxxModel {
   *     static defaultOption: XxxSubOption = inheritDefaultOption(XxxModel.defaultOption, {
   *         bbb: 456
   *     })
   *     fn() {
   *         let opt = this.getDefaultOption();
   *         // opt is {aaa: 123, bbb: 456}
   *     }
   * }
   * ```
   *
   * (B) If using class extend (previous approach in echarts 3 & 4):
   * ```js
   * let XxxComponent = Component.extend({
   *     defaultOption: {
   *         xx: 123
   *     }
   * })
   * ```
   * ```js
   * let XxxSubComponent = XxxComponent.extend({
   *     defaultOption: {
   *         yy: 456
   *     },
   *     fn: function () {
   *         let opt = this.getDefaultOption();
   *         // opt is {xx: 123, yy: 456}
   *     }
   * })
   * ```
   */ ComponentModel.prototype.getDefaultOption = function() {
        var ctor = this.constructor;
        // If using class declaration, it is different to travel super class
        // in legacy env and auto merge defaultOption. So if using class
        // declaration, defaultOption should be merged manually.
        if (!(0, $0a7732deba457ada$export$4f3b818f3dd2d182)(ctor)) // When using ts class, defaultOption must be declared as static.
        return ctor.defaultOption;
        // FIXME: remove this approach?
        var fields = $a756077528c07361$var$inner(this);
        if (!fields.defaultOption) {
            var optList = [];
            var clz = ctor;
            while(clz){
                var opt = clz.prototype.defaultOption;
                opt && optList.push(opt);
                clz = clz.superClass;
            }
            var defaultOption = {};
            for(var i = optList.length - 1; i >= 0; i--)defaultOption = $e44eb14c4271d0f9$export$4950aa0f605343fb(defaultOption, optList[i], true);
            fields.defaultOption = defaultOption;
        }
        return fields.defaultOption;
    };
    /**
   * Notice: always force to input param `useDefault` in case that forget to consider it.
   * The same behavior as `modelUtil.parseFinder`.
   *
   * @param useDefault In many cases like series refer axis and axis refer grid,
   *        If axis index / axis id not specified, use the first target as default.
   *        In other cases like dataZoom refer axis, if not specified, measn no refer.
   */ ComponentModel.prototype.getReferringComponents = function(mainType, opt) {
        var indexKey = mainType + "Index";
        var idKey = mainType + "Id";
        return (0, $8917c02fd8256c67$export$dc741340f7e5f186)(this.ecModel, mainType, {
            index: this.get(indexKey, true),
            id: this.get(idKey, true)
        }, opt);
    };
    ComponentModel.prototype.getBoxLayoutParams = function() {
        // Consider itself having box layout configs.
        var boxLayoutModel = this;
        return {
            left: boxLayoutModel.get("left"),
            top: boxLayoutModel.get("top"),
            right: boxLayoutModel.get("right"),
            bottom: boxLayoutModel.get("bottom"),
            width: boxLayoutModel.get("width"),
            height: boxLayoutModel.get("height")
        };
    };
    /**
   * Get key for zlevel.
   * If developers don't configure zlevel. We will assign zlevel to series based on the key.
   * For example, lines with trail effect and progressive series will in an individual zlevel.
   */ ComponentModel.prototype.getZLevelKey = function() {
        return "";
    };
    ComponentModel.prototype.setZLevel = function(zlevel) {
        this.option.zlevel = zlevel;
    };
    ComponentModel.protoInitialize = function() {
        var proto = ComponentModel.prototype;
        proto.type = "component";
        proto.id = "";
        proto.name = "";
        proto.mainType = "";
        proto.subType = "";
        proto.componentIndex = 0;
    }();
    return ComponentModel;
}((0, $d92ec0eb853c4005$export$2e2bcd8739ae039));
(0, $0a7732deba457ada$export$c9c2d87774f1275d)($a756077528c07361$var$ComponentModel, (0, $d92ec0eb853c4005$export$2e2bcd8739ae039));
(0, $0a7732deba457ada$export$241315e45585454d)($a756077528c07361$var$ComponentModel);
$5e939fc0112f61e7$export$b9faf30b7d655a6f($a756077528c07361$var$ComponentModel);
$5e939fc0112f61e7$export$ce592d345a3ec040($a756077528c07361$var$ComponentModel, $a756077528c07361$var$getDependencies);
function $a756077528c07361$var$getDependencies(componentType) {
    var deps = [];
    $e44eb14c4271d0f9$export$79b2f7037acddd43($a756077528c07361$var$ComponentModel.getClassesByMainType(componentType), function(clz) {
        deps = deps.concat(clz.dependencies || clz.prototype.dependencies || []);
    });
    // Ensure main type.
    deps = $e44eb14c4271d0f9$export$871de8747c9eaa88(deps, function(type) {
        return (0, $0a7732deba457ada$export$fbe18865d303bf01)(type).main;
    });
    // Hack dataset for convenience.
    if (componentType !== "dataset" && $e44eb14c4271d0f9$export$305f7d4e9d4624f2(deps, "dataset") <= 0) deps.unshift("dataset");
    return deps;
}
var $a756077528c07361$export$2e2bcd8739ae039 = $a756077528c07361$var$ComponentModel;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ var $bff67db65a106024$var$platform = "";
// Navigator not exists in node
if (typeof navigator !== "undefined") /* global navigator */ $bff67db65a106024$var$platform = navigator.platform || "";
var $bff67db65a106024$var$decalColor = "rgba(0, 0, 0, 0.2)";
var $bff67db65a106024$export$2e2bcd8739ae039 = {
    darkMode: "auto",
    // backgroundColor: 'rgba(0,0,0,0)',
    colorBy: "series",
    color: [
        "#5470c6",
        "#91cc75",
        "#fac858",
        "#ee6666",
        "#73c0de",
        "#3ba272",
        "#fc8452",
        "#9a60b4",
        "#ea7ccc"
    ],
    gradientColor: [
        "#f6efa6",
        "#d88273",
        "#bf444c"
    ],
    aria: {
        decal: {
            decals: [
                {
                    color: $bff67db65a106024$var$decalColor,
                    dashArrayX: [
                        1,
                        0
                    ],
                    dashArrayY: [
                        2,
                        5
                    ],
                    symbolSize: 1,
                    rotation: Math.PI / 6
                },
                {
                    color: $bff67db65a106024$var$decalColor,
                    symbol: "circle",
                    dashArrayX: [
                        [
                            8,
                            8
                        ],
                        [
                            0,
                            8,
                            8,
                            0
                        ]
                    ],
                    dashArrayY: [
                        6,
                        0
                    ],
                    symbolSize: 0.8
                },
                {
                    color: $bff67db65a106024$var$decalColor,
                    dashArrayX: [
                        1,
                        0
                    ],
                    dashArrayY: [
                        4,
                        3
                    ],
                    rotation: -Math.PI / 4
                },
                {
                    color: $bff67db65a106024$var$decalColor,
                    dashArrayX: [
                        [
                            6,
                            6
                        ],
                        [
                            0,
                            6,
                            6,
                            0
                        ]
                    ],
                    dashArrayY: [
                        6,
                        0
                    ]
                },
                {
                    color: $bff67db65a106024$var$decalColor,
                    dashArrayX: [
                        [
                            1,
                            0
                        ],
                        [
                            1,
                            6
                        ]
                    ],
                    dashArrayY: [
                        1,
                        0,
                        6,
                        0
                    ],
                    rotation: Math.PI / 4
                },
                {
                    color: $bff67db65a106024$var$decalColor,
                    symbol: "triangle",
                    dashArrayX: [
                        [
                            9,
                            9
                        ],
                        [
                            0,
                            9,
                            9,
                            0
                        ]
                    ],
                    dashArrayY: [
                        7,
                        2
                    ],
                    symbolSize: 0.75
                }
            ]
        }
    },
    // If xAxis and yAxis declared, grid is created by default.
    // grid: {},
    textStyle: {
        // color: '#000',
        // decoration: 'none',
        // PENDING
        fontFamily: $bff67db65a106024$var$platform.match(/^Win/) ? "Microsoft YaHei" : "sans-serif",
        // fontFamily: 'Arial, Verdana, sans-serif',
        fontSize: 12,
        fontStyle: "normal",
        fontWeight: "normal"
    },
    // http://blogs.adobe.com/webplatform/2014/02/24/using-blend-modes-in-html-canvas/
    // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation
    // Default is source-over
    blendMode: null,
    stateAnimation: {
        duration: 300,
        easing: "cubicOut"
    },
    animation: "auto",
    animationDuration: 1000,
    animationDurationUpdate: 500,
    animationEasing: "cubicInOut",
    animationEasingUpdate: "cubicInOut",
    animationThreshold: 2000,
    // Configuration for progressive/incremental rendering
    progressiveThreshold: 3000,
    progressive: 400,
    // Threshold of if use single hover layer to optimize.
    // It is recommended that `hoverLayerThreshold` is equivalent to or less than
    // `progressiveThreshold`, otherwise hover will cause restart of progressive,
    // which is unexpected.
    // see example <echarts/test/heatmap-large.html>.
    hoverLayerThreshold: 3000,
    // See: module:echarts/scale/Time
    useUTC: false
};


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
var $2b9c860c8cf83b68$export$cd51b5ca77f6f0e4 = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)([
    "tooltip",
    "label",
    "itemName",
    "itemId",
    "itemGroupId",
    "itemChildGroupId",
    "seriesName"
]);
var $2b9c860c8cf83b68$export$2823037fb9d8f0c6 = "original";
var $2b9c860c8cf83b68$export$fcd62ebf51387903 = "arrayRows";
var $2b9c860c8cf83b68$export$703ae8a2d83f441 = "objectRows";
var $2b9c860c8cf83b68$export$6a32b42c754a3cb8 = "keyedColumns";
var $2b9c860c8cf83b68$export$a918cb016a382d45 = "typedArray";
var $2b9c860c8cf83b68$export$c78f1330778d30d = "unknown";
var $2b9c860c8cf83b68$export$7b3f3c6551b4949b = "column";
var $2b9c860c8cf83b68$export$d55da1467cdf7804 = "row";


var $13c62ad003ac72f0$export$328749e9c5b40760 = {
    Must: 1,
    Might: 2,
    Not: 3 // Other cases
};
var $13c62ad003ac72f0$var$innerGlobalModel = (0, $8917c02fd8256c67$export$64df9f8d92ae083f)();
function $13c62ad003ac72f0$export$b30cdea50aa00e6(ecModel) {
    // `datasetMap` is used to make default encode.
    $13c62ad003ac72f0$var$innerGlobalModel(ecModel).datasetMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
}
function $13c62ad003ac72f0$export$37682b8fdd2e83d(coordDimensions, seriesModel, source) {
    var encode = {};
    var datasetModel = $13c62ad003ac72f0$export$8da66f73a1eda454(seriesModel);
    // Currently only make default when using dataset, util more reqirements occur.
    if (!datasetModel || !coordDimensions) return encode;
    var encodeItemName = [];
    var encodeSeriesName = [];
    var ecModel = seriesModel.ecModel;
    var datasetMap = $13c62ad003ac72f0$var$innerGlobalModel(ecModel).datasetMap;
    var key = datasetModel.uid + "_" + source.seriesLayoutBy;
    var baseCategoryDimIndex;
    var categoryWayValueDimStart;
    coordDimensions = coordDimensions.slice();
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(coordDimensions, function(coordDimInfoLoose, coordDimIdx) {
        var coordDimInfo = (0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(coordDimInfoLoose) ? coordDimInfoLoose : coordDimensions[coordDimIdx] = {
            name: coordDimInfoLoose
        };
        if (coordDimInfo.type === "ordinal" && baseCategoryDimIndex == null) {
            baseCategoryDimIndex = coordDimIdx;
            categoryWayValueDimStart = getDataDimCountOnCoordDim(coordDimInfo);
        }
        encode[coordDimInfo.name] = [];
    });
    var datasetRecord = datasetMap.get(key) || datasetMap.set(key, {
        categoryWayDim: categoryWayValueDimStart,
        valueWayDim: 0
    });
    // TODO
    // Auto detect first time axis and do arrangement.
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(coordDimensions, function(coordDimInfo, coordDimIdx) {
        var coordDimName = coordDimInfo.name;
        var count = getDataDimCountOnCoordDim(coordDimInfo);
        // In value way.
        if (baseCategoryDimIndex == null) {
            var start = datasetRecord.valueWayDim;
            pushDim(encode[coordDimName], start, count);
            pushDim(encodeSeriesName, start, count);
            datasetRecord.valueWayDim += count;
        // ??? TODO give a better default series name rule?
        // especially when encode x y specified.
        // consider: when multiple series share one dimension
        // category axis, series name should better use
        // the other dimension name. On the other hand, use
        // both dimensions name.
        } else if (baseCategoryDimIndex === coordDimIdx) {
            pushDim(encode[coordDimName], 0, count);
            pushDim(encodeItemName, 0, count);
        } else {
            var start = datasetRecord.categoryWayDim;
            pushDim(encode[coordDimName], start, count);
            pushDim(encodeSeriesName, start, count);
            datasetRecord.categoryWayDim += count;
        }
    });
    function pushDim(dimIdxArr, idxFrom, idxCount) {
        for(var i = 0; i < idxCount; i++)dimIdxArr.push(idxFrom + i);
    }
    function getDataDimCountOnCoordDim(coordDimInfo) {
        var dimsDef = coordDimInfo.dimsDef;
        return dimsDef ? dimsDef.length : 1;
    }
    encodeItemName.length && (encode.itemName = encodeItemName);
    encodeSeriesName.length && (encode.seriesName = encodeSeriesName);
    return encode;
}
function $13c62ad003ac72f0$export$60b8a57d1f2fed26(seriesModel, source, dimCount) {
    var encode = {};
    var datasetModel = $13c62ad003ac72f0$export$8da66f73a1eda454(seriesModel);
    // Currently only make default when using dataset, util more reqirements occur.
    if (!datasetModel) return encode;
    var sourceFormat = source.sourceFormat;
    var dimensionsDefine = source.dimensionsDefine;
    var potentialNameDimIndex;
    if (sourceFormat === (0, $2b9c860c8cf83b68$export$703ae8a2d83f441) || sourceFormat === (0, $2b9c860c8cf83b68$export$6a32b42c754a3cb8)) (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(dimensionsDefine, function(dim, idx) {
        if (((0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(dim) ? dim.name : dim) === "name") potentialNameDimIndex = idx;
    });
    var idxResult = function() {
        var idxRes0 = {};
        var idxRes1 = {};
        var guessRecords = [];
        // 5 is an experience value.
        for(var i = 0, len = Math.min(5, dimCount); i < len; i++){
            var guessResult = $13c62ad003ac72f0$var$doGuessOrdinal(source.data, sourceFormat, source.seriesLayoutBy, dimensionsDefine, source.startIndex, i);
            guessRecords.push(guessResult);
            var isPureNumber = guessResult === $13c62ad003ac72f0$export$328749e9c5b40760.Not;
            // [Strategy of idxRes0]: find the first BE_ORDINAL.Not as the value dim,
            // and then find a name dim with the priority:
            // "BE_ORDINAL.Might|BE_ORDINAL.Must" > "other dim" > "the value dim itself".
            if (isPureNumber && idxRes0.v == null && i !== potentialNameDimIndex) idxRes0.v = i;
            if (idxRes0.n == null || idxRes0.n === idxRes0.v || !isPureNumber && guessRecords[idxRes0.n] === $13c62ad003ac72f0$export$328749e9c5b40760.Not) idxRes0.n = i;
            if (fulfilled(idxRes0) && guessRecords[idxRes0.n] !== $13c62ad003ac72f0$export$328749e9c5b40760.Not) return idxRes0;
            // [Strategy of idxRes1]: if idxRes0 not satisfied (that is, no BE_ORDINAL.Not),
            // find the first BE_ORDINAL.Might as the value dim,
            // and then find a name dim with the priority:
            // "other dim" > "the value dim itself".
            // That is for backward compat: number-like (e.g., `'3'`, `'55'`) can be
            // treated as number.
            if (!isPureNumber) {
                if (guessResult === $13c62ad003ac72f0$export$328749e9c5b40760.Might && idxRes1.v == null && i !== potentialNameDimIndex) idxRes1.v = i;
                if (idxRes1.n == null || idxRes1.n === idxRes1.v) idxRes1.n = i;
            }
        }
        function fulfilled(idxResult) {
            return idxResult.v != null && idxResult.n != null;
        }
        return fulfilled(idxRes0) ? idxRes0 : fulfilled(idxRes1) ? idxRes1 : null;
    }();
    if (idxResult) {
        encode.value = [
            idxResult.v
        ];
        // `potentialNameDimIndex` has highest priority.
        var nameDimIndex = potentialNameDimIndex != null ? potentialNameDimIndex : idxResult.n;
        // By default, label uses itemName in charts.
        // So we don't set encodeLabel here.
        encode.itemName = [
            nameDimIndex
        ];
        encode.seriesName = [
            nameDimIndex
        ];
    }
    return encode;
}
function $13c62ad003ac72f0$export$8da66f73a1eda454(seriesModel) {
    // Caution: consider the scenario:
    // A dataset is declared and a series is not expected to use the dataset,
    // and at the beginning `setOption({series: { noData })` (just prepare other
    // option but no data), then `setOption({series: {data: [...]}); In this case,
    // the user should set an empty array to avoid that dataset is used by default.
    var thisData = seriesModel.get("data", true);
    if (!thisData) return (0, $8917c02fd8256c67$export$dc741340f7e5f186)(seriesModel.ecModel, "dataset", {
        index: seriesModel.get("datasetIndex", true),
        id: seriesModel.get("datasetId", true)
    }, (0, $8917c02fd8256c67$export$f076738ec84e693c)).models[0];
}
function $13c62ad003ac72f0$export$397ba553479711e7(datasetModel) {
    // Only these attributes declared, we by default reference to `datasetIndex: 0`.
    // Otherwise, no reference.
    if (!datasetModel.get("transform", true) && !datasetModel.get("fromTransformResult", true)) return [];
    return (0, $8917c02fd8256c67$export$dc741340f7e5f186)(datasetModel.ecModel, "dataset", {
        index: datasetModel.get("fromDatasetIndex", true),
        id: datasetModel.get("fromDatasetId", true)
    }, (0, $8917c02fd8256c67$export$f076738ec84e693c)).models;
}
function $13c62ad003ac72f0$export$c51adf1a2be01b9c(source, dimIndex) {
    return $13c62ad003ac72f0$var$doGuessOrdinal(source.data, source.sourceFormat, source.seriesLayoutBy, source.dimensionsDefine, source.startIndex, dimIndex);
}
// dimIndex may be overflow source data.
// return {BE_ORDINAL}
function $13c62ad003ac72f0$var$doGuessOrdinal(data, sourceFormat, seriesLayoutBy, dimensionsDefine, startIndex, dimIndex) {
    var result;
    // Experience value.
    var maxLoop = 5;
    if ((0, $e44eb14c4271d0f9$export$b119cc7e1840e59c)(data)) return $13c62ad003ac72f0$export$328749e9c5b40760.Not;
    // When sourceType is 'objectRows' or 'keyedColumns', dimensionsDefine
    // always exists in source.
    var dimName;
    var dimType;
    if (dimensionsDefine) {
        var dimDefItem = dimensionsDefine[dimIndex];
        if ((0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(dimDefItem)) {
            dimName = dimDefItem.name;
            dimType = dimDefItem.type;
        } else if ((0, $e44eb14c4271d0f9$export$844ec244b1367d54)(dimDefItem)) dimName = dimDefItem;
    }
    if (dimType != null) return dimType === "ordinal" ? $13c62ad003ac72f0$export$328749e9c5b40760.Must : $13c62ad003ac72f0$export$328749e9c5b40760.Not;
    if (sourceFormat === (0, $2b9c860c8cf83b68$export$fcd62ebf51387903)) {
        var dataArrayRows = data;
        if (seriesLayoutBy === (0, $2b9c860c8cf83b68$export$d55da1467cdf7804)) {
            var sample = dataArrayRows[dimIndex];
            for(var i = 0; i < (sample || []).length && i < maxLoop; i++){
                if ((result = detectValue(sample[startIndex + i])) != null) return result;
            }
        } else for(var i = 0; i < dataArrayRows.length && i < maxLoop; i++){
            var row = dataArrayRows[startIndex + i];
            if (row && (result = detectValue(row[dimIndex])) != null) return result;
        }
    } else if (sourceFormat === (0, $2b9c860c8cf83b68$export$703ae8a2d83f441)) {
        var dataObjectRows = data;
        if (!dimName) return $13c62ad003ac72f0$export$328749e9c5b40760.Not;
        for(var i = 0; i < dataObjectRows.length && i < maxLoop; i++){
            var item = dataObjectRows[i];
            if (item && (result = detectValue(item[dimName])) != null) return result;
        }
    } else if (sourceFormat === (0, $2b9c860c8cf83b68$export$6a32b42c754a3cb8)) {
        var dataKeyedColumns = data;
        if (!dimName) return $13c62ad003ac72f0$export$328749e9c5b40760.Not;
        var sample = dataKeyedColumns[dimName];
        if (!sample || (0, $e44eb14c4271d0f9$export$b119cc7e1840e59c)(sample)) return $13c62ad003ac72f0$export$328749e9c5b40760.Not;
        for(var i = 0; i < sample.length && i < maxLoop; i++){
            if ((result = detectValue(sample[i])) != null) return result;
        }
    } else if (sourceFormat === (0, $2b9c860c8cf83b68$export$2823037fb9d8f0c6)) {
        var dataOriginal = data;
        for(var i = 0; i < dataOriginal.length && i < maxLoop; i++){
            var item = dataOriginal[i];
            var val = (0, $8917c02fd8256c67$export$2c944e12edb48d4b)(item);
            if (!(0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(val)) return $13c62ad003ac72f0$export$328749e9c5b40760.Not;
            if ((result = detectValue(val[dimIndex])) != null) return result;
        }
    }
    function detectValue(val) {
        var beStr = (0, $e44eb14c4271d0f9$export$844ec244b1367d54)(val);
        // Consider usage convenience, '1', '2' will be treated as "number".
        // `isFinit('')` get `true`.
        if (val != null && isFinite(val) && val !== "") return beStr ? $13c62ad003ac72f0$export$328749e9c5b40760.Might : $13c62ad003ac72f0$export$328749e9c5b40760.Not;
        else if (beStr && val !== "-") return $13c62ad003ac72f0$export$328749e9c5b40760.Must;
    }
    return $13c62ad003ac72f0$export$328749e9c5b40760.Not;
}


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

var $b7083c5e76243873$var$internalOptionCreatorMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
function $b7083c5e76243873$export$5a90be4668898d38(mainType, creator) {
    (0, $e44eb14c4271d0f9$export$a7a9523472993e97)($b7083c5e76243873$var$internalOptionCreatorMap.get(mainType) == null && creator);
    $b7083c5e76243873$var$internalOptionCreatorMap.set(mainType, creator);
}
function $b7083c5e76243873$export$c713a6a3b43f401d(ecModel, mainType, newCmptOptionList) {
    var internalOptionCreator = $b7083c5e76243873$var$internalOptionCreatorMap.get(mainType);
    if (!internalOptionCreator) return newCmptOptionList;
    var internalOptions = internalOptionCreator(ecModel);
    if (!internalOptions) return newCmptOptionList;
    for(var i = 0; i < internalOptions.length; i++)(0, $e44eb14c4271d0f9$export$a7a9523472993e97)((0, $8917c02fd8256c67$export$feece3e7d52a102b)(internalOptions[i]));
    return newCmptOptionList.concat(internalOptions);
}


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
var $4a5562b496bfcfa0$var$innerColor = (0, $8917c02fd8256c67$export$64df9f8d92ae083f)();
var $4a5562b496bfcfa0$var$innerDecal = (0, $8917c02fd8256c67$export$64df9f8d92ae083f)();
var $4a5562b496bfcfa0$export$55a3c39e852b90f4 = /** @class */ function() {
    function PaletteMixin() {}
    PaletteMixin.prototype.getColorFromPalette = function(name, scope, requestNum) {
        var defaultPalette = (0, $8917c02fd8256c67$export$4f07b212a02c8051)(this.get("color", true));
        var layeredPalette = this.get("colorLayer", true);
        return $4a5562b496bfcfa0$var$getFromPalette(this, $4a5562b496bfcfa0$var$innerColor, defaultPalette, layeredPalette, name, scope, requestNum);
    };
    PaletteMixin.prototype.clearColorPalette = function() {
        $4a5562b496bfcfa0$var$clearPalette(this, $4a5562b496bfcfa0$var$innerColor);
    };
    return PaletteMixin;
}();
function $4a5562b496bfcfa0$export$e4d892222945a227(ecModel, name, scope, requestNum) {
    var defaultDecals = (0, $8917c02fd8256c67$export$4f07b212a02c8051)(ecModel.get([
        "aria",
        "decal",
        "decals"
    ]));
    return $4a5562b496bfcfa0$var$getFromPalette(ecModel, $4a5562b496bfcfa0$var$innerDecal, defaultDecals, null, name, scope, requestNum);
}
function $4a5562b496bfcfa0$var$getNearestPalette(palettes, requestColorNum) {
    var paletteNum = palettes.length;
    // TODO palettes must be in order
    for(var i = 0; i < paletteNum; i++){
        if (palettes[i].length > requestColorNum) return palettes[i];
    }
    return palettes[paletteNum - 1];
}
/**
 * @param name MUST NOT be null/undefined. Otherwise call this function
 *             twise with the same parameters will get different result.
 * @param scope default this.
 * @return Can be null/undefined
 */ function $4a5562b496bfcfa0$var$getFromPalette(that, inner, defaultPalette, layeredPalette, name, scope, requestNum) {
    scope = scope || that;
    var scopeFields = inner(scope);
    var paletteIdx = scopeFields.paletteIdx || 0;
    var paletteNameMap = scopeFields.paletteNameMap = scopeFields.paletteNameMap || {};
    // Use `hasOwnProperty` to avoid conflict with Object.prototype.
    if (paletteNameMap.hasOwnProperty(name)) return paletteNameMap[name];
    var palette = requestNum == null || !layeredPalette ? defaultPalette : $4a5562b496bfcfa0$var$getNearestPalette(layeredPalette, requestNum);
    // In case can't find in layered color palette.
    palette = palette || defaultPalette;
    if (!palette || !palette.length) return;
    var pickedPaletteItem = palette[paletteIdx];
    if (name) paletteNameMap[name] = pickedPaletteItem;
    scopeFields.paletteIdx = (paletteIdx + 1) % palette.length;
    return pickedPaletteItem;
}
function $4a5562b496bfcfa0$var$clearPalette(that, inner) {
    inner(that).paletteIdx = 0;
    inner(that).paletteNameMap = {};
}



// -----------------------
// Internal method names:
// -----------------------
var $c50755d14f3a6f2b$var$reCreateSeriesIndices;
var $c50755d14f3a6f2b$var$assertSeriesInitialized;
var $c50755d14f3a6f2b$var$initBase;
var $c50755d14f3a6f2b$var$OPTION_INNER_KEY = "\0_ec_inner";
var $c50755d14f3a6f2b$var$OPTION_INNER_VALUE = 1;
var $c50755d14f3a6f2b$var$BUITIN_COMPONENTS_MAP = {
    grid: "GridComponent",
    polar: "PolarComponent",
    geo: "GeoComponent",
    singleAxis: "SingleAxisComponent",
    parallel: "ParallelComponent",
    calendar: "CalendarComponent",
    graphic: "GraphicComponent",
    toolbox: "ToolboxComponent",
    tooltip: "TooltipComponent",
    axisPointer: "AxisPointerComponent",
    brush: "BrushComponent",
    title: "TitleComponent",
    timeline: "TimelineComponent",
    markPoint: "MarkPointComponent",
    markLine: "MarkLineComponent",
    markArea: "MarkAreaComponent",
    legend: "LegendComponent",
    dataZoom: "DataZoomComponent",
    visualMap: "VisualMapComponent",
    // aria: 'AriaComponent',
    // dataset: 'DatasetComponent',
    // Dependencies
    xAxis: "GridComponent",
    yAxis: "GridComponent",
    angleAxis: "PolarComponent",
    radiusAxis: "PolarComponent"
};
var $c50755d14f3a6f2b$var$BUILTIN_CHARTS_MAP = {
    line: "LineChart",
    bar: "BarChart",
    pie: "PieChart",
    scatter: "ScatterChart",
    radar: "RadarChart",
    map: "MapChart",
    tree: "TreeChart",
    treemap: "TreemapChart",
    graph: "GraphChart",
    gauge: "GaugeChart",
    funnel: "FunnelChart",
    parallel: "ParallelChart",
    sankey: "SankeyChart",
    boxplot: "BoxplotChart",
    candlestick: "CandlestickChart",
    effectScatter: "EffectScatterChart",
    lines: "LinesChart",
    heatmap: "HeatmapChart",
    pictorialBar: "PictorialBarChart",
    themeRiver: "ThemeRiverChart",
    sunburst: "SunburstChart",
    custom: "CustomChart"
};
var $c50755d14f3a6f2b$var$componetsMissingLogPrinted = {};
function $c50755d14f3a6f2b$var$checkMissingComponents(option) {
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(option, function(componentOption, mainType) {
        if (!(0, $a756077528c07361$export$2e2bcd8739ae039).hasClass(mainType)) {
            var componentImportName = $c50755d14f3a6f2b$var$BUITIN_COMPONENTS_MAP[mainType];
            if (componentImportName && !$c50755d14f3a6f2b$var$componetsMissingLogPrinted[componentImportName]) {
                (0, $4796c55e8b767685$export$a3bc9b8ed74fc)("Component " + mainType + " is used but not imported.\nimport { " + componentImportName + " } from 'echarts/components';\necharts.use([" + componentImportName + "]);");
                $c50755d14f3a6f2b$var$componetsMissingLogPrinted[componentImportName] = true;
            }
        }
    });
}
var $c50755d14f3a6f2b$var$GlobalModel = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(GlobalModel, _super);
    function GlobalModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GlobalModel.prototype.init = function(option, parentModel, ecModel, theme, locale, optionManager) {
        theme = theme || {};
        this.option = null; // Mark as not initialized.
        this._theme = new (0, $d92ec0eb853c4005$export$2e2bcd8739ae039)(theme);
        this._locale = new (0, $d92ec0eb853c4005$export$2e2bcd8739ae039)(locale);
        this._optionManager = optionManager;
    };
    GlobalModel.prototype.setOption = function(option, opts, optionPreprocessorFuncs) {
        (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(option != null, "option is null/undefined");
        (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(option[$c50755d14f3a6f2b$var$OPTION_INNER_KEY] !== $c50755d14f3a6f2b$var$OPTION_INNER_VALUE, "please use chart.getOption()");
        var innerOpt = $c50755d14f3a6f2b$var$normalizeSetOptionInput(opts);
        this._optionManager.setOption(option, optionPreprocessorFuncs, innerOpt);
        this._resetOption(null, innerOpt);
    };
    /**
   * @param type null/undefined: reset all.
   *        'recreate': force recreate all.
   *        'timeline': only reset timeline option
   *        'media': only reset media query option
   * @return Whether option changed.
   */ GlobalModel.prototype.resetOption = function(type, opt) {
        return this._resetOption(type, $c50755d14f3a6f2b$var$normalizeSetOptionInput(opt));
    };
    GlobalModel.prototype._resetOption = function(type, opt) {
        var optionChanged = false;
        var optionManager = this._optionManager;
        if (!type || type === "recreate") {
            var baseOption = optionManager.mountOption(type === "recreate");
            $c50755d14f3a6f2b$var$checkMissingComponents(baseOption);
            if (!this.option || type === "recreate") $c50755d14f3a6f2b$var$initBase(this, baseOption);
            else {
                this.restoreData();
                this._mergeOption(baseOption, opt);
            }
            optionChanged = true;
        }
        if (type === "timeline" || type === "media") this.restoreData();
        // By design, if `setOption(option2)` at the second time, and `option2` is a `ECUnitOption`,
        // it should better not have the same props with `MediaUnit['option']`.
        // Because either `option2` or `MediaUnit['option']` will be always merged to "current option"
        // rather than original "baseOption". If they both override a prop, the result might be
        // unexpected when media state changed after `setOption` called.
        // If we really need to modify a props in each `MediaUnit['option']`, use the full version
        // (`{baseOption, media}`) in `setOption`.
        // For `timeline`, the case is the same.
        if (!type || type === "recreate" || type === "timeline") {
            var timelineOption = optionManager.getTimelineOption(this);
            if (timelineOption) {
                optionChanged = true;
                this._mergeOption(timelineOption, opt);
            }
        }
        if (!type || type === "recreate" || type === "media") {
            var mediaOptions = optionManager.getMediaOption(this);
            if (mediaOptions.length) (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(mediaOptions, function(mediaOption) {
                optionChanged = true;
                this._mergeOption(mediaOption, opt);
            }, this);
        }
        return optionChanged;
    };
    GlobalModel.prototype.mergeOption = function(option) {
        this._mergeOption(option, null);
    };
    GlobalModel.prototype._mergeOption = function(newOption, opt) {
        var option = this.option;
        var componentsMap = this._componentsMap;
        var componentsCount = this._componentsCount;
        var newCmptTypes = [];
        var newCmptTypeMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
        var replaceMergeMainTypeMap = opt && opt.replaceMergeMainTypeMap;
        (0, $13c62ad003ac72f0$export$b30cdea50aa00e6)(this);
        // If no component class, merge directly.
        // For example: color, animaiton options, etc.
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(newOption, function(componentOption, mainType) {
            if (componentOption == null) return;
            if (!(0, $a756077528c07361$export$2e2bcd8739ae039).hasClass(mainType)) // globalSettingTask.dirty();
            option[mainType] = option[mainType] == null ? (0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(componentOption) : (0, $e44eb14c4271d0f9$export$4950aa0f605343fb)(option[mainType], componentOption, true);
            else if (mainType) {
                newCmptTypes.push(mainType);
                newCmptTypeMap.set(mainType, true);
            }
        });
        if (replaceMergeMainTypeMap) // If there is a mainType `xxx` in `replaceMerge` but not declared in option,
        // we trade it as it is declared in option as `{xxx: []}`. Because:
        // (1) for normal merge, `{xxx: null/undefined}` are the same meaning as `{xxx: []}`.
        // (2) some preprocessor may convert some of `{xxx: null/undefined}` to `{xxx: []}`.
        replaceMergeMainTypeMap.each(function(val, mainTypeInReplaceMerge) {
            if ((0, $a756077528c07361$export$2e2bcd8739ae039).hasClass(mainTypeInReplaceMerge) && !newCmptTypeMap.get(mainTypeInReplaceMerge)) {
                newCmptTypes.push(mainTypeInReplaceMerge);
                newCmptTypeMap.set(mainTypeInReplaceMerge, true);
            }
        });
        (0, $a756077528c07361$export$2e2bcd8739ae039).topologicalTravel(newCmptTypes, (0, $a756077528c07361$export$2e2bcd8739ae039).getAllClassMainTypes(), visitComponent, this);
        function visitComponent(mainType) {
            var newCmptOptionList = (0, $b7083c5e76243873$export$c713a6a3b43f401d)(this, mainType, $8917c02fd8256c67$export$4f07b212a02c8051(newOption[mainType]));
            var oldCmptList = componentsMap.get(mainType);
            var mergeMode = // `!oldCmptList` means init. See the comment in `mappingToExists`
            !oldCmptList ? "replaceAll" : replaceMergeMainTypeMap && replaceMergeMainTypeMap.get(mainType) ? "replaceMerge" : "normalMerge";
            var mappingResult = $8917c02fd8256c67$export$574f818966e4da87(oldCmptList, newCmptOptionList, mergeMode);
            // Set mainType and complete subType.
            $8917c02fd8256c67$export$5ac61aca2ba0282d(mappingResult, mainType, (0, $a756077528c07361$export$2e2bcd8739ae039));
            // Empty it before the travel, in order to prevent `this._componentsMap`
            // from being used in the `init`/`mergeOption`/`optionUpdated` of some
            // components, which is probably incorrect logic.
            option[mainType] = null;
            componentsMap.set(mainType, null);
            componentsCount.set(mainType, 0);
            var optionsByMainType = [];
            var cmptsByMainType = [];
            var cmptsCountByMainType = 0;
            var tooltipExists;
            var tooltipWarningLogged;
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(mappingResult, function(resultItem, index) {
                var componentModel = resultItem.existing;
                var newCmptOption = resultItem.newOption;
                if (!newCmptOption) {
                    if (componentModel) {
                        // Consider where is no new option and should be merged using {},
                        // see removeEdgeAndAdd in topologicalTravel and
                        // ComponentModel.getAllClassMainTypes.
                        componentModel.mergeOption({}, this);
                        componentModel.optionUpdated({}, false);
                    }
                } else {
                    var isSeriesType = mainType === "series";
                    var ComponentModelClass = (0, $a756077528c07361$export$2e2bcd8739ae039).getClass(mainType, resultItem.keyInfo.subType, !isSeriesType // Give a more detailed warn later if series don't exists
                    );
                    if (!ComponentModelClass) {
                        var subType = resultItem.keyInfo.subType;
                        var seriesImportName = $c50755d14f3a6f2b$var$BUILTIN_CHARTS_MAP[subType];
                        if (!$c50755d14f3a6f2b$var$componetsMissingLogPrinted[subType]) {
                            $c50755d14f3a6f2b$var$componetsMissingLogPrinted[subType] = true;
                            if (seriesImportName) (0, $4796c55e8b767685$export$a3bc9b8ed74fc)("Series " + subType + " is used but not imported.\nimport { " + seriesImportName + " } from 'echarts/charts';\necharts.use([" + seriesImportName + "]);");
                            else (0, $4796c55e8b767685$export$a3bc9b8ed74fc)("Unknown series " + subType);
                        }
                        return;
                    }
                    // TODO Before multiple tooltips get supported, we do this check to avoid unexpected exception.
                    if (mainType === "tooltip") {
                        if (tooltipExists) {
                            if (!tooltipWarningLogged) {
                                (0, $4796c55e8b767685$export$c106dd0671a0fc2d)("Currently only one tooltip component is allowed.");
                                tooltipWarningLogged = true;
                            }
                            return;
                        }
                        tooltipExists = true;
                    }
                    if (componentModel && componentModel.constructor === ComponentModelClass) {
                        componentModel.name = resultItem.keyInfo.name;
                        // componentModel.settingTask && componentModel.settingTask.dirty();
                        componentModel.mergeOption(newCmptOption, this);
                        componentModel.optionUpdated(newCmptOption, false);
                    } else {
                        // PENDING Global as parent ?
                        var extraOpt = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({
                            componentIndex: index
                        }, resultItem.keyInfo);
                        componentModel = new ComponentModelClass(newCmptOption, this, this, extraOpt);
                        // Assign `keyInfo`
                        (0, $e44eb14c4271d0f9$export$8b58be045bf06082)(componentModel, extraOpt);
                        if (resultItem.brandNew) componentModel.__requireNewView = true;
                        componentModel.init(newCmptOption, this, this);
                        // Call optionUpdated after init.
                        // newCmptOption has been used as componentModel.option
                        // and may be merged with theme and default, so pass null
                        // to avoid confusion.
                        componentModel.optionUpdated(null, true);
                    }
                }
                if (componentModel) {
                    optionsByMainType.push(componentModel.option);
                    cmptsByMainType.push(componentModel);
                    cmptsCountByMainType++;
                } else {
                    // Always do assign to avoid elided item in array.
                    optionsByMainType.push(void 0);
                    cmptsByMainType.push(void 0);
                }
            }, this);
            option[mainType] = optionsByMainType;
            componentsMap.set(mainType, cmptsByMainType);
            componentsCount.set(mainType, cmptsCountByMainType);
            // Backup series for filtering.
            if (mainType === "series") $c50755d14f3a6f2b$var$reCreateSeriesIndices(this);
        }
        // If no series declared, ensure `_seriesIndices` initialized.
        if (!this._seriesIndices) $c50755d14f3a6f2b$var$reCreateSeriesIndices(this);
    };
    /**
   * Get option for output (cloned option and inner info removed)
   */ GlobalModel.prototype.getOption = function() {
        var option = (0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(this.option);
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(option, function(optInMainType, mainType) {
            if ((0, $a756077528c07361$export$2e2bcd8739ae039).hasClass(mainType)) {
                var opts = $8917c02fd8256c67$export$4f07b212a02c8051(optInMainType);
                // Inner cmpts need to be removed.
                // Inner cmpts might not be at last since ec5.0, but still
                // compatible for users: if inner cmpt at last, splice the returned array.
                var realLen = opts.length;
                var metNonInner = false;
                for(var i = realLen - 1; i >= 0; i--)// Remove options with inner id.
                if (opts[i] && !$8917c02fd8256c67$export$feece3e7d52a102b(opts[i])) metNonInner = true;
                else {
                    opts[i] = null;
                    !metNonInner && realLen--;
                }
                opts.length = realLen;
                option[mainType] = opts;
            }
        });
        delete option[$c50755d14f3a6f2b$var$OPTION_INNER_KEY];
        return option;
    };
    GlobalModel.prototype.getTheme = function() {
        return this._theme;
    };
    GlobalModel.prototype.getLocaleModel = function() {
        return this._locale;
    };
    GlobalModel.prototype.setUpdatePayload = function(payload) {
        this._payload = payload;
    };
    GlobalModel.prototype.getUpdatePayload = function() {
        return this._payload;
    };
    /**
   * @param idx If not specified, return the first one.
   */ GlobalModel.prototype.getComponent = function(mainType, idx) {
        var list = this._componentsMap.get(mainType);
        if (list) {
            var cmpt = list[idx || 0];
            if (cmpt) return cmpt;
            else if (idx == null) for(var i = 0; i < list.length; i++){
                if (list[i]) return list[i];
            }
        }
    };
    /**
   * @return Never be null/undefined.
   */ GlobalModel.prototype.queryComponents = function(condition) {
        var mainType = condition.mainType;
        if (!mainType) return [];
        var index = condition.index;
        var id = condition.id;
        var name = condition.name;
        var cmpts = this._componentsMap.get(mainType);
        if (!cmpts || !cmpts.length) return [];
        var result;
        if (index != null) {
            result = [];
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)($8917c02fd8256c67$export$4f07b212a02c8051(index), function(idx) {
                cmpts[idx] && result.push(cmpts[idx]);
            });
        } else if (id != null) result = $c50755d14f3a6f2b$var$queryByIdOrName("id", id, cmpts);
        else if (name != null) result = $c50755d14f3a6f2b$var$queryByIdOrName("name", name, cmpts);
        else // Return all non-empty components in that mainType
        result = (0, $e44eb14c4271d0f9$export$3dea766d36a8935f)(cmpts, function(cmpt) {
            return !!cmpt;
        });
        return $c50755d14f3a6f2b$var$filterBySubType(result, condition);
    };
    /**
   * The interface is different from queryComponents,
   * which is convenient for inner usage.
   *
   * @usage
   * let result = findComponents(
   *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}}
   * );
   * let result = findComponents(
   *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}}
   * );
   * let result = findComponents(
   *     {mainType: 'series',
   *     filter: function (model, index) {...}}
   * );
   * // result like [component0, componnet1, ...]
   */ GlobalModel.prototype.findComponents = function(condition) {
        var query = condition.query;
        var mainType = condition.mainType;
        var queryCond = getQueryCond(query);
        var result = queryCond ? this.queryComponents(queryCond) : (0, $e44eb14c4271d0f9$export$3dea766d36a8935f)(this._componentsMap.get(mainType), function(cmpt) {
            return !!cmpt;
        });
        return doFilter($c50755d14f3a6f2b$var$filterBySubType(result, condition));
        function getQueryCond(q) {
            var indexAttr = mainType + "Index";
            var idAttr = mainType + "Id";
            var nameAttr = mainType + "Name";
            return q && (q[indexAttr] != null || q[idAttr] != null || q[nameAttr] != null) ? {
                mainType: mainType,
                // subType will be filtered finally.
                index: q[indexAttr],
                id: q[idAttr],
                name: q[nameAttr]
            } : null;
        }
        function doFilter(res) {
            return condition.filter ? (0, $e44eb14c4271d0f9$export$3dea766d36a8935f)(res, condition.filter) : res;
        }
    };
    GlobalModel.prototype.eachComponent = function(mainType, cb, context) {
        var componentsMap = this._componentsMap;
        if ((0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(mainType)) {
            var ctxForAll_1 = cb;
            var cbForAll_1 = mainType;
            componentsMap.each(function(cmpts, componentType) {
                for(var i = 0; cmpts && i < cmpts.length; i++){
                    var cmpt = cmpts[i];
                    cmpt && cbForAll_1.call(ctxForAll_1, componentType, cmpt, cmpt.componentIndex);
                }
            });
        } else {
            var cmpts = (0, $e44eb14c4271d0f9$export$844ec244b1367d54)(mainType) ? componentsMap.get(mainType) : (0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(mainType) ? this.findComponents(mainType) : null;
            for(var i = 0; cmpts && i < cmpts.length; i++){
                var cmpt = cmpts[i];
                cmpt && cb.call(context, cmpt, cmpt.componentIndex);
            }
        }
    };
    /**
   * Get series list before filtered by name.
   */ GlobalModel.prototype.getSeriesByName = function(name) {
        var nameStr = $8917c02fd8256c67$export$fb1a222ba5dd6e51(name, null);
        return (0, $e44eb14c4271d0f9$export$3dea766d36a8935f)(this._componentsMap.get("series"), function(oneSeries) {
            return !!oneSeries && nameStr != null && oneSeries.name === nameStr;
        });
    };
    /**
   * Get series list before filtered by index.
   */ GlobalModel.prototype.getSeriesByIndex = function(seriesIndex) {
        return this._componentsMap.get("series")[seriesIndex];
    };
    /**
   * Get series list before filtered by type.
   * FIXME: rename to getRawSeriesByType?
   */ GlobalModel.prototype.getSeriesByType = function(subType) {
        return (0, $e44eb14c4271d0f9$export$3dea766d36a8935f)(this._componentsMap.get("series"), function(oneSeries) {
            return !!oneSeries && oneSeries.subType === subType;
        });
    };
    /**
   * Get all series before filtered.
   */ GlobalModel.prototype.getSeries = function() {
        return (0, $e44eb14c4271d0f9$export$3dea766d36a8935f)(this._componentsMap.get("series"), function(oneSeries) {
            return !!oneSeries;
        });
    };
    /**
   * Count series before filtered.
   */ GlobalModel.prototype.getSeriesCount = function() {
        return this._componentsCount.get("series");
    };
    /**
   * After filtering, series may be different
   * from raw series.
   */ GlobalModel.prototype.eachSeries = function(cb, context) {
        $c50755d14f3a6f2b$var$assertSeriesInitialized(this);
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(this._seriesIndices, function(rawSeriesIndex) {
            var series = this._componentsMap.get("series")[rawSeriesIndex];
            cb.call(context, series, rawSeriesIndex);
        }, this);
    };
    /**
   * Iterate raw series before filtered.
   *
   * @param {Function} cb
   * @param {*} context
   */ GlobalModel.prototype.eachRawSeries = function(cb, context) {
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(this._componentsMap.get("series"), function(series) {
            series && cb.call(context, series, series.componentIndex);
        });
    };
    /**
   * After filtering, series may be different.
   * from raw series.
   */ GlobalModel.prototype.eachSeriesByType = function(subType, cb, context) {
        $c50755d14f3a6f2b$var$assertSeriesInitialized(this);
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(this._seriesIndices, function(rawSeriesIndex) {
            var series = this._componentsMap.get("series")[rawSeriesIndex];
            if (series.subType === subType) cb.call(context, series, rawSeriesIndex);
        }, this);
    };
    /**
   * Iterate raw series before filtered of given type.
   */ GlobalModel.prototype.eachRawSeriesByType = function(subType, cb, context) {
        return (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(this.getSeriesByType(subType), cb, context);
    };
    GlobalModel.prototype.isSeriesFiltered = function(seriesModel) {
        $c50755d14f3a6f2b$var$assertSeriesInitialized(this);
        return this._seriesIndicesMap.get(seriesModel.componentIndex) == null;
    };
    GlobalModel.prototype.getCurrentSeriesIndices = function() {
        return (this._seriesIndices || []).slice();
    };
    GlobalModel.prototype.filterSeries = function(cb, context) {
        $c50755d14f3a6f2b$var$assertSeriesInitialized(this);
        var newSeriesIndices = [];
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(this._seriesIndices, function(seriesRawIdx) {
            var series = this._componentsMap.get("series")[seriesRawIdx];
            cb.call(context, series, seriesRawIdx) && newSeriesIndices.push(seriesRawIdx);
        }, this);
        this._seriesIndices = newSeriesIndices;
        this._seriesIndicesMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)(newSeriesIndices);
    };
    GlobalModel.prototype.restoreData = function(payload) {
        $c50755d14f3a6f2b$var$reCreateSeriesIndices(this);
        var componentsMap = this._componentsMap;
        var componentTypes = [];
        componentsMap.each(function(components, componentType) {
            if ((0, $a756077528c07361$export$2e2bcd8739ae039).hasClass(componentType)) componentTypes.push(componentType);
        });
        (0, $a756077528c07361$export$2e2bcd8739ae039).topologicalTravel(componentTypes, (0, $a756077528c07361$export$2e2bcd8739ae039).getAllClassMainTypes(), function(componentType) {
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(componentsMap.get(componentType), function(component) {
                if (component && (componentType !== "series" || !$c50755d14f3a6f2b$var$isNotTargetSeries(component, payload))) component.restoreData();
            });
        });
    };
    GlobalModel.internalField = function() {
        $c50755d14f3a6f2b$var$reCreateSeriesIndices = function(ecModel) {
            var seriesIndices = ecModel._seriesIndices = [];
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(ecModel._componentsMap.get("series"), function(series) {
                // series may have been removed by `replaceMerge`.
                series && seriesIndices.push(series.componentIndex);
            });
            ecModel._seriesIndicesMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)(seriesIndices);
        };
        $c50755d14f3a6f2b$var$assertSeriesInitialized = function(ecModel) {
            if (!ecModel._seriesIndices) throw new Error("Option should contains series.");
        };
        $c50755d14f3a6f2b$var$initBase = function(ecModel, baseOption) {
            // Using OPTION_INNER_KEY to mark that this option cannot be used outside,
            // i.e. `chart.setOption(chart.getModel().option);` is forbidden.
            ecModel.option = {};
            ecModel.option[$c50755d14f3a6f2b$var$OPTION_INNER_KEY] = $c50755d14f3a6f2b$var$OPTION_INNER_VALUE;
            // Init with series: [], in case of calling findSeries method
            // before series initialized.
            ecModel._componentsMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)({
                series: []
            });
            ecModel._componentsCount = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
            // If user spefied `option.aria`, aria will be enable. This detection should be
            // performed before theme and globalDefault merge.
            var airaOption = baseOption.aria;
            if ((0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(airaOption) && airaOption.enabled == null) airaOption.enabled = true;
            $c50755d14f3a6f2b$var$mergeTheme(baseOption, ecModel._theme.option);
            // TODO Needs clone when merging to the unexisted property
            (0, $e44eb14c4271d0f9$export$4950aa0f605343fb)(baseOption, (0, $bff67db65a106024$export$2e2bcd8739ae039), false);
            ecModel._mergeOption(baseOption, null);
        };
    }();
    return GlobalModel;
}((0, $d92ec0eb853c4005$export$2e2bcd8739ae039));
function $c50755d14f3a6f2b$var$isNotTargetSeries(seriesModel, payload) {
    if (payload) {
        var index = payload.seriesIndex;
        var id = payload.seriesId;
        var name_1 = payload.seriesName;
        return index != null && seriesModel.componentIndex !== index || id != null && seriesModel.id !== id || name_1 != null && seriesModel.name !== name_1;
    }
}
function $c50755d14f3a6f2b$var$mergeTheme(option, theme) {
    // PENDING
    // NOT use `colorLayer` in theme if option has `color`
    var notMergeColorLayer = option.color && !option.colorLayer;
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(theme, function(themeItem, name) {
        if (name === "colorLayer" && notMergeColorLayer) return;
        // If it is component model mainType, the model handles that merge later.
        // otherwise, merge them here.
        if (!(0, $a756077528c07361$export$2e2bcd8739ae039).hasClass(name)) {
            if (typeof themeItem === "object") option[name] = !option[name] ? (0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(themeItem) : (0, $e44eb14c4271d0f9$export$4950aa0f605343fb)(option[name], themeItem, false);
            else if (option[name] == null) option[name] = themeItem;
        }
    });
}
function $c50755d14f3a6f2b$var$queryByIdOrName(attr, idOrName, cmpts) {
    // Here is a break from echarts4: string and number are
    // treated as equal.
    if ((0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(idOrName)) {
        var keyMap_1 = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(idOrName, function(idOrNameItem) {
            if (idOrNameItem != null) {
                var idName = $8917c02fd8256c67$export$fb1a222ba5dd6e51(idOrNameItem, null);
                idName != null && keyMap_1.set(idOrNameItem, true);
            }
        });
        return (0, $e44eb14c4271d0f9$export$3dea766d36a8935f)(cmpts, function(cmpt) {
            return cmpt && keyMap_1.get(cmpt[attr]);
        });
    } else {
        var idName_1 = $8917c02fd8256c67$export$fb1a222ba5dd6e51(idOrName, null);
        return (0, $e44eb14c4271d0f9$export$3dea766d36a8935f)(cmpts, function(cmpt) {
            return cmpt && idName_1 != null && cmpt[attr] === idName_1;
        });
    }
}
function $c50755d14f3a6f2b$var$filterBySubType(components, condition) {
    // Using hasOwnProperty for restrict. Consider
    // subType is undefined in user payload.
    return condition.hasOwnProperty("subType") ? (0, $e44eb14c4271d0f9$export$3dea766d36a8935f)(components, function(cmpt) {
        return cmpt && cmpt.subType === condition.subType;
    }) : components;
}
function $c50755d14f3a6f2b$var$normalizeSetOptionInput(opts) {
    var replaceMergeMainTypeMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
    opts && (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)($8917c02fd8256c67$export$4f07b212a02c8051(opts.replaceMerge), function(mainType) {
        (0, $e44eb14c4271d0f9$export$a7a9523472993e97)((0, $a756077528c07361$export$2e2bcd8739ae039).hasClass(mainType), '"' + mainType + '" is not valid component main type in "replaceMerge"');
        replaceMergeMainTypeMap.set(mainType, true);
    });
    return {
        replaceMergeMainTypeMap: replaceMergeMainTypeMap
    };
}
(0, $e44eb14c4271d0f9$export$e36fc9d62a853069)($c50755d14f3a6f2b$var$GlobalModel, (0, $4a5562b496bfcfa0$export$55a3c39e852b90f4));
var $c50755d14f3a6f2b$export$2e2bcd8739ae039 = $c50755d14f3a6f2b$var$GlobalModel;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
var $3d3bd8865085eb14$var$availableMethods = [
    "getDom",
    "getZr",
    "getWidth",
    "getHeight",
    "getDevicePixelRatio",
    "dispatchAction",
    "isSSR",
    "isDisposed",
    "on",
    "off",
    "getDataURL",
    "getConnectedDataURL",
    // 'getModel',
    "getOption",
    // 'getViewOfComponentModel',
    // 'getViewOfSeriesModel',
    "getId",
    "updateLabelLayout"
];
var $3d3bd8865085eb14$var$ExtensionAPI = /** @class */ function() {
    function ExtensionAPI(ecInstance) {
        $e44eb14c4271d0f9$export$79b2f7037acddd43($3d3bd8865085eb14$var$availableMethods, function(methodName) {
            this[methodName] = $e44eb14c4271d0f9$export$2385a24977818dd0(ecInstance[methodName], ecInstance);
        }, this);
    }
    return ExtensionAPI;
}();
var $3d3bd8865085eb14$export$2e2bcd8739ae039 = $3d3bd8865085eb14$var$ExtensionAPI;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
var $8ac678ded05cd5de$var$coordinateSystemCreators = {};
var $8ac678ded05cd5de$var$CoordinateSystemManager = /** @class */ function() {
    function CoordinateSystemManager() {
        this._coordinateSystems = [];
    }
    CoordinateSystemManager.prototype.create = function(ecModel, api) {
        var coordinateSystems = [];
        $e44eb14c4271d0f9$export$79b2f7037acddd43($8ac678ded05cd5de$var$coordinateSystemCreators, function(creator, type) {
            var list = creator.create(ecModel, api);
            coordinateSystems = coordinateSystems.concat(list || []);
        });
        this._coordinateSystems = coordinateSystems;
    };
    CoordinateSystemManager.prototype.update = function(ecModel, api) {
        $e44eb14c4271d0f9$export$79b2f7037acddd43(this._coordinateSystems, function(coordSys) {
            coordSys.update && coordSys.update(ecModel, api);
        });
    };
    CoordinateSystemManager.prototype.getCoordinateSystems = function() {
        return this._coordinateSystems.slice();
    };
    CoordinateSystemManager.register = function(type, creator) {
        $8ac678ded05cd5de$var$coordinateSystemCreators[type] = creator;
    };
    CoordinateSystemManager.get = function(type) {
        return $8ac678ded05cd5de$var$coordinateSystemCreators[type];
    };
    return CoordinateSystemManager;
}();
var $8ac678ded05cd5de$export$2e2bcd8739ae039 = $8ac678ded05cd5de$var$CoordinateSystemManager;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 


var $8f4e8d16f52a38b2$var$QUERY_REG = /^(min|max)?(.+)$/;
// Key: mainType
// type FakeComponentsMap = HashMap<(MappingExistingItem & { subType: string })[]>;
/**
 * TERM EXPLANATIONS:
 * See `ECOption` and `ECUnitOption` in `src/util/types.ts`.
 */ var $8f4e8d16f52a38b2$var$OptionManager = /** @class */ function() {
    // timeline.notMerge is not supported in ec3. Firstly there is rearly
    // case that notMerge is needed. Secondly supporting 'notMerge' requires
    // rawOption cloned and backuped when timeline changed, which does no
    // good to performance. What's more, that both timeline and setOption
    // method supply 'notMerge' brings complex and some problems.
    // Consider this case:
    // (step1) chart.setOption({timeline: {notMerge: false}, ...}, false);
    // (step2) chart.setOption({timeline: {notMerge: true}, ...}, false);
    function OptionManager(api) {
        this._timelineOptions = [];
        this._mediaList = [];
        /**
     * -1, means default.
     * empty means no media.
     */ this._currentMediaIndices = [];
        this._api = api;
    }
    OptionManager.prototype.setOption = function(rawOption, optionPreprocessorFuncs, opt) {
        if (rawOption) {
            // That set dat primitive is dangerous if user reuse the data when setOption again.
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)((0, $8917c02fd8256c67$export$4f07b212a02c8051)(rawOption.series), function(series) {
                series && series.data && (0, $e44eb14c4271d0f9$export$b119cc7e1840e59c)(series.data) && (0, $e44eb14c4271d0f9$export$112e66431016387b)(series.data);
            });
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)((0, $8917c02fd8256c67$export$4f07b212a02c8051)(rawOption.dataset), function(dataset) {
                dataset && dataset.source && (0, $e44eb14c4271d0f9$export$b119cc7e1840e59c)(dataset.source) && (0, $e44eb14c4271d0f9$export$112e66431016387b)(dataset.source);
            });
        }
        // Caution: some series modify option data, if do not clone,
        // it should ensure that the repeat modify correctly
        // (create a new object when modify itself).
        rawOption = (0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(rawOption);
        // FIXME
        // If some property is set in timeline options or media option but
        // not set in baseOption, a warning should be given.
        var optionBackup = this._optionBackup;
        var newParsedOption = $8f4e8d16f52a38b2$var$parseRawOption(rawOption, optionPreprocessorFuncs, !optionBackup);
        this._newBaseOption = newParsedOption.baseOption;
        // For setOption at second time (using merge mode);
        if (optionBackup) {
            // FIXME
            // the restore merge solution is essentially incorrect.
            // the mapping can not be 100% consistent with ecModel, which probably brings
            // potential bug!
            // The first merge is delayed, because in most cases, users do not call `setOption` twice.
            // let fakeCmptsMap = this._fakeCmptsMap;
            // if (!fakeCmptsMap) {
            //     fakeCmptsMap = this._fakeCmptsMap = createHashMap();
            //     mergeToBackupOption(fakeCmptsMap, null, optionBackup.baseOption, null);
            // }
            // mergeToBackupOption(
            //     fakeCmptsMap, optionBackup.baseOption, newParsedOption.baseOption, opt
            // );
            // For simplicity, timeline options and media options do not support merge,
            // that is, if you `setOption` twice and both has timeline options, the latter
            // timeline options will not be merged to the former, but just substitute them.
            if (newParsedOption.timelineOptions.length) optionBackup.timelineOptions = newParsedOption.timelineOptions;
            if (newParsedOption.mediaList.length) optionBackup.mediaList = newParsedOption.mediaList;
            if (newParsedOption.mediaDefault) optionBackup.mediaDefault = newParsedOption.mediaDefault;
        } else this._optionBackup = newParsedOption;
    };
    OptionManager.prototype.mountOption = function(isRecreate) {
        var optionBackup = this._optionBackup;
        this._timelineOptions = optionBackup.timelineOptions;
        this._mediaList = optionBackup.mediaList;
        this._mediaDefault = optionBackup.mediaDefault;
        this._currentMediaIndices = [];
        return (0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(isRecreate ? optionBackup.baseOption : this._newBaseOption);
    };
    OptionManager.prototype.getTimelineOption = function(ecModel) {
        var option;
        var timelineOptions = this._timelineOptions;
        if (timelineOptions.length) {
            // getTimelineOption can only be called after ecModel inited,
            // so we can get currentIndex from timelineModel.
            var timelineModel = ecModel.getComponent("timeline");
            if (timelineModel) option = (0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(// FIXME:TS as TimelineModel or quivlant interface
            timelineOptions[timelineModel.getCurrentIndex()]);
        }
        return option;
    };
    OptionManager.prototype.getMediaOption = function(ecModel) {
        var ecWidth = this._api.getWidth();
        var ecHeight = this._api.getHeight();
        var mediaList = this._mediaList;
        var mediaDefault = this._mediaDefault;
        var indices = [];
        var result = [];
        // No media defined.
        if (!mediaList.length && !mediaDefault) return result;
        // Multi media may be applied, the latter defined media has higher priority.
        for(var i = 0, len = mediaList.length; i < len; i++)if ($8f4e8d16f52a38b2$var$applyMediaQuery(mediaList[i].query, ecWidth, ecHeight)) indices.push(i);
        // FIXME
        // Whether mediaDefault should force users to provide? Otherwise
        // the change by media query can not be recorvered.
        if (!indices.length && mediaDefault) indices = [
            -1
        ];
        if (indices.length && !$8f4e8d16f52a38b2$var$indicesEquals(indices, this._currentMediaIndices)) result = (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(indices, function(index) {
            return (0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(index === -1 ? mediaDefault.option : mediaList[index].option);
        });
        // Otherwise return nothing.
        this._currentMediaIndices = indices;
        return result;
    };
    return OptionManager;
}();
/**
 * [RAW_OPTION_PATTERNS]
 * (Note: "series: []" represents all other props in `ECUnitOption`)
 *
 * (1) No prop "baseOption" declared:
 * Root option is used as "baseOption" (except prop "options" and "media").
 * ```js
 * option = {
 *     series: [],
 *     timeline: {},
 *     options: [],
 * };
 * option = {
 *     series: [],
 *     media: {},
 * };
 * option = {
 *     series: [],
 *     timeline: {},
 *     options: [],
 *     media: {},
 * }
 * ```
 *
 * (2) Prop "baseOption" declared:
 * If "baseOption" declared, `ECUnitOption` props can only be declared
 * inside "baseOption" except prop "timeline" (compat ec2).
 * ```js
 * option = {
 *     baseOption: {
 *         timeline: {},
 *         series: [],
 *     },
 *     options: []
 * };
 * option = {
 *     baseOption: {
 *         series: [],
 *     },
 *     media: []
 * };
 * option = {
 *     baseOption: {
 *         timeline: {},
 *         series: [],
 *     },
 *     options: []
 *     media: []
 * };
 * option = {
 *     // ec3 compat ec2: allow (only) `timeline` declared
 *     // outside baseOption. Keep this setting for compat.
 *     timeline: {},
 *     baseOption: {
 *         series: [],
 *     },
 *     options: [],
 *     media: []
 * };
 * ```
 */ function $8f4e8d16f52a38b2$var$parseRawOption(// `rawOption` May be modified
rawOption, optionPreprocessorFuncs, isNew) {
    var mediaList = [];
    var mediaDefault;
    var baseOption;
    var declaredBaseOption = rawOption.baseOption;
    // Compatible with ec2, [RAW_OPTION_PATTERNS] above.
    var timelineOnRoot = rawOption.timeline;
    var timelineOptionsOnRoot = rawOption.options;
    var mediaOnRoot = rawOption.media;
    var hasMedia = !!rawOption.media;
    var hasTimeline = !!(timelineOptionsOnRoot || timelineOnRoot || declaredBaseOption && declaredBaseOption.timeline);
    if (declaredBaseOption) {
        baseOption = declaredBaseOption;
        // For merge option.
        if (!baseOption.timeline) baseOption.timeline = timelineOnRoot;
    } else {
        if (hasTimeline || hasMedia) rawOption.options = rawOption.media = null;
        baseOption = rawOption;
    }
    if (hasMedia) {
        if ((0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(mediaOnRoot)) (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(mediaOnRoot, function(singleMedia) {
            // Real case of wrong config.
            if (singleMedia && !singleMedia.option && (0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(singleMedia.query) && (0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(singleMedia.query.option)) (0, $4796c55e8b767685$export$a3bc9b8ed74fc)("Illegal media option. Must be like { media: [ { query: {}, option: {} } ] }");
            if (singleMedia && singleMedia.option) {
                if (singleMedia.query) mediaList.push(singleMedia);
                else if (!mediaDefault) // Use the first media default.
                mediaDefault = singleMedia;
            }
        });
        else // Real case of wrong config.
        (0, $4796c55e8b767685$export$a3bc9b8ed74fc)("Illegal media option. Must be an array. Like { media: [ {...}, {...} ] }");
    }
    doPreprocess(baseOption);
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(timelineOptionsOnRoot, function(option) {
        return doPreprocess(option);
    });
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(mediaList, function(media) {
        return doPreprocess(media.option);
    });
    function doPreprocess(option) {
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(optionPreprocessorFuncs, function(preProcess) {
            preProcess(option, isNew);
        });
    }
    return {
        baseOption: baseOption,
        timelineOptions: timelineOptionsOnRoot || [],
        mediaDefault: mediaDefault,
        mediaList: mediaList
    };
}
/**
 * @see <http://www.w3.org/TR/css3-mediaqueries/#media1>
 * Support: width, height, aspectRatio
 * Can use max or min as prefix.
 */ function $8f4e8d16f52a38b2$var$applyMediaQuery(query, ecWidth, ecHeight) {
    var realMap = {
        width: ecWidth,
        height: ecHeight,
        aspectratio: ecWidth / ecHeight // lower case for convenience.
    };
    var applicable = true;
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(query, function(value, attr) {
        var matched = attr.match($8f4e8d16f52a38b2$var$QUERY_REG);
        if (!matched || !matched[1] || !matched[2]) return;
        var operator = matched[1];
        var realAttr = matched[2].toLowerCase();
        if (!$8f4e8d16f52a38b2$var$compare(realMap[realAttr], value, operator)) applicable = false;
    });
    return applicable;
}
function $8f4e8d16f52a38b2$var$compare(real, expect, operator) {
    if (operator === "min") return real >= expect;
    else if (operator === "max") return real <= expect;
    else // Equals
    return real === expect;
}
function $8f4e8d16f52a38b2$var$indicesEquals(indices1, indices2) {
    // indices is always order by asc and has only finite number.
    return indices1.join(",") === indices2.join(",");
}
var /**
 * Consider case:
 * `chart.setOption(opt1);`
 * Then user do some interaction like dataZoom, dataView changing.
 * `chart.setOption(opt2);`
 * Then user press 'reset button' in toolbox.
 *
 * After doing that all of the interaction effects should be reset, the
 * chart should be the same as the result of invoke
 * `chart.setOption(opt1); chart.setOption(opt2);`.
 *
 * Although it is not able ensure that
 * `chart.setOption(opt1); chart.setOption(opt2);` is equivalents to
 * `chart.setOption(merge(opt1, opt2));` exactly,
 * this might be the only simple way to implement that feature.
 *
 * MEMO: We've considered some other approaches:
 * 1. Each model handles its self restoration but not uniform treatment.
 *     (Too complex in logic and error-prone)
 * 2. Use a shadow ecModel. (Performance expensive)
 *
 * FIXME: A possible solution:
 * Add a extra level of model for each component model. The inheritance chain would be:
 * ecModel <- componentModel <- componentActionModel <- dataItemModel
 * And all of the actions can only modify the `componentActionModel` rather than
 * `componentModel`. `setOption` will only modify the `ecModel` and `componentModel`.
 * When "resotre" action triggered, model from `componentActionModel` will be discarded
 * instead of recreating the "ecModel" from the "_optionBackup".
 */ // function mergeToBackupOption(
//     fakeCmptsMap: FakeComponentsMap,
//     // `tarOption` Can be null/undefined, means init
//     tarOption: ECUnitOption,
//     newOption: ECUnitOption,
//     // Can be null/undefined
//     opt: InnerSetOptionOpts
// ): void {
//     newOption = newOption || {} as ECUnitOption;
//     const notInit = !!tarOption;
//     each(newOption, function (newOptsInMainType, mainType) {
//         if (newOptsInMainType == null) {
//             return;
//         }
//         if (!ComponentModel.hasClass(mainType)) {
//             if (tarOption) {
//                 tarOption[mainType] = merge(tarOption[mainType], newOptsInMainType, true);
//             }
//         }
//         else {
//             const oldTarOptsInMainType = notInit ? normalizeToArray(tarOption[mainType]) : null;
//             const oldFakeCmptsInMainType = fakeCmptsMap.get(mainType) || [];
//             const resultTarOptsInMainType = notInit ? (tarOption[mainType] = [] as ComponentOption[]) : null;
//             const resultFakeCmptsInMainType = fakeCmptsMap.set(mainType, []);
//             const mappingResult = mappingToExists(
//                 oldFakeCmptsInMainType,
//                 normalizeToArray(newOptsInMainType),
//                 (opt && opt.replaceMergeMainTypeMap.get(mainType)) ? 'replaceMerge' : 'normalMerge'
//             );
//             setComponentTypeToKeyInfo(mappingResult, mainType, ComponentModel as ComponentModelConstructor);
//             each(mappingResult, function (resultItem, index) {
//                 // The same logic as `Global.ts#_mergeOption`.
//                 let fakeCmpt = resultItem.existing;
//                 const newOption = resultItem.newOption;
//                 const keyInfo = resultItem.keyInfo;
//                 let fakeCmptOpt;
//                 if (!newOption) {
//                     fakeCmptOpt = oldTarOptsInMainType[index];
//                 }
//                 else {
//                     if (fakeCmpt && fakeCmpt.subType === keyInfo.subType) {
//                         fakeCmpt.name = keyInfo.name;
//                         if (notInit) {
//                             fakeCmptOpt = merge(oldTarOptsInMainType[index], newOption, true);
//                         }
//                     }
//                     else {
//                         fakeCmpt = extend({}, keyInfo);
//                         if (notInit) {
//                             fakeCmptOpt = clone(newOption);
//                         }
//                     }
//                 }
//                 if (fakeCmpt) {
//                     notInit && resultTarOptsInMainType.push(fakeCmptOpt);
//                     resultFakeCmptsInMainType.push(fakeCmpt);
//                 }
//                 else {
//                     notInit && resultTarOptsInMainType.push(void 0);
//                     resultFakeCmptsInMainType.push(void 0);
//                 }
//             });
//         }
//     });
// }
$8f4e8d16f52a38b2$export$2e2bcd8739ae039 = $8f4e8d16f52a38b2$var$OptionManager;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 


var $7b8f9cefbaf7d48e$var$each = $e44eb14c4271d0f9$export$79b2f7037acddd43;
var $7b8f9cefbaf7d48e$var$isObject = $e44eb14c4271d0f9$export$a6cdc56e425d0d0a;
var $7b8f9cefbaf7d48e$var$POSSIBLE_STYLES = [
    "areaStyle",
    "lineStyle",
    "nodeStyle",
    "linkStyle",
    "chordStyle",
    "label",
    "labelLine"
];
function $7b8f9cefbaf7d48e$var$compatEC2ItemStyle(opt) {
    var itemStyleOpt = opt && opt.itemStyle;
    if (!itemStyleOpt) return;
    for(var i = 0, len = $7b8f9cefbaf7d48e$var$POSSIBLE_STYLES.length; i < len; i++){
        var styleName = $7b8f9cefbaf7d48e$var$POSSIBLE_STYLES[i];
        var normalItemStyleOpt = itemStyleOpt.normal;
        var emphasisItemStyleOpt = itemStyleOpt.emphasis;
        if (normalItemStyleOpt && normalItemStyleOpt[styleName]) {
            (0, $4796c55e8b767685$export$bbd91d66002c4ea6)("itemStyle.normal." + styleName, styleName);
            opt[styleName] = opt[styleName] || {};
            if (!opt[styleName].normal) opt[styleName].normal = normalItemStyleOpt[styleName];
            else $e44eb14c4271d0f9$export$4950aa0f605343fb(opt[styleName].normal, normalItemStyleOpt[styleName]);
            normalItemStyleOpt[styleName] = null;
        }
        if (emphasisItemStyleOpt && emphasisItemStyleOpt[styleName]) {
            (0, $4796c55e8b767685$export$bbd91d66002c4ea6)("itemStyle.emphasis." + styleName, "emphasis." + styleName);
            opt[styleName] = opt[styleName] || {};
            if (!opt[styleName].emphasis) opt[styleName].emphasis = emphasisItemStyleOpt[styleName];
            else $e44eb14c4271d0f9$export$4950aa0f605343fb(opt[styleName].emphasis, emphasisItemStyleOpt[styleName]);
            emphasisItemStyleOpt[styleName] = null;
        }
    }
}
function $7b8f9cefbaf7d48e$var$convertNormalEmphasis(opt, optType, useExtend) {
    if (opt && opt[optType] && (opt[optType].normal || opt[optType].emphasis)) {
        var normalOpt = opt[optType].normal;
        var emphasisOpt = opt[optType].emphasis;
        if (normalOpt) {
            // eslint-disable-next-line max-len
            (0, $4796c55e8b767685$export$4a9c0b74eb885aa1)("'normal' hierarchy in " + optType + " has been removed since 4.0. All style properties are configured in " + optType + " directly now.");
            // Timeline controlStyle has other properties besides normal and emphasis
            if (useExtend) {
                opt[optType].normal = opt[optType].emphasis = null;
                $e44eb14c4271d0f9$export$ebe90cb607ad99e(opt[optType], normalOpt);
            } else opt[optType] = normalOpt;
        }
        if (emphasisOpt) {
            (0, $4796c55e8b767685$export$4a9c0b74eb885aa1)(optType + ".emphasis has been changed to emphasis." + optType + " since 4.0");
            opt.emphasis = opt.emphasis || {};
            opt.emphasis[optType] = emphasisOpt;
            // Also compat the case user mix the style and focus together in ec3 style
            // for example: { itemStyle: { normal: {}, emphasis: {focus, shadowBlur} } }
            if (emphasisOpt.focus) opt.emphasis.focus = emphasisOpt.focus;
            if (emphasisOpt.blurScope) opt.emphasis.blurScope = emphasisOpt.blurScope;
        }
    }
}
function $7b8f9cefbaf7d48e$var$removeEC3NormalStatus(opt) {
    $7b8f9cefbaf7d48e$var$convertNormalEmphasis(opt, "itemStyle");
    $7b8f9cefbaf7d48e$var$convertNormalEmphasis(opt, "lineStyle");
    $7b8f9cefbaf7d48e$var$convertNormalEmphasis(opt, "areaStyle");
    $7b8f9cefbaf7d48e$var$convertNormalEmphasis(opt, "label");
    $7b8f9cefbaf7d48e$var$convertNormalEmphasis(opt, "labelLine");
    // treemap
    $7b8f9cefbaf7d48e$var$convertNormalEmphasis(opt, "upperLabel");
    // graph
    $7b8f9cefbaf7d48e$var$convertNormalEmphasis(opt, "edgeLabel");
}
function $7b8f9cefbaf7d48e$var$compatTextStyle(opt, propName) {
    // Check whether is not object (string\null\undefined ...)
    var labelOptSingle = $7b8f9cefbaf7d48e$var$isObject(opt) && opt[propName];
    var textStyle = $7b8f9cefbaf7d48e$var$isObject(labelOptSingle) && labelOptSingle.textStyle;
    if (textStyle) {
        // eslint-disable-next-line max-len
        (0, $4796c55e8b767685$export$4a9c0b74eb885aa1)("textStyle hierarchy in " + propName + " has been removed since 4.0. All textStyle properties are configured in " + propName + " directly now.");
        for(var i = 0, len = $8917c02fd8256c67$export$df45610347a602ad.length; i < len; i++){
            var textPropName = $8917c02fd8256c67$export$df45610347a602ad[i];
            if (textStyle.hasOwnProperty(textPropName)) labelOptSingle[textPropName] = textStyle[textPropName];
        }
    }
}
function $7b8f9cefbaf7d48e$var$compatEC3CommonStyles(opt) {
    if (opt) {
        $7b8f9cefbaf7d48e$var$removeEC3NormalStatus(opt);
        $7b8f9cefbaf7d48e$var$compatTextStyle(opt, "label");
        opt.emphasis && $7b8f9cefbaf7d48e$var$compatTextStyle(opt.emphasis, "label");
    }
}
function $7b8f9cefbaf7d48e$var$processSeries(seriesOpt) {
    if (!$7b8f9cefbaf7d48e$var$isObject(seriesOpt)) return;
    $7b8f9cefbaf7d48e$var$compatEC2ItemStyle(seriesOpt);
    $7b8f9cefbaf7d48e$var$removeEC3NormalStatus(seriesOpt);
    $7b8f9cefbaf7d48e$var$compatTextStyle(seriesOpt, "label");
    // treemap
    $7b8f9cefbaf7d48e$var$compatTextStyle(seriesOpt, "upperLabel");
    // graph
    $7b8f9cefbaf7d48e$var$compatTextStyle(seriesOpt, "edgeLabel");
    if (seriesOpt.emphasis) {
        $7b8f9cefbaf7d48e$var$compatTextStyle(seriesOpt.emphasis, "label");
        // treemap
        $7b8f9cefbaf7d48e$var$compatTextStyle(seriesOpt.emphasis, "upperLabel");
        // graph
        $7b8f9cefbaf7d48e$var$compatTextStyle(seriesOpt.emphasis, "edgeLabel");
    }
    var markPoint = seriesOpt.markPoint;
    if (markPoint) {
        $7b8f9cefbaf7d48e$var$compatEC2ItemStyle(markPoint);
        $7b8f9cefbaf7d48e$var$compatEC3CommonStyles(markPoint);
    }
    var markLine = seriesOpt.markLine;
    if (markLine) {
        $7b8f9cefbaf7d48e$var$compatEC2ItemStyle(markLine);
        $7b8f9cefbaf7d48e$var$compatEC3CommonStyles(markLine);
    }
    var markArea = seriesOpt.markArea;
    if (markArea) $7b8f9cefbaf7d48e$var$compatEC3CommonStyles(markArea);
    var data = seriesOpt.data;
    // Break with ec3: if `setOption` again, there may be no `type` in option,
    // then the backward compat based on option type will not be performed.
    if (seriesOpt.type === "graph") {
        data = data || seriesOpt.nodes;
        var edgeData = seriesOpt.links || seriesOpt.edges;
        if (edgeData && !$e44eb14c4271d0f9$export$b119cc7e1840e59c(edgeData)) for(var i = 0; i < edgeData.length; i++)$7b8f9cefbaf7d48e$var$compatEC3CommonStyles(edgeData[i]);
        $e44eb14c4271d0f9$export$79b2f7037acddd43(seriesOpt.categories, function(opt) {
            $7b8f9cefbaf7d48e$var$removeEC3NormalStatus(opt);
        });
    }
    if (data && !$e44eb14c4271d0f9$export$b119cc7e1840e59c(data)) for(var i = 0; i < data.length; i++)$7b8f9cefbaf7d48e$var$compatEC3CommonStyles(data[i]);
    // mark point data
    markPoint = seriesOpt.markPoint;
    if (markPoint && markPoint.data) {
        var mpData = markPoint.data;
        for(var i = 0; i < mpData.length; i++)$7b8f9cefbaf7d48e$var$compatEC3CommonStyles(mpData[i]);
    }
    // mark line data
    markLine = seriesOpt.markLine;
    if (markLine && markLine.data) {
        var mlData = markLine.data;
        for(var i = 0; i < mlData.length; i++)if ($e44eb14c4271d0f9$export$43bee75e5e14138e(mlData[i])) {
            $7b8f9cefbaf7d48e$var$compatEC3CommonStyles(mlData[i][0]);
            $7b8f9cefbaf7d48e$var$compatEC3CommonStyles(mlData[i][1]);
        } else $7b8f9cefbaf7d48e$var$compatEC3CommonStyles(mlData[i]);
    }
    // Series
    if (seriesOpt.type === "gauge") {
        $7b8f9cefbaf7d48e$var$compatTextStyle(seriesOpt, "axisLabel");
        $7b8f9cefbaf7d48e$var$compatTextStyle(seriesOpt, "title");
        $7b8f9cefbaf7d48e$var$compatTextStyle(seriesOpt, "detail");
    } else if (seriesOpt.type === "treemap") {
        $7b8f9cefbaf7d48e$var$convertNormalEmphasis(seriesOpt.breadcrumb, "itemStyle");
        $e44eb14c4271d0f9$export$79b2f7037acddd43(seriesOpt.levels, function(opt) {
            $7b8f9cefbaf7d48e$var$removeEC3NormalStatus(opt);
        });
    } else if (seriesOpt.type === "tree") $7b8f9cefbaf7d48e$var$removeEC3NormalStatus(seriesOpt.leaves);
// sunburst starts from ec4, so it does not need to compat levels.
}
function $7b8f9cefbaf7d48e$var$toArr(o) {
    return $e44eb14c4271d0f9$export$43bee75e5e14138e(o) ? o : o ? [
        o
    ] : [];
}
function $7b8f9cefbaf7d48e$var$toObj(o) {
    return ($e44eb14c4271d0f9$export$43bee75e5e14138e(o) ? o[0] : o) || {};
}
function $7b8f9cefbaf7d48e$export$2e2bcd8739ae039(option, isTheme) {
    $7b8f9cefbaf7d48e$var$each($7b8f9cefbaf7d48e$var$toArr(option.series), function(seriesOpt) {
        $7b8f9cefbaf7d48e$var$isObject(seriesOpt) && $7b8f9cefbaf7d48e$var$processSeries(seriesOpt);
    });
    var axes = [
        "xAxis",
        "yAxis",
        "radiusAxis",
        "angleAxis",
        "singleAxis",
        "parallelAxis",
        "radar"
    ];
    isTheme && axes.push("valueAxis", "categoryAxis", "logAxis", "timeAxis");
    $7b8f9cefbaf7d48e$var$each(axes, function(axisName) {
        $7b8f9cefbaf7d48e$var$each($7b8f9cefbaf7d48e$var$toArr(option[axisName]), function(axisOpt) {
            if (axisOpt) {
                $7b8f9cefbaf7d48e$var$compatTextStyle(axisOpt, "axisLabel");
                $7b8f9cefbaf7d48e$var$compatTextStyle(axisOpt.axisPointer, "label");
            }
        });
    });
    $7b8f9cefbaf7d48e$var$each($7b8f9cefbaf7d48e$var$toArr(option.parallel), function(parallelOpt) {
        var parallelAxisDefault = parallelOpt && parallelOpt.parallelAxisDefault;
        $7b8f9cefbaf7d48e$var$compatTextStyle(parallelAxisDefault, "axisLabel");
        $7b8f9cefbaf7d48e$var$compatTextStyle(parallelAxisDefault && parallelAxisDefault.axisPointer, "label");
    });
    $7b8f9cefbaf7d48e$var$each($7b8f9cefbaf7d48e$var$toArr(option.calendar), function(calendarOpt) {
        $7b8f9cefbaf7d48e$var$convertNormalEmphasis(calendarOpt, "itemStyle");
        $7b8f9cefbaf7d48e$var$compatTextStyle(calendarOpt, "dayLabel");
        $7b8f9cefbaf7d48e$var$compatTextStyle(calendarOpt, "monthLabel");
        $7b8f9cefbaf7d48e$var$compatTextStyle(calendarOpt, "yearLabel");
    });
    // radar.name.textStyle
    $7b8f9cefbaf7d48e$var$each($7b8f9cefbaf7d48e$var$toArr(option.radar), function(radarOpt) {
        $7b8f9cefbaf7d48e$var$compatTextStyle(radarOpt, "name");
        // Use axisName instead of name because component has name property
        if (radarOpt.name && radarOpt.axisName == null) {
            radarOpt.axisName = radarOpt.name;
            delete radarOpt.name;
            (0, $4796c55e8b767685$export$4a9c0b74eb885aa1)("name property in radar component has been changed to axisName");
        }
        if (radarOpt.nameGap != null && radarOpt.axisNameGap == null) {
            radarOpt.axisNameGap = radarOpt.nameGap;
            delete radarOpt.nameGap;
            (0, $4796c55e8b767685$export$4a9c0b74eb885aa1)("nameGap property in radar component has been changed to axisNameGap");
        }
        $7b8f9cefbaf7d48e$var$each(radarOpt.indicator, function(indicatorOpt) {
            if (indicatorOpt.text) (0, $4796c55e8b767685$export$bbd91d66002c4ea6)("text", "name", "radar.indicator");
        });
    });
    $7b8f9cefbaf7d48e$var$each($7b8f9cefbaf7d48e$var$toArr(option.geo), function(geoOpt) {
        if ($7b8f9cefbaf7d48e$var$isObject(geoOpt)) {
            $7b8f9cefbaf7d48e$var$compatEC3CommonStyles(geoOpt);
            $7b8f9cefbaf7d48e$var$each($7b8f9cefbaf7d48e$var$toArr(geoOpt.regions), function(regionObj) {
                $7b8f9cefbaf7d48e$var$compatEC3CommonStyles(regionObj);
            });
        }
    });
    $7b8f9cefbaf7d48e$var$each($7b8f9cefbaf7d48e$var$toArr(option.timeline), function(timelineOpt) {
        $7b8f9cefbaf7d48e$var$compatEC3CommonStyles(timelineOpt);
        $7b8f9cefbaf7d48e$var$convertNormalEmphasis(timelineOpt, "label");
        $7b8f9cefbaf7d48e$var$convertNormalEmphasis(timelineOpt, "itemStyle");
        $7b8f9cefbaf7d48e$var$convertNormalEmphasis(timelineOpt, "controlStyle", true);
        var data = timelineOpt.data;
        $e44eb14c4271d0f9$export$43bee75e5e14138e(data) && $e44eb14c4271d0f9$export$79b2f7037acddd43(data, function(item) {
            if ($e44eb14c4271d0f9$export$a6cdc56e425d0d0a(item)) {
                $7b8f9cefbaf7d48e$var$convertNormalEmphasis(item, "label");
                $7b8f9cefbaf7d48e$var$convertNormalEmphasis(item, "itemStyle");
            }
        });
    });
    $7b8f9cefbaf7d48e$var$each($7b8f9cefbaf7d48e$var$toArr(option.toolbox), function(toolboxOpt) {
        $7b8f9cefbaf7d48e$var$convertNormalEmphasis(toolboxOpt, "iconStyle");
        $7b8f9cefbaf7d48e$var$each(toolboxOpt.feature, function(featureOpt) {
            $7b8f9cefbaf7d48e$var$convertNormalEmphasis(featureOpt, "iconStyle");
        });
    });
    $7b8f9cefbaf7d48e$var$compatTextStyle($7b8f9cefbaf7d48e$var$toObj(option.axisPointer), "label");
    $7b8f9cefbaf7d48e$var$compatTextStyle($7b8f9cefbaf7d48e$var$toObj(option.tooltip).axisPointer, "label");
// Clean logs
// storedLogs = {};
}




function $5bdb0305cf295442$var$get(opt, path) {
    var pathArr = path.split(",");
    var obj = opt;
    for(var i = 0; i < pathArr.length; i++){
        obj = obj && obj[pathArr[i]];
        if (obj == null) break;
    }
    return obj;
}
function $5bdb0305cf295442$var$set(opt, path, val, overwrite) {
    var pathArr = path.split(",");
    var obj = opt;
    var key;
    var i = 0;
    for(; i < pathArr.length - 1; i++){
        key = pathArr[i];
        if (obj[key] == null) obj[key] = {};
        obj = obj[key];
    }
    if (overwrite || obj[pathArr[i]] == null) obj[pathArr[i]] = val;
}
function $5bdb0305cf295442$var$compatLayoutProperties(option) {
    option && (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)($5bdb0305cf295442$var$LAYOUT_PROPERTIES, function(prop) {
        if (prop[0] in option && !(prop[1] in option)) option[prop[1]] = option[prop[0]];
    });
}
var $5bdb0305cf295442$var$LAYOUT_PROPERTIES = [
    [
        "x",
        "left"
    ],
    [
        "y",
        "top"
    ],
    [
        "x2",
        "right"
    ],
    [
        "y2",
        "bottom"
    ]
];
var $5bdb0305cf295442$var$COMPATITABLE_COMPONENTS = [
    "grid",
    "geo",
    "parallel",
    "legend",
    "toolbox",
    "title",
    "visualMap",
    "dataZoom",
    "timeline"
];
var $5bdb0305cf295442$var$BAR_ITEM_STYLE_MAP = [
    [
        "borderRadius",
        "barBorderRadius"
    ],
    [
        "borderColor",
        "barBorderColor"
    ],
    [
        "borderWidth",
        "barBorderWidth"
    ]
];
function $5bdb0305cf295442$var$compatBarItemStyle(option) {
    var itemStyle = option && option.itemStyle;
    if (itemStyle) for(var i = 0; i < $5bdb0305cf295442$var$BAR_ITEM_STYLE_MAP.length; i++){
        var oldName = $5bdb0305cf295442$var$BAR_ITEM_STYLE_MAP[i][1];
        var newName = $5bdb0305cf295442$var$BAR_ITEM_STYLE_MAP[i][0];
        if (itemStyle[oldName] != null) {
            itemStyle[newName] = itemStyle[oldName];
            (0, $4796c55e8b767685$export$bbd91d66002c4ea6)(oldName, newName);
        }
    }
}
function $5bdb0305cf295442$var$compatPieLabel(option) {
    if (!option) return;
    if (option.alignTo === "edge" && option.margin != null && option.edgeDistance == null) {
        (0, $4796c55e8b767685$export$bbd91d66002c4ea6)("label.margin", "label.edgeDistance", "pie");
        option.edgeDistance = option.margin;
    }
}
function $5bdb0305cf295442$var$compatSunburstState(option) {
    if (!option) return;
    if (option.downplay && !option.blur) {
        option.blur = option.downplay;
        (0, $4796c55e8b767685$export$bbd91d66002c4ea6)("downplay", "blur", "sunburst");
    }
}
function $5bdb0305cf295442$var$compatGraphFocus(option) {
    if (!option) return;
    if (option.focusNodeAdjacency != null) {
        option.emphasis = option.emphasis || {};
        if (option.emphasis.focus == null) {
            (0, $4796c55e8b767685$export$bbd91d66002c4ea6)("focusNodeAdjacency", "emphasis: { focus: 'adjacency'}", "graph/sankey");
            option.emphasis.focus = "adjacency";
        }
    }
}
function $5bdb0305cf295442$var$traverseTree(data, cb) {
    if (data) for(var i = 0; i < data.length; i++){
        cb(data[i]);
        data[i] && $5bdb0305cf295442$var$traverseTree(data[i].children, cb);
    }
}
function $5bdb0305cf295442$export$2e2bcd8739ae039(option, isTheme) {
    (0, $7b8f9cefbaf7d48e$export$2e2bcd8739ae039)(option, isTheme);
    // Make sure series array for model initialization.
    option.series = (0, $8917c02fd8256c67$export$4f07b212a02c8051)(option.series);
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(option.series, function(seriesOpt) {
        if (!(0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(seriesOpt)) return;
        var seriesType = seriesOpt.type;
        if (seriesType === "line") {
            if (seriesOpt.clipOverflow != null) {
                seriesOpt.clip = seriesOpt.clipOverflow;
                (0, $4796c55e8b767685$export$bbd91d66002c4ea6)("clipOverflow", "clip", "line");
            }
        } else if (seriesType === "pie" || seriesType === "gauge") {
            if (seriesOpt.clockWise != null) {
                seriesOpt.clockwise = seriesOpt.clockWise;
                (0, $4796c55e8b767685$export$bbd91d66002c4ea6)("clockWise", "clockwise");
            }
            $5bdb0305cf295442$var$compatPieLabel(seriesOpt.label);
            var data = seriesOpt.data;
            if (data && !(0, $e44eb14c4271d0f9$export$b119cc7e1840e59c)(data)) for(var i = 0; i < data.length; i++)$5bdb0305cf295442$var$compatPieLabel(data[i]);
            if (seriesOpt.hoverOffset != null) {
                seriesOpt.emphasis = seriesOpt.emphasis || {};
                seriesOpt.emphasis.scaleSize = null;
            }
        } else if (seriesType === "gauge") {
            var pointerColor = $5bdb0305cf295442$var$get(seriesOpt, "pointer.color");
            pointerColor != null && $5bdb0305cf295442$var$set(seriesOpt, "itemStyle.color", pointerColor);
        } else if (seriesType === "bar") {
            $5bdb0305cf295442$var$compatBarItemStyle(seriesOpt);
            $5bdb0305cf295442$var$compatBarItemStyle(seriesOpt.backgroundStyle);
            $5bdb0305cf295442$var$compatBarItemStyle(seriesOpt.emphasis);
            var data = seriesOpt.data;
            if (data && !(0, $e44eb14c4271d0f9$export$b119cc7e1840e59c)(data)) {
                for(var i = 0; i < data.length; i++)if (typeof data[i] === "object") {
                    $5bdb0305cf295442$var$compatBarItemStyle(data[i]);
                    $5bdb0305cf295442$var$compatBarItemStyle(data[i] && data[i].emphasis);
                }
            }
        } else if (seriesType === "sunburst") {
            var highlightPolicy = seriesOpt.highlightPolicy;
            if (highlightPolicy) {
                seriesOpt.emphasis = seriesOpt.emphasis || {};
                if (!seriesOpt.emphasis.focus) {
                    seriesOpt.emphasis.focus = highlightPolicy;
                    (0, $4796c55e8b767685$export$bbd91d66002c4ea6)("highlightPolicy", "emphasis.focus", "sunburst");
                }
            }
            $5bdb0305cf295442$var$compatSunburstState(seriesOpt);
            $5bdb0305cf295442$var$traverseTree(seriesOpt.data, $5bdb0305cf295442$var$compatSunburstState);
        } else if (seriesType === "graph" || seriesType === "sankey") $5bdb0305cf295442$var$compatGraphFocus(seriesOpt);
        else if (seriesType === "map") {
            if (seriesOpt.mapType && !seriesOpt.map) {
                (0, $4796c55e8b767685$export$bbd91d66002c4ea6)("mapType", "map", "map");
                seriesOpt.map = seriesOpt.mapType;
            }
            if (seriesOpt.mapLocation) {
                (0, $4796c55e8b767685$export$4a9c0b74eb885aa1)("`mapLocation` is not used anymore.");
                (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)(seriesOpt, seriesOpt.mapLocation);
            }
        }
        if (seriesOpt.hoverAnimation != null) {
            seriesOpt.emphasis = seriesOpt.emphasis || {};
            if (seriesOpt.emphasis && seriesOpt.emphasis.scale == null) {
                (0, $4796c55e8b767685$export$bbd91d66002c4ea6)("hoverAnimation", "emphasis.scale");
                seriesOpt.emphasis.scale = seriesOpt.hoverAnimation;
            }
        }
        $5bdb0305cf295442$var$compatLayoutProperties(seriesOpt);
    });
    // dataRange has changed to visualMap
    if (option.dataRange) option.visualMap = option.dataRange;
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)($5bdb0305cf295442$var$COMPATITABLE_COMPONENTS, function(componentName) {
        var options = option[componentName];
        if (options) {
            if (!(0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(options)) options = [
                options
            ];
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(options, function(option) {
                $5bdb0305cf295442$var$compatLayoutProperties(option);
            });
        }
    });
}


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

function $7b2947e84eff5f10$export$2e2bcd8739ae039(ecModel) {
    var stackInfoMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
    ecModel.eachSeries(function(seriesModel) {
        var stack = seriesModel.get("stack");
        // Compatible: when `stack` is set as '', do not stack.
        if (stack) {
            var stackInfoList = stackInfoMap.get(stack) || stackInfoMap.set(stack, []);
            var data = seriesModel.getData();
            var stackInfo = {
                // Used for calculate axis extent automatically.
                // TODO: Type getCalculationInfo return more specific type?
                stackResultDimension: data.getCalculationInfo("stackResultDimension"),
                stackedOverDimension: data.getCalculationInfo("stackedOverDimension"),
                stackedDimension: data.getCalculationInfo("stackedDimension"),
                stackedByDimension: data.getCalculationInfo("stackedByDimension"),
                isStackedByIndex: data.getCalculationInfo("isStackedByIndex"),
                data: data,
                seriesModel: seriesModel
            };
            // If stacked on axis that do not support data stack.
            if (!stackInfo.stackedDimension || !(stackInfo.isStackedByIndex || stackInfo.stackedByDimension)) return;
            stackInfoList.length && data.setCalculationInfo("stackedOnSeries", stackInfoList[stackInfoList.length - 1].seriesModel);
            stackInfoList.push(stackInfo);
        }
    });
    stackInfoMap.each($7b2947e84eff5f10$var$calculateStack);
}
function $7b2947e84eff5f10$var$calculateStack(stackInfoList) {
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(stackInfoList, function(targetStackInfo, idxInStack) {
        var resultVal = [];
        var resultNaN = [
            NaN,
            NaN
        ];
        var dims = [
            targetStackInfo.stackResultDimension,
            targetStackInfo.stackedOverDimension
        ];
        var targetData = targetStackInfo.data;
        var isStackedByIndex = targetStackInfo.isStackedByIndex;
        var stackStrategy = targetStackInfo.seriesModel.get("stackStrategy") || "samesign";
        // Should not write on raw data, because stack series model list changes
        // depending on legend selection.
        targetData.modify(dims, function(v0, v1, dataIndex) {
            var sum = targetData.get(targetStackInfo.stackedDimension, dataIndex);
            // Consider `connectNulls` of line area, if value is NaN, stackedOver
            // should also be NaN, to draw a appropriate belt area.
            if (isNaN(sum)) return resultNaN;
            var byValue;
            var stackedDataRawIndex;
            if (isStackedByIndex) stackedDataRawIndex = targetData.getRawIndex(dataIndex);
            else byValue = targetData.get(targetStackInfo.stackedByDimension, dataIndex);
            // If stackOver is NaN, chart view will render point on value start.
            var stackedOver = NaN;
            for(var j = idxInStack - 1; j >= 0; j--){
                var stackInfo = stackInfoList[j];
                // Has been optimized by inverted indices on `stackedByDimension`.
                if (!isStackedByIndex) stackedDataRawIndex = stackInfo.data.rawIndexOf(stackInfo.stackedByDimension, byValue);
                if (stackedDataRawIndex >= 0) {
                    var val = stackInfo.data.getByRawIndex(stackInfo.stackResultDimension, stackedDataRawIndex);
                    // Considering positive stack, negative stack and empty data
                    if (stackStrategy === "all" // single stack group
                     || stackStrategy === "positive" && val > 0 || stackStrategy === "negative" && val < 0 || stackStrategy === "samesign" && sum >= 0 && val > 0 // All positive stack
                     || stackStrategy === "samesign" && sum <= 0 && val < 0 // All negative stack
                    ) {
                        // The sum has to be very small to be affected by the
                        // floating arithmetic problem. An incorrect result will probably
                        // cause axis min/max to be filtered incorrectly.
                        sum = (0, $13e6a1a716300dd4$export$d3389a301c3a5706)(sum, val);
                        stackedOver = val;
                        break;
                    }
                }
            }
            resultVal[0] = sum;
            resultVal[1] = stackedOver;
            return resultVal;
        });
    });
}


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 





/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 



// @inner
var $3790a8a1aeffac84$var$SourceImpl = /** @class */ function() {
    function SourceImpl(fields) {
        this.data = fields.data || (fields.sourceFormat === (0, $2b9c860c8cf83b68$export$6a32b42c754a3cb8) ? {} : []);
        this.sourceFormat = fields.sourceFormat || (0, $2b9c860c8cf83b68$export$c78f1330778d30d);
        // Visit config
        this.seriesLayoutBy = fields.seriesLayoutBy || (0, $2b9c860c8cf83b68$export$7b3f3c6551b4949b);
        this.startIndex = fields.startIndex || 0;
        this.dimensionsDetectedCount = fields.dimensionsDetectedCount;
        this.metaRawOption = fields.metaRawOption;
        var dimensionsDefine = this.dimensionsDefine = fields.dimensionsDefine;
        if (dimensionsDefine) for(var i = 0; i < dimensionsDefine.length; i++){
            var dim = dimensionsDefine[i];
            if (dim.type == null) {
                if ((0, $13c62ad003ac72f0$export$c51adf1a2be01b9c)(this, i) === (0, $13c62ad003ac72f0$export$328749e9c5b40760).Must) dim.type = "ordinal";
            }
        }
    }
    return SourceImpl;
}();
function $3790a8a1aeffac84$export$22b808bc02a60488(val) {
    return val instanceof $3790a8a1aeffac84$var$SourceImpl;
}
function $3790a8a1aeffac84$export$1921362e86c73c88(sourceData, thisMetaRawOption, // can be null. If not provided, auto detect it from `sourceData`.
sourceFormat) {
    sourceFormat = sourceFormat || $3790a8a1aeffac84$export$52a469afa4653e57(sourceData);
    var seriesLayoutBy = thisMetaRawOption.seriesLayoutBy;
    var determined = $3790a8a1aeffac84$var$determineSourceDimensions(sourceData, sourceFormat, seriesLayoutBy, thisMetaRawOption.sourceHeader, thisMetaRawOption.dimensions);
    var source = new $3790a8a1aeffac84$var$SourceImpl({
        data: sourceData,
        sourceFormat: sourceFormat,
        seriesLayoutBy: seriesLayoutBy,
        dimensionsDefine: determined.dimensionsDefine,
        startIndex: determined.startIndex,
        dimensionsDetectedCount: determined.dimensionsDetectedCount,
        metaRawOption: (0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(thisMetaRawOption)
    });
    return source;
}
function $3790a8a1aeffac84$export$75aef3f97c0a5edf(data) {
    return new $3790a8a1aeffac84$var$SourceImpl({
        data: data,
        sourceFormat: (0, $e44eb14c4271d0f9$export$b119cc7e1840e59c)(data) ? (0, $2b9c860c8cf83b68$export$a918cb016a382d45) : (0, $2b9c860c8cf83b68$export$2823037fb9d8f0c6)
    });
}
function $3790a8a1aeffac84$export$e0365e7e3555ddd4(source) {
    return new $3790a8a1aeffac84$var$SourceImpl({
        data: source.data,
        sourceFormat: source.sourceFormat,
        seriesLayoutBy: source.seriesLayoutBy,
        dimensionsDefine: (0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(source.dimensionsDefine),
        startIndex: source.startIndex,
        dimensionsDetectedCount: source.dimensionsDetectedCount
    });
}
function $3790a8a1aeffac84$export$52a469afa4653e57(data) {
    var sourceFormat = (0, $2b9c860c8cf83b68$export$c78f1330778d30d);
    if ((0, $e44eb14c4271d0f9$export$b119cc7e1840e59c)(data)) sourceFormat = (0, $2b9c860c8cf83b68$export$a918cb016a382d45);
    else if ((0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(data)) {
        // FIXME Whether tolerate null in top level array?
        if (data.length === 0) sourceFormat = (0, $2b9c860c8cf83b68$export$fcd62ebf51387903);
        for(var i = 0, len = data.length; i < len; i++){
            var item = data[i];
            if (item == null) continue;
            else if ((0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(item) || (0, $e44eb14c4271d0f9$export$b119cc7e1840e59c)(item)) {
                sourceFormat = (0, $2b9c860c8cf83b68$export$fcd62ebf51387903);
                break;
            } else if ((0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(item)) {
                sourceFormat = (0, $2b9c860c8cf83b68$export$703ae8a2d83f441);
                break;
            }
        }
    } else if ((0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(data)) {
        for(var key in data)if ((0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(data, key) && (0, $e44eb14c4271d0f9$export$1e2f57719e155213)(data[key])) {
            sourceFormat = (0, $2b9c860c8cf83b68$export$6a32b42c754a3cb8);
            break;
        }
    }
    return sourceFormat;
}
/**
 * Determine the source definitions from data standalone dimensions definitions
 * are not specified.
 */ function $3790a8a1aeffac84$var$determineSourceDimensions(data, sourceFormat, seriesLayoutBy, sourceHeader, // standalone raw dimensions definition, like:
// {
//     dimensions: ['aa', 'bb', { name: 'cc', type: 'time' }]
// }
// in `dataset` or `series`
dimensionsDefine) {
    var dimensionsDetectedCount;
    var startIndex;
    // PENDING: Could data be null/undefined here?
    // currently, if `dataset.source` not specified, error thrown.
    // if `series.data` not specified, nothing rendered without error thrown.
    // Should test these cases.
    if (!data) return {
        dimensionsDefine: $3790a8a1aeffac84$var$normalizeDimensionsOption(dimensionsDefine),
        startIndex: startIndex,
        dimensionsDetectedCount: dimensionsDetectedCount
    };
    if (sourceFormat === (0, $2b9c860c8cf83b68$export$fcd62ebf51387903)) {
        var dataArrayRows = data;
        // Rule: Most of the first line are string: it is header.
        // Caution: consider a line with 5 string and 1 number,
        // it still can not be sure it is a head, because the
        // 5 string may be 5 values of category columns.
        if (sourceHeader === "auto" || sourceHeader == null) $3790a8a1aeffac84$var$arrayRowsTravelFirst(function(val) {
            // '-' is regarded as null/undefined.
            if (val != null && val !== "-") {
                if ((0, $e44eb14c4271d0f9$export$844ec244b1367d54)(val)) startIndex == null && (startIndex = 1);
                else startIndex = 0;
            }
        // 10 is an experience number, avoid long loop.
        }, seriesLayoutBy, dataArrayRows, 10);
        else startIndex = (0, $e44eb14c4271d0f9$export$7e4aa119212bc614)(sourceHeader) ? sourceHeader : sourceHeader ? 1 : 0;
        if (!dimensionsDefine && startIndex === 1) {
            dimensionsDefine = [];
            $3790a8a1aeffac84$var$arrayRowsTravelFirst(function(val, index) {
                dimensionsDefine[index] = val != null ? val + "" : "";
            }, seriesLayoutBy, dataArrayRows, Infinity);
        }
        dimensionsDetectedCount = dimensionsDefine ? dimensionsDefine.length : seriesLayoutBy === (0, $2b9c860c8cf83b68$export$d55da1467cdf7804) ? dataArrayRows.length : dataArrayRows[0] ? dataArrayRows[0].length : null;
    } else if (sourceFormat === (0, $2b9c860c8cf83b68$export$703ae8a2d83f441)) {
        if (!dimensionsDefine) dimensionsDefine = $3790a8a1aeffac84$var$objectRowsCollectDimensions(data);
    } else if (sourceFormat === (0, $2b9c860c8cf83b68$export$6a32b42c754a3cb8)) {
        if (!dimensionsDefine) {
            dimensionsDefine = [];
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(data, function(colArr, key) {
                dimensionsDefine.push(key);
            });
        }
    } else if (sourceFormat === (0, $2b9c860c8cf83b68$export$2823037fb9d8f0c6)) {
        var value0 = (0, $8917c02fd8256c67$export$2c944e12edb48d4b)(data[0]);
        dimensionsDetectedCount = (0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(value0) && value0.length || 1;
    } else if (sourceFormat === (0, $2b9c860c8cf83b68$export$a918cb016a382d45)) (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(!!dimensionsDefine, "dimensions must be given if data is TypedArray.");
    return {
        startIndex: startIndex,
        dimensionsDefine: $3790a8a1aeffac84$var$normalizeDimensionsOption(dimensionsDefine),
        dimensionsDetectedCount: dimensionsDetectedCount
    };
}
function $3790a8a1aeffac84$var$objectRowsCollectDimensions(data) {
    var firstIndex = 0;
    var obj;
    while(firstIndex < data.length && !(obj = data[firstIndex++])); // jshint ignore: line
    if (obj) return (0, $e44eb14c4271d0f9$export$ed97f33186d4b816)(obj);
}
// Consider dimensions defined like ['A', 'price', 'B', 'price', 'C', 'price'],
// which is reasonable. But dimension name is duplicated.
// Returns undefined or an array contains only object without null/undefined or string.
function $3790a8a1aeffac84$var$normalizeDimensionsOption(dimensionsDefine) {
    if (!dimensionsDefine) // The meaning of null/undefined is different from empty array.
    return;
    var nameMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
    return (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(dimensionsDefine, function(rawItem, index) {
        rawItem = (0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(rawItem) ? rawItem : {
            name: rawItem
        };
        // Other fields will be discarded.
        var item = {
            name: rawItem.name,
            displayName: rawItem.displayName,
            type: rawItem.type
        };
        // User can set null in dimensions.
        // We don't auto specify name, otherwise a given name may
        // cause it to be referred unexpectedly.
        if (item.name == null) return item;
        // Also consider number form like 2012.
        item.name += "";
        // User may also specify displayName.
        // displayName will always exists except user not
        // specified or dim name is not specified or detected.
        // (A auto generated dim name will not be used as
        // displayName).
        if (item.displayName == null) item.displayName = item.name;
        var exist = nameMap.get(item.name);
        if (!exist) nameMap.set(item.name, {
            count: 1
        });
        else item.name += "-" + exist.count++;
        return item;
    });
}
function $3790a8a1aeffac84$var$arrayRowsTravelFirst(cb, seriesLayoutBy, data, maxLoop) {
    if (seriesLayoutBy === (0, $2b9c860c8cf83b68$export$d55da1467cdf7804)) for(var i = 0; i < data.length && i < maxLoop; i++)cb(data[i] ? data[i][0] : null, i);
    else {
        var value0 = data[0] || [];
        for(var i = 0; i < value0.length && i < maxLoop; i++)cb(value0[i], i);
    }
}
function $3790a8a1aeffac84$export$8911336b527f8517(source) {
    var sourceFormat = source.sourceFormat;
    return sourceFormat === (0, $2b9c860c8cf83b68$export$703ae8a2d83f441) || sourceFormat === (0, $2b9c860c8cf83b68$export$6a32b42c754a3cb8);
}



var $b7a7be40e6489dbc$var$_a, $b7a7be40e6489dbc$var$_b, $b7a7be40e6489dbc$var$_c;
var $b7a7be40e6489dbc$var$providerMethods;
var $b7a7be40e6489dbc$var$mountMethods;
/**
 * If normal array used, mutable chunk size is supported.
 * If typed array used, chunk size must be fixed.
 */ var $b7a7be40e6489dbc$export$b900d7c4c3952a40 = /** @class */ function() {
    function DefaultDataProvider(sourceParam, dimSize) {
        // let source: Source;
        var source = !(0, $3790a8a1aeffac84$export$22b808bc02a60488)(sourceParam) ? (0, $3790a8a1aeffac84$export$75aef3f97c0a5edf)(sourceParam) : sourceParam;
        // declare source is Source;
        this._source = source;
        var data = this._data = source.data;
        // Typed array. TODO IE10+?
        if (source.sourceFormat === (0, $2b9c860c8cf83b68$export$a918cb016a382d45)) {
            if (dimSize == null) throw new Error("Typed array data must specify dimension size");
            this._offset = 0;
            this._dimSize = dimSize;
            this._data = data;
        }
        $b7a7be40e6489dbc$var$mountMethods(this, data, source);
    }
    DefaultDataProvider.prototype.getSource = function() {
        return this._source;
    };
    DefaultDataProvider.prototype.count = function() {
        return 0;
    };
    DefaultDataProvider.prototype.getItem = function(idx, out) {
        return;
    };
    DefaultDataProvider.prototype.appendData = function(newData) {};
    DefaultDataProvider.prototype.clean = function() {};
    DefaultDataProvider.protoInitialize = function() {
        // PENDING: To avoid potential incompat (e.g., prototype
        // is visited somewhere), still init them on prototype.
        var proto = DefaultDataProvider.prototype;
        proto.pure = false;
        proto.persistent = true;
    }();
    DefaultDataProvider.internalField = function() {
        var _a;
        $b7a7be40e6489dbc$var$mountMethods = function(provider, data, source) {
            var sourceFormat = source.sourceFormat;
            var seriesLayoutBy = source.seriesLayoutBy;
            var startIndex = source.startIndex;
            var dimsDef = source.dimensionsDefine;
            var methods = $b7a7be40e6489dbc$var$providerMethods[$b7a7be40e6489dbc$var$getMethodMapKey(sourceFormat, seriesLayoutBy)];
            (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(methods, "Invalide sourceFormat: " + sourceFormat);
            (0, $e44eb14c4271d0f9$export$8b58be045bf06082)(provider, methods);
            if (sourceFormat === (0, $2b9c860c8cf83b68$export$a918cb016a382d45)) {
                provider.getItem = getItemForTypedArray;
                provider.count = countForTypedArray;
                provider.fillStorage = fillStorageForTypedArray;
            } else {
                var rawItemGetter = $b7a7be40e6489dbc$export$92c8ea8642b3957d(sourceFormat, seriesLayoutBy);
                provider.getItem = (0, $e44eb14c4271d0f9$export$2385a24977818dd0)(rawItemGetter, null, data, startIndex, dimsDef);
                var rawCounter = $b7a7be40e6489dbc$export$803742e832f4b52c(sourceFormat, seriesLayoutBy);
                provider.count = (0, $e44eb14c4271d0f9$export$2385a24977818dd0)(rawCounter, null, data, startIndex, dimsDef);
            }
        };
        var getItemForTypedArray = function(idx, out) {
            idx = idx - this._offset;
            out = out || [];
            var data = this._data;
            var dimSize = this._dimSize;
            var offset = dimSize * idx;
            for(var i = 0; i < dimSize; i++)out[i] = data[offset + i];
            return out;
        };
        var fillStorageForTypedArray = function(start, end, storage, extent) {
            var data = this._data;
            var dimSize = this._dimSize;
            for(var dim = 0; dim < dimSize; dim++){
                var dimExtent = extent[dim];
                var min = dimExtent[0] == null ? Infinity : dimExtent[0];
                var max = dimExtent[1] == null ? -Infinity : dimExtent[1];
                var count = end - start;
                var arr = storage[dim];
                for(var i = 0; i < count; i++){
                    // appendData with TypedArray will always do replace in provider.
                    var val = data[i * dimSize + dim];
                    arr[start + i] = val;
                    val < min && (min = val);
                    val > max && (max = val);
                }
                dimExtent[0] = min;
                dimExtent[1] = max;
            }
        };
        var countForTypedArray = function() {
            return this._data ? this._data.length / this._dimSize : 0;
        };
        $b7a7be40e6489dbc$var$providerMethods = (_a = {}, _a[(0, $2b9c860c8cf83b68$export$fcd62ebf51387903) + "_" + (0, $2b9c860c8cf83b68$export$7b3f3c6551b4949b)] = {
            pure: true,
            appendData: appendDataSimply
        }, _a[(0, $2b9c860c8cf83b68$export$fcd62ebf51387903) + "_" + (0, $2b9c860c8cf83b68$export$d55da1467cdf7804)] = {
            pure: true,
            appendData: function() {
                throw new Error('Do not support appendData when set seriesLayoutBy: "row".');
            }
        }, _a[0, $2b9c860c8cf83b68$export$703ae8a2d83f441] = {
            pure: true,
            appendData: appendDataSimply
        }, _a[0, $2b9c860c8cf83b68$export$6a32b42c754a3cb8] = {
            pure: true,
            appendData: function(newData) {
                var data = this._data;
                (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(newData, function(newCol, key) {
                    var oldCol = data[key] || (data[key] = []);
                    for(var i = 0; i < (newCol || []).length; i++)oldCol.push(newCol[i]);
                });
            }
        }, _a[0, $2b9c860c8cf83b68$export$2823037fb9d8f0c6] = {
            appendData: appendDataSimply
        }, _a[0, $2b9c860c8cf83b68$export$a918cb016a382d45] = {
            persistent: false,
            pure: true,
            appendData: function(newData) {
                (0, $e44eb14c4271d0f9$export$a7a9523472993e97)((0, $e44eb14c4271d0f9$export$b119cc7e1840e59c)(newData), "Added data must be TypedArray if data in initialization is TypedArray");
                this._data = newData;
            },
            // Clean self if data is already used.
            clean: function() {
                // PENDING
                this._offset += this.count();
                this._data = null;
            }
        }, _a);
        function appendDataSimply(newData) {
            for(var i = 0; i < newData.length; i++)this._data.push(newData[i]);
        }
    }();
    return DefaultDataProvider;
}();
var $b7a7be40e6489dbc$var$getItemSimply = function(rawData, startIndex, dimsDef, idx) {
    return rawData[idx];
};
var $b7a7be40e6489dbc$var$rawSourceItemGetterMap = ($b7a7be40e6489dbc$var$_a = {}, $b7a7be40e6489dbc$var$_a[(0, $2b9c860c8cf83b68$export$fcd62ebf51387903) + "_" + (0, $2b9c860c8cf83b68$export$7b3f3c6551b4949b)] = function(rawData, startIndex, dimsDef, idx) {
    return rawData[idx + startIndex];
}, $b7a7be40e6489dbc$var$_a[(0, $2b9c860c8cf83b68$export$fcd62ebf51387903) + "_" + (0, $2b9c860c8cf83b68$export$d55da1467cdf7804)] = function(rawData, startIndex, dimsDef, idx, out) {
    idx += startIndex;
    var item = out || [];
    var data = rawData;
    for(var i = 0; i < data.length; i++){
        var row = data[i];
        item[i] = row ? row[idx] : null;
    }
    return item;
}, $b7a7be40e6489dbc$var$_a[0, $2b9c860c8cf83b68$export$703ae8a2d83f441] = $b7a7be40e6489dbc$var$getItemSimply, $b7a7be40e6489dbc$var$_a[0, $2b9c860c8cf83b68$export$6a32b42c754a3cb8] = function(rawData, startIndex, dimsDef, idx, out) {
    var item = out || [];
    for(var i = 0; i < dimsDef.length; i++){
        var dimName = dimsDef[i].name;
        if (dimName == null) throw new Error();
        var col = rawData[dimName];
        item[i] = col ? col[idx] : null;
    }
    return item;
}, $b7a7be40e6489dbc$var$_a[0, $2b9c860c8cf83b68$export$2823037fb9d8f0c6] = $b7a7be40e6489dbc$var$getItemSimply, $b7a7be40e6489dbc$var$_a);
function $b7a7be40e6489dbc$export$92c8ea8642b3957d(sourceFormat, seriesLayoutBy) {
    var method = $b7a7be40e6489dbc$var$rawSourceItemGetterMap[$b7a7be40e6489dbc$var$getMethodMapKey(sourceFormat, seriesLayoutBy)];
    (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(method, 'Do not support get item on "' + sourceFormat + '", "' + seriesLayoutBy + '".');
    return method;
}
var $b7a7be40e6489dbc$var$countSimply = function(rawData, startIndex, dimsDef) {
    return rawData.length;
};
var $b7a7be40e6489dbc$var$rawSourceDataCounterMap = ($b7a7be40e6489dbc$var$_b = {}, $b7a7be40e6489dbc$var$_b[(0, $2b9c860c8cf83b68$export$fcd62ebf51387903) + "_" + (0, $2b9c860c8cf83b68$export$7b3f3c6551b4949b)] = function(rawData, startIndex, dimsDef) {
    return Math.max(0, rawData.length - startIndex);
}, $b7a7be40e6489dbc$var$_b[(0, $2b9c860c8cf83b68$export$fcd62ebf51387903) + "_" + (0, $2b9c860c8cf83b68$export$d55da1467cdf7804)] = function(rawData, startIndex, dimsDef) {
    var row = rawData[0];
    return row ? Math.max(0, row.length - startIndex) : 0;
}, $b7a7be40e6489dbc$var$_b[0, $2b9c860c8cf83b68$export$703ae8a2d83f441] = $b7a7be40e6489dbc$var$countSimply, $b7a7be40e6489dbc$var$_b[0, $2b9c860c8cf83b68$export$6a32b42c754a3cb8] = function(rawData, startIndex, dimsDef) {
    var dimName = dimsDef[0].name;
    if (dimName == null) throw new Error();
    var col = rawData[dimName];
    return col ? col.length : 0;
}, $b7a7be40e6489dbc$var$_b[0, $2b9c860c8cf83b68$export$2823037fb9d8f0c6] = $b7a7be40e6489dbc$var$countSimply, $b7a7be40e6489dbc$var$_b);
function $b7a7be40e6489dbc$export$803742e832f4b52c(sourceFormat, seriesLayoutBy) {
    var method = $b7a7be40e6489dbc$var$rawSourceDataCounterMap[$b7a7be40e6489dbc$var$getMethodMapKey(sourceFormat, seriesLayoutBy)];
    (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(method, 'Do not support count on "' + sourceFormat + '", "' + seriesLayoutBy + '".');
    return method;
}
var $b7a7be40e6489dbc$var$getRawValueSimply = function(dataItem, dimIndex, property) {
    return dataItem[dimIndex];
};
var $b7a7be40e6489dbc$var$rawSourceValueGetterMap = ($b7a7be40e6489dbc$var$_c = {}, $b7a7be40e6489dbc$var$_c[0, $2b9c860c8cf83b68$export$fcd62ebf51387903] = $b7a7be40e6489dbc$var$getRawValueSimply, $b7a7be40e6489dbc$var$_c[0, $2b9c860c8cf83b68$export$703ae8a2d83f441] = function(dataItem, dimIndex, property) {
    return dataItem[property];
}, $b7a7be40e6489dbc$var$_c[0, $2b9c860c8cf83b68$export$6a32b42c754a3cb8] = $b7a7be40e6489dbc$var$getRawValueSimply, $b7a7be40e6489dbc$var$_c[0, $2b9c860c8cf83b68$export$2823037fb9d8f0c6] = function(dataItem, dimIndex, property) {
    // FIXME: In some case (markpoint in geo (geo-map.html)),
    // dataItem is {coord: [...]}
    var value = (0, $8917c02fd8256c67$export$2c944e12edb48d4b)(dataItem);
    return !(value instanceof Array) ? value : value[dimIndex];
}, $b7a7be40e6489dbc$var$_c[0, $2b9c860c8cf83b68$export$a918cb016a382d45] = $b7a7be40e6489dbc$var$getRawValueSimply, $b7a7be40e6489dbc$var$_c);
function $b7a7be40e6489dbc$export$1752de8084789a14(sourceFormat) {
    var method = $b7a7be40e6489dbc$var$rawSourceValueGetterMap[sourceFormat];
    (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(method, 'Do not support get value on "' + sourceFormat + '".');
    return method;
}
function $b7a7be40e6489dbc$var$getMethodMapKey(sourceFormat, seriesLayoutBy) {
    return sourceFormat === (0, $2b9c860c8cf83b68$export$fcd62ebf51387903) ? sourceFormat + "_" + seriesLayoutBy : sourceFormat;
}
function $b7a7be40e6489dbc$export$cde9373da9aad801(data, dataIndex, // If dimIndex is null/undefined, return OptionDataItem.
// Otherwise, return OptionDataValue.
dim) {
    if (!data) return;
    // Consider data may be not persistent.
    var dataItem = data.getRawDataItem(dataIndex);
    if (dataItem == null) return;
    var store = data.getStore();
    var sourceFormat = store.getSource().sourceFormat;
    if (dim != null) {
        var dimIndex = data.getDimensionIndex(dim);
        var property = store.getDimensionProperty(dimIndex);
        return $b7a7be40e6489dbc$export$1752de8084789a14(sourceFormat)(dataItem, dimIndex, property);
    } else {
        var result = dataItem;
        if (sourceFormat === (0, $2b9c860c8cf83b68$export$2823037fb9d8f0c6)) result = (0, $8917c02fd8256c67$export$2c944e12edb48d4b)(dataItem);
        return result;
    }
}
function $b7a7be40e6489dbc$export$c8ae9e77e0ddc42a(data, dataIndex, attr) {
    if (!data) return;
    var sourceFormat = data.getStore().getSource().sourceFormat;
    if (sourceFormat !== (0, $2b9c860c8cf83b68$export$2823037fb9d8f0c6) && sourceFormat !== (0, $2b9c860c8cf83b68$export$703ae8a2d83f441)) return;
    var dataItem = data.getRawDataItem(dataIndex);
    if (sourceFormat === (0, $2b9c860c8cf83b68$export$2823037fb9d8f0c6) && !(0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(dataItem)) dataItem = null;
    if (dataItem) return dataItem[attr];
}




var $a2cdd1973149e0c6$var$DIMENSION_LABEL_REG = /\{@(.+?)\}/g;
var $a2cdd1973149e0c6$export$f23396ae04ea95a7 = /** @class */ function() {
    function DataFormatMixin() {}
    /**
   * Get params for formatter
   */ DataFormatMixin.prototype.getDataParams = function(dataIndex, dataType) {
        var data = this.getData(dataType);
        var rawValue = this.getRawValue(dataIndex, dataType);
        var rawDataIndex = data.getRawIndex(dataIndex);
        var name = data.getName(dataIndex);
        var itemOpt = data.getRawDataItem(dataIndex);
        var style = data.getItemVisual(dataIndex, "style");
        var color = style && style[data.getItemVisual(dataIndex, "drawType") || "fill"];
        var borderColor = style && style.stroke;
        var mainType = this.mainType;
        var isSeries = mainType === "series";
        var userOutput = data.userOutput && data.userOutput.get();
        return {
            componentType: mainType,
            componentSubType: this.subType,
            componentIndex: this.componentIndex,
            seriesType: isSeries ? this.subType : null,
            seriesIndex: this.seriesIndex,
            seriesId: isSeries ? this.id : null,
            seriesName: isSeries ? this.name : null,
            name: name,
            dataIndex: rawDataIndex,
            data: itemOpt,
            dataType: dataType,
            value: rawValue,
            color: color,
            borderColor: borderColor,
            dimensionNames: userOutput ? userOutput.fullDimensions : null,
            encode: userOutput ? userOutput.encode : null,
            // Param name list for mapping `a`, `b`, `c`, `d`, `e`
            $vars: [
                "seriesName",
                "name",
                "value"
            ]
        };
    };
    /**
   * Format label
   * @param dataIndex
   * @param status 'normal' by default
   * @param dataType
   * @param labelDimIndex Only used in some chart that
   *        use formatter in different dimensions, like radar.
   * @param formatter Formatter given outside.
   * @return return null/undefined if no formatter
   */ DataFormatMixin.prototype.getFormattedLabel = function(dataIndex, status, dataType, labelDimIndex, formatter, extendParams) {
        status = status || "normal";
        var data = this.getData(dataType);
        var params = this.getDataParams(dataIndex, dataType);
        if (extendParams) params.value = extendParams.interpolatedValue;
        if (labelDimIndex != null && $e44eb14c4271d0f9$export$43bee75e5e14138e(params.value)) params.value = params.value[labelDimIndex];
        if (!formatter) {
            var itemModel = data.getItemModel(dataIndex);
            // @ts-ignore
            formatter = itemModel.get(status === "normal" ? [
                "label",
                "formatter"
            ] : [
                status,
                "label",
                "formatter"
            ]);
        }
        if ($e44eb14c4271d0f9$export$f6e2535fb5126e54(formatter)) {
            params.status = status;
            params.dimensionIndex = labelDimIndex;
            return formatter(params);
        } else if ($e44eb14c4271d0f9$export$844ec244b1367d54(formatter)) {
            var str = (0, $1594f6dc0ce39685$export$2028496a35766e41)(formatter, params);
            // Support 'aaa{@[3]}bbb{@product}ccc'.
            // Do not support '}' in dim name util have to.
            return str.replace($a2cdd1973149e0c6$var$DIMENSION_LABEL_REG, function(origin, dimStr) {
                var len = dimStr.length;
                var dimLoose = dimStr;
                if (dimLoose.charAt(0) === "[" && dimLoose.charAt(len - 1) === "]") {
                    dimLoose = +dimLoose.slice(1, len - 1); // Also support: '[]' => 0
                    if (isNaN(dimLoose)) (0, $4796c55e8b767685$export$a3bc9b8ed74fc)("Invalide label formatter: @" + dimStr + ", only support @[0], @[1], @[2], ...");
                }
                var val = (0, $b7a7be40e6489dbc$export$cde9373da9aad801)(data, dataIndex, dimLoose);
                if (extendParams && $e44eb14c4271d0f9$export$43bee75e5e14138e(extendParams.interpolatedValue)) {
                    var dimIndex = data.getDimensionIndex(dimLoose);
                    if (dimIndex >= 0) val = extendParams.interpolatedValue[dimIndex];
                }
                return val != null ? val + "" : "";
            });
        }
    };
    /**
   * Get raw value in option
   */ DataFormatMixin.prototype.getRawValue = function(idx, dataType) {
        return (0, $b7a7be40e6489dbc$export$cde9373da9aad801)(this.getData(dataType), idx);
    };
    /**
   * Should be implemented.
   * @param {number} dataIndex
   * @param {boolean} [multipleSeries=false]
   * @param {string} [dataType]
   */ DataFormatMixin.prototype.formatTooltip = function(dataIndex, multipleSeries, dataType) {
        // Empty function
        return;
    };
    return DataFormatMixin;
}();
function $a2cdd1973149e0c6$export$2d16fa82a50c4741(result) {
    var markupText;
    // let markers: Dictionary<ColorString>;
    var markupFragment;
    if ($e44eb14c4271d0f9$export$a6cdc56e425d0d0a(result)) {
        if (result.type) markupFragment = result;
        else console.warn("The return type of `formatTooltip` is not supported: " + (0, $4796c55e8b767685$export$a68bb8b222a6bd43)(result));
    } else markupText = result;
    return {
        text: markupText,
        // markers: markers || markersExisting,
        frag: markupFragment
    };
}



/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
function $e92f76cd4401b366$export$f7292ab7796be73c(define) {
    return new $e92f76cd4401b366$export$2dea7024bcdd7731(define);
}
var $e92f76cd4401b366$export$2dea7024bcdd7731 = /** @class */ function() {
    function Task(define) {
        define = define || {};
        this._reset = define.reset;
        this._plan = define.plan;
        this._count = define.count;
        this._onDirty = define.onDirty;
        this._dirty = true;
    }
    /**
   * @param step Specified step.
   * @param skip Skip customer perform call.
   * @param modBy Sampling window size.
   * @param modDataCount Sampling count.
   * @return whether unfinished.
   */ Task.prototype.perform = function(performArgs) {
        var upTask = this._upstream;
        var skip = performArgs && performArgs.skip;
        // TODO some refactor.
        // Pull data. Must pull data each time, because context.data
        // may be updated by Series.setData.
        if (this._dirty && upTask) {
            var context = this.context;
            context.data = context.outputData = upTask.context.outputData;
        }
        if (this.__pipeline) this.__pipeline.currentTask = this;
        var planResult;
        if (this._plan && !skip) planResult = this._plan(this.context);
        // Support sharding by mod, which changes the render sequence and makes the rendered graphic
        // elements uniformed distributed when progress, especially when moving or zooming.
        var lastModBy = normalizeModBy(this._modBy);
        var lastModDataCount = this._modDataCount || 0;
        var modBy = normalizeModBy(performArgs && performArgs.modBy);
        var modDataCount = performArgs && performArgs.modDataCount || 0;
        if (lastModBy !== modBy || lastModDataCount !== modDataCount) planResult = "reset";
        function normalizeModBy(val) {
            !(val >= 1) && (val = 1); // jshint ignore:line
            return val;
        }
        var forceFirstProgress;
        if (this._dirty || planResult === "reset") {
            this._dirty = false;
            forceFirstProgress = this._doReset(skip);
        }
        this._modBy = modBy;
        this._modDataCount = modDataCount;
        var step = performArgs && performArgs.step;
        if (upTask) {
            (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(upTask._outputDueEnd != null);
            this._dueEnd = upTask._outputDueEnd;
        } else {
            (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(!this._progress || this._count);
            this._dueEnd = this._count ? this._count(this.context) : Infinity;
        }
        // Note: Stubs, that its host overall task let it has progress, has progress.
        // If no progress, pass index from upstream to downstream each time plan called.
        if (this._progress) {
            var start = this._dueIndex;
            var end = Math.min(step != null ? this._dueIndex + step : Infinity, this._dueEnd);
            if (!skip && (forceFirstProgress || start < end)) {
                var progress = this._progress;
                if ((0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(progress)) for(var i = 0; i < progress.length; i++)this._doProgress(progress[i], start, end, modBy, modDataCount);
                else this._doProgress(progress, start, end, modBy, modDataCount);
            }
            this._dueIndex = end;
            // If no `outputDueEnd`, assume that output data and
            // input data is the same, so use `dueIndex` as `outputDueEnd`.
            var outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : end;
            // ??? Can not rollback.
            (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(outputDueEnd >= this._outputDueEnd);
            this._outputDueEnd = outputDueEnd;
        } else // (1) Some overall task has no progress.
        // (2) Stubs, that its host overall task do not let it has progress, has no progress.
        // This should always be performed so it can be passed to downstream.
        this._dueIndex = this._outputDueEnd = this._settedOutputEnd != null ? this._settedOutputEnd : this._dueEnd;
        return this.unfinished();
    };
    Task.prototype.dirty = function() {
        this._dirty = true;
        this._onDirty && this._onDirty(this.context);
    };
    Task.prototype._doProgress = function(progress, start, end, modBy, modDataCount) {
        $e92f76cd4401b366$var$iterator.reset(start, end, modBy, modDataCount);
        this._callingProgress = progress;
        this._callingProgress({
            start: start,
            end: end,
            count: end - start,
            next: $e92f76cd4401b366$var$iterator.next
        }, this.context);
    };
    Task.prototype._doReset = function(skip) {
        this._dueIndex = this._outputDueEnd = this._dueEnd = 0;
        this._settedOutputEnd = null;
        var progress;
        var forceFirstProgress;
        if (!skip && this._reset) {
            progress = this._reset(this.context);
            if (progress && progress.progress) {
                forceFirstProgress = progress.forceFirstProgress;
                progress = progress.progress;
            }
            // To simplify no progress checking, array must has item.
            if ((0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(progress) && !progress.length) progress = null;
        }
        this._progress = progress;
        this._modBy = this._modDataCount = null;
        var downstream = this._downstream;
        downstream && downstream.dirty();
        return forceFirstProgress;
    };
    Task.prototype.unfinished = function() {
        return this._progress && this._dueIndex < this._dueEnd;
    };
    /**
   * @param downTask The downstream task.
   * @return The downstream task.
   */ Task.prototype.pipe = function(downTask) {
        (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(downTask && !downTask._disposed && downTask !== this);
        // If already downstream, do not dirty downTask.
        if (this._downstream !== downTask || this._dirty) {
            this._downstream = downTask;
            downTask._upstream = this;
            downTask.dirty();
        }
    };
    Task.prototype.dispose = function() {
        if (this._disposed) return;
        this._upstream && (this._upstream._downstream = null);
        this._downstream && (this._downstream._upstream = null);
        this._dirty = false;
        this._disposed = true;
    };
    Task.prototype.getUpstream = function() {
        return this._upstream;
    };
    Task.prototype.getDownstream = function() {
        return this._downstream;
    };
    Task.prototype.setOutputEnd = function(end) {
        // This only happens in dataTask, dataZoom, map, currently.
        // where dataZoom do not set end each time, but only set
        // when reset. So we should record the set end, in case
        // that the stub of dataZoom perform again and earse the
        // set end by upstream.
        this._outputDueEnd = this._settedOutputEnd = end;
    };
    return Task;
}();
var $e92f76cd4401b366$var$iterator = function() {
    var end;
    var current;
    var modBy;
    var modDataCount;
    var winCount;
    var it = {
        reset: function(s, e, sStep, sCount) {
            current = s;
            end = e;
            modBy = sStep;
            modDataCount = sCount;
            winCount = Math.ceil(modDataCount / modBy);
            it.next = modBy > 1 && modDataCount > 0 ? modNext : sequentialNext;
        }
    };
    return it;
    function sequentialNext() {
        return current < end ? current++ : null;
    }
    function modNext() {
        var dataIndex = current % winCount * modBy + Math.ceil(current / winCount);
        var result = current >= end ? null : dataIndex < modDataCount ? dataIndex : current;
        current++;
        return result;
    }
}(); // -----------------------------------------------------------------------------
 // For stream debug (Should be commented out after used!)
 // @usage: printTask(this, 'begin');
 // @usage: printTask(this, null, {someExtraProp});
 // @usage: Use `__idxInPipeline` as conditional breakpiont.
 //
 // window.printTask = function (task: any, prefix: string, extra: { [key: string]: unknown }): void {
 //     window.ecTaskUID == null && (window.ecTaskUID = 0);
 //     task.uidDebug == null && (task.uidDebug = `task_${window.ecTaskUID++}`);
 //     task.agent && task.agent.uidDebug == null && (task.agent.uidDebug = `task_${window.ecTaskUID++}`);
 //     let props = [];
 //     if (task.__pipeline) {
 //         let val = `${task.__idxInPipeline}/${task.__pipeline.tail.__idxInPipeline} ${task.agent ? '(stub)' : ''}`;
 //         props.push({text: '__idxInPipeline/total', value: val});
 //     } else {
 //         let stubCount = 0;
 //         task.agentStubMap.each(() => stubCount++);
 //         props.push({text: 'idx', value: `overall (stubs: ${stubCount})`});
 //     }
 //     props.push({text: 'uid', value: task.uidDebug});
 //     if (task.__pipeline) {
 //         props.push({text: 'pipelineId', value: task.__pipeline.id});
 //         task.agent && props.push(
 //             {text: 'stubFor', value: task.agent.uidDebug}
 //         );
 //     }
 //     props.push(
 //         {text: 'dirty', value: task._dirty},
 //         {text: 'dueIndex', value: task._dueIndex},
 //         {text: 'dueEnd', value: task._dueEnd},
 //         {text: 'outputDueEnd', value: task._outputDueEnd}
 //     );
 //     if (extra) {
 //         Object.keys(extra).forEach(key => {
 //             props.push({text: key, value: extra[key]});
 //         });
 //     }
 //     let args = ['color: blue'];
 //     let msg = `%c[${prefix || 'T'}] %c` + props.map(item => (
 //         args.push('color: green', 'color: red'),
 //         `${item.text}: %c${item.value}`
 //     )).join('%c, ');
 //     console.log.apply(console, [msg].concat(args));
 //     // console.log(this);
 // };
 // window.printPipeline = function (task: any, prefix: string) {
 //     const pipeline = task.__pipeline;
 //     let currTask = pipeline.head;
 //     while (currTask) {
 //         window.printTask(currTask, prefix);
 //         currTask = currTask._downstream;
 //     }
 // };
 // window.showChain = function (chainHeadTask) {
 //     var chain = [];
 //     var task = chainHeadTask;
 //     while (task) {
 //         chain.push({
 //             task: task,
 //             up: task._upstream,
 //             down: task._downstream,
 //             idxInPipeline: task.__idxInPipeline
 //         });
 //         task = task._downstream;
 //     }
 //     return chain;
 // };
 // window.findTaskInChain = function (task, chainHeadTask) {
 //     let chain = window.showChain(chainHeadTask);
 //     let result = [];
 //     for (let i = 0; i < chain.length; i++) {
 //         let chainItem = chain[i];
 //         if (chainItem.task === task) {
 //             result.push(i);
 //         }
 //     }
 //     return result;
 // };
 // window.printChainAEachInChainB = function (chainHeadTaskA, chainHeadTaskB) {
 //     let chainA = window.showChain(chainHeadTaskA);
 //     for (let i = 0; i < chainA.length; i++) {
 //         console.log('chainAIdx:', i, 'inChainB:', window.findTaskInChain(chainA[i].task, chainHeadTaskB));
 //     }
 // };



/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 



/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 



/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 


function $44f303460d06cb90$export$cc7175145baad076(value, // For high performance, do not omit the second param.
opt) {
    // Performance sensitive.
    var dimType = opt && opt.type;
    if (dimType === "ordinal") // If given value is a category string
    return value;
    if (dimType === "time" && !(0, $e44eb14c4271d0f9$export$7e4aa119212bc614)(value) && value != null && value !== "-") value = +(0, $13e6a1a716300dd4$export$6b862160d295c8e)(value);
    // dimType defaults 'number'.
    // If dimType is not ordinal and value is null or undefined or NaN or '-',
    // parse to NaN.
    // number-like string (like ' 123 ') can be converted to a number.
    // where null/undefined or other string will be converted to NaN.
    return value == null || value === "" ? NaN : +value;
}
var $44f303460d06cb90$var$valueParserMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)({
    "number": function(val) {
        // Do not use `numericToNumber` here. We have `numericToNumber` by default.
        // Here the number parser can have loose rule:
        // enable to cut suffix: "120px" => 120, "14%" => 14.
        return parseFloat(val);
    },
    "time": function(val) {
        // return timestamp.
        return +(0, $13e6a1a716300dd4$export$6b862160d295c8e)(val);
    },
    "trim": function(val) {
        return (0, $e44eb14c4271d0f9$export$844ec244b1367d54)(val) ? (0, $e44eb14c4271d0f9$export$87c2784dc9fc4ab)(val) : val;
    }
});
function $44f303460d06cb90$export$c88237b7c265b36b(type) {
    return $44f303460d06cb90$var$valueParserMap.get(type);
}
var $44f303460d06cb90$var$ORDER_COMPARISON_OP_MAP = {
    lt: function(lval, rval) {
        return lval < rval;
    },
    lte: function(lval, rval) {
        return lval <= rval;
    },
    gt: function(lval, rval) {
        return lval > rval;
    },
    gte: function(lval, rval) {
        return lval >= rval;
    }
};
var $44f303460d06cb90$var$FilterOrderComparator = /** @class */ function() {
    function FilterOrderComparator(op, rval) {
        if (!(0, $e44eb14c4271d0f9$export$7e4aa119212bc614)(rval)) {
            var errMsg = "";
            errMsg = 'rvalue of "<", ">", "<=", ">=" can only be number in filter.';
            (0, $4796c55e8b767685$export$8bf7aba4a9e09055)(errMsg);
        }
        this._opFn = $44f303460d06cb90$var$ORDER_COMPARISON_OP_MAP[op];
        this._rvalFloat = (0, $13e6a1a716300dd4$export$8b4007b942b45a96)(rval);
    }
    // Performance sensitive.
    FilterOrderComparator.prototype.evaluate = function(lval) {
        // Most cases is 'number', and typeof maybe 10 times faseter than parseFloat.
        return (0, $e44eb14c4271d0f9$export$7e4aa119212bc614)(lval) ? this._opFn(lval, this._rvalFloat) : this._opFn((0, $13e6a1a716300dd4$export$8b4007b942b45a96)(lval), this._rvalFloat);
    };
    return FilterOrderComparator;
}();
var $44f303460d06cb90$export$ed75a5d7b0144167 = /** @class */ function() {
    /**
   * @param order by default: 'asc'
   * @param incomparable by default: Always on the tail.
   *        That is, if 'asc' => 'max', if 'desc' => 'min'
   *        See the definition of "incomparable" in [SORT_COMPARISON_RULE].
   */ function SortOrderComparator(order, incomparable) {
        var isDesc = order === "desc";
        this._resultLT = isDesc ? 1 : -1;
        if (incomparable == null) incomparable = isDesc ? "min" : "max";
        this._incomparable = incomparable === "min" ? -Infinity : Infinity;
    }
    // See [SORT_COMPARISON_RULE].
    // Performance sensitive.
    SortOrderComparator.prototype.evaluate = function(lval, rval) {
        // Most cases is 'number', and typeof maybe 10 times faseter than parseFloat.
        var lvalFloat = (0, $e44eb14c4271d0f9$export$7e4aa119212bc614)(lval) ? lval : (0, $13e6a1a716300dd4$export$8b4007b942b45a96)(lval);
        var rvalFloat = (0, $e44eb14c4271d0f9$export$7e4aa119212bc614)(rval) ? rval : (0, $13e6a1a716300dd4$export$8b4007b942b45a96)(rval);
        var lvalNotNumeric = isNaN(lvalFloat);
        var rvalNotNumeric = isNaN(rvalFloat);
        if (lvalNotNumeric) lvalFloat = this._incomparable;
        if (rvalNotNumeric) rvalFloat = this._incomparable;
        if (lvalNotNumeric && rvalNotNumeric) {
            var lvalIsStr = (0, $e44eb14c4271d0f9$export$844ec244b1367d54)(lval);
            var rvalIsStr = (0, $e44eb14c4271d0f9$export$844ec244b1367d54)(rval);
            if (lvalIsStr) lvalFloat = rvalIsStr ? lval : 0;
            if (rvalIsStr) rvalFloat = lvalIsStr ? rval : 0;
        }
        return lvalFloat < rvalFloat ? this._resultLT : lvalFloat > rvalFloat ? -this._resultLT : 0;
    };
    return SortOrderComparator;
}();
var $44f303460d06cb90$var$FilterEqualityComparator = /** @class */ function() {
    function FilterEqualityComparator(isEq, rval) {
        this._rval = rval;
        this._isEQ = isEq;
        this._rvalTypeof = typeof rval;
        this._rvalFloat = (0, $13e6a1a716300dd4$export$8b4007b942b45a96)(rval);
    }
    // Performance sensitive.
    FilterEqualityComparator.prototype.evaluate = function(lval) {
        var eqResult = lval === this._rval;
        if (!eqResult) {
            var lvalTypeof = typeof lval;
            if (lvalTypeof !== this._rvalTypeof && (lvalTypeof === "number" || this._rvalTypeof === "number")) eqResult = (0, $13e6a1a716300dd4$export$8b4007b942b45a96)(lval) === this._rvalFloat;
        }
        return this._isEQ ? eqResult : !eqResult;
    };
    return FilterEqualityComparator;
}();
function $44f303460d06cb90$export$f2644c3485f94c4e(op, rval) {
    return op === "eq" || op === "ne" ? new $44f303460d06cb90$var$FilterEqualityComparator(op === "eq", rval) : (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)($44f303460d06cb90$var$ORDER_COMPARISON_OP_MAP, op) ? new $44f303460d06cb90$var$FilterOrderComparator(op, rval) : null;
}




/**
 * TODO: disable writable.
 * This structure will be exposed to users.
 */ var $8d7e345fe242a315$export$ffc19e40a21f08eb = /** @class */ function() {
    function ExternalSource() {}
    ExternalSource.prototype.getRawData = function() {
        // Only built-in transform available.
        throw new Error("not supported");
    };
    ExternalSource.prototype.getRawDataItem = function(dataIndex) {
        // Only built-in transform available.
        throw new Error("not supported");
    };
    ExternalSource.prototype.cloneRawData = function() {
        return;
    };
    /**
   * @return If dimension not found, return null/undefined.
   */ ExternalSource.prototype.getDimensionInfo = function(dim) {
        return;
    };
    /**
   * dimensions defined if and only if either:
   * (a) dataset.dimensions are declared.
   * (b) dataset data include dimensions definitions in data (detected or via specified `sourceHeader`).
   * If dimensions are defined, `dimensionInfoAll` is corresponding to
   * the defined dimensions.
   * Otherwise, `dimensionInfoAll` is determined by data columns.
   * @return Always return an array (even empty array).
   */ ExternalSource.prototype.cloneAllDimensionInfo = function() {
        return;
    };
    ExternalSource.prototype.count = function() {
        return;
    };
    /**
   * Only support by dimension index.
   * No need to support by dimension name in transform function,
   * because transform function is not case-specific, no need to use name literally.
   */ ExternalSource.prototype.retrieveValue = function(dataIndex, dimIndex) {
        return;
    };
    ExternalSource.prototype.retrieveValueFromItem = function(dataItem, dimIndex) {
        return;
    };
    ExternalSource.prototype.convertValue = function(rawVal, dimInfo) {
        return (0, $44f303460d06cb90$export$cc7175145baad076)(rawVal, dimInfo);
    };
    return ExternalSource;
}();
function $8d7e345fe242a315$var$createExternalSource(internalSource, externalTransform) {
    var extSource = new $8d7e345fe242a315$export$ffc19e40a21f08eb();
    var data = internalSource.data;
    var sourceFormat = extSource.sourceFormat = internalSource.sourceFormat;
    var sourceHeaderCount = internalSource.startIndex;
    var errMsg = "";
    if (internalSource.seriesLayoutBy !== (0, $2b9c860c8cf83b68$export$7b3f3c6551b4949b)) {
        errMsg = '`seriesLayoutBy` of upstream dataset can only be "column" in data transform.';
        (0, $4796c55e8b767685$export$8bf7aba4a9e09055)(errMsg);
    }
    // [MEMO]
    // Create a new dimensions structure for exposing.
    // Do not expose all dimension info to users directly.
    // Because the dimension is probably auto detected from data and not might reliable.
    // Should not lead the transformers to think that is reliable and return it.
    // See [DIMENSION_INHERIT_RULE] in `sourceManager.ts`.
    var dimensions = [];
    var dimsByName = {};
    var dimsDef = internalSource.dimensionsDefine;
    if (dimsDef) (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(dimsDef, function(dimDef, idx) {
        var name = dimDef.name;
        var dimDefExt = {
            index: idx,
            name: name,
            displayName: dimDef.displayName
        };
        dimensions.push(dimDefExt);
        // Users probably do not specify dimension name. For simplicity, data transform
        // does not generate dimension name.
        if (name != null) {
            // Dimension name should not be duplicated.
            // For simplicity, data transform forbids name duplication, do not generate
            // new name like module `completeDimensions.ts` did, but just tell users.
            var errMsg_1 = "";
            if ((0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(dimsByName, name)) {
                errMsg_1 = 'dimension name "' + name + '" duplicated.';
                (0, $4796c55e8b767685$export$8bf7aba4a9e09055)(errMsg_1);
            }
            dimsByName[name] = dimDefExt;
        }
    });
    else for(var i = 0; i < internalSource.dimensionsDetectedCount || 0; i++)// Do not generete name or anything others. The consequence process in
    // `transform` or `series` probably have there own name generation strategry.
    dimensions.push({
        index: i
    });
    // Implement public methods:
    var rawItemGetter = (0, $b7a7be40e6489dbc$export$92c8ea8642b3957d)(sourceFormat, (0, $2b9c860c8cf83b68$export$7b3f3c6551b4949b));
    if (externalTransform.__isBuiltIn) {
        extSource.getRawDataItem = function(dataIndex) {
            return rawItemGetter(data, sourceHeaderCount, dimensions, dataIndex);
        };
        extSource.getRawData = (0, $e44eb14c4271d0f9$export$2385a24977818dd0)($8d7e345fe242a315$var$getRawData, null, internalSource);
    }
    extSource.cloneRawData = (0, $e44eb14c4271d0f9$export$2385a24977818dd0)($8d7e345fe242a315$var$cloneRawData, null, internalSource);
    var rawCounter = (0, $b7a7be40e6489dbc$export$803742e832f4b52c)(sourceFormat, (0, $2b9c860c8cf83b68$export$7b3f3c6551b4949b));
    extSource.count = (0, $e44eb14c4271d0f9$export$2385a24977818dd0)(rawCounter, null, data, sourceHeaderCount, dimensions);
    var rawValueGetter = (0, $b7a7be40e6489dbc$export$1752de8084789a14)(sourceFormat);
    extSource.retrieveValue = function(dataIndex, dimIndex) {
        var rawItem = rawItemGetter(data, sourceHeaderCount, dimensions, dataIndex);
        return retrieveValueFromItem(rawItem, dimIndex);
    };
    var retrieveValueFromItem = extSource.retrieveValueFromItem = function(dataItem, dimIndex) {
        if (dataItem == null) return;
        var dimDef = dimensions[dimIndex];
        // When `dimIndex` is `null`, `rawValueGetter` return the whole item.
        if (dimDef) return rawValueGetter(dataItem, dimIndex, dimDef.name);
    };
    extSource.getDimensionInfo = (0, $e44eb14c4271d0f9$export$2385a24977818dd0)($8d7e345fe242a315$var$getDimensionInfo, null, dimensions, dimsByName);
    extSource.cloneAllDimensionInfo = (0, $e44eb14c4271d0f9$export$2385a24977818dd0)($8d7e345fe242a315$var$cloneAllDimensionInfo, null, dimensions);
    return extSource;
}
function $8d7e345fe242a315$var$getRawData(upstream) {
    var sourceFormat = upstream.sourceFormat;
    if (!$8d7e345fe242a315$var$isSupportedSourceFormat(sourceFormat)) {
        var errMsg = "";
        errMsg = "`getRawData` is not supported in source format " + sourceFormat;
        (0, $4796c55e8b767685$export$8bf7aba4a9e09055)(errMsg);
    }
    return upstream.data;
}
function $8d7e345fe242a315$var$cloneRawData(upstream) {
    var sourceFormat = upstream.sourceFormat;
    var data = upstream.data;
    if (!$8d7e345fe242a315$var$isSupportedSourceFormat(sourceFormat)) {
        var errMsg = "";
        errMsg = "`cloneRawData` is not supported in source format " + sourceFormat;
        (0, $4796c55e8b767685$export$8bf7aba4a9e09055)(errMsg);
    }
    if (sourceFormat === (0, $2b9c860c8cf83b68$export$fcd62ebf51387903)) {
        var result = [];
        for(var i = 0, len = data.length; i < len; i++)// Not strictly clone for performance
        result.push(data[i].slice());
        return result;
    } else if (sourceFormat === (0, $2b9c860c8cf83b68$export$703ae8a2d83f441)) {
        var result = [];
        for(var i = 0, len = data.length; i < len; i++)// Not strictly clone for performance
        result.push((0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, data[i]));
        return result;
    }
}
function $8d7e345fe242a315$var$getDimensionInfo(dimensions, dimsByName, dim) {
    if (dim == null) return;
    // Keep the same logic as `List::getDimension` did.
    if ((0, $e44eb14c4271d0f9$export$7e4aa119212bc614)(dim) || !isNaN(dim) && !(0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(dimsByName, dim)) return dimensions[dim];
    else if ((0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(dimsByName, dim)) return dimsByName[dim];
}
function $8d7e345fe242a315$var$cloneAllDimensionInfo(dimensions) {
    return (0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(dimensions);
}
var $8d7e345fe242a315$var$externalTransformMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
function $8d7e345fe242a315$export$92c96c6d8b255b7d(externalTransform) {
    externalTransform = (0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(externalTransform);
    var type = externalTransform.type;
    var errMsg = "";
    if (!type) {
        errMsg = "Must have a `type` when `registerTransform`.";
        (0, $4796c55e8b767685$export$8bf7aba4a9e09055)(errMsg);
    }
    var typeParsed = type.split(":");
    if (typeParsed.length !== 2) {
        errMsg = 'Name must include namespace like "ns:regression".';
        (0, $4796c55e8b767685$export$8bf7aba4a9e09055)(errMsg);
    }
    // Namespace 'echarts:xxx' is official namespace, where the transforms should
    // be called directly via 'xxx' rather than 'echarts:xxx'.
    var isBuiltIn = false;
    if (typeParsed[0] === "echarts") {
        type = typeParsed[1];
        isBuiltIn = true;
    }
    externalTransform.__isBuiltIn = isBuiltIn;
    $8d7e345fe242a315$var$externalTransformMap.set(type, externalTransform);
}
function $8d7e345fe242a315$export$42a68f09db16803f(rawTransOption, sourceList, infoForPrint) {
    var pipedTransOption = (0, $8917c02fd8256c67$export$4f07b212a02c8051)(rawTransOption);
    var pipeLen = pipedTransOption.length;
    var errMsg = "";
    if (!pipeLen) {
        errMsg = "If `transform` declared, it should at least contain one transform.";
        (0, $4796c55e8b767685$export$8bf7aba4a9e09055)(errMsg);
    }
    for(var i = 0, len = pipeLen; i < len; i++){
        var transOption = pipedTransOption[i];
        sourceList = $8d7e345fe242a315$var$applySingleDataTransform(transOption, sourceList, infoForPrint, pipeLen === 1 ? null : i);
        // piped transform only support single input, except the fist one.
        // piped transform only support single output, except the last one.
        if (i !== len - 1) sourceList.length = Math.max(sourceList.length, 1);
    }
    return sourceList;
}
function $8d7e345fe242a315$var$applySingleDataTransform(transOption, upSourceList, infoForPrint, // If `pipeIndex` is null/undefined, no piped transform.
pipeIndex) {
    var errMsg = "";
    if (!upSourceList.length) {
        errMsg = "Must have at least one upstream dataset.";
        (0, $4796c55e8b767685$export$8bf7aba4a9e09055)(errMsg);
    }
    if (!(0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(transOption)) {
        errMsg = "transform declaration must be an object rather than " + typeof transOption + ".";
        (0, $4796c55e8b767685$export$8bf7aba4a9e09055)(errMsg);
    }
    var transType = transOption.type;
    var externalTransform = $8d7e345fe242a315$var$externalTransformMap.get(transType);
    if (!externalTransform) {
        errMsg = 'Can not find transform on type "' + transType + '".';
        (0, $4796c55e8b767685$export$8bf7aba4a9e09055)(errMsg);
    }
    // Prepare source
    var extUpSourceList = (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(upSourceList, function(upSource) {
        return $8d7e345fe242a315$var$createExternalSource(upSource, externalTransform);
    });
    var resultList = (0, $8917c02fd8256c67$export$4f07b212a02c8051)(externalTransform.transform({
        upstream: extUpSourceList[0],
        upstreamList: extUpSourceList,
        config: (0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(transOption.config)
    }));
    if (transOption.print) {
        var printStrArr = (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(resultList, function(extSource) {
            var pipeIndexStr = pipeIndex != null ? " === pipe index: " + pipeIndex : "";
            return [
                "=== dataset index: " + infoForPrint.datasetIndex + pipeIndexStr + " ===",
                "- transform result data:",
                (0, $4796c55e8b767685$export$a68bb8b222a6bd43)(extSource.data),
                "- transform result dimensions:",
                (0, $4796c55e8b767685$export$a68bb8b222a6bd43)(extSource.dimensions)
            ].join("\n");
        }).join("\n");
        (0, $4796c55e8b767685$export$bef1f36f5486a6a3)(printStrArr);
    }
    return (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(resultList, function(result, resultIndex) {
        var errMsg = "";
        if (!(0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(result)) {
            errMsg = "A transform should not return some empty results.";
            (0, $4796c55e8b767685$export$8bf7aba4a9e09055)(errMsg);
        }
        if (!result.data) {
            errMsg = "Transform result data should be not be null or undefined";
            (0, $4796c55e8b767685$export$8bf7aba4a9e09055)(errMsg);
        }
        var sourceFormat = (0, $3790a8a1aeffac84$export$52a469afa4653e57)(result.data);
        if (!$8d7e345fe242a315$var$isSupportedSourceFormat(sourceFormat)) {
            errMsg = "Transform result data should be array rows or object rows.";
            (0, $4796c55e8b767685$export$8bf7aba4a9e09055)(errMsg);
        }
        var resultMetaRawOption;
        var firstUpSource = upSourceList[0];
        /**
     * Intuitively, the end users known the content of the original `dataset.source`,
     * calucating the transform result in mind.
     * Suppose the original `dataset.source` is:
     * ```js
     * [
     *     ['product', '2012', '2013', '2014', '2015'],
     *     ['AAA', 41.1, 30.4, 65.1, 53.3],
     *     ['BBB', 86.5, 92.1, 85.7, 83.1],
     *     ['CCC', 24.1, 67.2, 79.5, 86.4]
     * ]
     * ```
     * The dimension info have to be detected from the source data.
     * Some of the transformers (like filter, sort) will follow the dimension info
     * of upstream, while others use new dimensions (like aggregate).
     * Transformer can output a field `dimensions` to define the its own output dimensions.
     * We also allow transformers to ignore the output `dimensions` field, and
     * inherit the upstream dimensions definition. It can reduce the burden of handling
     * dimensions in transformers.
     *
     * See also [DIMENSION_INHERIT_RULE] in `sourceManager.ts`.
     */ if (firstUpSource && resultIndex === 0 && !result.dimensions) {
            var startIndex = firstUpSource.startIndex;
            // We copy the header of upstream to the result, because:
            // (1) The returned data always does not contain header line and can not be used
            // as dimension-detection. In this case we can not use "detected dimensions" of
            // upstream directly, because it might be detected based on different `seriesLayoutBy`.
            // (2) We should support that the series read the upstream source in `seriesLayoutBy: 'row'`.
            // So the original detected header should be add to the result, otherwise they can not be read.
            if (startIndex) result.data = firstUpSource.data.slice(0, startIndex).concat(result.data);
            resultMetaRawOption = {
                seriesLayoutBy: (0, $2b9c860c8cf83b68$export$7b3f3c6551b4949b),
                sourceHeader: startIndex,
                dimensions: firstUpSource.metaRawOption.dimensions
            };
        } else resultMetaRawOption = {
            seriesLayoutBy: (0, $2b9c860c8cf83b68$export$7b3f3c6551b4949b),
            sourceHeader: 0,
            dimensions: result.dimensions
        };
        return (0, $3790a8a1aeffac84$export$1921362e86c73c88)(result.data, resultMetaRawOption, null);
    });
}
function $8d7e345fe242a315$var$isSupportedSourceFormat(sourceFormat) {
    return sourceFormat === (0, $2b9c860c8cf83b68$export$fcd62ebf51387903) || sourceFormat === (0, $2b9c860c8cf83b68$export$703ae8a2d83f441);
}


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 


var $ed6990ed945720aa$var$UNDEFINED = "undefined";
var $ed6990ed945720aa$export$859a1fa4f1106aa0 = typeof Uint32Array === $ed6990ed945720aa$var$UNDEFINED ? Array : Uint32Array;
var $ed6990ed945720aa$export$78cf73566f32c185 = typeof Uint16Array === $ed6990ed945720aa$var$UNDEFINED ? Array : Uint16Array;
var $ed6990ed945720aa$export$b60d945128546f53 = typeof Int32Array === $ed6990ed945720aa$var$UNDEFINED ? Array : Int32Array;
var $ed6990ed945720aa$export$365b104db51a490a = typeof Float64Array === $ed6990ed945720aa$var$UNDEFINED ? Array : Float64Array;
/**
 * Multi dimensional data store
 */ var $ed6990ed945720aa$var$dataCtors = {
    "float": $ed6990ed945720aa$export$365b104db51a490a,
    "int": $ed6990ed945720aa$export$b60d945128546f53,
    // Ordinal data type can be string or int
    "ordinal": Array,
    "number": Array,
    "time": $ed6990ed945720aa$export$365b104db51a490a
};
var $ed6990ed945720aa$var$defaultDimValueGetters;
function $ed6990ed945720aa$var$getIndicesCtor(rawCount) {
    // The possible max value in this._indicies is always this._rawCount despite of filtering.
    return rawCount > 65535 ? $ed6990ed945720aa$export$859a1fa4f1106aa0 : $ed6990ed945720aa$export$78cf73566f32c185;
}
function $ed6990ed945720aa$var$getInitialExtent() {
    return [
        Infinity,
        -Infinity
    ];
}
function $ed6990ed945720aa$var$cloneChunk(originalChunk) {
    var Ctor = originalChunk.constructor;
    // Only shallow clone is enough when Array.
    return Ctor === Array ? originalChunk.slice() : new Ctor(originalChunk);
}
function $ed6990ed945720aa$var$prepareStore(store, dimIdx, dimType, end, append) {
    var DataCtor = $ed6990ed945720aa$var$dataCtors[dimType || "float"];
    if (append) {
        var oldStore = store[dimIdx];
        var oldLen = oldStore && oldStore.length;
        if (!(oldLen === end)) {
            var newStore = new DataCtor(end);
            // The cost of the copy is probably inconsiderable
            // within the initial chunkSize.
            for(var j = 0; j < oldLen; j++)newStore[j] = oldStore[j];
            store[dimIdx] = newStore;
        }
    } else store[dimIdx] = new DataCtor(end);
}
/**
 * Basically, DataStore API keep immutable.
 */ var $ed6990ed945720aa$var$DataStore = /** @class */ function() {
    function DataStore() {
        this._chunks = [];
        // It will not be calculated until needed.
        this._rawExtent = [];
        this._extent = [];
        this._count = 0;
        this._rawCount = 0;
        this._calcDimNameToIdx = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
    }
    /**
   * Initialize from data
   */ DataStore.prototype.initData = function(provider, inputDimensions, dimValueGetter) {
        (0, $e44eb14c4271d0f9$export$a7a9523472993e97)((0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(provider.getItem) && (0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(provider.count), "Invalid data provider.");
        this._provider = provider;
        // Clear
        this._chunks = [];
        this._indices = null;
        this.getRawIndex = this._getRawIdxIdentity;
        var source = provider.getSource();
        var defaultGetter = this.defaultDimValueGetter = $ed6990ed945720aa$var$defaultDimValueGetters[source.sourceFormat];
        // Default dim value getter
        this._dimValueGetter = dimValueGetter || defaultGetter;
        // Reset raw extent.
        this._rawExtent = [];
        var willRetrieveDataByName = (0, $3790a8a1aeffac84$export$8911336b527f8517)(source);
        this._dimensions = (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(inputDimensions, function(dim) {
            if (willRetrieveDataByName) (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(dim.property != null);
            return {
                // Only pick these two props. Not leak other properties like orderMeta.
                type: dim.type,
                property: dim.property
            };
        });
        this._initDataFromProvider(0, provider.count());
    };
    DataStore.prototype.getProvider = function() {
        return this._provider;
    };
    /**
   * Caution: even when a `source` instance owned by a series, the created data store
   * may still be shared by different sereis (the source hash does not use all `source`
   * props, see `sourceManager`). In this case, the `source` props that are not used in
   * hash (like `source.dimensionDefine`) probably only belongs to a certain series and
   * thus should not be fetch here.
   */ DataStore.prototype.getSource = function() {
        return this._provider.getSource();
    };
    /**
   * @caution Only used in dataStack.
   */ DataStore.prototype.ensureCalculationDimension = function(dimName, type) {
        var calcDimNameToIdx = this._calcDimNameToIdx;
        var dimensions = this._dimensions;
        var calcDimIdx = calcDimNameToIdx.get(dimName);
        if (calcDimIdx != null) {
            if (dimensions[calcDimIdx].type === type) return calcDimIdx;
        } else calcDimIdx = dimensions.length;
        dimensions[calcDimIdx] = {
            type: type
        };
        calcDimNameToIdx.set(dimName, calcDimIdx);
        this._chunks[calcDimIdx] = new $ed6990ed945720aa$var$dataCtors[type || "float"](this._rawCount);
        this._rawExtent[calcDimIdx] = $ed6990ed945720aa$var$getInitialExtent();
        return calcDimIdx;
    };
    DataStore.prototype.collectOrdinalMeta = function(dimIdx, ordinalMeta) {
        var chunk = this._chunks[dimIdx];
        var dim = this._dimensions[dimIdx];
        var rawExtents = this._rawExtent;
        var offset = dim.ordinalOffset || 0;
        var len = chunk.length;
        if (offset === 0) // We need to reset the rawExtent if collect is from start.
        // Because this dimension may be guessed as number and calcuating a wrong extent.
        rawExtents[dimIdx] = $ed6990ed945720aa$var$getInitialExtent();
        var dimRawExtent = rawExtents[dimIdx];
        // Parse from previous data offset. len may be changed after appendData
        for(var i = offset; i < len; i++){
            var val = chunk[i] = ordinalMeta.parseAndCollect(chunk[i]);
            if (!isNaN(val)) {
                dimRawExtent[0] = Math.min(val, dimRawExtent[0]);
                dimRawExtent[1] = Math.max(val, dimRawExtent[1]);
            }
        }
        dim.ordinalMeta = ordinalMeta;
        dim.ordinalOffset = len;
        dim.type = "ordinal"; // Force to be ordinal
    };
    DataStore.prototype.getOrdinalMeta = function(dimIdx) {
        var dimInfo = this._dimensions[dimIdx];
        var ordinalMeta = dimInfo.ordinalMeta;
        return ordinalMeta;
    };
    DataStore.prototype.getDimensionProperty = function(dimIndex) {
        var item = this._dimensions[dimIndex];
        return item && item.property;
    };
    /**
   * Caution: Can be only called on raw data (before `this._indices` created).
   */ DataStore.prototype.appendData = function(data) {
        (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(!this._indices, "appendData can only be called on raw data.");
        var provider = this._provider;
        var start = this.count();
        provider.appendData(data);
        var end = provider.count();
        if (!provider.persistent) end += start;
        if (start < end) this._initDataFromProvider(start, end, true);
        return [
            start,
            end
        ];
    };
    DataStore.prototype.appendValues = function(values, minFillLen) {
        var chunks = this._chunks;
        var dimensions = this._dimensions;
        var dimLen = dimensions.length;
        var rawExtent = this._rawExtent;
        var start = this.count();
        var end = start + Math.max(values.length, minFillLen || 0);
        for(var i = 0; i < dimLen; i++){
            var dim = dimensions[i];
            $ed6990ed945720aa$var$prepareStore(chunks, i, dim.type, end, true);
        }
        var emptyDataItem = [];
        for(var idx = start; idx < end; idx++){
            var sourceIdx = idx - start;
            // Store the data by dimensions
            for(var dimIdx = 0; dimIdx < dimLen; dimIdx++){
                var dim = dimensions[dimIdx];
                var val = $ed6990ed945720aa$var$defaultDimValueGetters.arrayRows.call(this, values[sourceIdx] || emptyDataItem, dim.property, sourceIdx, dimIdx);
                chunks[dimIdx][idx] = val;
                var dimRawExtent = rawExtent[dimIdx];
                val < dimRawExtent[0] && (dimRawExtent[0] = val);
                val > dimRawExtent[1] && (dimRawExtent[1] = val);
            }
        }
        this._rawCount = this._count = end;
        return {
            start: start,
            end: end
        };
    };
    DataStore.prototype._initDataFromProvider = function(start, end, append) {
        var provider = this._provider;
        var chunks = this._chunks;
        var dimensions = this._dimensions;
        var dimLen = dimensions.length;
        var rawExtent = this._rawExtent;
        var dimNames = (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(dimensions, function(dim) {
            return dim.property;
        });
        for(var i = 0; i < dimLen; i++){
            var dim = dimensions[i];
            if (!rawExtent[i]) rawExtent[i] = $ed6990ed945720aa$var$getInitialExtent();
            $ed6990ed945720aa$var$prepareStore(chunks, i, dim.type, end, append);
        }
        if (provider.fillStorage) provider.fillStorage(start, end, chunks, rawExtent);
        else {
            var dataItem = [];
            for(var idx = start; idx < end; idx++){
                // NOTICE: Try not to write things into dataItem
                dataItem = provider.getItem(idx, dataItem);
                // Each data item is value
                // [1, 2]
                // 2
                // Bar chart, line chart which uses category axis
                // only gives the 'y' value. 'x' value is the indices of category
                // Use a tempValue to normalize the value to be a (x, y) value
                // Store the data by dimensions
                for(var dimIdx = 0; dimIdx < dimLen; dimIdx++){
                    var dimStorage = chunks[dimIdx];
                    // PENDING NULL is empty or zero
                    var val = this._dimValueGetter(dataItem, dimNames[dimIdx], idx, dimIdx);
                    dimStorage[idx] = val;
                    var dimRawExtent = rawExtent[dimIdx];
                    val < dimRawExtent[0] && (dimRawExtent[0] = val);
                    val > dimRawExtent[1] && (dimRawExtent[1] = val);
                }
            }
        }
        if (!provider.persistent && provider.clean) // Clean unused data if data source is typed array.
        provider.clean();
        this._rawCount = this._count = end;
        // Reset data extent
        this._extent = [];
    };
    DataStore.prototype.count = function() {
        return this._count;
    };
    /**
   * Get value. Return NaN if idx is out of range.
   */ DataStore.prototype.get = function(dim, idx) {
        if (!(idx >= 0 && idx < this._count)) return NaN;
        var dimStore = this._chunks[dim];
        return dimStore ? dimStore[this.getRawIndex(idx)] : NaN;
    };
    DataStore.prototype.getValues = function(dimensions, idx) {
        var values = [];
        var dimArr = [];
        if (idx == null) {
            idx = dimensions;
            // TODO get all from store?
            dimensions = [];
            // All dimensions
            for(var i = 0; i < this._dimensions.length; i++)dimArr.push(i);
        } else dimArr = dimensions;
        for(var i = 0, len = dimArr.length; i < len; i++)values.push(this.get(dimArr[i], idx));
        return values;
    };
    /**
   * @param dim concrete dim
   */ DataStore.prototype.getByRawIndex = function(dim, rawIdx) {
        if (!(rawIdx >= 0 && rawIdx < this._rawCount)) return NaN;
        var dimStore = this._chunks[dim];
        return dimStore ? dimStore[rawIdx] : NaN;
    };
    /**
   * Get sum of data in one dimension
   */ DataStore.prototype.getSum = function(dim) {
        var dimData = this._chunks[dim];
        var sum = 0;
        if (dimData) for(var i = 0, len = this.count(); i < len; i++){
            var value = this.get(dim, i);
            if (!isNaN(value)) sum += value;
        }
        return sum;
    };
    /**
   * Get median of data in one dimension
   */ DataStore.prototype.getMedian = function(dim) {
        var dimDataArray = [];
        // map all data of one dimension
        this.each([
            dim
        ], function(val) {
            if (!isNaN(val)) dimDataArray.push(val);
        });
        // TODO
        // Use quick select?
        var sortedDimDataArray = dimDataArray.sort(function(a, b) {
            return a - b;
        });
        var len = this.count();
        // calculate median
        return len === 0 ? 0 : len % 2 === 1 ? sortedDimDataArray[(len - 1) / 2] : (sortedDimDataArray[len / 2] + sortedDimDataArray[len / 2 - 1]) / 2;
    };
    /**
   * Retrieve the index with given raw data index.
   */ DataStore.prototype.indexOfRawIndex = function(rawIndex) {
        if (rawIndex >= this._rawCount || rawIndex < 0) return -1;
        if (!this._indices) return rawIndex;
        // Indices are ascending
        var indices = this._indices;
        // If rawIndex === dataIndex
        var rawDataIndex = indices[rawIndex];
        if (rawDataIndex != null && rawDataIndex < this._count && rawDataIndex === rawIndex) return rawIndex;
        var left = 0;
        var right = this._count - 1;
        while(left <= right){
            var mid = (left + right) / 2 | 0;
            if (indices[mid] < rawIndex) left = mid + 1;
            else if (indices[mid] > rawIndex) right = mid - 1;
            else return mid;
        }
        return -1;
    };
    /**
   * Retrieve the index of nearest value.
   * @param dim
   * @param value
   * @param [maxDistance=Infinity]
   * @return If and only if multiple indices have
   *         the same value, they are put to the result.
   */ DataStore.prototype.indicesOfNearest = function(dim, value, maxDistance) {
        var chunks = this._chunks;
        var dimData = chunks[dim];
        var nearestIndices = [];
        if (!dimData) return nearestIndices;
        if (maxDistance == null) maxDistance = Infinity;
        var minDist = Infinity;
        var minDiff = -1;
        var nearestIndicesLen = 0;
        // Check the test case of `test/ut/spec/data/SeriesData.js`.
        for(var i = 0, len = this.count(); i < len; i++){
            var dataIndex = this.getRawIndex(i);
            var diff = value - dimData[dataIndex];
            var dist = Math.abs(diff);
            if (dist <= maxDistance) {
                // When the `value` is at the middle of `this.get(dim, i)` and `this.get(dim, i+1)`,
                // we'd better not push both of them to `nearestIndices`, otherwise it is easy to
                // get more than one item in `nearestIndices` (more specifically, in `tooltip`).
                // So we choose the one that `diff >= 0` in this case.
                // But if `this.get(dim, i)` and `this.get(dim, j)` get the same value, both of them
                // should be push to `nearestIndices`.
                if (dist < minDist || dist === minDist && diff >= 0 && minDiff < 0) {
                    minDist = dist;
                    minDiff = diff;
                    nearestIndicesLen = 0;
                }
                if (diff === minDiff) nearestIndices[nearestIndicesLen++] = i;
            }
        }
        nearestIndices.length = nearestIndicesLen;
        return nearestIndices;
    };
    DataStore.prototype.getIndices = function() {
        var newIndices;
        var indices = this._indices;
        if (indices) {
            var Ctor = indices.constructor;
            var thisCount = this._count;
            // `new Array(a, b, c)` is different from `new Uint32Array(a, b, c)`.
            if (Ctor === Array) {
                newIndices = new Ctor(thisCount);
                for(var i = 0; i < thisCount; i++)newIndices[i] = indices[i];
            } else newIndices = new Ctor(indices.buffer, 0, thisCount);
        } else {
            var Ctor = $ed6990ed945720aa$var$getIndicesCtor(this._rawCount);
            newIndices = new Ctor(this.count());
            for(var i = 0; i < newIndices.length; i++)newIndices[i] = i;
        }
        return newIndices;
    };
    /**
   * Data filter.
   */ DataStore.prototype.filter = function(dims, cb) {
        if (!this._count) return this;
        var newStore = this.clone();
        var count = newStore.count();
        var Ctor = $ed6990ed945720aa$var$getIndicesCtor(newStore._rawCount);
        var newIndices = new Ctor(count);
        var value = [];
        var dimSize = dims.length;
        var offset = 0;
        var dim0 = dims[0];
        var chunks = newStore._chunks;
        for(var i = 0; i < count; i++){
            var keep = void 0;
            var rawIdx = newStore.getRawIndex(i);
            // Simple optimization
            if (dimSize === 0) keep = cb(i);
            else if (dimSize === 1) {
                var val = chunks[dim0][rawIdx];
                keep = cb(val, i);
            } else {
                var k = 0;
                for(; k < dimSize; k++)value[k] = chunks[dims[k]][rawIdx];
                value[k] = i;
                keep = cb.apply(null, value);
            }
            if (keep) newIndices[offset++] = rawIdx;
        }
        // Set indices after filtered.
        if (offset < count) newStore._indices = newIndices;
        newStore._count = offset;
        // Reset data extent
        newStore._extent = [];
        newStore._updateGetRawIdx();
        return newStore;
    };
    /**
   * Select data in range. (For optimization of filter)
   * (Manually inline code, support 5 million data filtering in data zoom.)
   */ DataStore.prototype.selectRange = function(range) {
        var newStore = this.clone();
        var len = newStore._count;
        if (!len) return this;
        var dims = (0, $e44eb14c4271d0f9$export$ed97f33186d4b816)(range);
        var dimSize = dims.length;
        if (!dimSize) return this;
        var originalCount = newStore.count();
        var Ctor = $ed6990ed945720aa$var$getIndicesCtor(newStore._rawCount);
        var newIndices = new Ctor(originalCount);
        var offset = 0;
        var dim0 = dims[0];
        var min = range[dim0][0];
        var max = range[dim0][1];
        var storeArr = newStore._chunks;
        var quickFinished = false;
        if (!newStore._indices) {
            // Extreme optimization for common case. About 2x faster in chrome.
            var idx = 0;
            if (dimSize === 1) {
                var dimStorage = storeArr[dims[0]];
                for(var i = 0; i < len; i++){
                    var val = dimStorage[i];
                    // NaN will not be filtered. Consider the case, in line chart, empty
                    // value indicates the line should be broken. But for the case like
                    // scatter plot, a data item with empty value will not be rendered,
                    // but the axis extent may be effected if some other dim of the data
                    // item has value. Fortunately it is not a significant negative effect.
                    if (val >= min && val <= max || isNaN(val)) newIndices[offset++] = idx;
                    idx++;
                }
                quickFinished = true;
            } else if (dimSize === 2) {
                var dimStorage = storeArr[dims[0]];
                var dimStorage2 = storeArr[dims[1]];
                var min2 = range[dims[1]][0];
                var max2 = range[dims[1]][1];
                for(var i = 0; i < len; i++){
                    var val = dimStorage[i];
                    var val2 = dimStorage2[i];
                    // Do not filter NaN, see comment above.
                    if ((val >= min && val <= max || isNaN(val)) && (val2 >= min2 && val2 <= max2 || isNaN(val2))) newIndices[offset++] = idx;
                    idx++;
                }
                quickFinished = true;
            }
        }
        if (!quickFinished) {
            if (dimSize === 1) for(var i = 0; i < originalCount; i++){
                var rawIndex = newStore.getRawIndex(i);
                var val = storeArr[dims[0]][rawIndex];
                // Do not filter NaN, see comment above.
                if (val >= min && val <= max || isNaN(val)) newIndices[offset++] = rawIndex;
            }
            else for(var i = 0; i < originalCount; i++){
                var keep = true;
                var rawIndex = newStore.getRawIndex(i);
                for(var k = 0; k < dimSize; k++){
                    var dimk = dims[k];
                    var val = storeArr[dimk][rawIndex];
                    // Do not filter NaN, see comment above.
                    if (val < range[dimk][0] || val > range[dimk][1]) keep = false;
                }
                if (keep) newIndices[offset++] = newStore.getRawIndex(i);
            }
        }
        // Set indices after filtered.
        if (offset < originalCount) newStore._indices = newIndices;
        newStore._count = offset;
        // Reset data extent
        newStore._extent = [];
        newStore._updateGetRawIdx();
        return newStore;
    };
    // /**
    //  * Data mapping to a plain array
    //  */
    // mapArray(dims: DimensionIndex[], cb: MapArrayCb): any[] {
    //     const result: any[] = [];
    //     this.each(dims, function () {
    //         result.push(cb && (cb as MapArrayCb).apply(null, arguments));
    //     });
    //     return result;
    // }
    /**
   * Data mapping to a new List with given dimensions
   */ DataStore.prototype.map = function(dims, cb) {
        // TODO only clone picked chunks.
        var target = this.clone(dims);
        this._updateDims(target, dims, cb);
        return target;
    };
    /**
   * @caution Danger!! Only used in dataStack.
   */ DataStore.prototype.modify = function(dims, cb) {
        this._updateDims(this, dims, cb);
    };
    DataStore.prototype._updateDims = function(target, dims, cb) {
        var targetChunks = target._chunks;
        var tmpRetValue = [];
        var dimSize = dims.length;
        var dataCount = target.count();
        var values = [];
        var rawExtent = target._rawExtent;
        for(var i = 0; i < dims.length; i++)rawExtent[dims[i]] = $ed6990ed945720aa$var$getInitialExtent();
        for(var dataIndex = 0; dataIndex < dataCount; dataIndex++){
            var rawIndex = target.getRawIndex(dataIndex);
            for(var k = 0; k < dimSize; k++)values[k] = targetChunks[dims[k]][rawIndex];
            values[dimSize] = dataIndex;
            var retValue = cb && cb.apply(null, values);
            if (retValue != null) {
                // a number or string (in oridinal dimension)?
                if (typeof retValue !== "object") {
                    tmpRetValue[0] = retValue;
                    retValue = tmpRetValue;
                }
                for(var i = 0; i < retValue.length; i++){
                    var dim = dims[i];
                    var val = retValue[i];
                    var rawExtentOnDim = rawExtent[dim];
                    var dimStore = targetChunks[dim];
                    if (dimStore) dimStore[rawIndex] = val;
                    if (val < rawExtentOnDim[0]) rawExtentOnDim[0] = val;
                    if (val > rawExtentOnDim[1]) rawExtentOnDim[1] = val;
                }
            }
        }
    };
    /**
   * Large data down sampling using largest-triangle-three-buckets
   * @param {string} valueDimension
   * @param {number} targetCount
   */ DataStore.prototype.lttbDownSample = function(valueDimension, rate) {
        var target = this.clone([
            valueDimension
        ], true);
        var targetStorage = target._chunks;
        var dimStore = targetStorage[valueDimension];
        var len = this.count();
        var sampledIndex = 0;
        var frameSize = Math.floor(1 / rate);
        var currentRawIndex = this.getRawIndex(0);
        var maxArea;
        var area;
        var nextRawIndex;
        var newIndices = new ($ed6990ed945720aa$var$getIndicesCtor(this._rawCount))(Math.min((Math.ceil(len / frameSize) + 2) * 2, len));
        // First frame use the first data.
        newIndices[sampledIndex++] = currentRawIndex;
        for(var i = 1; i < len - 1; i += frameSize){
            var nextFrameStart = Math.min(i + frameSize, len - 1);
            var nextFrameEnd = Math.min(i + frameSize * 2, len);
            var avgX = (nextFrameEnd + nextFrameStart) / 2;
            var avgY = 0;
            for(var idx = nextFrameStart; idx < nextFrameEnd; idx++){
                var rawIndex = this.getRawIndex(idx);
                var y = dimStore[rawIndex];
                if (isNaN(y)) continue;
                avgY += y;
            }
            avgY /= nextFrameEnd - nextFrameStart;
            var frameStart = i;
            var frameEnd = Math.min(i + frameSize, len);
            var pointAX = i - 1;
            var pointAY = dimStore[currentRawIndex];
            maxArea = -1;
            nextRawIndex = frameStart;
            var firstNaNIndex = -1;
            var countNaN = 0;
            // Find a point from current frame that construct a triangle with largest area with previous selected point
            // And the average of next frame.
            for(var idx = frameStart; idx < frameEnd; idx++){
                var rawIndex = this.getRawIndex(idx);
                var y = dimStore[rawIndex];
                if (isNaN(y)) {
                    countNaN++;
                    if (firstNaNIndex < 0) firstNaNIndex = rawIndex;
                    continue;
                }
                // Calculate triangle area over three buckets
                area = Math.abs((pointAX - avgX) * (y - pointAY) - (pointAX - idx) * (avgY - pointAY));
                if (area > maxArea) {
                    maxArea = area;
                    nextRawIndex = rawIndex; // Next a is this b
                }
            }
            if (countNaN > 0 && countNaN < frameEnd - frameStart) {
                // Append first NaN point in every bucket.
                // It is necessary to ensure the correct order of indices.
                newIndices[sampledIndex++] = Math.min(firstNaNIndex, nextRawIndex);
                nextRawIndex = Math.max(firstNaNIndex, nextRawIndex);
            }
            newIndices[sampledIndex++] = nextRawIndex;
            currentRawIndex = nextRawIndex; // This a is the next a (chosen b)
        }
        // First frame use the last data.
        newIndices[sampledIndex++] = this.getRawIndex(len - 1);
        target._count = sampledIndex;
        target._indices = newIndices;
        target.getRawIndex = this._getRawIdx;
        return target;
    };
    /**
   * Large data down sampling on given dimension
   * @param sampleIndex Sample index for name and id
   */ DataStore.prototype.downSample = function(dimension, rate, sampleValue, sampleIndex) {
        var target = this.clone([
            dimension
        ], true);
        var targetStorage = target._chunks;
        var frameValues = [];
        var frameSize = Math.floor(1 / rate);
        var dimStore = targetStorage[dimension];
        var len = this.count();
        var rawExtentOnDim = target._rawExtent[dimension] = $ed6990ed945720aa$var$getInitialExtent();
        var newIndices = new ($ed6990ed945720aa$var$getIndicesCtor(this._rawCount))(Math.ceil(len / frameSize));
        var offset = 0;
        for(var i = 0; i < len; i += frameSize){
            // Last frame
            if (frameSize > len - i) {
                frameSize = len - i;
                frameValues.length = frameSize;
            }
            for(var k = 0; k < frameSize; k++){
                var dataIdx = this.getRawIndex(i + k);
                frameValues[k] = dimStore[dataIdx];
            }
            var value = sampleValue(frameValues);
            var sampleFrameIdx = this.getRawIndex(Math.min(i + sampleIndex(frameValues, value) || 0, len - 1));
            // Only write value on the filtered data
            dimStore[sampleFrameIdx] = value;
            if (value < rawExtentOnDim[0]) rawExtentOnDim[0] = value;
            if (value > rawExtentOnDim[1]) rawExtentOnDim[1] = value;
            newIndices[offset++] = sampleFrameIdx;
        }
        target._count = offset;
        target._indices = newIndices;
        target._updateGetRawIdx();
        return target;
    };
    /**
   * Data iteration
   * @param ctx default this
   * @example
   *  list.each('x', function (x, idx) {});
   *  list.each(['x', 'y'], function (x, y, idx) {});
   *  list.each(function (idx) {})
   */ DataStore.prototype.each = function(dims, cb) {
        if (!this._count) return;
        var dimSize = dims.length;
        var chunks = this._chunks;
        for(var i = 0, len = this.count(); i < len; i++){
            var rawIdx = this.getRawIndex(i);
            // Simple optimization
            switch(dimSize){
                case 0:
                    cb(i);
                    break;
                case 1:
                    cb(chunks[dims[0]][rawIdx], i);
                    break;
                case 2:
                    cb(chunks[dims[0]][rawIdx], chunks[dims[1]][rawIdx], i);
                    break;
                default:
                    var k = 0;
                    var value = [];
                    for(; k < dimSize; k++)value[k] = chunks[dims[k]][rawIdx];
                    // Index
                    value[k] = i;
                    cb.apply(null, value);
            }
        }
    };
    /**
   * Get extent of data in one dimension
   */ DataStore.prototype.getDataExtent = function(dim) {
        // Make sure use concrete dim as cache name.
        var dimData = this._chunks[dim];
        var initialExtent = $ed6990ed945720aa$var$getInitialExtent();
        if (!dimData) return initialExtent;
        // Make more strict checkings to ensure hitting cache.
        var currEnd = this.count();
        // Consider the most cases when using data zoom, `getDataExtent`
        // happened before filtering. We cache raw extent, which is not
        // necessary to be cleared and recalculated when restore data.
        var useRaw = !this._indices;
        var dimExtent;
        if (useRaw) return this._rawExtent[dim].slice();
        dimExtent = this._extent[dim];
        if (dimExtent) return dimExtent.slice();
        dimExtent = initialExtent;
        var min = dimExtent[0];
        var max = dimExtent[1];
        for(var i = 0; i < currEnd; i++){
            var rawIdx = this.getRawIndex(i);
            var value = dimData[rawIdx];
            value < min && (min = value);
            value > max && (max = value);
        }
        dimExtent = [
            min,
            max
        ];
        this._extent[dim] = dimExtent;
        return dimExtent;
    };
    /**
   * Get raw data item
   */ DataStore.prototype.getRawDataItem = function(idx) {
        var rawIdx = this.getRawIndex(idx);
        if (!this._provider.persistent) {
            var val = [];
            var chunks = this._chunks;
            for(var i = 0; i < chunks.length; i++)val.push(chunks[i][rawIdx]);
            return val;
        } else return this._provider.getItem(rawIdx);
    };
    /**
   * Clone shallow.
   *
   * @param clonedDims Determine which dims to clone. Will share the data if not specified.
   */ DataStore.prototype.clone = function(clonedDims, ignoreIndices) {
        var target = new DataStore();
        var chunks = this._chunks;
        var clonedDimsMap = clonedDims && (0, $e44eb14c4271d0f9$export$533b26079ad0b4b)(clonedDims, function(obj, dimIdx) {
            obj[dimIdx] = true;
            return obj;
        }, {});
        if (clonedDimsMap) for(var i = 0; i < chunks.length; i++)// Not clone if dim is not picked.
        target._chunks[i] = !clonedDimsMap[i] ? chunks[i] : $ed6990ed945720aa$var$cloneChunk(chunks[i]);
        else target._chunks = chunks;
        this._copyCommonProps(target);
        if (!ignoreIndices) target._indices = this._cloneIndices();
        target._updateGetRawIdx();
        return target;
    };
    DataStore.prototype._copyCommonProps = function(target) {
        target._count = this._count;
        target._rawCount = this._rawCount;
        target._provider = this._provider;
        target._dimensions = this._dimensions;
        target._extent = (0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(this._extent);
        target._rawExtent = (0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(this._rawExtent);
    };
    DataStore.prototype._cloneIndices = function() {
        if (this._indices) {
            var Ctor = this._indices.constructor;
            var indices = void 0;
            if (Ctor === Array) {
                var thisCount = this._indices.length;
                indices = new Ctor(thisCount);
                for(var i = 0; i < thisCount; i++)indices[i] = this._indices[i];
            } else indices = new Ctor(this._indices);
            return indices;
        }
        return null;
    };
    DataStore.prototype._getRawIdxIdentity = function(idx) {
        return idx;
    };
    DataStore.prototype._getRawIdx = function(idx) {
        if (idx < this._count && idx >= 0) return this._indices[idx];
        return -1;
    };
    DataStore.prototype._updateGetRawIdx = function() {
        this.getRawIndex = this._indices ? this._getRawIdx : this._getRawIdxIdentity;
    };
    DataStore.internalField = function() {
        function getDimValueSimply(dataItem, property, dataIndex, dimIndex) {
            return (0, $44f303460d06cb90$export$cc7175145baad076)(dataItem[dimIndex], this._dimensions[dimIndex]);
        }
        $ed6990ed945720aa$var$defaultDimValueGetters = {
            arrayRows: getDimValueSimply,
            objectRows: function(dataItem, property, dataIndex, dimIndex) {
                return (0, $44f303460d06cb90$export$cc7175145baad076)(dataItem[property], this._dimensions[dimIndex]);
            },
            keyedColumns: getDimValueSimply,
            original: function(dataItem, property, dataIndex, dimIndex) {
                // Performance sensitive, do not use modelUtil.getDataItemValue.
                // If dataItem is an plain object with no value field, the let `value`
                // will be assigned with the object, but it will be tread correctly
                // in the `convertValue`.
                var value = dataItem && (dataItem.value == null ? dataItem : dataItem.value);
                return (0, $44f303460d06cb90$export$cc7175145baad076)(value instanceof Array ? value[dimIndex] : value, this._dimensions[dimIndex]);
            },
            typedArray: function(dataItem, property, dataIndex, dimIndex) {
                return dataItem[dimIndex];
            }
        };
    }();
    return DataStore;
}();
var $ed6990ed945720aa$export$2e2bcd8739ae039 = $ed6990ed945720aa$var$DataStore;



/**
 * [REQUIREMENT_MEMO]:
 * (0) `metaRawOption` means `dimensions`/`sourceHeader`/`seriesLayoutBy` in raw option.
 * (1) Keep support the feature: `metaRawOption` can be specified both on `series` and
 * `root-dataset`. Them on `series` has higher priority.
 * (2) Do not support to set `metaRawOption` on a `non-root-dataset`, because it might
 * confuse users: whether those props indicate how to visit the upstream source or visit
 * the transform result source, and some transforms has nothing to do with these props,
 * and some transforms might have multiple upstream.
 * (3) Transforms should specify `metaRawOption` in each output, just like they can be
 * declared in `root-dataset`.
 * (4) At present only support visit source in `SERIES_LAYOUT_BY_COLUMN` in transforms.
 * That is for reducing complexity in transforms.
 * PENDING: Whether to provide transposition transform?
 *
 * [IMPLEMENTAION_MEMO]:
 * "sourceVisitConfig" are calculated from `metaRawOption` and `data`.
 * They will not be calculated until `source` is about to be visited (to prevent from
 * duplicate calcuation). `source` is visited only in series and input to transforms.
 *
 * [DIMENSION_INHERIT_RULE]:
 * By default the dimensions are inherited from ancestors, unless a transform return
 * a new dimensions definition.
 * Consider the case:
 * ```js
 * dataset: [{
 *     source: [ ['Product', 'Sales', 'Prise'], ['Cookies', 321, 44.21], ...]
 * }, {
 *     transform: { type: 'filter', ... }
 * }]
 * dataset: [{
 *     dimension: ['Product', 'Sales', 'Prise'],
 *     source: [ ['Cookies', 321, 44.21], ...]
 * }, {
 *     transform: { type: 'filter', ... }
 * }]
 * ```
 * The two types of option should have the same behavior after transform.
 *
 *
 * [SCENARIO]:
 * (1) Provide source data directly:
 * ```js
 * series: {
 *     encode: {...},
 *     dimensions: [...]
 *     seriesLayoutBy: 'row',
 *     data: [[...]]
 * }
 * ```
 * (2) Series refer to dataset.
 * ```js
 * series: [{
 *     encode: {...}
 *     // Ignore datasetIndex means `datasetIndex: 0`
 *     // and the dimensions defination in dataset is used
 * }, {
 *     encode: {...},
 *     seriesLayoutBy: 'column',
 *     datasetIndex: 1
 * }]
 * ```
 * (3) dataset transform
 * ```js
 * dataset: [{
 *     source: [...]
 * }, {
 *     source: [...]
 * }, {
 *     // By default from 0.
 *     transform: { type: 'filter', config: {...} }
 * }, {
 *     // Piped.
 *     transform: [
 *         { type: 'filter', config: {...} },
 *         { type: 'sort', config: {...} }
 *     ]
 * }, {
 *     id: 'regressionData',
 *     fromDatasetIndex: 1,
 *     // Third-party transform
 *     transform: { type: 'ecStat:regression', config: {...} }
 * }, {
 *     // retrieve the extra result.
 *     id: 'regressionFormula',
 *     fromDatasetId: 'regressionData',
 *     fromTransformResult: 1
 * }]
 * ```
 */ var $db2d9ac18686dd88$export$af4db9ec7e200ea2 = /** @class */ function() {
    function SourceManager(sourceHost) {
        // Cached source. Do not repeat calculating if not dirty.
        this._sourceList = [];
        this._storeList = [];
        // version sign of each upstream source manager.
        this._upstreamSignList = [];
        this._versionSignBase = 0;
        this._dirty = true;
        this._sourceHost = sourceHost;
    }
    /**
   * Mark dirty.
   */ SourceManager.prototype.dirty = function() {
        this._setLocalSource([], []);
        this._storeList = [];
        this._dirty = true;
    };
    SourceManager.prototype._setLocalSource = function(sourceList, upstreamSignList) {
        this._sourceList = sourceList;
        this._upstreamSignList = upstreamSignList;
        this._versionSignBase++;
        if (this._versionSignBase > 9e10) this._versionSignBase = 0;
    };
    /**
   * For detecting whether the upstream source is dirty, so that
   * the local cached source (in `_sourceList`) should be discarded.
   */ SourceManager.prototype._getVersionSign = function() {
        return this._sourceHost.uid + "_" + this._versionSignBase;
    };
    /**
   * Always return a source instance. Otherwise throw error.
   */ SourceManager.prototype.prepareSource = function() {
        // For the case that call `setOption` multiple time but no data changed,
        // cache the result source to prevent from repeating transform.
        if (this._isDirty()) {
            this._createSource();
            this._dirty = false;
        }
    };
    SourceManager.prototype._createSource = function() {
        this._setLocalSource([], []);
        var sourceHost = this._sourceHost;
        var upSourceMgrList = this._getUpstreamSourceManagers();
        var hasUpstream = !!upSourceMgrList.length;
        var resultSourceList;
        var upstreamSignList;
        if ($db2d9ac18686dd88$var$isSeries(sourceHost)) {
            var seriesModel = sourceHost;
            var data = void 0;
            var sourceFormat = void 0;
            var upSource = void 0;
            // Has upstream dataset
            if (hasUpstream) {
                var upSourceMgr = upSourceMgrList[0];
                upSourceMgr.prepareSource();
                upSource = upSourceMgr.getSource();
                data = upSource.data;
                sourceFormat = upSource.sourceFormat;
                upstreamSignList = [
                    upSourceMgr._getVersionSign()
                ];
            } else {
                data = seriesModel.get("data", true);
                sourceFormat = (0, $e44eb14c4271d0f9$export$b119cc7e1840e59c)(data) ? (0, $2b9c860c8cf83b68$export$a918cb016a382d45) : (0, $2b9c860c8cf83b68$export$2823037fb9d8f0c6);
                upstreamSignList = [];
            }
            // See [REQUIREMENT_MEMO], merge settings on series and parent dataset if it is root.
            var newMetaRawOption = this._getSourceMetaRawOption() || {};
            var upMetaRawOption = upSource && upSource.metaRawOption || {};
            var seriesLayoutBy = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(newMetaRawOption.seriesLayoutBy, upMetaRawOption.seriesLayoutBy) || null;
            var sourceHeader = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(newMetaRawOption.sourceHeader, upMetaRawOption.sourceHeader);
            // Note here we should not use `upSource.dimensionsDefine`. Consider the case:
            // `upSource.dimensionsDefine` is detected by `seriesLayoutBy: 'column'`,
            // but series need `seriesLayoutBy: 'row'`.
            var dimensions = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(newMetaRawOption.dimensions, upMetaRawOption.dimensions);
            // We share source with dataset as much as possible
            // to avoid extra memory cost of high dimensional data.
            var needsCreateSource = seriesLayoutBy !== upMetaRawOption.seriesLayoutBy || !!sourceHeader !== !!upMetaRawOption.sourceHeader || dimensions;
            resultSourceList = needsCreateSource ? [
                (0, $3790a8a1aeffac84$export$1921362e86c73c88)(data, {
                    seriesLayoutBy: seriesLayoutBy,
                    sourceHeader: sourceHeader,
                    dimensions: dimensions
                }, sourceFormat)
            ] : [];
        } else {
            var datasetModel = sourceHost;
            // Has upstream dataset.
            if (hasUpstream) {
                var result = this._applyTransform(upSourceMgrList);
                resultSourceList = result.sourceList;
                upstreamSignList = result.upstreamSignList;
            } else {
                var sourceData = datasetModel.get("source", true);
                resultSourceList = [
                    (0, $3790a8a1aeffac84$export$1921362e86c73c88)(sourceData, this._getSourceMetaRawOption(), null)
                ];
                upstreamSignList = [];
            }
        }
        (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(resultSourceList && upstreamSignList);
        this._setLocalSource(resultSourceList, upstreamSignList);
    };
    SourceManager.prototype._applyTransform = function(upMgrList) {
        var datasetModel = this._sourceHost;
        var transformOption = datasetModel.get("transform", true);
        var fromTransformResult = datasetModel.get("fromTransformResult", true);
        (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(fromTransformResult != null || transformOption != null);
        if (fromTransformResult != null) {
            var errMsg = "";
            if (upMgrList.length !== 1) {
                errMsg = "When using `fromTransformResult`, there should be only one upstream dataset";
                $db2d9ac18686dd88$var$doThrow(errMsg);
            }
        }
        var sourceList;
        var upSourceList = [];
        var upstreamSignList = [];
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(upMgrList, function(upMgr) {
            upMgr.prepareSource();
            var upSource = upMgr.getSource(fromTransformResult || 0);
            var errMsg = "";
            if (fromTransformResult != null && !upSource) {
                errMsg = "Can not retrieve result by `fromTransformResult`: " + fromTransformResult;
                $db2d9ac18686dd88$var$doThrow(errMsg);
            }
            upSourceList.push(upSource);
            upstreamSignList.push(upMgr._getVersionSign());
        });
        if (transformOption) sourceList = (0, $8d7e345fe242a315$export$42a68f09db16803f)(transformOption, upSourceList, {
            datasetIndex: datasetModel.componentIndex
        });
        else if (fromTransformResult != null) sourceList = [
            (0, $3790a8a1aeffac84$export$e0365e7e3555ddd4)(upSourceList[0])
        ];
        return {
            sourceList: sourceList,
            upstreamSignList: upstreamSignList
        };
    };
    SourceManager.prototype._isDirty = function() {
        if (this._dirty) return true;
        // All sourceList is from the some upstream.
        var upSourceMgrList = this._getUpstreamSourceManagers();
        for(var i = 0; i < upSourceMgrList.length; i++){
            var upSrcMgr = upSourceMgrList[i];
            if (// Consider the case that there is ancestor diry, call it recursively.
            // The performance is probably not an issue because usually the chain is not long.
            upSrcMgr._isDirty() || this._upstreamSignList[i] !== upSrcMgr._getVersionSign()) return true;
        }
    };
    /**
   * @param sourceIndex By default 0, means "main source".
   *                    In most cases there is only one source.
   */ SourceManager.prototype.getSource = function(sourceIndex) {
        sourceIndex = sourceIndex || 0;
        var source = this._sourceList[sourceIndex];
        if (!source) {
            // Series may share source instance with dataset.
            var upSourceMgrList = this._getUpstreamSourceManagers();
            return upSourceMgrList[0] && upSourceMgrList[0].getSource(sourceIndex);
        }
        return source;
    };
    /**
   *
   * Get a data store which can be shared across series.
   * Only available for series.
   *
   * @param seriesDimRequest Dimensions that are generated in series.
   *        Should have been sorted by `storeDimIndex` asc.
   */ SourceManager.prototype.getSharedDataStore = function(seriesDimRequest) {
        (0, $e44eb14c4271d0f9$export$a7a9523472993e97)($db2d9ac18686dd88$var$isSeries(this._sourceHost), "Can only call getDataStore on series source manager.");
        var schema = seriesDimRequest.makeStoreSchema();
        return this._innerGetDataStore(schema.dimensions, seriesDimRequest.source, schema.hash);
    };
    SourceManager.prototype._innerGetDataStore = function(storeDims, seriesSource, sourceReadKey) {
        // TODO Can use other sourceIndex?
        var sourceIndex = 0;
        var storeList = this._storeList;
        var cachedStoreMap = storeList[sourceIndex];
        if (!cachedStoreMap) cachedStoreMap = storeList[sourceIndex] = {};
        var cachedStore = cachedStoreMap[sourceReadKey];
        if (!cachedStore) {
            var upSourceMgr = this._getUpstreamSourceManagers()[0];
            if ($db2d9ac18686dd88$var$isSeries(this._sourceHost) && upSourceMgr) cachedStore = upSourceMgr._innerGetDataStore(storeDims, seriesSource, sourceReadKey);
            else {
                cachedStore = new (0, $ed6990ed945720aa$export$2e2bcd8739ae039)();
                // Always create store from source of series.
                cachedStore.initData(new (0, $b7a7be40e6489dbc$export$b900d7c4c3952a40)(seriesSource, storeDims.length), storeDims);
            }
            cachedStoreMap[sourceReadKey] = cachedStore;
        }
        return cachedStore;
    };
    /**
   * PENDING: Is it fast enough?
   * If no upstream, return empty array.
   */ SourceManager.prototype._getUpstreamSourceManagers = function() {
        // Always get the relationship from the raw option.
        // Do not cache the link of the dependency graph, so that
        // there is no need to update them when change happens.
        var sourceHost = this._sourceHost;
        if ($db2d9ac18686dd88$var$isSeries(sourceHost)) {
            var datasetModel = (0, $13c62ad003ac72f0$export$8da66f73a1eda454)(sourceHost);
            return !datasetModel ? [] : [
                datasetModel.getSourceManager()
            ];
        } else return (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)((0, $13c62ad003ac72f0$export$397ba553479711e7)(sourceHost), function(datasetModel) {
            return datasetModel.getSourceManager();
        });
    };
    SourceManager.prototype._getSourceMetaRawOption = function() {
        var sourceHost = this._sourceHost;
        var seriesLayoutBy;
        var sourceHeader;
        var dimensions;
        if ($db2d9ac18686dd88$var$isSeries(sourceHost)) {
            seriesLayoutBy = sourceHost.get("seriesLayoutBy", true);
            sourceHeader = sourceHost.get("sourceHeader", true);
            dimensions = sourceHost.get("dimensions", true);
        } else if (!this._getUpstreamSourceManagers().length) {
            var model = sourceHost;
            seriesLayoutBy = model.get("seriesLayoutBy", true);
            sourceHeader = model.get("sourceHeader", true);
            dimensions = model.get("dimensions", true);
        }
        return {
            seriesLayoutBy: seriesLayoutBy,
            sourceHeader: sourceHeader,
            dimensions: dimensions
        };
    };
    return SourceManager;
}();
function $db2d9ac18686dd88$export$9451f4e9047441ec(datasetModel) {
    var transformOption = datasetModel.option.transform;
    transformOption && (0, $e44eb14c4271d0f9$export$112e66431016387b)(datasetModel.option.transform);
}
function $db2d9ac18686dd88$var$isSeries(sourceHost) {
    // Avoid circular dependency with Series.ts
    return sourceHost.mainType === "series";
}
function $db2d9ac18686dd88$var$doThrow(errMsg) {
    throw new Error(errMsg);
}


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 



var $5045e51428120a21$var$TOOLTIP_LINE_HEIGHT_CSS = "line-height:1";
// TODO: more textStyle option
function $5045e51428120a21$var$getTooltipTextStyle(textStyle, renderMode) {
    var nameFontColor = textStyle.color || "#6e7079";
    var nameFontSize = textStyle.fontSize || 12;
    var nameFontWeight = textStyle.fontWeight || "400";
    var valueFontColor = textStyle.color || "#464646";
    var valueFontSize = textStyle.fontSize || 14;
    var valueFontWeight = textStyle.fontWeight || "900";
    if (renderMode === "html") // `textStyle` is probably from user input, should be encoded to reduce security risk.
    return {
        // eslint-disable-next-line max-len
        nameStyle: "font-size:" + (0, $e8bddf605818feb2$export$f9d6449b9af28dc1)(nameFontSize + "") + "px;color:" + (0, $e8bddf605818feb2$export$f9d6449b9af28dc1)(nameFontColor) + ";font-weight:" + (0, $e8bddf605818feb2$export$f9d6449b9af28dc1)(nameFontWeight + ""),
        // eslint-disable-next-line max-len
        valueStyle: "font-size:" + (0, $e8bddf605818feb2$export$f9d6449b9af28dc1)(valueFontSize + "") + "px;color:" + (0, $e8bddf605818feb2$export$f9d6449b9af28dc1)(valueFontColor) + ";font-weight:" + (0, $e8bddf605818feb2$export$f9d6449b9af28dc1)(valueFontWeight + "")
    };
    else return {
        nameStyle: {
            fontSize: nameFontSize,
            fill: nameFontColor,
            fontWeight: nameFontWeight
        },
        valueStyle: {
            fontSize: valueFontSize,
            fill: valueFontColor,
            fontWeight: valueFontWeight
        }
    };
}
// See `TooltipMarkupLayoutIntent['innerGapLevel']`.
// (value from UI design)
var $5045e51428120a21$var$HTML_GAPS = [
    0,
    10,
    20,
    30
];
var $5045e51428120a21$var$RICH_TEXT_GAPS = [
    "",
    "\n",
    "\n\n",
    "\n\n\n"
];
function $5045e51428120a21$export$cf63b23ce77d1921(type, option) {
    option.type = type;
    return option;
}
function $5045e51428120a21$var$isSectionFragment(frag) {
    return frag.type === "section";
}
function $5045e51428120a21$var$getBuilder(frag) {
    return $5045e51428120a21$var$isSectionFragment(frag) ? $5045e51428120a21$var$buildSection : $5045e51428120a21$var$buildNameValue;
}
function $5045e51428120a21$var$getBlockGapLevel(frag) {
    if ($5045e51428120a21$var$isSectionFragment(frag)) {
        var gapLevel_1 = 0;
        var subBlockLen = frag.blocks.length;
        var hasInnerGap_1 = subBlockLen > 1 || subBlockLen > 0 && !frag.noHeader;
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(frag.blocks, function(subBlock) {
            var subGapLevel = $5045e51428120a21$var$getBlockGapLevel(subBlock);
            // If the some of the sub-blocks have some gaps (like 10px) inside, this block
            // should use a larger gap (like 20px) to distinguish those sub-blocks.
            if (subGapLevel >= gapLevel_1) gapLevel_1 = subGapLevel + +(hasInnerGap_1 && // 0 always can not be readable gap level.
            (!subGapLevel || $5045e51428120a21$var$isSectionFragment(subBlock) && !subBlock.noHeader));
        });
        return gapLevel_1;
    }
    return 0;
}
function $5045e51428120a21$var$buildSection(ctx, fragment, topMarginForOuterGap, toolTipTextStyle) {
    var noHeader = fragment.noHeader;
    var gaps = $5045e51428120a21$var$getGap($5045e51428120a21$var$getBlockGapLevel(fragment));
    var subMarkupTextList = [];
    var subBlocks = fragment.blocks || [];
    (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(!subBlocks || (0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(subBlocks));
    subBlocks = subBlocks || [];
    var orderMode = ctx.orderMode;
    if (fragment.sortBlocks && orderMode) {
        subBlocks = subBlocks.slice();
        var orderMap = {
            valueAsc: "asc",
            valueDesc: "desc"
        };
        if ((0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(orderMap, orderMode)) {
            var comparator_1 = new (0, $44f303460d06cb90$export$ed75a5d7b0144167)(orderMap[orderMode], null);
            subBlocks.sort(function(a, b) {
                return comparator_1.evaluate(a.sortParam, b.sortParam);
            });
        } else if (orderMode === "seriesDesc") subBlocks.reverse();
    }
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(subBlocks, function(subBlock, idx) {
        var valueFormatter = fragment.valueFormatter;
        var subMarkupText = $5045e51428120a21$var$getBuilder(subBlock)(// Inherit valueFormatter
        valueFormatter ? (0, $e44eb14c4271d0f9$export$8b58be045bf06082)((0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, ctx), {
            valueFormatter: valueFormatter
        }) : ctx, subBlock, idx > 0 ? gaps.html : 0, toolTipTextStyle);
        subMarkupText != null && subMarkupTextList.push(subMarkupText);
    });
    var subMarkupText = ctx.renderMode === "richText" ? subMarkupTextList.join(gaps.richText) : $5045e51428120a21$var$wrapBlockHTML(subMarkupTextList.join(""), noHeader ? topMarginForOuterGap : gaps.html);
    if (noHeader) return subMarkupText;
    var displayableHeader = (0, $1594f6dc0ce39685$export$3cd8db88714decfc)(fragment.header, "ordinal", ctx.useUTC);
    var nameStyle = $5045e51428120a21$var$getTooltipTextStyle(toolTipTextStyle, ctx.renderMode).nameStyle;
    if (ctx.renderMode === "richText") return $5045e51428120a21$var$wrapInlineNameRichText(ctx, displayableHeader, nameStyle) + gaps.richText + subMarkupText;
    else return $5045e51428120a21$var$wrapBlockHTML('<div style="' + nameStyle + ";" + $5045e51428120a21$var$TOOLTIP_LINE_HEIGHT_CSS + ';">' + (0, $e8bddf605818feb2$export$f9d6449b9af28dc1)(displayableHeader) + "</div>" + subMarkupText, topMarginForOuterGap);
}
function $5045e51428120a21$var$buildNameValue(ctx, fragment, topMarginForOuterGap, toolTipTextStyle) {
    var renderMode = ctx.renderMode;
    var noName = fragment.noName;
    var noValue = fragment.noValue;
    var noMarker = !fragment.markerType;
    var name = fragment.name;
    var useUTC = ctx.useUTC;
    var valueFormatter = fragment.valueFormatter || ctx.valueFormatter || function(value) {
        value = (0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(value) ? value : [
            value
        ];
        return (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(value, function(val, idx) {
            return (0, $1594f6dc0ce39685$export$3cd8db88714decfc)(val, (0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(valueTypeOption) ? valueTypeOption[idx] : valueTypeOption, useUTC);
        });
    };
    if (noName && noValue) return;
    var markerStr = noMarker ? "" : ctx.markupStyleCreator.makeTooltipMarker(fragment.markerType, fragment.markerColor || "#333", renderMode);
    var readableName = noName ? "" : (0, $1594f6dc0ce39685$export$3cd8db88714decfc)(name, "ordinal", useUTC);
    var valueTypeOption = fragment.valueType;
    var readableValueList = noValue ? [] : valueFormatter(fragment.value, fragment.dataIndex);
    var valueAlignRight = !noMarker || !noName;
    // It little weird if only value next to marker but far from marker.
    var valueCloseToMarker = !noMarker && noName;
    var _a = $5045e51428120a21$var$getTooltipTextStyle(toolTipTextStyle, renderMode), nameStyle = _a.nameStyle, valueStyle = _a.valueStyle;
    return renderMode === "richText" ? (noMarker ? "" : markerStr) + (noName ? "" : $5045e51428120a21$var$wrapInlineNameRichText(ctx, readableName, nameStyle)) + (noValue ? "" : $5045e51428120a21$var$wrapInlineValueRichText(ctx, readableValueList, valueAlignRight, valueCloseToMarker, valueStyle)) : $5045e51428120a21$var$wrapBlockHTML((noMarker ? "" : markerStr) + (noName ? "" : $5045e51428120a21$var$wrapInlineNameHTML(readableName, !noMarker, nameStyle)) + (noValue ? "" : $5045e51428120a21$var$wrapInlineValueHTML(readableValueList, valueAlignRight, valueCloseToMarker, valueStyle)), topMarginForOuterGap);
}
function $5045e51428120a21$export$6969ffb02c1cb49a(fragment, markupStyleCreator, renderMode, orderMode, useUTC, toolTipTextStyle) {
    if (!fragment) return;
    var builder = $5045e51428120a21$var$getBuilder(fragment);
    var ctx = {
        useUTC: useUTC,
        renderMode: renderMode,
        orderMode: orderMode,
        markupStyleCreator: markupStyleCreator,
        valueFormatter: fragment.valueFormatter
    };
    return builder(ctx, fragment, 0, toolTipTextStyle);
}
function $5045e51428120a21$var$getGap(gapLevel) {
    return {
        html: $5045e51428120a21$var$HTML_GAPS[gapLevel],
        richText: $5045e51428120a21$var$RICH_TEXT_GAPS[gapLevel]
    };
}
function $5045e51428120a21$var$wrapBlockHTML(encodedContent, topGap) {
    var clearfix = '<div style="clear:both"></div>';
    var marginCSS = "margin: " + topGap + "px 0 0";
    return '<div style="' + marginCSS + ";" + $5045e51428120a21$var$TOOLTIP_LINE_HEIGHT_CSS + ';">' + encodedContent + clearfix + "</div>";
}
function $5045e51428120a21$var$wrapInlineNameHTML(name, leftHasMarker, style) {
    var marginCss = leftHasMarker ? "margin-left:2px" : "";
    return '<span style="' + style + ";" + marginCss + '">' + (0, $e8bddf605818feb2$export$f9d6449b9af28dc1)(name) + "</span>";
}
function $5045e51428120a21$var$wrapInlineValueHTML(valueList, alignRight, valueCloseToMarker, style) {
    // Do not too close to marker, considering there are multiple values separated by spaces.
    var paddingStr = valueCloseToMarker ? "10px" : "20px";
    var alignCSS = alignRight ? "float:right;margin-left:" + paddingStr : "";
    valueList = (0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(valueList) ? valueList : [
        valueList
    ];
    return '<span style="' + alignCSS + ";" + style + '">' + (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(valueList, function(value) {
        return (0, $e8bddf605818feb2$export$f9d6449b9af28dc1)(value);
    }).join("&nbsp;&nbsp;") + "</span>";
}
function $5045e51428120a21$var$wrapInlineNameRichText(ctx, name, style) {
    return ctx.markupStyleCreator.wrapRichTextStyle(name, style);
}
function $5045e51428120a21$var$wrapInlineValueRichText(ctx, values, alignRight, valueCloseToMarker, style) {
    var styles = [
        style
    ];
    var paddingLeft = valueCloseToMarker ? 10 : 20;
    alignRight && styles.push({
        padding: [
            0,
            0,
            0,
            paddingLeft
        ],
        align: "right"
    });
    // Value has commas inside, so use '  ' as delimiter for multiple values.
    return ctx.markupStyleCreator.wrapRichTextStyle((0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(values) ? values.join("  ") : values, styles);
}
function $5045e51428120a21$export$ea15628039c0fa93(series, dataIndex) {
    var style = series.getData().getItemVisual(dataIndex, "style");
    var color = style[series.visualDrawType];
    return (0, $1594f6dc0ce39685$export$cda04d03233e5555)(color);
}
function $5045e51428120a21$export$3048212c802df496(model, renderMode) {
    var padding = model.get("padding");
    return padding != null ? padding : renderMode === "richText" ? [
        8,
        10
    ] : 10;
}
/**
 * The major feature is generate styles for `renderMode: 'richText'`.
 * But it also serves `renderMode: 'html'` to provide
 * "renderMode-independent" API.
 */ var $5045e51428120a21$export$2fba3afbcdcf3e18 = /** @class */ function() {
    function TooltipMarkupStyleCreator() {
        this.richTextStyles = {};
        // Notice that "generate a style name" usually happens repeatedly when mouse is moving and
        // a tooltip is displayed. So we put the `_nextStyleNameId` as a member of each creator
        // rather than static shared by all creators (which will cause it increase to fast).
        this._nextStyleNameId = (0, $13e6a1a716300dd4$export$474d2ec9aa44a22)();
    }
    TooltipMarkupStyleCreator.prototype._generateStyleName = function() {
        return "__EC_aUTo_" + this._nextStyleNameId++;
    };
    TooltipMarkupStyleCreator.prototype.makeTooltipMarker = function(markerType, colorStr, renderMode) {
        var markerId = renderMode === "richText" ? this._generateStyleName() : null;
        var marker = (0, $1594f6dc0ce39685$export$1987a3dbdf3c45ca)({
            color: colorStr,
            type: markerType,
            renderMode: renderMode,
            markerId: markerId
        });
        if ((0, $e44eb14c4271d0f9$export$844ec244b1367d54)(marker)) return marker;
        else {
            (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(markerId);
            this.richTextStyles[markerId] = marker.style;
            return marker.content;
        }
    };
    /**
   * @usage
   * ```ts
   * const styledText = markupStyleCreator.wrapRichTextStyle([
   *     // The styles will be auto merged.
   *     {
   *         fontSize: 12,
   *         color: 'blue'
   *     },
   *     {
   *         padding: 20
   *     }
   * ]);
   * ```
   */ TooltipMarkupStyleCreator.prototype.wrapRichTextStyle = function(text, styles) {
        var finalStl = {};
        if ((0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(styles)) (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(styles, function(stl) {
            return (0, $e44eb14c4271d0f9$export$8b58be045bf06082)(finalStl, stl);
        });
        else (0, $e44eb14c4271d0f9$export$8b58be045bf06082)(finalStl, styles);
        var styleName = this._generateStyleName();
        this.richTextStyles[styleName] = finalStl;
        return "{" + styleName + "|" + text + "}";
    };
    return TooltipMarkupStyleCreator;
}();




function $f9924475e60d24e0$export$3a110b9fb5c88b34(opt) {
    var series = opt.series;
    var dataIndex = opt.dataIndex;
    var multipleSeries = opt.multipleSeries;
    var data = series.getData();
    var tooltipDims = data.mapDimensionsAll("defaultedTooltip");
    var tooltipDimLen = tooltipDims.length;
    var value = series.getRawValue(dataIndex);
    var isValueArr = (0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(value);
    var markerColor = (0, $5045e51428120a21$export$ea15628039c0fa93)(series, dataIndex);
    // Complicated rule for pretty tooltip.
    var inlineValue;
    var inlineValueType;
    var subBlocks;
    var sortParam;
    if (tooltipDimLen > 1 || isValueArr && !tooltipDimLen) {
        var formatArrResult = $f9924475e60d24e0$var$formatTooltipArrayValue(value, series, dataIndex, tooltipDims, markerColor);
        inlineValue = formatArrResult.inlineValues;
        inlineValueType = formatArrResult.inlineValueTypes;
        subBlocks = formatArrResult.blocks;
        // Only support tooltip sort by the first inline value. It's enough in most cases.
        sortParam = formatArrResult.inlineValues[0];
    } else if (tooltipDimLen) {
        var dimInfo = data.getDimensionInfo(tooltipDims[0]);
        sortParam = inlineValue = (0, $b7a7be40e6489dbc$export$cde9373da9aad801)(data, dataIndex, tooltipDims[0]);
        inlineValueType = dimInfo.type;
    } else sortParam = inlineValue = isValueArr ? value[0] : value;
    // Do not show generated series name. It might not be readable.
    var seriesNameSpecified = (0, $8917c02fd8256c67$export$beae19a2652b3368)(series);
    var seriesName = seriesNameSpecified && series.name || "";
    var itemName = data.getName(dataIndex);
    var inlineName = multipleSeries ? seriesName : itemName;
    return (0, $5045e51428120a21$export$cf63b23ce77d1921)("section", {
        header: seriesName,
        // When series name is not specified, do not show a header line with only '-'.
        // This case always happens in tooltip.trigger: 'item'.
        noHeader: multipleSeries || !seriesNameSpecified,
        sortParam: sortParam,
        blocks: [
            (0, $5045e51428120a21$export$cf63b23ce77d1921)("nameValue", {
                markerType: "item",
                markerColor: markerColor,
                // Do not mix display seriesName and itemName in one tooltip,
                // which might confuses users.
                name: inlineName,
                // name dimension might be auto assigned, where the name might
                // be not readable. So we check trim here.
                noName: !(0, $e44eb14c4271d0f9$export$87c2784dc9fc4ab)(inlineName),
                value: inlineValue,
                valueType: inlineValueType,
                dataIndex: dataIndex
            })
        ].concat(subBlocks || [])
    });
}
function $f9924475e60d24e0$var$formatTooltipArrayValue(value, series, dataIndex, tooltipDims, colorStr) {
    // check: category-no-encode-has-axis-data in dataset.html
    var data = series.getData();
    var isValueMultipleLine = (0, $e44eb14c4271d0f9$export$533b26079ad0b4b)(value, function(isValueMultipleLine, val, idx) {
        var dimItem = data.getDimensionInfo(idx);
        return isValueMultipleLine = isValueMultipleLine || dimItem && dimItem.tooltip !== false && dimItem.displayName != null;
    }, false);
    var inlineValues = [];
    var inlineValueTypes = [];
    var blocks = [];
    tooltipDims.length ? (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(tooltipDims, function(dim) {
        setEachItem((0, $b7a7be40e6489dbc$export$cde9373da9aad801)(data, dataIndex, dim), dim);
    }) : (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(value, setEachItem);
    function setEachItem(val, dim) {
        var dimInfo = data.getDimensionInfo(dim);
        // If `dimInfo.tooltip` is not set, show tooltip.
        if (!dimInfo || dimInfo.otherDims.tooltip === false) return;
        if (isValueMultipleLine) blocks.push((0, $5045e51428120a21$export$cf63b23ce77d1921)("nameValue", {
            markerType: "subItem",
            markerColor: colorStr,
            name: dimInfo.displayName,
            value: val,
            valueType: dimInfo.type
        }));
        else {
            inlineValues.push(val);
            inlineValueTypes.push(dimInfo.type);
        }
    }
    return {
        inlineValues: inlineValues,
        inlineValueTypes: inlineValueTypes,
        blocks: blocks
    };
}


var $3301f75840f3090f$var$inner = $8917c02fd8256c67$export$64df9f8d92ae083f();
function $3301f75840f3090f$var$getSelectionKey(data, dataIndex) {
    return data.getName(dataIndex) || data.getId(dataIndex);
}
var $3301f75840f3090f$export$e960441116ae2799 = "__universalTransitionEnabled";
var $3301f75840f3090f$var$SeriesModel = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(SeriesModel, _super);
    function SeriesModel() {
        // [Caution]: Because this class or desecendants can be used as `XXX.extend(subProto)`,
        // the class members must not be initialized in constructor or declaration place.
        // Otherwise there is bad case:
        //   class A {xxx = 1;}
        //   enableClassExtend(A);
        //   class B extends A {}
        //   var C = B.extend({xxx: 5});
        //   var c = new C();
        //   console.log(c.xxx); // expect 5 but always 1.
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // ---------------------------------------
        // Props about data selection
        // ---------------------------------------
        _this._selectedDataIndicesMap = {};
        return _this;
    }
    SeriesModel.prototype.init = function(option, parentModel, ecModel) {
        this.seriesIndex = this.componentIndex;
        this.dataTask = (0, $e92f76cd4401b366$export$f7292ab7796be73c)({
            count: $3301f75840f3090f$var$dataTaskCount,
            reset: $3301f75840f3090f$var$dataTaskReset
        });
        this.dataTask.context = {
            model: this
        };
        this.mergeDefaultAndTheme(option, ecModel);
        var sourceManager = $3301f75840f3090f$var$inner(this).sourceManager = new (0, $db2d9ac18686dd88$export$af4db9ec7e200ea2)(this);
        sourceManager.prepareSource();
        var data = this.getInitialData(option, ecModel);
        $3301f75840f3090f$var$wrapData(data, this);
        this.dataTask.context.data = data;
        $e44eb14c4271d0f9$export$a7a9523472993e97(data, "getInitialData returned invalid data.");
        $3301f75840f3090f$var$inner(this).dataBeforeProcessed = data;
        // If we reverse the order (make data firstly, and then make
        // dataBeforeProcessed by cloneShallow), cloneShallow will
        // cause data.graph.data !== data when using
        // module:echarts/data/Graph or module:echarts/data/Tree.
        // See module:echarts/data/helper/linkSeriesData
        // Theoretically, it is unreasonable to call `seriesModel.getData()` in the model
        // init or merge stage, because the data can be restored. So we do not `restoreData`
        // and `setData` here, which forbids calling `seriesModel.getData()` in this stage.
        // Call `seriesModel.getRawData()` instead.
        // this.restoreData();
        $3301f75840f3090f$var$autoSeriesName(this);
        this._initSelectedMapFromData(data);
    };
    /**
   * Util for merge default and theme to option
   */ SeriesModel.prototype.mergeDefaultAndTheme = function(option, ecModel) {
        var layoutMode = (0, $074356ab3d6b1cdb$export$3968a28a7cbd6063)(this);
        var inputPositionParams = layoutMode ? (0, $074356ab3d6b1cdb$export$4b0d20af19c9875e)(option) : {};
        // Backward compat: using subType on theme.
        // But if name duplicate between series subType
        // (for example: parallel) add component mainType,
        // add suffix 'Series'.
        var themeSubType = this.subType;
        if ((0, $a756077528c07361$export$2e2bcd8739ae039).hasClass(themeSubType)) themeSubType += "Series";
        $e44eb14c4271d0f9$export$4950aa0f605343fb(option, ecModel.getTheme().get(this.subType));
        $e44eb14c4271d0f9$export$4950aa0f605343fb(option, this.getDefaultOption());
        // Default label emphasis `show`
        $8917c02fd8256c67$export$abdcc6a26372f94b(option, "label", [
            "show"
        ]);
        this.fillDataTextStyle(option.data);
        if (layoutMode) (0, $074356ab3d6b1cdb$export$1754cb91f16ca028)(option, inputPositionParams, layoutMode);
    };
    SeriesModel.prototype.mergeOption = function(newSeriesOption, ecModel) {
        // this.settingTask.dirty();
        newSeriesOption = $e44eb14c4271d0f9$export$4950aa0f605343fb(this.option, newSeriesOption, true);
        this.fillDataTextStyle(newSeriesOption.data);
        var layoutMode = (0, $074356ab3d6b1cdb$export$3968a28a7cbd6063)(this);
        if (layoutMode) (0, $074356ab3d6b1cdb$export$1754cb91f16ca028)(this.option, newSeriesOption, layoutMode);
        var sourceManager = $3301f75840f3090f$var$inner(this).sourceManager;
        sourceManager.dirty();
        sourceManager.prepareSource();
        var data = this.getInitialData(newSeriesOption, ecModel);
        $3301f75840f3090f$var$wrapData(data, this);
        this.dataTask.dirty();
        this.dataTask.context.data = data;
        $3301f75840f3090f$var$inner(this).dataBeforeProcessed = data;
        $3301f75840f3090f$var$autoSeriesName(this);
        this._initSelectedMapFromData(data);
    };
    SeriesModel.prototype.fillDataTextStyle = function(data) {
        // Default data label emphasis `show`
        // FIXME Tree structure data ?
        // FIXME Performance ?
        if (data && !$e44eb14c4271d0f9$export$b119cc7e1840e59c(data)) {
            var props = [
                "show"
            ];
            for(var i = 0; i < data.length; i++)if (data[i] && data[i].label) $8917c02fd8256c67$export$abdcc6a26372f94b(data[i], "label", props);
        }
    };
    /**
   * Init a data structure from data related option in series
   * Must be overridden.
   */ SeriesModel.prototype.getInitialData = function(option, ecModel) {
        return;
    };
    /**
   * Append data to list
   */ SeriesModel.prototype.appendData = function(params) {
        // FIXME ???
        // (1) If data from dataset, forbidden append.
        // (2) support append data of dataset.
        var data = this.getRawData();
        data.appendData(params.data);
    };
    /**
   * Consider some method like `filter`, `map` need make new data,
   * We should make sure that `seriesModel.getData()` get correct
   * data in the stream procedure. So we fetch data from upstream
   * each time `task.perform` called.
   */ SeriesModel.prototype.getData = function(dataType) {
        var task = $3301f75840f3090f$var$getCurrentTask(this);
        if (task) {
            var data = task.context.data;
            return dataType == null ? data : data.getLinkedData(dataType);
        } else // When series is not alive (that may happen when click toolbox
        // restore or setOption with not merge mode), series data may
        // be still need to judge animation or something when graphic
        // elements want to know whether fade out.
        return $3301f75840f3090f$var$inner(this).data;
    };
    SeriesModel.prototype.getAllData = function() {
        var mainData = this.getData();
        return mainData && mainData.getLinkedDataAll ? mainData.getLinkedDataAll() : [
            {
                data: mainData
            }
        ];
    };
    SeriesModel.prototype.setData = function(data) {
        var task = $3301f75840f3090f$var$getCurrentTask(this);
        if (task) {
            var context = task.context;
            // Consider case: filter, data sample.
            // FIXME:TS never used, so comment it
            // if (context.data !== data && task.modifyOutputEnd) {
            //     task.setOutputEnd(data.count());
            // }
            context.outputData = data;
            // Caution: setData should update context.data,
            // Because getData may be called multiply in a
            // single stage and expect to get the data just
            // set. (For example, AxisProxy, x y both call
            // getData and setDate sequentially).
            // So the context.data should be fetched from
            // upstream each time when a stage starts to be
            // performed.
            if (task !== this.dataTask) context.data = data;
        }
        $3301f75840f3090f$var$inner(this).data = data;
    };
    SeriesModel.prototype.getEncode = function() {
        var encode = this.get("encode", true);
        if (encode) return $e44eb14c4271d0f9$export$55f8aa7ef875b0a4(encode);
    };
    SeriesModel.prototype.getSourceManager = function() {
        return $3301f75840f3090f$var$inner(this).sourceManager;
    };
    SeriesModel.prototype.getSource = function() {
        return this.getSourceManager().getSource();
    };
    /**
   * Get data before processed
   */ SeriesModel.prototype.getRawData = function() {
        return $3301f75840f3090f$var$inner(this).dataBeforeProcessed;
    };
    SeriesModel.prototype.getColorBy = function() {
        var colorBy = this.get("colorBy");
        return colorBy || "series";
    };
    SeriesModel.prototype.isColorBySeries = function() {
        return this.getColorBy() === "series";
    };
    /**
   * Get base axis if has coordinate system and has axis.
   * By default use coordSys.getBaseAxis();
   * Can be overridden for some chart.
   * @return {type} description
   */ SeriesModel.prototype.getBaseAxis = function() {
        var coordSys = this.coordinateSystem;
        // @ts-ignore
        return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();
    };
    /**
   * Default tooltip formatter
   *
   * @param dataIndex
   * @param multipleSeries
   * @param dataType
   * @param renderMode valid values: 'html'(by default) and 'richText'.
   *        'html' is used for rendering tooltip in extra DOM form, and the result
   *        string is used as DOM HTML content.
   *        'richText' is used for rendering tooltip in rich text form, for those where
   *        DOM operation is not supported.
   * @return formatted tooltip with `html` and `markers`
   *        Notice: The override method can also return string
   */ SeriesModel.prototype.formatTooltip = function(dataIndex, multipleSeries, dataType) {
        return (0, $f9924475e60d24e0$export$3a110b9fb5c88b34)({
            series: this,
            dataIndex: dataIndex,
            multipleSeries: multipleSeries
        });
    };
    SeriesModel.prototype.isAnimationEnabled = function() {
        var ecModel = this.ecModel;
        // Disable animation if using echarts in node but not give ssr flag.
        // In ssr mode, renderToString will generate svg with css animation.
        if ((0, $de9e931273a116c1$export$2e2bcd8739ae039).node && !(ecModel && ecModel.ssr)) return false;
        var animationEnabled = this.getShallow("animation");
        if (animationEnabled) {
            if (this.getData().count() > this.getShallow("animationThreshold")) animationEnabled = false;
        }
        return !!animationEnabled;
    };
    SeriesModel.prototype.restoreData = function() {
        this.dataTask.dirty();
    };
    SeriesModel.prototype.getColorFromPalette = function(name, scope, requestColorNum) {
        var ecModel = this.ecModel;
        // PENDING
        var color = (0, $4a5562b496bfcfa0$export$55a3c39e852b90f4).prototype.getColorFromPalette.call(this, name, scope, requestColorNum);
        if (!color) color = ecModel.getColorFromPalette(name, scope, requestColorNum);
        return color;
    };
    /**
   * Use `data.mapDimensionsAll(coordDim)` instead.
   * @deprecated
   */ SeriesModel.prototype.coordDimToDataDim = function(coordDim) {
        return this.getRawData().mapDimensionsAll(coordDim);
    };
    /**
   * Get progressive rendering count each step
   */ SeriesModel.prototype.getProgressive = function() {
        return this.get("progressive");
    };
    /**
   * Get progressive rendering count each step
   */ SeriesModel.prototype.getProgressiveThreshold = function() {
        return this.get("progressiveThreshold");
    };
    // PENGING If selectedMode is null ?
    SeriesModel.prototype.select = function(innerDataIndices, dataType) {
        this._innerSelect(this.getData(dataType), innerDataIndices);
    };
    SeriesModel.prototype.unselect = function(innerDataIndices, dataType) {
        var selectedMap = this.option.selectedMap;
        if (!selectedMap) return;
        var selectedMode = this.option.selectedMode;
        var data = this.getData(dataType);
        if (selectedMode === "series" || selectedMap === "all") {
            this.option.selectedMap = {};
            this._selectedDataIndicesMap = {};
            return;
        }
        for(var i = 0; i < innerDataIndices.length; i++){
            var dataIndex = innerDataIndices[i];
            var nameOrId = $3301f75840f3090f$var$getSelectionKey(data, dataIndex);
            selectedMap[nameOrId] = false;
            this._selectedDataIndicesMap[nameOrId] = -1;
        }
    };
    SeriesModel.prototype.toggleSelect = function(innerDataIndices, dataType) {
        var tmpArr = [];
        for(var i = 0; i < innerDataIndices.length; i++){
            tmpArr[0] = innerDataIndices[i];
            this.isSelected(innerDataIndices[i], dataType) ? this.unselect(tmpArr, dataType) : this.select(tmpArr, dataType);
        }
    };
    SeriesModel.prototype.getSelectedDataIndices = function() {
        if (this.option.selectedMap === "all") return [].slice.call(this.getData().getIndices());
        var selectedDataIndicesMap = this._selectedDataIndicesMap;
        var nameOrIds = $e44eb14c4271d0f9$export$ed97f33186d4b816(selectedDataIndicesMap);
        var dataIndices = [];
        for(var i = 0; i < nameOrIds.length; i++){
            var dataIndex = selectedDataIndicesMap[nameOrIds[i]];
            if (dataIndex >= 0) dataIndices.push(dataIndex);
        }
        return dataIndices;
    };
    SeriesModel.prototype.isSelected = function(dataIndex, dataType) {
        var selectedMap = this.option.selectedMap;
        if (!selectedMap) return false;
        var data = this.getData(dataType);
        return (selectedMap === "all" || selectedMap[$3301f75840f3090f$var$getSelectionKey(data, dataIndex)]) && !data.getItemModel(dataIndex).get([
            "select",
            "disabled"
        ]);
    };
    SeriesModel.prototype.isUniversalTransitionEnabled = function() {
        if (this[$3301f75840f3090f$export$e960441116ae2799]) return true;
        var universalTransitionOpt = this.option.universalTransition;
        // Quick reject
        if (!universalTransitionOpt) return false;
        if (universalTransitionOpt === true) return true;
        // Can be simply 'universalTransition: true'
        return universalTransitionOpt && universalTransitionOpt.enabled;
    };
    SeriesModel.prototype._innerSelect = function(data, innerDataIndices) {
        var _a, _b;
        var option = this.option;
        var selectedMode = option.selectedMode;
        var len = innerDataIndices.length;
        if (!selectedMode || !len) return;
        if (selectedMode === "series") option.selectedMap = "all";
        else if (selectedMode === "multiple") {
            if (!$e44eb14c4271d0f9$export$a6cdc56e425d0d0a(option.selectedMap)) option.selectedMap = {};
            var selectedMap = option.selectedMap;
            for(var i = 0; i < len; i++){
                var dataIndex = innerDataIndices[i];
                // TODO different types of data share same object.
                var nameOrId = $3301f75840f3090f$var$getSelectionKey(data, dataIndex);
                selectedMap[nameOrId] = true;
                this._selectedDataIndicesMap[nameOrId] = data.getRawIndex(dataIndex);
            }
        } else if (selectedMode === "single" || selectedMode === true) {
            var lastDataIndex = innerDataIndices[len - 1];
            var nameOrId = $3301f75840f3090f$var$getSelectionKey(data, lastDataIndex);
            option.selectedMap = (_a = {}, _a[nameOrId] = true, _a);
            this._selectedDataIndicesMap = (_b = {}, _b[nameOrId] = data.getRawIndex(lastDataIndex), _b);
        }
    };
    SeriesModel.prototype._initSelectedMapFromData = function(data) {
        // Ignore select info in data if selectedMap exists.
        // NOTE It's only for legacy usage. edge data is not supported.
        if (this.option.selectedMap) return;
        var dataIndices = [];
        if (data.hasItemOption) data.each(function(idx) {
            var rawItem = data.getRawDataItem(idx);
            if (rawItem && rawItem.selected) dataIndices.push(idx);
        });
        if (dataIndices.length > 0) this._innerSelect(data, dataIndices);
    };
    // /**
    //  * @see {module:echarts/stream/Scheduler}
    //  */
    // abstract pipeTask: null
    SeriesModel.registerClass = function(clz) {
        return (0, $a756077528c07361$export$2e2bcd8739ae039).registerClass(clz);
    };
    SeriesModel.protoInitialize = function() {
        var proto = SeriesModel.prototype;
        proto.type = "series.__base__";
        proto.seriesIndex = 0;
        proto.ignoreStyleOnData = false;
        proto.hasSymbolVisual = false;
        proto.defaultSymbol = "circle";
        // Make sure the values can be accessed!
        proto.visualStyleAccessPath = "itemStyle";
        proto.visualDrawType = "fill";
    }();
    return SeriesModel;
}((0, $a756077528c07361$export$2e2bcd8739ae039));
$e44eb14c4271d0f9$export$e36fc9d62a853069($3301f75840f3090f$var$SeriesModel, (0, $a2cdd1973149e0c6$export$f23396ae04ea95a7));
$e44eb14c4271d0f9$export$e36fc9d62a853069($3301f75840f3090f$var$SeriesModel, (0, $4a5562b496bfcfa0$export$55a3c39e852b90f4));
(0, $0a7732deba457ada$export$c9c2d87774f1275d)($3301f75840f3090f$var$SeriesModel, (0, $a756077528c07361$export$2e2bcd8739ae039));
/**
 * MUST be called after `prepareSource` called
 * Here we need to make auto series, especially for auto legend. But we
 * do not modify series.name in option to avoid side effects.
 */ function $3301f75840f3090f$var$autoSeriesName(seriesModel) {
    // User specified name has higher priority, otherwise it may cause
    // series can not be queried unexpectedly.
    var name = seriesModel.name;
    if (!$8917c02fd8256c67$export$beae19a2652b3368(seriesModel)) seriesModel.name = $3301f75840f3090f$var$getSeriesAutoName(seriesModel) || name;
}
function $3301f75840f3090f$var$getSeriesAutoName(seriesModel) {
    var data = seriesModel.getRawData();
    var dataDims = data.mapDimensionsAll("seriesName");
    var nameArr = [];
    $e44eb14c4271d0f9$export$79b2f7037acddd43(dataDims, function(dataDim) {
        var dimInfo = data.getDimensionInfo(dataDim);
        dimInfo.displayName && nameArr.push(dimInfo.displayName);
    });
    return nameArr.join(" ");
}
function $3301f75840f3090f$var$dataTaskCount(context) {
    return context.model.getRawData().count();
}
function $3301f75840f3090f$var$dataTaskReset(context) {
    var seriesModel = context.model;
    seriesModel.setData(seriesModel.getRawData().cloneShallow());
    return $3301f75840f3090f$var$dataTaskProgress;
}
function $3301f75840f3090f$var$dataTaskProgress(param, context) {
    // Avoid repeat cloneShallow when data just created in reset.
    if (context.outputData && param.end > context.outputData.count()) context.model.getRawData().cloneShallow(context.outputData);
}
// TODO refactor
function $3301f75840f3090f$var$wrapData(data, seriesModel) {
    $e44eb14c4271d0f9$export$79b2f7037acddd43($e44eb14c4271d0f9$export$4fd8af2c48c43416(data.CHANGABLE_METHODS, data.DOWNSAMPLE_METHODS), function(methodName) {
        data.wrapMethod(methodName, $e44eb14c4271d0f9$export$c3095a23b368d1f2($3301f75840f3090f$var$onDataChange, seriesModel));
    });
}
function $3301f75840f3090f$var$onDataChange(seriesModel, newList) {
    var task = $3301f75840f3090f$var$getCurrentTask(seriesModel);
    if (task) // Consider case: filter, selectRange
    task.setOutputEnd((newList || this).count());
    return newList;
}
function $3301f75840f3090f$var$getCurrentTask(seriesModel) {
    var scheduler = (seriesModel.ecModel || {}).scheduler;
    var pipeline = scheduler && scheduler.getPipeline(seriesModel.uid);
    if (pipeline) {
        // When pipline finished, the currrentTask keep the last
        // task (renderTask).
        var task = pipeline.currentTask;
        if (task) {
            var agentStubMap = task.agentStubMap;
            if (agentStubMap) task = agentStubMap.get(seriesModel.uid);
        }
        return task;
    }
}
var $3301f75840f3090f$export$2e2bcd8739ae039 = $3301f75840f3090f$var$SeriesModel;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 


var $ced42ef9869a1e4c$var$ComponentView = /** @class */ function() {
    function ComponentView() {
        this.group = new (0, $748aea24eee93173$export$2e2bcd8739ae039)();
        this.uid = $5e939fc0112f61e7$export$6d2b3473b0986646("viewComponent");
    }
    ComponentView.prototype.init = function(ecModel, api) {};
    ComponentView.prototype.render = function(model, ecModel, api, payload) {};
    ComponentView.prototype.dispose = function(ecModel, api) {};
    ComponentView.prototype.updateView = function(model, ecModel, api, payload) {
    // Do nothing;
    };
    ComponentView.prototype.updateLayout = function(model, ecModel, api, payload) {
    // Do nothing;
    };
    ComponentView.prototype.updateVisual = function(model, ecModel, api, payload) {
    // Do nothing;
    };
    /**
   * Hook for toggle blur target series.
   * Can be used in marker for blur or leave blur the markers
   */ ComponentView.prototype.toggleBlurSeries = function(seriesModels, isBlur, ecModel) {
    // Do nothing;
    };
    /**
   * Traverse the new rendered elements.
   *
   * It will traverse the new added element in progressive rendering.
   * And traverse all in normal rendering.
   */ ComponentView.prototype.eachRendered = function(cb) {
        var group = this.group;
        if (group) group.traverse(cb);
    };
    return ComponentView;
}();
$0a7732deba457ada$export$cd4c3a4dca301c70($ced42ef9869a1e4c$var$ComponentView);
$0a7732deba457ada$export$241315e45585454d($ced42ef9869a1e4c$var$ComponentView);
var $ced42ef9869a1e4c$export$2e2bcd8739ae039 = $ced42ef9869a1e4c$var$ComponentView;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 






/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
function $eb114e8bb7242d9d$export$2e2bcd8739ae039() {
    var inner = (0, $8917c02fd8256c67$export$64df9f8d92ae083f)();
    return function(seriesModel) {
        var fields = inner(seriesModel);
        var pipelineContext = seriesModel.pipelineContext;
        var originalLarge = !!fields.large;
        var originalProgressive = !!fields.progressiveRender;
        // FIXME: if the planner works on a filtered series, `pipelineContext` does not
        // exists. See #11611 . Probably we need to modify this structure, see the comment
        // on `performRawSeries` in `Schedular.js`.
        var large = fields.large = !!(pipelineContext && pipelineContext.large);
        var progressive = fields.progressiveRender = !!(pipelineContext && pipelineContext.progressiveRender);
        return !!(originalLarge !== large || originalProgressive !== progressive) && "reset";
    };
}




var $05e95ba2f0d93dbf$var$inner = $8917c02fd8256c67$export$64df9f8d92ae083f();
var $05e95ba2f0d93dbf$var$renderPlanner = (0, $eb114e8bb7242d9d$export$2e2bcd8739ae039)();
var $05e95ba2f0d93dbf$var$ChartView = /** @class */ function() {
    function ChartView() {
        this.group = new (0, $748aea24eee93173$export$2e2bcd8739ae039)();
        this.uid = $5e939fc0112f61e7$export$6d2b3473b0986646("viewChart");
        this.renderTask = (0, $e92f76cd4401b366$export$f7292ab7796be73c)({
            plan: $05e95ba2f0d93dbf$var$renderTaskPlan,
            reset: $05e95ba2f0d93dbf$var$renderTaskReset
        });
        this.renderTask.context = {
            view: this
        };
    }
    ChartView.prototype.init = function(ecModel, api) {};
    ChartView.prototype.render = function(seriesModel, ecModel, api, payload) {
        throw new Error("render method must been implemented");
    };
    /**
   * Highlight series or specified data item.
   */ ChartView.prototype.highlight = function(seriesModel, ecModel, api, payload) {
        var data = seriesModel.getData(payload && payload.dataType);
        if (!data) {
            (0, $4796c55e8b767685$export$a3bc9b8ed74fc)("Unknown dataType " + payload.dataType);
            return;
        }
        $05e95ba2f0d93dbf$var$toggleHighlight(data, payload, "emphasis");
    };
    /**
   * Downplay series or specified data item.
   */ ChartView.prototype.downplay = function(seriesModel, ecModel, api, payload) {
        var data = seriesModel.getData(payload && payload.dataType);
        if (!data) {
            (0, $4796c55e8b767685$export$a3bc9b8ed74fc)("Unknown dataType " + payload.dataType);
            return;
        }
        $05e95ba2f0d93dbf$var$toggleHighlight(data, payload, "normal");
    };
    /**
   * Remove self.
   */ ChartView.prototype.remove = function(ecModel, api) {
        this.group.removeAll();
    };
    /**
   * Dispose self.
   */ ChartView.prototype.dispose = function(ecModel, api) {};
    ChartView.prototype.updateView = function(seriesModel, ecModel, api, payload) {
        this.render(seriesModel, ecModel, api, payload);
    };
    // FIXME never used?
    ChartView.prototype.updateLayout = function(seriesModel, ecModel, api, payload) {
        this.render(seriesModel, ecModel, api, payload);
    };
    // FIXME never used?
    ChartView.prototype.updateVisual = function(seriesModel, ecModel, api, payload) {
        this.render(seriesModel, ecModel, api, payload);
    };
    /**
   * Traverse the new rendered elements.
   *
   * It will traverse the new added element in progressive rendering.
   * And traverse all in normal rendering.
   */ ChartView.prototype.eachRendered = function(cb) {
        (0, $6aec2e68b45f8796$export$3e564442729bf048)(this.group, cb);
    };
    ChartView.markUpdateMethod = function(payload, methodName) {
        $05e95ba2f0d93dbf$var$inner(payload).updateMethod = methodName;
    };
    ChartView.protoInitialize = function() {
        var proto = ChartView.prototype;
        proto.type = "chart";
    }();
    return ChartView;
}();
/**
 * Set state of single element
 */ function $05e95ba2f0d93dbf$var$elSetState(el, state, highlightDigit) {
    if (el && (0, $e3c0a36328c28ac4$export$77d1445f699c58b5)(el)) (state === "emphasis" ? (0, $e3c0a36328c28ac4$export$b2d02638cc34c042) : (0, $e3c0a36328c28ac4$export$11be6f716239ac55))(el, highlightDigit);
}
function $05e95ba2f0d93dbf$var$toggleHighlight(data, payload, state) {
    var dataIndex = $8917c02fd8256c67$export$42b26cae8b8d10(data, payload);
    var highlightDigit = payload && payload.highlightKey != null ? (0, $e3c0a36328c28ac4$export$824af40eb714530d)(payload.highlightKey) : null;
    if (dataIndex != null) (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)($8917c02fd8256c67$export$4f07b212a02c8051(dataIndex), function(dataIdx) {
        $05e95ba2f0d93dbf$var$elSetState(data.getItemGraphicEl(dataIdx), state, highlightDigit);
    });
    else data.eachItemGraphicEl(function(el) {
        $05e95ba2f0d93dbf$var$elSetState(el, state, highlightDigit);
    });
}
$0a7732deba457ada$export$cd4c3a4dca301c70($05e95ba2f0d93dbf$var$ChartView, [
    "dispose"
]);
$0a7732deba457ada$export$241315e45585454d($05e95ba2f0d93dbf$var$ChartView);
function $05e95ba2f0d93dbf$var$renderTaskPlan(context) {
    return $05e95ba2f0d93dbf$var$renderPlanner(context.model);
}
function $05e95ba2f0d93dbf$var$renderTaskReset(context) {
    var seriesModel = context.model;
    var ecModel = context.ecModel;
    var api = context.api;
    var payload = context.payload;
    // FIXME: remove updateView updateVisual
    var progressiveRender = seriesModel.pipelineContext.progressiveRender;
    var view = context.view;
    var updateMethod = payload && $05e95ba2f0d93dbf$var$inner(payload).updateMethod;
    var methodName = progressiveRender ? "incrementalPrepareRender" : updateMethod && view[updateMethod] ? updateMethod : "render";
    if (methodName !== "render") view[methodName](seriesModel, ecModel, api, payload);
    return $05e95ba2f0d93dbf$var$progressMethodMap[methodName];
}
var $05e95ba2f0d93dbf$var$progressMethodMap = {
    incrementalPrepareRender: {
        progress: function(params, context) {
            context.view.incrementalRender(params, context.model, context.ecModel, context.api, context.payload);
        }
    },
    render: {
        // Put view.render in `progress` to support appendData. But in this case
        // view.render should not be called in reset, otherwise it will be called
        // twise. Use `forceFirstProgress` to make sure that view.render is called
        // in any cases.
        forceFirstProgress: true,
        progress: function(params, context) {
            context.view.render(context.model, context.ecModel, context.api, context.payload);
        }
    }
};
var $05e95ba2f0d93dbf$export$2e2bcd8739ae039 = $05e95ba2f0d93dbf$var$ChartView;






/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ var $1eadeed02cc6d4a8$var$ORIGIN_METHOD = "\0__throttleOriginMethod";
var $1eadeed02cc6d4a8$var$RATE = "\0__throttleRate";
var $1eadeed02cc6d4a8$var$THROTTLE_TYPE = "\0__throttleType";
function $1eadeed02cc6d4a8$export$de363e709c412c8a(fn, delay, debounce) {
    var currCall;
    var lastCall = 0;
    var lastExec = 0;
    var timer = null;
    var diff;
    var scope;
    var args;
    var debounceNextCall;
    delay = delay || 0;
    function exec() {
        lastExec = new Date().getTime();
        timer = null;
        fn.apply(scope, args || []);
    }
    var cb = function() {
        var cbArgs = [];
        for(var _i = 0; _i < arguments.length; _i++)cbArgs[_i] = arguments[_i];
        currCall = new Date().getTime();
        scope = this;
        args = cbArgs;
        var thisDelay = debounceNextCall || delay;
        var thisDebounce = debounceNextCall || debounce;
        debounceNextCall = null;
        diff = currCall - (thisDebounce ? lastCall : lastExec) - thisDelay;
        clearTimeout(timer);
        // Here we should make sure that: the `exec` SHOULD NOT be called later
        // than a new call of `cb`, that is, preserving the command order. Consider
        // calculating "scale rate" when roaming as an example. When a call of `cb`
        // happens, either the `exec` is called dierectly, or the call is delayed.
        // But the delayed call should never be later than next call of `cb`. Under
        // this assurance, we can simply update view state each time `dispatchAction`
        // triggered by user roaming, but not need to add extra code to avoid the
        // state being "rolled-back".
        if (thisDebounce) timer = setTimeout(exec, thisDelay);
        else if (diff >= 0) exec();
        else timer = setTimeout(exec, -diff);
        lastCall = currCall;
    };
    /**
   * Clear throttle.
   * @public
   */ cb.clear = function() {
        if (timer) {
            clearTimeout(timer);
            timer = null;
        }
    };
    /**
   * Enable debounce once.
   */ cb.debounceNextCall = function(debounceDelay) {
        debounceNextCall = debounceDelay;
    };
    return cb;
}
function $1eadeed02cc6d4a8$export$958e3e1a02eac4b6(obj, fnAttr, rate, throttleType) {
    var fn = obj[fnAttr];
    if (!fn) return;
    var originFn = fn[$1eadeed02cc6d4a8$var$ORIGIN_METHOD] || fn;
    var lastThrottleType = fn[$1eadeed02cc6d4a8$var$THROTTLE_TYPE];
    var lastRate = fn[$1eadeed02cc6d4a8$var$RATE];
    if (lastRate !== rate || lastThrottleType !== throttleType) {
        if (rate == null || !throttleType) return obj[fnAttr] = originFn;
        fn = obj[fnAttr] = $1eadeed02cc6d4a8$export$de363e709c412c8a(originFn, rate, throttleType === "debounce");
        fn[$1eadeed02cc6d4a8$var$ORIGIN_METHOD] = originFn;
        fn[$1eadeed02cc6d4a8$var$THROTTLE_TYPE] = throttleType;
        fn[$1eadeed02cc6d4a8$var$RATE] = rate;
    }
    return fn;
}
function $1eadeed02cc6d4a8$export$42ffd38884aecdac(obj, fnAttr) {
    var fn = obj[fnAttr];
    if (fn && fn[$1eadeed02cc6d4a8$var$ORIGIN_METHOD]) {
        // Clear throttle
        fn.clear && fn.clear();
        obj[fnAttr] = fn[$1eadeed02cc6d4a8$var$ORIGIN_METHOD];
    }
}


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 





var $b81efdf4317990e3$var$inner = (0, $8917c02fd8256c67$export$64df9f8d92ae083f)();
var $b81efdf4317990e3$var$defaultStyleMappers = {
    itemStyle: (0, $d16f2547da76dd85$export$2e2bcd8739ae039)((0, $2aab59e6e59c4af1$export$ffb0bba5dde0130b), true),
    lineStyle: (0, $d16f2547da76dd85$export$2e2bcd8739ae039)((0, $8468e72b6ca981af$export$9f34de5b59222949), true)
};
var $b81efdf4317990e3$var$defaultColorKey = {
    lineStyle: "stroke",
    itemStyle: "fill"
};
function $b81efdf4317990e3$var$getStyleMapper(seriesModel, stylePath) {
    var styleMapper = seriesModel.visualStyleMapper || $b81efdf4317990e3$var$defaultStyleMappers[stylePath];
    if (!styleMapper) {
        console.warn("Unknown style type '" + stylePath + "'.");
        return $b81efdf4317990e3$var$defaultStyleMappers.itemStyle;
    }
    return styleMapper;
}
function $b81efdf4317990e3$var$getDefaultColorKey(seriesModel, stylePath) {
    // return defaultColorKey[stylePath] ||
    var colorKey = seriesModel.visualDrawType || $b81efdf4317990e3$var$defaultColorKey[stylePath];
    if (!colorKey) {
        console.warn("Unknown style type '" + stylePath + "'.");
        return "fill";
    }
    return colorKey;
}
var $b81efdf4317990e3$export$7ce4d65f9b69240 = {
    createOnAllSeries: true,
    performRawSeries: true,
    reset: function(seriesModel, ecModel) {
        var data = seriesModel.getData();
        var stylePath = seriesModel.visualStyleAccessPath || "itemStyle";
        // Set in itemStyle
        var styleModel = seriesModel.getModel(stylePath);
        var getStyle = $b81efdf4317990e3$var$getStyleMapper(seriesModel, stylePath);
        var globalStyle = getStyle(styleModel);
        var decalOption = styleModel.getShallow("decal");
        if (decalOption) {
            data.setVisual("decal", decalOption);
            decalOption.dirty = true;
        }
        // TODO
        var colorKey = $b81efdf4317990e3$var$getDefaultColorKey(seriesModel, stylePath);
        var color = globalStyle[colorKey];
        // TODO style callback
        var colorCallback = (0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(color) ? color : null;
        var hasAutoColor = globalStyle.fill === "auto" || globalStyle.stroke === "auto";
        // Get from color palette by default.
        if (!globalStyle[colorKey] || colorCallback || hasAutoColor) {
            // Note: If some series has color specified (e.g., by itemStyle.color), we DO NOT
            // make it effect palette. Because some scenarios users need to make some series
            // transparent or as background, which should better not effect the palette.
            var colorPalette = seriesModel.getColorFromPalette(// TODO series count changed.
            seriesModel.name, null, ecModel.getSeriesCount());
            if (!globalStyle[colorKey]) {
                globalStyle[colorKey] = colorPalette;
                data.setVisual("colorFromPalette", true);
            }
            globalStyle.fill = globalStyle.fill === "auto" || (0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(globalStyle.fill) ? colorPalette : globalStyle.fill;
            globalStyle.stroke = globalStyle.stroke === "auto" || (0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(globalStyle.stroke) ? colorPalette : globalStyle.stroke;
        }
        data.setVisual("style", globalStyle);
        data.setVisual("drawType", colorKey);
        // Only visible series has each data be visual encoded
        if (!ecModel.isSeriesFiltered(seriesModel) && colorCallback) {
            data.setVisual("colorFromPalette", false);
            return {
                dataEach: function(data, idx) {
                    var dataParams = seriesModel.getDataParams(idx);
                    var itemStyle = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, globalStyle);
                    itemStyle[colorKey] = colorCallback(dataParams);
                    data.setItemVisual(idx, "style", itemStyle);
                }
            };
        }
    }
};
var $b81efdf4317990e3$var$sharedModel = new (0, $d92ec0eb853c4005$export$2e2bcd8739ae039)();
var $b81efdf4317990e3$export$f7dcb66a065003d1 = {
    createOnAllSeries: true,
    performRawSeries: true,
    reset: function(seriesModel, ecModel) {
        if (seriesModel.ignoreStyleOnData || ecModel.isSeriesFiltered(seriesModel)) return;
        var data = seriesModel.getData();
        var stylePath = seriesModel.visualStyleAccessPath || "itemStyle";
        // Set in itemStyle
        var getStyle = $b81efdf4317990e3$var$getStyleMapper(seriesModel, stylePath);
        var colorKey = data.getVisual("drawType");
        return {
            dataEach: data.hasItemOption ? function(data, idx) {
                // Not use getItemModel for performance considuration
                var rawItem = data.getRawDataItem(idx);
                if (rawItem && rawItem[stylePath]) {
                    $b81efdf4317990e3$var$sharedModel.option = rawItem[stylePath];
                    var style = getStyle($b81efdf4317990e3$var$sharedModel);
                    var existsStyle = data.ensureUniqueItemVisual(idx, "style");
                    (0, $e44eb14c4271d0f9$export$8b58be045bf06082)(existsStyle, style);
                    if ($b81efdf4317990e3$var$sharedModel.option.decal) {
                        data.setItemVisual(idx, "decal", $b81efdf4317990e3$var$sharedModel.option.decal);
                        $b81efdf4317990e3$var$sharedModel.option.decal.dirty = true;
                    }
                    if (colorKey in style) data.setItemVisual(idx, "colorFromPalette", false);
                }
            } : null
        };
    }
};
// Pick color from palette for the data which has not been set with color yet.
// Note: do not support stream rendering. No such cases yet.
var $b81efdf4317990e3$export$cf9758b0d6dc0aa9 = {
    performRawSeries: true,
    overallReset: function(ecModel) {
        // Each type of series uses one scope.
        // Pie and funnel are using different scopes.
        var paletteScopeGroupByType = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
        ecModel.eachSeries(function(seriesModel) {
            var colorBy = seriesModel.getColorBy();
            if (seriesModel.isColorBySeries()) return;
            var key = seriesModel.type + "-" + colorBy;
            var colorScope = paletteScopeGroupByType.get(key);
            if (!colorScope) {
                colorScope = {};
                paletteScopeGroupByType.set(key, colorScope);
            }
            $b81efdf4317990e3$var$inner(seriesModel).scope = colorScope;
        });
        ecModel.eachSeries(function(seriesModel) {
            if (seriesModel.isColorBySeries() || ecModel.isSeriesFiltered(seriesModel)) return;
            var dataAll = seriesModel.getRawData();
            var idxMap = {};
            var data = seriesModel.getData();
            var colorScope = $b81efdf4317990e3$var$inner(seriesModel).scope;
            var stylePath = seriesModel.visualStyleAccessPath || "itemStyle";
            var colorKey = $b81efdf4317990e3$var$getDefaultColorKey(seriesModel, stylePath);
            data.each(function(idx) {
                var rawIdx = data.getRawIndex(idx);
                idxMap[rawIdx] = idx;
            });
            // Iterate on data before filtered. To make sure color from palette can be
            // Consistent when toggling legend.
            dataAll.each(function(rawIdx) {
                var idx = idxMap[rawIdx];
                var fromPalette = data.getItemVisual(idx, "colorFromPalette");
                // Get color from palette for each data only when the color is inherited from series color, which is
                // also picked from color palette. So following situation is not in the case:
                // 1. series.itemStyle.color is set
                // 2. color is encoded by visualMap
                if (fromPalette) {
                    var itemStyle = data.ensureUniqueItemVisual(idx, "style");
                    var name_1 = dataAll.getName(rawIdx) || rawIdx + "";
                    var dataCount = dataAll.count();
                    itemStyle[colorKey] = seriesModel.getColorFromPalette(name_1, colorScope, dataCount);
                }
            });
        });
    }
};


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

var $922cf61a00310968$var$PI = Math.PI;
function $922cf61a00310968$export$2e2bcd8739ae039(api, opts) {
    opts = opts || {};
    $e44eb14c4271d0f9$export$ebe90cb607ad99e(opts, {
        text: "loading",
        textColor: "#000",
        fontSize: 12,
        fontWeight: "normal",
        fontStyle: "normal",
        fontFamily: "sans-serif",
        maskColor: "rgba(255, 255, 255, 0.8)",
        showSpinner: true,
        color: "#5470c6",
        spinnerRadius: 10,
        lineWidth: 5,
        zlevel: 0
    });
    var group = new $748aea24eee93173$export$2e2bcd8739ae039();
    var mask = new $538026eba361a92a$export$2e2bcd8739ae039({
        style: {
            fill: opts.maskColor
        },
        zlevel: opts.zlevel,
        z: 10000
    });
    group.add(mask);
    var textContent = new $6d12d9a137e168c2$export$2e2bcd8739ae039({
        style: {
            text: opts.text,
            fill: opts.textColor,
            fontSize: opts.fontSize,
            fontWeight: opts.fontWeight,
            fontStyle: opts.fontStyle,
            fontFamily: opts.fontFamily
        },
        zlevel: opts.zlevel,
        z: 10001
    });
    var labelRect = new $538026eba361a92a$export$2e2bcd8739ae039({
        style: {
            fill: "none"
        },
        textContent: textContent,
        textConfig: {
            position: "right",
            distance: 10
        },
        zlevel: opts.zlevel,
        z: 10001
    });
    group.add(labelRect);
    var arc;
    if (opts.showSpinner) {
        arc = new $4061a8951878289c$export$2e2bcd8739ae039({
            shape: {
                startAngle: -$922cf61a00310968$var$PI / 2,
                endAngle: -$922cf61a00310968$var$PI / 2 + 0.1,
                r: opts.spinnerRadius
            },
            style: {
                stroke: opts.color,
                lineCap: "round",
                lineWidth: opts.lineWidth
            },
            zlevel: opts.zlevel,
            z: 10001
        });
        arc.animateShape(true).when(1000, {
            endAngle: $922cf61a00310968$var$PI * 3 / 2
        }).start("circularInOut");
        arc.animateShape(true).when(1000, {
            startAngle: $922cf61a00310968$var$PI * 3 / 2
        }).delay(300).start("circularInOut");
        group.add(arc);
    }
    // Inject resize
    group.resize = function() {
        var textWidth = textContent.getBoundingRect().width;
        var r = opts.showSpinner ? opts.spinnerRadius : 0;
        // cx = (containerWidth - arcDiameter - textDistance - textWidth) / 2
        // textDistance needs to be calculated when both animation and text exist
        var cx = (api.getWidth() - r * 2 - (opts.showSpinner && textWidth ? 10 : 0) - textWidth) / 2 - (opts.showSpinner && textWidth ? 0 : 5 + textWidth / 2) + (opts.showSpinner ? 0 : textWidth / 2) + (textWidth ? 0 : r);
        var cy = api.getHeight() / 2;
        opts.showSpinner && arc.setShape({
            cx: cx,
            cy: cy
        });
        labelRect.setShape({
            x: cx - r,
            y: cy - r,
            width: r * 2,
            height: r * 2
        });
        mask.setShape({
            x: 0,
            y: 0,
            width: api.getWidth(),
            height: api.getHeight()
        });
    };
    group.resize();
    return group;
}


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 





var $c740c2e679d2bea1$var$Scheduler = /** @class */ function() {
    function Scheduler(ecInstance, api, dataProcessorHandlers, visualHandlers) {
        // key: handlerUID
        this._stageTaskMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
        this.ecInstance = ecInstance;
        this.api = api;
        // Fix current processors in case that in some rear cases that
        // processors might be registered after echarts instance created.
        // Register processors incrementally for a echarts instance is
        // not supported by this stream architecture.
        dataProcessorHandlers = this._dataProcessorHandlers = dataProcessorHandlers.slice();
        visualHandlers = this._visualHandlers = visualHandlers.slice();
        this._allHandlers = dataProcessorHandlers.concat(visualHandlers);
    }
    Scheduler.prototype.restoreData = function(ecModel, payload) {
        // TODO: Only restore needed series and components, but not all components.
        // Currently `restoreData` of all of the series and component will be called.
        // But some independent components like `title`, `legend`, `graphic`, `toolbox`,
        // `tooltip`, `axisPointer`, etc, do not need series refresh when `setOption`,
        // and some components like coordinate system, axes, dataZoom, visualMap only
        // need their target series refresh.
        // (1) If we are implementing this feature some day, we should consider these cases:
        // if a data processor depends on a component (e.g., dataZoomProcessor depends
        // on the settings of `dataZoom`), it should be re-performed if the component
        // is modified by `setOption`.
        // (2) If a processor depends on sevral series, speicified by its `getTargetSeries`,
        // it should be re-performed when the result array of `getTargetSeries` changed.
        // We use `dependencies` to cover these issues.
        // (3) How to update target series when coordinate system related components modified.
        // TODO: simply the dirty mechanism? Check whether only the case here can set tasks dirty,
        // and this case all of the tasks will be set as dirty.
        ecModel.restoreData(payload);
        // Theoretically an overall task not only depends on each of its target series, but also
        // depends on all of the series.
        // The overall task is not in pipeline, and `ecModel.restoreData` only set pipeline tasks
        // dirty. If `getTargetSeries` of an overall task returns nothing, we should also ensure
        // that the overall task is set as dirty and to be performed, otherwise it probably cause
        // state chaos. So we have to set dirty of all of the overall tasks manually, otherwise it
        // probably cause state chaos (consider `dataZoomProcessor`).
        this._stageTaskMap.each(function(taskRecord) {
            var overallTask = taskRecord.overallTask;
            overallTask && overallTask.dirty();
        });
    };
    // If seriesModel provided, incremental threshold is check by series data.
    Scheduler.prototype.getPerformArgs = function(task, isBlock) {
        // For overall task
        if (!task.__pipeline) return;
        var pipeline = this._pipelineMap.get(task.__pipeline.id);
        var pCtx = pipeline.context;
        var incremental = !isBlock && pipeline.progressiveEnabled && (!pCtx || pCtx.progressiveRender) && task.__idxInPipeline > pipeline.blockIndex;
        var step = incremental ? pipeline.step : null;
        var modDataCount = pCtx && pCtx.modDataCount;
        var modBy = modDataCount != null ? Math.ceil(modDataCount / step) : null;
        return {
            step: step,
            modBy: modBy,
            modDataCount: modDataCount
        };
    };
    Scheduler.prototype.getPipeline = function(pipelineId) {
        return this._pipelineMap.get(pipelineId);
    };
    /**
   * Current, progressive rendering starts from visual and layout.
   * Always detect render mode in the same stage, avoiding that incorrect
   * detection caused by data filtering.
   * Caution:
   * `updateStreamModes` use `seriesModel.getData()`.
   */ Scheduler.prototype.updateStreamModes = function(seriesModel, view) {
        var pipeline = this._pipelineMap.get(seriesModel.uid);
        var data = seriesModel.getData();
        var dataLen = data.count();
        // `progressiveRender` means that can render progressively in each
        // animation frame. Note that some types of series do not provide
        // `view.incrementalPrepareRender` but support `chart.appendData`. We
        // use the term `incremental` but not `progressive` to describe the
        // case that `chart.appendData`.
        var progressiveRender = pipeline.progressiveEnabled && view.incrementalPrepareRender && dataLen >= pipeline.threshold;
        var large = seriesModel.get("large") && dataLen >= seriesModel.get("largeThreshold");
        // TODO: modDataCount should not updated if `appendData`, otherwise cause whole repaint.
        // see `test/candlestick-large3.html`
        var modDataCount = seriesModel.get("progressiveChunkMode") === "mod" ? dataLen : null;
        seriesModel.pipelineContext = pipeline.context = {
            progressiveRender: progressiveRender,
            modDataCount: modDataCount,
            large: large
        };
    };
    Scheduler.prototype.restorePipelines = function(ecModel) {
        var scheduler = this;
        var pipelineMap = scheduler._pipelineMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
        ecModel.eachSeries(function(seriesModel) {
            var progressive = seriesModel.getProgressive();
            var pipelineId = seriesModel.uid;
            pipelineMap.set(pipelineId, {
                id: pipelineId,
                head: null,
                tail: null,
                threshold: seriesModel.getProgressiveThreshold(),
                progressiveEnabled: progressive && !(seriesModel.preventIncremental && seriesModel.preventIncremental()),
                blockIndex: -1,
                step: Math.round(progressive || 700),
                count: 0
            });
            scheduler._pipe(seriesModel, seriesModel.dataTask);
        });
    };
    Scheduler.prototype.prepareStageTasks = function() {
        var stageTaskMap = this._stageTaskMap;
        var ecModel = this.api.getModel();
        var api = this.api;
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(this._allHandlers, function(handler) {
            var record = stageTaskMap.get(handler.uid) || stageTaskMap.set(handler.uid, {});
            var errMsg = "";
            // Currently do not need to support to sepecify them both.
            errMsg = '"reset" and "overallReset" must not be both specified.';
            (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(!(handler.reset && handler.overallReset), errMsg);
            handler.reset && this._createSeriesStageTask(handler, record, ecModel, api);
            handler.overallReset && this._createOverallStageTask(handler, record, ecModel, api);
        }, this);
    };
    Scheduler.prototype.prepareView = function(view, model, ecModel, api) {
        var renderTask = view.renderTask;
        var context = renderTask.context;
        context.model = model;
        context.ecModel = ecModel;
        context.api = api;
        renderTask.__block = !view.incrementalPrepareRender;
        this._pipe(model, renderTask);
    };
    Scheduler.prototype.performDataProcessorTasks = function(ecModel, payload) {
        // If we do not use `block` here, it should be considered when to update modes.
        this._performStageTasks(this._dataProcessorHandlers, ecModel, payload, {
            block: true
        });
    };
    Scheduler.prototype.performVisualTasks = function(ecModel, payload, opt) {
        this._performStageTasks(this._visualHandlers, ecModel, payload, opt);
    };
    Scheduler.prototype._performStageTasks = function(stageHandlers, ecModel, payload, opt) {
        opt = opt || {};
        var unfinished = false;
        var scheduler = this;
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(stageHandlers, function(stageHandler, idx) {
            if (opt.visualType && opt.visualType !== stageHandler.visualType) return;
            var stageHandlerRecord = scheduler._stageTaskMap.get(stageHandler.uid);
            var seriesTaskMap = stageHandlerRecord.seriesTaskMap;
            var overallTask = stageHandlerRecord.overallTask;
            if (overallTask) {
                var overallNeedDirty_1;
                var agentStubMap = overallTask.agentStubMap;
                agentStubMap.each(function(stub) {
                    if (needSetDirty(opt, stub)) {
                        stub.dirty();
                        overallNeedDirty_1 = true;
                    }
                });
                overallNeedDirty_1 && overallTask.dirty();
                scheduler.updatePayload(overallTask, payload);
                var performArgs_1 = scheduler.getPerformArgs(overallTask, opt.block);
                // Execute stubs firstly, which may set the overall task dirty,
                // then execute the overall task. And stub will call seriesModel.setData,
                // which ensures that in the overallTask seriesModel.getData() will not
                // return incorrect data.
                agentStubMap.each(function(stub) {
                    stub.perform(performArgs_1);
                });
                if (overallTask.perform(performArgs_1)) unfinished = true;
            } else if (seriesTaskMap) seriesTaskMap.each(function(task, pipelineId) {
                if (needSetDirty(opt, task)) task.dirty();
                var performArgs = scheduler.getPerformArgs(task, opt.block);
                // FIXME
                // if intending to declare `performRawSeries` in handlers, only
                // stream-independent (specifically, data item independent) operations can be
                // performed. Because if a series is filtered, most of the tasks will not
                // be performed. A stream-dependent operation probably cause wrong biz logic.
                // Perhaps we should not provide a separate callback for this case instead
                // of providing the config `performRawSeries`. The stream-dependent operations
                // and stream-independent operations should better not be mixed.
                performArgs.skip = !stageHandler.performRawSeries && ecModel.isSeriesFiltered(task.context.model);
                scheduler.updatePayload(task, payload);
                if (task.perform(performArgs)) unfinished = true;
            });
        });
        function needSetDirty(opt, task) {
            return opt.setDirty && (!opt.dirtyMap || opt.dirtyMap.get(task.__pipeline.id));
        }
        this.unfinished = unfinished || this.unfinished;
    };
    Scheduler.prototype.performSeriesTasks = function(ecModel) {
        var unfinished;
        ecModel.eachSeries(function(seriesModel) {
            // Progress to the end for dataInit and dataRestore.
            unfinished = seriesModel.dataTask.perform() || unfinished;
        });
        this.unfinished = unfinished || this.unfinished;
    };
    Scheduler.prototype.plan = function() {
        // Travel pipelines, check block.
        this._pipelineMap.each(function(pipeline) {
            var task = pipeline.tail;
            do {
                if (task.__block) {
                    pipeline.blockIndex = task.__idxInPipeline;
                    break;
                }
                task = task.getUpstream();
            }while (task);
        });
    };
    Scheduler.prototype.updatePayload = function(task, payload) {
        payload !== "remain" && (task.context.payload = payload);
    };
    Scheduler.prototype._createSeriesStageTask = function(stageHandler, stageHandlerRecord, ecModel, api) {
        var scheduler = this;
        var oldSeriesTaskMap = stageHandlerRecord.seriesTaskMap;
        // The count of stages are totally about only several dozen, so
        // do not need to reuse the map.
        var newSeriesTaskMap = stageHandlerRecord.seriesTaskMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
        var seriesType = stageHandler.seriesType;
        var getTargetSeries = stageHandler.getTargetSeries;
        // If a stageHandler should cover all series, `createOnAllSeries` should be declared mandatorily,
        // to avoid some typo or abuse. Otherwise if an extension do not specify a `seriesType`,
        // it works but it may cause other irrelevant charts blocked.
        if (stageHandler.createOnAllSeries) ecModel.eachRawSeries(create);
        else if (seriesType) ecModel.eachRawSeriesByType(seriesType, create);
        else if (getTargetSeries) getTargetSeries(ecModel, api).each(create);
        function create(seriesModel) {
            var pipelineId = seriesModel.uid;
            // Init tasks for each seriesModel only once.
            // Reuse original task instance.
            var task = newSeriesTaskMap.set(pipelineId, oldSeriesTaskMap && oldSeriesTaskMap.get(pipelineId) || (0, $e92f76cd4401b366$export$f7292ab7796be73c)({
                plan: $c740c2e679d2bea1$var$seriesTaskPlan,
                reset: $c740c2e679d2bea1$var$seriesTaskReset,
                count: $c740c2e679d2bea1$var$seriesTaskCount
            }));
            task.context = {
                model: seriesModel,
                ecModel: ecModel,
                api: api,
                // PENDING: `useClearVisual` not used?
                useClearVisual: stageHandler.isVisual && !stageHandler.isLayout,
                plan: stageHandler.plan,
                reset: stageHandler.reset,
                scheduler: scheduler
            };
            scheduler._pipe(seriesModel, task);
        }
    };
    Scheduler.prototype._createOverallStageTask = function(stageHandler, stageHandlerRecord, ecModel, api) {
        var scheduler = this;
        var overallTask = stageHandlerRecord.overallTask = stageHandlerRecord.overallTask || (0, $e92f76cd4401b366$export$f7292ab7796be73c)({
            reset: $c740c2e679d2bea1$var$overallTaskReset
        });
        overallTask.context = {
            ecModel: ecModel,
            api: api,
            overallReset: stageHandler.overallReset,
            scheduler: scheduler
        };
        var oldAgentStubMap = overallTask.agentStubMap;
        // The count of stages are totally about only several dozen, so
        // do not need to reuse the map.
        var newAgentStubMap = overallTask.agentStubMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
        var seriesType = stageHandler.seriesType;
        var getTargetSeries = stageHandler.getTargetSeries;
        var overallProgress = true;
        var shouldOverallTaskDirty = false;
        // FIXME:TS never used, so comment it
        // let modifyOutputEnd = stageHandler.modifyOutputEnd;
        // An overall task with seriesType detected or has `getTargetSeries`, we add
        // stub in each pipelines, it will set the overall task dirty when the pipeline
        // progress. Moreover, to avoid call the overall task each frame (too frequent),
        // we set the pipeline block.
        var errMsg = "";
        errMsg = '"createOnAllSeries" is not supported for "overallReset", because it will block all streams.';
        (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(!stageHandler.createOnAllSeries, errMsg);
        if (seriesType) ecModel.eachRawSeriesByType(seriesType, createStub);
        else if (getTargetSeries) getTargetSeries(ecModel, api).each(createStub);
        else {
            overallProgress = false;
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(ecModel.getSeries(), createStub);
        }
        function createStub(seriesModel) {
            var pipelineId = seriesModel.uid;
            var stub = newAgentStubMap.set(pipelineId, oldAgentStubMap && oldAgentStubMap.get(pipelineId) || // When the result of `getTargetSeries` changed, the overallTask
            // should be set as dirty and re-performed.
            (shouldOverallTaskDirty = true, (0, $e92f76cd4401b366$export$f7292ab7796be73c)({
                reset: $c740c2e679d2bea1$var$stubReset,
                onDirty: $c740c2e679d2bea1$var$stubOnDirty
            })));
            stub.context = {
                model: seriesModel,
                overallProgress: overallProgress
            };
            stub.agent = overallTask;
            stub.__block = overallProgress;
            scheduler._pipe(seriesModel, stub);
        }
        if (shouldOverallTaskDirty) overallTask.dirty();
    };
    Scheduler.prototype._pipe = function(seriesModel, task) {
        var pipelineId = seriesModel.uid;
        var pipeline = this._pipelineMap.get(pipelineId);
        !pipeline.head && (pipeline.head = task);
        pipeline.tail && pipeline.tail.pipe(task);
        pipeline.tail = task;
        task.__idxInPipeline = pipeline.count++;
        task.__pipeline = pipeline;
    };
    Scheduler.wrapStageHandler = function(stageHandler, visualType) {
        if ((0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(stageHandler)) stageHandler = {
            overallReset: stageHandler,
            seriesType: $c740c2e679d2bea1$var$detectSeriseType(stageHandler)
        };
        stageHandler.uid = (0, $5e939fc0112f61e7$export$6d2b3473b0986646)("stageHandler");
        visualType && (stageHandler.visualType = visualType);
        return stageHandler;
    };
    return Scheduler;
}();
function $c740c2e679d2bea1$var$overallTaskReset(context) {
    context.overallReset(context.ecModel, context.api, context.payload);
}
function $c740c2e679d2bea1$var$stubReset(context) {
    return context.overallProgress && $c740c2e679d2bea1$var$stubProgress;
}
function $c740c2e679d2bea1$var$stubProgress() {
    this.agent.dirty();
    this.getDownstream().dirty();
}
function $c740c2e679d2bea1$var$stubOnDirty() {
    this.agent && this.agent.dirty();
}
function $c740c2e679d2bea1$var$seriesTaskPlan(context) {
    return context.plan ? context.plan(context.model, context.ecModel, context.api, context.payload) : null;
}
function $c740c2e679d2bea1$var$seriesTaskReset(context) {
    if (context.useClearVisual) context.data.clearAllVisual();
    var resetDefines = context.resetDefines = (0, $8917c02fd8256c67$export$4f07b212a02c8051)(context.reset(context.model, context.ecModel, context.api, context.payload));
    return resetDefines.length > 1 ? (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(resetDefines, function(v, idx) {
        return $c740c2e679d2bea1$var$makeSeriesTaskProgress(idx);
    }) : $c740c2e679d2bea1$var$singleSeriesTaskProgress;
}
var $c740c2e679d2bea1$var$singleSeriesTaskProgress = $c740c2e679d2bea1$var$makeSeriesTaskProgress(0);
function $c740c2e679d2bea1$var$makeSeriesTaskProgress(resetDefineIdx) {
    return function(params, context) {
        var data = context.data;
        var resetDefine = context.resetDefines[resetDefineIdx];
        if (resetDefine && resetDefine.dataEach) for(var i = params.start; i < params.end; i++)resetDefine.dataEach(data, i);
        else if (resetDefine && resetDefine.progress) resetDefine.progress(params, data);
    };
}
function $c740c2e679d2bea1$var$seriesTaskCount(context) {
    return context.data.count();
}
/**
 * Only some legacy stage handlers (usually in echarts extensions) are pure function.
 * To ensure that they can work normally, they should work in block mode, that is,
 * they should not be started util the previous tasks finished. So they cause the
 * progressive rendering disabled. We try to detect the series type, to narrow down
 * the block range to only the series type they concern, but not all series.
 */ function $c740c2e679d2bea1$var$detectSeriseType(legacyFunc) {
    $c740c2e679d2bea1$var$seriesType = null;
    try {
        // Assume there is no async when calling `eachSeriesByType`.
        legacyFunc($c740c2e679d2bea1$var$ecModelMock, $c740c2e679d2bea1$var$apiMock);
    } catch (e) {}
    return $c740c2e679d2bea1$var$seriesType;
}
var $c740c2e679d2bea1$var$ecModelMock = {};
var $c740c2e679d2bea1$var$apiMock = {};
var $c740c2e679d2bea1$var$seriesType;
$c740c2e679d2bea1$var$mockMethods($c740c2e679d2bea1$var$ecModelMock, (0, $c50755d14f3a6f2b$export$2e2bcd8739ae039));
$c740c2e679d2bea1$var$mockMethods($c740c2e679d2bea1$var$apiMock, (0, $3d3bd8865085eb14$export$2e2bcd8739ae039));
$c740c2e679d2bea1$var$ecModelMock.eachSeriesByType = $c740c2e679d2bea1$var$ecModelMock.eachRawSeriesByType = function(type) {
    $c740c2e679d2bea1$var$seriesType = type;
};
$c740c2e679d2bea1$var$ecModelMock.eachComponent = function(cond) {
    if (cond.mainType === "series" && cond.subType) $c740c2e679d2bea1$var$seriesType = cond.subType;
};
function $c740c2e679d2bea1$var$mockMethods(target, Clz) {
    /* eslint-disable */ for(var name_1 in Clz.prototype)// Do not use hasOwnProperty
    target[name_1] = (0, $e44eb14c4271d0f9$export$8793edee2d425525);
/* eslint-enable */ }
var $c740c2e679d2bea1$export$2e2bcd8739ae039 = $c740c2e679d2bea1$var$Scheduler;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ var $962c77692571bac1$var$colorAll = [
    "#37A2DA",
    "#32C5E9",
    "#67E0E3",
    "#9FE6B8",
    "#FFDB5C",
    "#ff9f7f",
    "#fb7293",
    "#E062AE",
    "#E690D1",
    "#e7bcf3",
    "#9d96f5",
    "#8378EA",
    "#96BFFF"
];
var $962c77692571bac1$export$2e2bcd8739ae039 = {
    color: $962c77692571bac1$var$colorAll,
    colorLayer: [
        [
            "#37A2DA",
            "#ffd85c",
            "#fd7b5f"
        ],
        [
            "#37A2DA",
            "#67E0E3",
            "#FFDB5C",
            "#ff9f7f",
            "#E062AE",
            "#9d96f5"
        ],
        [
            "#37A2DA",
            "#32C5E9",
            "#9FE6B8",
            "#FFDB5C",
            "#ff9f7f",
            "#fb7293",
            "#e7bcf3",
            "#8378EA",
            "#96BFFF"
        ],
        $962c77692571bac1$var$colorAll
    ]
};


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ var $fb99273772ba8f3f$var$contrastColor = "#B9B8CE";
var $fb99273772ba8f3f$var$backgroundColor = "#100C2A";
var $fb99273772ba8f3f$var$axisCommon = function() {
    return {
        axisLine: {
            lineStyle: {
                color: $fb99273772ba8f3f$var$contrastColor
            }
        },
        splitLine: {
            lineStyle: {
                color: "#484753"
            }
        },
        splitArea: {
            areaStyle: {
                color: [
                    "rgba(255,255,255,0.02)",
                    "rgba(255,255,255,0.05)"
                ]
            }
        },
        minorSplitLine: {
            lineStyle: {
                color: "#20203B"
            }
        }
    };
};
var $fb99273772ba8f3f$var$colorPalette = [
    "#4992ff",
    "#7cffb2",
    "#fddd60",
    "#ff6e76",
    "#58d9f9",
    "#05c091",
    "#ff8a45",
    "#8d48e3",
    "#dd79ff"
];
var $fb99273772ba8f3f$var$theme = {
    darkMode: true,
    color: $fb99273772ba8f3f$var$colorPalette,
    backgroundColor: $fb99273772ba8f3f$var$backgroundColor,
    axisPointer: {
        lineStyle: {
            color: "#817f91"
        },
        crossStyle: {
            color: "#817f91"
        },
        label: {
            // TODO Contrast of label backgorundColor
            color: "#fff"
        }
    },
    legend: {
        textStyle: {
            color: $fb99273772ba8f3f$var$contrastColor
        }
    },
    textStyle: {
        color: $fb99273772ba8f3f$var$contrastColor
    },
    title: {
        textStyle: {
            color: "#EEF1FA"
        },
        subtextStyle: {
            color: "#B9B8CE"
        }
    },
    toolbox: {
        iconStyle: {
            borderColor: $fb99273772ba8f3f$var$contrastColor
        }
    },
    dataZoom: {
        borderColor: "#71708A",
        textStyle: {
            color: $fb99273772ba8f3f$var$contrastColor
        },
        brushStyle: {
            color: "rgba(135,163,206,0.3)"
        },
        handleStyle: {
            color: "#353450",
            borderColor: "#C5CBE3"
        },
        moveHandleStyle: {
            color: "#B0B6C3",
            opacity: 0.3
        },
        fillerColor: "rgba(135,163,206,0.2)",
        emphasis: {
            handleStyle: {
                borderColor: "#91B7F2",
                color: "#4D587D"
            },
            moveHandleStyle: {
                color: "#636D9A",
                opacity: 0.7
            }
        },
        dataBackground: {
            lineStyle: {
                color: "#71708A",
                width: 1
            },
            areaStyle: {
                color: "#71708A"
            }
        },
        selectedDataBackground: {
            lineStyle: {
                color: "#87A3CE"
            },
            areaStyle: {
                color: "#87A3CE"
            }
        }
    },
    visualMap: {
        textStyle: {
            color: $fb99273772ba8f3f$var$contrastColor
        }
    },
    timeline: {
        lineStyle: {
            color: $fb99273772ba8f3f$var$contrastColor
        },
        label: {
            color: $fb99273772ba8f3f$var$contrastColor
        },
        controlStyle: {
            color: $fb99273772ba8f3f$var$contrastColor,
            borderColor: $fb99273772ba8f3f$var$contrastColor
        }
    },
    calendar: {
        itemStyle: {
            color: $fb99273772ba8f3f$var$backgroundColor
        },
        dayLabel: {
            color: $fb99273772ba8f3f$var$contrastColor
        },
        monthLabel: {
            color: $fb99273772ba8f3f$var$contrastColor
        },
        yearLabel: {
            color: $fb99273772ba8f3f$var$contrastColor
        }
    },
    timeAxis: $fb99273772ba8f3f$var$axisCommon(),
    logAxis: $fb99273772ba8f3f$var$axisCommon(),
    valueAxis: $fb99273772ba8f3f$var$axisCommon(),
    categoryAxis: $fb99273772ba8f3f$var$axisCommon(),
    line: {
        symbol: "circle"
    },
    graph: {
        color: $fb99273772ba8f3f$var$colorPalette
    },
    gauge: {
        title: {
            color: $fb99273772ba8f3f$var$contrastColor
        },
        axisLine: {
            lineStyle: {
                color: [
                    [
                        1,
                        "rgba(207,212,219,0.2)"
                    ]
                ]
            }
        },
        axisLabel: {
            color: $fb99273772ba8f3f$var$contrastColor
        },
        detail: {
            color: "#EEF1FA"
        }
    },
    candlestick: {
        itemStyle: {
            color: "#f64e56",
            color0: "#54ea92",
            borderColor: "#f64e56",
            borderColor0: "#54ea92"
        }
    }
};
$fb99273772ba8f3f$var$theme.categoryAxis.splitLine.show = false;
var $fb99273772ba8f3f$export$2e2bcd8739ae039 = $fb99273772ba8f3f$var$theme;



/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

/**
 * Usage of query:
 * `chart.on('click', query, handler);`
 * The `query` can be:
 * + The component type query string, only `mainType` or `mainType.subType`,
 *   like: 'xAxis', 'series', 'xAxis.category' or 'series.line'.
 * + The component query object, like:
 *   `{seriesIndex: 2}`, `{seriesName: 'xx'}`, `{seriesId: 'some'}`,
 *   `{xAxisIndex: 2}`, `{xAxisName: 'xx'}`, `{xAxisId: 'some'}`.
 * + The data query object, like:
 *   `{dataIndex: 123}`, `{dataType: 'link'}`, `{name: 'some'}`.
 * + The other query object (cmponent customized query), like:
 *   `{element: 'some'}` (only available in custom series).
 *
 * Caveat: If a prop in the `query` object is `null/undefined`, it is the
 * same as there is no such prop in the `query` object.
 */ var $d72026c60ee2cc64$export$d0fd09f950257b52 = /** @class */ function() {
    function ECEventProcessor() {}
    ECEventProcessor.prototype.normalizeQuery = function(query) {
        var cptQuery = {};
        var dataQuery = {};
        var otherQuery = {};
        // `query` is `mainType` or `mainType.subType` of component.
        if ($e44eb14c4271d0f9$export$844ec244b1367d54(query)) {
            var condCptType = (0, $0a7732deba457ada$export$fbe18865d303bf01)(query);
            // `.main` and `.sub` may be ''.
            cptQuery.mainType = condCptType.main || null;
            cptQuery.subType = condCptType.sub || null;
        } else {
            // `xxxIndex`, `xxxName`, `xxxId`, `name`, `dataIndex`, `dataType` is reserved,
            // can not be used in `compomentModel.filterForExposedEvent`.
            var suffixes_1 = [
                "Index",
                "Name",
                "Id"
            ];
            var dataKeys_1 = {
                name: 1,
                dataIndex: 1,
                dataType: 1
            };
            $e44eb14c4271d0f9$export$79b2f7037acddd43(query, function(val, key) {
                var reserved = false;
                for(var i = 0; i < suffixes_1.length; i++){
                    var propSuffix = suffixes_1[i];
                    var suffixPos = key.lastIndexOf(propSuffix);
                    if (suffixPos > 0 && suffixPos === key.length - propSuffix.length) {
                        var mainType = key.slice(0, suffixPos);
                        // Consider `dataIndex`.
                        if (mainType !== "data") {
                            cptQuery.mainType = mainType;
                            cptQuery[propSuffix.toLowerCase()] = val;
                            reserved = true;
                        }
                    }
                }
                if (dataKeys_1.hasOwnProperty(key)) {
                    dataQuery[key] = val;
                    reserved = true;
                }
                if (!reserved) otherQuery[key] = val;
            });
        }
        return {
            cptQuery: cptQuery,
            dataQuery: dataQuery,
            otherQuery: otherQuery
        };
    };
    ECEventProcessor.prototype.filter = function(eventType, query) {
        // They should be assigned before each trigger call.
        var eventInfo = this.eventInfo;
        if (!eventInfo) return true;
        var targetEl = eventInfo.targetEl;
        var packedEvent = eventInfo.packedEvent;
        var model = eventInfo.model;
        var view = eventInfo.view;
        // For event like 'globalout'.
        if (!model || !view) return true;
        var cptQuery = query.cptQuery;
        var dataQuery = query.dataQuery;
        return check(cptQuery, model, "mainType") && check(cptQuery, model, "subType") && check(cptQuery, model, "index", "componentIndex") && check(cptQuery, model, "name") && check(cptQuery, model, "id") && check(dataQuery, packedEvent, "name") && check(dataQuery, packedEvent, "dataIndex") && check(dataQuery, packedEvent, "dataType") && (!view.filterForExposedEvent || view.filterForExposedEvent(eventType, query.otherQuery, targetEl, packedEvent));
        function check(query, host, prop, propOnHost) {
            return query[prop] == null || host[propOnHost || prop] === query[prop];
        }
    };
    ECEventProcessor.prototype.afterTrigger = function() {
        // Make sure the eventInfo won't be used in next trigger.
        this.eventInfo = null;
    };
    return ECEventProcessor;
}();


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
var $dc892e38568f2418$var$SYMBOL_PROPS_WITH_CB = [
    "symbol",
    "symbolSize",
    "symbolRotate",
    "symbolOffset"
];
var $dc892e38568f2418$var$SYMBOL_PROPS = $dc892e38568f2418$var$SYMBOL_PROPS_WITH_CB.concat([
    "symbolKeepAspect"
]);
// Encoding visual for all series include which is filtered for legend drawing
var $dc892e38568f2418$export$144ac3beded415d9 = {
    createOnAllSeries: true,
    // For legend.
    performRawSeries: true,
    reset: function(seriesModel, ecModel) {
        var data = seriesModel.getData();
        if (seriesModel.legendIcon) data.setVisual("legendIcon", seriesModel.legendIcon);
        if (!seriesModel.hasSymbolVisual) return;
        var symbolOptions = {};
        var symbolOptionsCb = {};
        var hasCallback = false;
        for(var i = 0; i < $dc892e38568f2418$var$SYMBOL_PROPS_WITH_CB.length; i++){
            var symbolPropName = $dc892e38568f2418$var$SYMBOL_PROPS_WITH_CB[i];
            var val = seriesModel.get(symbolPropName);
            if ((0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(val)) {
                hasCallback = true;
                symbolOptionsCb[symbolPropName] = val;
            } else symbolOptions[symbolPropName] = val;
        }
        symbolOptions.symbol = symbolOptions.symbol || seriesModel.defaultSymbol;
        data.setVisual((0, $e44eb14c4271d0f9$export$8b58be045bf06082)({
            legendIcon: seriesModel.legendIcon || symbolOptions.symbol,
            symbolKeepAspect: seriesModel.get("symbolKeepAspect")
        }, symbolOptions));
        // Only visible series has each data be visual encoded
        if (ecModel.isSeriesFiltered(seriesModel)) return;
        var symbolPropsCb = (0, $e44eb14c4271d0f9$export$ed97f33186d4b816)(symbolOptionsCb);
        function dataEach(data, idx) {
            var rawValue = seriesModel.getRawValue(idx);
            var params = seriesModel.getDataParams(idx);
            for(var i = 0; i < symbolPropsCb.length; i++){
                var symbolPropName = symbolPropsCb[i];
                data.setItemVisual(idx, symbolPropName, symbolOptionsCb[symbolPropName](rawValue, params));
            }
        }
        return {
            dataEach: hasCallback ? dataEach : null
        };
    }
};
var $dc892e38568f2418$export$435b956f7f1071fb = {
    createOnAllSeries: true,
    // For legend.
    performRawSeries: true,
    reset: function(seriesModel, ecModel) {
        if (!seriesModel.hasSymbolVisual) return;
        // Only visible series has each data be visual encoded
        if (ecModel.isSeriesFiltered(seriesModel)) return;
        var data = seriesModel.getData();
        function dataEach(data, idx) {
            var itemModel = data.getItemModel(idx);
            for(var i = 0; i < $dc892e38568f2418$var$SYMBOL_PROPS.length; i++){
                var symbolPropName = $dc892e38568f2418$var$SYMBOL_PROPS[i];
                var val = itemModel.getShallow(symbolPropName, true);
                if (val != null) data.setItemVisual(idx, symbolPropName, val);
            }
        }
        return {
            dataEach: data.hasItemOption ? dataEach : null
        };
    }
};


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ function $db27badcd4437b56$export$91d919a86b2df624(data, dataIndex, key) {
    switch(key){
        case "color":
            var style = data.getItemVisual(dataIndex, "style");
            return style[data.getVisual("drawType")];
        case "opacity":
            return data.getItemVisual(dataIndex, "style").opacity;
        case "symbol":
        case "symbolSize":
        case "liftZ":
            return data.getItemVisual(dataIndex, key);
        default:
            console.warn("Unknown visual type " + key);
    }
}
function $db27badcd4437b56$export$d76e333a86ea1a2(data, key) {
    switch(key){
        case "color":
            var style = data.getVisual("style");
            return style[data.getVisual("drawType")];
        case "opacity":
            return data.getVisual("style").opacity;
        case "symbol":
        case "symbolSize":
        case "liftZ":
            return data.getVisual(key);
        default:
            console.warn("Unknown visual type " + key);
    }
}
function $db27badcd4437b56$export$3aab879e9d0e7c75(data, dataIndex, key, value) {
    switch(key){
        case "color":
            // Make sure not sharing style object.
            var style = data.ensureUniqueItemVisual(dataIndex, "style");
            style[data.getVisual("drawType")] = value;
            // Mark the color has been changed, not from palette anymore
            data.setItemVisual(dataIndex, "colorFromPalette", false);
            break;
        case "opacity":
            data.ensureUniqueItemVisual(dataIndex, "style").opacity = value;
            break;
        case "symbol":
        case "symbolSize":
        case "liftZ":
            data.setItemVisual(dataIndex, key, value);
            break;
        default:
            console.warn("Unknown visual type " + key);
    }
}



/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 


function $f8e4c5d0363696b8$export$62942ba95693dbfc(seriesType, ecRegisterAction) {
    function getSeriesIndices(ecModel, payload) {
        var seriesIndices = [];
        ecModel.eachComponent({
            mainType: "series",
            subType: seriesType,
            query: payload
        }, function(seriesModel) {
            seriesIndices.push(seriesModel.seriesIndex);
        });
        return seriesIndices;
    }
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)([
        [
            seriesType + "ToggleSelect",
            "toggleSelect"
        ],
        [
            seriesType + "Select",
            "select"
        ],
        [
            seriesType + "UnSelect",
            "unselect"
        ]
    ], function(eventsMap) {
        ecRegisterAction(eventsMap[0], function(payload, ecModel, api) {
            payload = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, payload);
            (0, $4796c55e8b767685$export$bbd91d66002c4ea6)(payload.type, eventsMap[1]);
            api.dispatchAction((0, $e44eb14c4271d0f9$export$8b58be045bf06082)(payload, {
                type: eventsMap[1],
                seriesIndex: getSeriesIndices(ecModel, payload)
            }));
        });
    });
}
function $f8e4c5d0363696b8$var$handleSeriesLegacySelectEvents(type, eventPostfix, ecIns, ecModel, payload) {
    var legacyEventName = type + eventPostfix;
    if (!ecIns.isSilent(legacyEventName)) {
        (0, $4796c55e8b767685$export$4a9c0b74eb885aa1)("event " + legacyEventName + " is deprecated.");
        ecModel.eachComponent({
            mainType: "series",
            subType: "pie"
        }, function(seriesModel) {
            var seriesIndex = seriesModel.seriesIndex;
            var selectedMap = seriesModel.option.selectedMap;
            var selected = payload.selected;
            for(var i = 0; i < selected.length; i++)if (selected[i].seriesIndex === seriesIndex) {
                var data = seriesModel.getData();
                var dataIndex = (0, $8917c02fd8256c67$export$42b26cae8b8d10)(data, payload.fromActionPayload);
                ecIns.trigger(legacyEventName, {
                    type: legacyEventName,
                    seriesId: seriesModel.id,
                    name: (0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(dataIndex) ? data.getName(dataIndex[0]) : data.getName(dataIndex),
                    selected: (0, $e44eb14c4271d0f9$export$844ec244b1367d54)(selectedMap) ? selectedMap : (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, selectedMap)
                });
            }
        });
    }
}
function $f8e4c5d0363696b8$export$2575c83262e49d0c(messageCenter, ecIns, api) {
    messageCenter.on("selectchanged", function(params) {
        var ecModel = api.getModel();
        if (params.isFromClick) {
            $f8e4c5d0363696b8$var$handleSeriesLegacySelectEvents("map", "selectchanged", ecIns, ecModel, params);
            $f8e4c5d0363696b8$var$handleSeriesLegacySelectEvents("pie", "selectchanged", ecIns, ecModel, params);
        } else if (params.fromAction === "select") {
            $f8e4c5d0363696b8$var$handleSeriesLegacySelectEvents("map", "selected", ecIns, ecModel, params);
            $f8e4c5d0363696b8$var$handleSeriesLegacySelectEvents("pie", "selected", ecIns, ecModel, params);
        } else if (params.fromAction === "unselect") {
            $f8e4c5d0363696b8$var$handleSeriesLegacySelectEvents("map", "unselected", ecIns, ecModel, params);
            $f8e4c5d0363696b8$var$handleSeriesLegacySelectEvents("pie", "unselected", ecIns, ecModel, params);
        }
    });
}




/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ function $02d5aa029ba8870d$export$8a4fca9e04eb4df6(target, det, returnFirstMatch) {
    var found;
    while(target){
        if (det(target)) {
            found = target;
            if (returnFirstMatch) break;
        }
        target = target.__hostTarget || target.parent;
    }
    return found;
}


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ var $f2ec345ef41be692$var$wmUniqueIndex = Math.round(Math.random() * 9);
var $f2ec345ef41be692$var$supportDefineProperty = typeof Object.defineProperty === "function";
var $f2ec345ef41be692$var$WeakMap = function() {
    function WeakMap() {
        this._id = "__ec_inner_" + $f2ec345ef41be692$var$wmUniqueIndex++;
    }
    WeakMap.prototype.get = function(key) {
        return this._guard(key)[this._id];
    };
    WeakMap.prototype.set = function(key, value) {
        var target = this._guard(key);
        if ($f2ec345ef41be692$var$supportDefineProperty) Object.defineProperty(target, this._id, {
            value: value,
            enumerable: false,
            configurable: true
        });
        else target[this._id] = value;
        return this;
    };
    WeakMap.prototype["delete"] = function(key) {
        if (this.has(key)) {
            delete this._guard(key)[this._id];
            return true;
        }
        return false;
    };
    WeakMap.prototype.has = function(key) {
        return !!this._guard(key)[this._id];
    };
    WeakMap.prototype._guard = function(key) {
        if (key !== Object(key)) throw TypeError("Value of WeakMap is not a non-null object.");
        return key;
    };
    return WeakMap;
}();
var $f2ec345ef41be692$export$2e2bcd8739ae039 = $f2ec345ef41be692$var$WeakMap;





/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ // Symbol factory





/**
 * Triangle shape
 * @inner
 */ var $f918b475beb849b6$var$Triangle = $97f9f9aac9c7fd52$export$2e2bcd8739ae039.extend({
    type: "triangle",
    shape: {
        cx: 0,
        cy: 0,
        width: 0,
        height: 0
    },
    buildPath: function(path, shape) {
        var cx = shape.cx;
        var cy = shape.cy;
        var width = shape.width / 2;
        var height = shape.height / 2;
        path.moveTo(cx, cy - height);
        path.lineTo(cx + width, cy + height);
        path.lineTo(cx - width, cy + height);
        path.closePath();
    }
});
/**
 * Diamond shape
 * @inner
 */ var $f918b475beb849b6$var$Diamond = $97f9f9aac9c7fd52$export$2e2bcd8739ae039.extend({
    type: "diamond",
    shape: {
        cx: 0,
        cy: 0,
        width: 0,
        height: 0
    },
    buildPath: function(path, shape) {
        var cx = shape.cx;
        var cy = shape.cy;
        var width = shape.width / 2;
        var height = shape.height / 2;
        path.moveTo(cx, cy - height);
        path.lineTo(cx + width, cy);
        path.lineTo(cx, cy + height);
        path.lineTo(cx - width, cy);
        path.closePath();
    }
});
/**
 * Pin shape
 * @inner
 */ var $f918b475beb849b6$var$Pin = $97f9f9aac9c7fd52$export$2e2bcd8739ae039.extend({
    type: "pin",
    shape: {
        // x, y on the cusp
        x: 0,
        y: 0,
        width: 0,
        height: 0
    },
    buildPath: function(path, shape) {
        var x = shape.x;
        var y = shape.y;
        var w = shape.width / 5 * 3;
        // Height must be larger than width
        var h = Math.max(w, shape.height);
        var r = w / 2;
        // Dist on y with tangent point and circle center
        var dy = r * r / (h - r);
        var cy = y - h + r + dy;
        var angle = Math.asin(dy / r);
        // Dist on x with tangent point and circle center
        var dx = Math.cos(angle) * r;
        var tanX = Math.sin(angle);
        var tanY = Math.cos(angle);
        var cpLen = r * 0.6;
        var cpLen2 = r * 0.7;
        path.moveTo(x - dx, cy + dy);
        path.arc(x, cy, r, Math.PI - angle, Math.PI * 2 + angle);
        path.bezierCurveTo(x + dx - tanX * cpLen, cy + dy + tanY * cpLen, x, y - cpLen2, x, y);
        path.bezierCurveTo(x, y - cpLen2, x - dx + tanX * cpLen, cy + dy + tanY * cpLen, x - dx, cy + dy);
        path.closePath();
    }
});
/**
 * Arrow shape
 * @inner
 */ var $f918b475beb849b6$var$Arrow = $97f9f9aac9c7fd52$export$2e2bcd8739ae039.extend({
    type: "arrow",
    shape: {
        x: 0,
        y: 0,
        width: 0,
        height: 0
    },
    buildPath: function(ctx, shape) {
        var height = shape.height;
        var width = shape.width;
        var x = shape.x;
        var y = shape.y;
        var dx = width / 3 * 2;
        ctx.moveTo(x, y);
        ctx.lineTo(x + dx, y + height);
        ctx.lineTo(x, y + height / 4 * 3);
        ctx.lineTo(x - dx, y + height);
        ctx.lineTo(x, y);
        ctx.closePath();
    }
});
/**
 * Map of path constructors
 */ // TODO Use function to build symbol path.
var $f918b475beb849b6$var$symbolCtors = {
    line: $bb4cc8f9efee5de5$export$2e2bcd8739ae039,
    rect: $538026eba361a92a$export$2e2bcd8739ae039,
    roundRect: $538026eba361a92a$export$2e2bcd8739ae039,
    square: $538026eba361a92a$export$2e2bcd8739ae039,
    circle: $4901f8246791b36b$export$2e2bcd8739ae039,
    diamond: $f918b475beb849b6$var$Diamond,
    pin: $f918b475beb849b6$var$Pin,
    arrow: $f918b475beb849b6$var$Arrow,
    triangle: $f918b475beb849b6$var$Triangle
};
var $f918b475beb849b6$var$symbolShapeMakers = {
    line: function(x, y, w, h, shape) {
        shape.x1 = x;
        shape.y1 = y + h / 2;
        shape.x2 = x + w;
        shape.y2 = y + h / 2;
    },
    rect: function(x, y, w, h, shape) {
        shape.x = x;
        shape.y = y;
        shape.width = w;
        shape.height = h;
    },
    roundRect: function(x, y, w, h, shape) {
        shape.x = x;
        shape.y = y;
        shape.width = w;
        shape.height = h;
        shape.r = Math.min(w, h) / 4;
    },
    square: function(x, y, w, h, shape) {
        var size = Math.min(w, h);
        shape.x = x;
        shape.y = y;
        shape.width = size;
        shape.height = size;
    },
    circle: function(x, y, w, h, shape) {
        // Put circle in the center of square
        shape.cx = x + w / 2;
        shape.cy = y + h / 2;
        shape.r = Math.min(w, h) / 2;
    },
    diamond: function(x, y, w, h, shape) {
        shape.cx = x + w / 2;
        shape.cy = y + h / 2;
        shape.width = w;
        shape.height = h;
    },
    pin: function(x, y, w, h, shape) {
        shape.x = x + w / 2;
        shape.y = y + h / 2;
        shape.width = w;
        shape.height = h;
    },
    arrow: function(x, y, w, h, shape) {
        shape.x = x + w / 2;
        shape.y = y + h / 2;
        shape.width = w;
        shape.height = h;
    },
    triangle: function(x, y, w, h, shape) {
        shape.cx = x + w / 2;
        shape.cy = y + h / 2;
        shape.width = w;
        shape.height = h;
    }
};
var $f918b475beb849b6$export$33fc3b478d332725 = {};
(0, $e44eb14c4271d0f9$export$79b2f7037acddd43)($f918b475beb849b6$var$symbolCtors, function(Ctor, name) {
    $f918b475beb849b6$export$33fc3b478d332725[name] = new Ctor();
});
var $f918b475beb849b6$var$SymbolClz = $97f9f9aac9c7fd52$export$2e2bcd8739ae039.extend({
    type: "symbol",
    shape: {
        symbolType: "",
        x: 0,
        y: 0,
        width: 0,
        height: 0
    },
    calculateTextPosition: function(out, config, rect) {
        var res = (0, $1a2563e7d7856dd8$export$eee3603b512feab7)(out, config, rect);
        var shape = this.shape;
        if (shape && shape.symbolType === "pin" && config.position === "inside") res.y = rect.y + rect.height * 0.4;
        return res;
    },
    buildPath: function(ctx, shape, inBundle) {
        var symbolType = shape.symbolType;
        if (symbolType !== "none") {
            var proxySymbol = $f918b475beb849b6$export$33fc3b478d332725[symbolType];
            if (!proxySymbol) {
                // Default rect
                symbolType = "rect";
                proxySymbol = $f918b475beb849b6$export$33fc3b478d332725[symbolType];
            }
            $f918b475beb849b6$var$symbolShapeMakers[symbolType](shape.x, shape.y, shape.width, shape.height, proxySymbol.shape);
            proxySymbol.buildPath(ctx, proxySymbol.shape, inBundle);
        }
    }
});
// Provide setColor helper method to avoid determine if set the fill or stroke outside
function $f918b475beb849b6$var$symbolPathSetColor(color, innerColor) {
    if (this.type !== "image") {
        var symbolStyle = this.style;
        if (this.__isEmptyBrush) {
            symbolStyle.stroke = color;
            symbolStyle.fill = innerColor || "#fff";
            // TODO Same width with lineStyle in LineView
            symbolStyle.lineWidth = 2;
        } else if (this.shape.symbolType === "line") symbolStyle.stroke = color;
        else symbolStyle.fill = color;
        this.markRedraw();
    }
}
function $f918b475beb849b6$export$af050e04da3a02e8(symbolType, x, y, w, h, color, // whether to keep the ratio of w/h,
keepAspect) {
    // TODO Support image object, DynamicImage.
    var isEmpty = symbolType.indexOf("empty") === 0;
    if (isEmpty) symbolType = symbolType.substr(5, 1).toLowerCase() + symbolType.substr(6);
    var symbolPath;
    if (symbolType.indexOf("image://") === 0) symbolPath = $6aec2e68b45f8796$export$7a2bdede98851ac5(symbolType.slice(8), new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)(x, y, w, h), keepAspect ? "center" : "cover");
    else if (symbolType.indexOf("path://") === 0) symbolPath = $6aec2e68b45f8796$export$aa9bab72412f5613(symbolType.slice(7), {}, new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)(x, y, w, h), keepAspect ? "center" : "cover");
    else symbolPath = new $f918b475beb849b6$var$SymbolClz({
        shape: {
            symbolType: symbolType,
            x: x,
            y: y,
            width: w,
            height: h
        }
    });
    symbolPath.__isEmptyBrush = isEmpty;
    // TODO Should deprecate setColor
    symbolPath.setColor = $f918b475beb849b6$var$symbolPathSetColor;
    if (color) symbolPath.setColor(color);
    return symbolPath;
}
function $f918b475beb849b6$export$a84524f03e8e8dfb(symbolSize) {
    if (!(0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(symbolSize)) symbolSize = [
        +symbolSize,
        +symbolSize
    ];
    return [
        symbolSize[0] || 0,
        symbolSize[1] || 0
    ];
}
function $f918b475beb849b6$export$e3e292895c033f6d(symbolOffset, symbolSize) {
    if (symbolOffset == null) return;
    if (!(0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(symbolOffset)) symbolOffset = [
        symbolOffset,
        symbolOffset
    ];
    return [
        (0, $13e6a1a716300dd4$export$e8514cb5a5e2b40f)(symbolOffset[0], symbolSize[0]) || 0,
        (0, $13e6a1a716300dd4$export$e8514cb5a5e2b40f)((0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(symbolOffset[1], symbolOffset[0]), symbolSize[1]) || 0
    ];
}





function $c642d8e6805d7bb5$var$isSafeNum(num) {
    return isFinite(num);
}
function $c642d8e6805d7bb5$export$235c7ac50fe1db0a(ctx, obj, rect) {
    var x = obj.x == null ? 0 : obj.x;
    var x2 = obj.x2 == null ? 1 : obj.x2;
    var y = obj.y == null ? 0 : obj.y;
    var y2 = obj.y2 == null ? 0 : obj.y2;
    if (!obj.global) {
        x = x * rect.width + rect.x;
        x2 = x2 * rect.width + rect.x;
        y = y * rect.height + rect.y;
        y2 = y2 * rect.height + rect.y;
    }
    x = $c642d8e6805d7bb5$var$isSafeNum(x) ? x : 0;
    x2 = $c642d8e6805d7bb5$var$isSafeNum(x2) ? x2 : 1;
    y = $c642d8e6805d7bb5$var$isSafeNum(y) ? y : 0;
    y2 = $c642d8e6805d7bb5$var$isSafeNum(y2) ? y2 : 0;
    var canvasGradient = ctx.createLinearGradient(x, y, x2, y2);
    return canvasGradient;
}
function $c642d8e6805d7bb5$export$57f098206d57a443(ctx, obj, rect) {
    var width = rect.width;
    var height = rect.height;
    var min = Math.min(width, height);
    var x = obj.x == null ? 0.5 : obj.x;
    var y = obj.y == null ? 0.5 : obj.y;
    var r = obj.r == null ? 0.5 : obj.r;
    if (!obj.global) {
        x = x * width + rect.x;
        y = y * height + rect.y;
        r = r * min;
    }
    x = $c642d8e6805d7bb5$var$isSafeNum(x) ? x : 0.5;
    y = $c642d8e6805d7bb5$var$isSafeNum(y) ? y : 0.5;
    r = r >= 0 && $c642d8e6805d7bb5$var$isSafeNum(r) ? r : 0.5;
    var canvasGradient = ctx.createRadialGradient(x, y, 0, x, y, r);
    return canvasGradient;
}
function $c642d8e6805d7bb5$export$3dab6afd018d48c7(ctx, obj, rect) {
    var canvasGradient = obj.type === "radial" ? $c642d8e6805d7bb5$export$57f098206d57a443(ctx, obj, rect) : $c642d8e6805d7bb5$export$235c7ac50fe1db0a(ctx, obj, rect);
    var colorStops = obj.colorStops;
    for(var i = 0; i < colorStops.length; i++)canvasGradient.addColorStop(colorStops[i].offset, colorStops[i].color);
    return canvasGradient;
}
function $c642d8e6805d7bb5$export$beeddc5150cb2e83(clipPaths, prevClipPaths) {
    if (clipPaths === prevClipPaths || !clipPaths && !prevClipPaths) return false;
    if (!clipPaths || !prevClipPaths || clipPaths.length !== prevClipPaths.length) return true;
    for(var i = 0; i < clipPaths.length; i++){
        if (clipPaths[i] !== prevClipPaths[i]) return true;
    }
    return false;
}
function $c642d8e6805d7bb5$var$parseInt10(val) {
    return parseInt(val, 10);
}
function $c642d8e6805d7bb5$export$31b21d0167753bb4(root, whIdx, opts) {
    var wh = [
        "width",
        "height"
    ][whIdx];
    var cwh = [
        "clientWidth",
        "clientHeight"
    ][whIdx];
    var plt = [
        "paddingLeft",
        "paddingTop"
    ][whIdx];
    var prb = [
        "paddingRight",
        "paddingBottom"
    ][whIdx];
    if (opts[wh] != null && opts[wh] !== "auto") return parseFloat(opts[wh]);
    var stl = document.defaultView.getComputedStyle(root);
    return (root[cwh] || $c642d8e6805d7bb5$var$parseInt10(stl[wh]) || $c642d8e6805d7bb5$var$parseInt10(root.style[wh])) - ($c642d8e6805d7bb5$var$parseInt10(stl[plt]) || 0) - ($c642d8e6805d7bb5$var$parseInt10(stl[prb]) || 0) | 0;
}







function $14ddf9b3bb864105$export$9efb2ae8a603855d(lineType, lineWidth) {
    if (!lineType || lineType === "solid" || !(lineWidth > 0)) return null;
    return lineType === "dashed" ? [
        4 * lineWidth,
        2 * lineWidth
    ] : lineType === "dotted" ? [
        lineWidth
    ] : (0, $e44eb14c4271d0f9$export$7e4aa119212bc614)(lineType) ? [
        lineType
    ] : (0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(lineType) ? lineType : null;
}
function $14ddf9b3bb864105$export$9d315911f153b3b2(el) {
    var style = el.style;
    var lineDash = style.lineDash && style.lineWidth > 0 && $14ddf9b3bb864105$export$9efb2ae8a603855d(style.lineDash, style.lineWidth);
    var lineDashOffset = style.lineDashOffset;
    if (lineDash) {
        var lineScale_1 = style.strokeNoScale && el.getLineScale ? el.getLineScale() : 1;
        if (lineScale_1 && lineScale_1 !== 1) {
            lineDash = (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(lineDash, function(rawVal) {
                return rawVal / lineScale_1;
            });
            lineDashOffset /= lineScale_1;
        }
    }
    return [
        lineDash,
        lineDashOffset
    ];
}




var $e976df33d140e34a$var$pathProxyForDraw = new (0, $9638c378ac086dea$export$2e2bcd8739ae039)(true);
function $e976df33d140e34a$var$styleHasStroke(style) {
    var stroke = style.stroke;
    return !(stroke == null || stroke === "none" || !(style.lineWidth > 0));
}
function $e976df33d140e34a$var$isValidStrokeFillStyle(strokeOrFill) {
    return typeof strokeOrFill === "string" && strokeOrFill !== "none";
}
function $e976df33d140e34a$var$styleHasFill(style) {
    var fill = style.fill;
    return fill != null && fill !== "none";
}
function $e976df33d140e34a$var$doFillPath(ctx, style) {
    if (style.fillOpacity != null && style.fillOpacity !== 1) {
        var originalGlobalAlpha = ctx.globalAlpha;
        ctx.globalAlpha = style.fillOpacity * style.opacity;
        ctx.fill();
        ctx.globalAlpha = originalGlobalAlpha;
    } else ctx.fill();
}
function $e976df33d140e34a$var$doStrokePath(ctx, style) {
    if (style.strokeOpacity != null && style.strokeOpacity !== 1) {
        var originalGlobalAlpha = ctx.globalAlpha;
        ctx.globalAlpha = style.strokeOpacity * style.opacity;
        ctx.stroke();
        ctx.globalAlpha = originalGlobalAlpha;
    } else ctx.stroke();
}
function $e976df33d140e34a$export$8eb5db6b7bc27903(ctx, pattern, el) {
    var image = (0, $f816ee77c6c298e8$export$46c791b69ff9a0f)(pattern.image, pattern.__image, el);
    if ((0, $f816ee77c6c298e8$export$37ca7dd901d0236d)(image)) {
        var canvasPattern = ctx.createPattern(image, pattern.repeat || "repeat");
        if (typeof DOMMatrix === "function" && canvasPattern && canvasPattern.setTransform) {
            var matrix = new DOMMatrix();
            matrix.translateSelf(pattern.x || 0, pattern.y || 0);
            matrix.rotateSelf(0, 0, (pattern.rotation || 0) * (0, $e44eb14c4271d0f9$export$bce8e055322a0ce6));
            matrix.scaleSelf(pattern.scaleX || 1, pattern.scaleY || 1);
            canvasPattern.setTransform(matrix);
        }
        return canvasPattern;
    }
}
function $e976df33d140e34a$var$brushPath(ctx, el, style, inBatch) {
    var _a;
    var hasStroke = $e976df33d140e34a$var$styleHasStroke(style);
    var hasFill = $e976df33d140e34a$var$styleHasFill(style);
    var strokePercent = style.strokePercent;
    var strokePart = strokePercent < 1;
    var firstDraw = !el.path;
    if ((!el.silent || strokePart) && firstDraw) el.createPathProxy();
    var path = el.path || $e976df33d140e34a$var$pathProxyForDraw;
    var dirtyFlag = el.__dirty;
    if (!inBatch) {
        var fill = style.fill;
        var stroke = style.stroke;
        var hasFillGradient = hasFill && !!fill.colorStops;
        var hasStrokeGradient = hasStroke && !!stroke.colorStops;
        var hasFillPattern = hasFill && !!fill.image;
        var hasStrokePattern = hasStroke && !!stroke.image;
        var fillGradient = void 0;
        var strokeGradient = void 0;
        var fillPattern = void 0;
        var strokePattern = void 0;
        var rect = void 0;
        if (hasFillGradient || hasStrokeGradient) rect = el.getBoundingRect();
        if (hasFillGradient) {
            fillGradient = dirtyFlag ? (0, $c642d8e6805d7bb5$export$3dab6afd018d48c7)(ctx, fill, rect) : el.__canvasFillGradient;
            el.__canvasFillGradient = fillGradient;
        }
        if (hasStrokeGradient) {
            strokeGradient = dirtyFlag ? (0, $c642d8e6805d7bb5$export$3dab6afd018d48c7)(ctx, stroke, rect) : el.__canvasStrokeGradient;
            el.__canvasStrokeGradient = strokeGradient;
        }
        if (hasFillPattern) {
            fillPattern = dirtyFlag || !el.__canvasFillPattern ? $e976df33d140e34a$export$8eb5db6b7bc27903(ctx, fill, el) : el.__canvasFillPattern;
            el.__canvasFillPattern = fillPattern;
        }
        if (hasStrokePattern) {
            strokePattern = dirtyFlag || !el.__canvasStrokePattern ? $e976df33d140e34a$export$8eb5db6b7bc27903(ctx, stroke, el) : el.__canvasStrokePattern;
            el.__canvasStrokePattern = fillPattern;
        }
        if (hasFillGradient) ctx.fillStyle = fillGradient;
        else if (hasFillPattern) {
            if (fillPattern) ctx.fillStyle = fillPattern;
            else hasFill = false;
        }
        if (hasStrokeGradient) ctx.strokeStyle = strokeGradient;
        else if (hasStrokePattern) {
            if (strokePattern) ctx.strokeStyle = strokePattern;
            else hasStroke = false;
        }
    }
    var scale = el.getGlobalScale();
    path.setScale(scale[0], scale[1], el.segmentIgnoreThreshold);
    var lineDash;
    var lineDashOffset;
    if (ctx.setLineDash && style.lineDash) _a = (0, $14ddf9b3bb864105$export$9d315911f153b3b2)(el), lineDash = _a[0], lineDashOffset = _a[1];
    var needsRebuild = true;
    if (firstDraw || dirtyFlag & (0, $b870c418b8d2135e$export$f75fe89a33ebe115)) {
        path.setDPR(ctx.dpr);
        if (strokePart) path.setContext(null);
        else {
            path.setContext(ctx);
            needsRebuild = false;
        }
        path.reset();
        el.buildPath(path, el.shape, inBatch);
        path.toStatic();
        el.pathUpdated();
    }
    if (needsRebuild) path.rebuildPath(ctx, strokePart ? strokePercent : 1);
    if (lineDash) {
        ctx.setLineDash(lineDash);
        ctx.lineDashOffset = lineDashOffset;
    }
    if (!inBatch) {
        if (style.strokeFirst) {
            if (hasStroke) $e976df33d140e34a$var$doStrokePath(ctx, style);
            if (hasFill) $e976df33d140e34a$var$doFillPath(ctx, style);
        } else {
            if (hasFill) $e976df33d140e34a$var$doFillPath(ctx, style);
            if (hasStroke) $e976df33d140e34a$var$doStrokePath(ctx, style);
        }
    }
    if (lineDash) ctx.setLineDash([]);
}
function $e976df33d140e34a$var$brushImage(ctx, el, style) {
    var image = el.__image = (0, $f816ee77c6c298e8$export$46c791b69ff9a0f)(style.image, el.__image, el, el.onload);
    if (!image || !(0, $f816ee77c6c298e8$export$37ca7dd901d0236d)(image)) return;
    var x = style.x || 0;
    var y = style.y || 0;
    var width = el.getWidth();
    var height = el.getHeight();
    var aspect = image.width / image.height;
    if (width == null && height != null) width = height * aspect;
    else if (height == null && width != null) height = width / aspect;
    else if (width == null && height == null) {
        width = image.width;
        height = image.height;
    }
    if (style.sWidth && style.sHeight) {
        var sx = style.sx || 0;
        var sy = style.sy || 0;
        ctx.drawImage(image, sx, sy, style.sWidth, style.sHeight, x, y, width, height);
    } else if (style.sx && style.sy) {
        var sx = style.sx;
        var sy = style.sy;
        var sWidth = width - sx;
        var sHeight = height - sy;
        ctx.drawImage(image, sx, sy, sWidth, sHeight, x, y, width, height);
    } else ctx.drawImage(image, x, y, width, height);
}
function $e976df33d140e34a$var$brushText(ctx, el, style) {
    var _a;
    var text = style.text;
    text != null && (text += "");
    if (text) {
        ctx.font = style.font || (0, $c7ef4e2442c05203$export$7d7a232b6d2cc80c);
        ctx.textAlign = style.textAlign;
        ctx.textBaseline = style.textBaseline;
        var lineDash = void 0;
        var lineDashOffset = void 0;
        if (ctx.setLineDash && style.lineDash) _a = (0, $14ddf9b3bb864105$export$9d315911f153b3b2)(el), lineDash = _a[0], lineDashOffset = _a[1];
        if (lineDash) {
            ctx.setLineDash(lineDash);
            ctx.lineDashOffset = lineDashOffset;
        }
        if (style.strokeFirst) {
            if ($e976df33d140e34a$var$styleHasStroke(style)) ctx.strokeText(text, style.x, style.y);
            if ($e976df33d140e34a$var$styleHasFill(style)) ctx.fillText(text, style.x, style.y);
        } else {
            if ($e976df33d140e34a$var$styleHasFill(style)) ctx.fillText(text, style.x, style.y);
            if ($e976df33d140e34a$var$styleHasStroke(style)) ctx.strokeText(text, style.x, style.y);
        }
        if (lineDash) ctx.setLineDash([]);
    }
}
var $e976df33d140e34a$var$SHADOW_NUMBER_PROPS = [
    "shadowBlur",
    "shadowOffsetX",
    "shadowOffsetY"
];
var $e976df33d140e34a$var$STROKE_PROPS = [
    [
        "lineCap",
        "butt"
    ],
    [
        "lineJoin",
        "miter"
    ],
    [
        "miterLimit",
        10
    ]
];
function $e976df33d140e34a$var$bindCommonProps(ctx, style, prevStyle, forceSetAll, scope) {
    var styleChanged = false;
    if (!forceSetAll) {
        prevStyle = prevStyle || {};
        if (style === prevStyle) return false;
    }
    if (forceSetAll || style.opacity !== prevStyle.opacity) {
        $e976df33d140e34a$var$flushPathDrawn(ctx, scope);
        styleChanged = true;
        var opacity = Math.max(Math.min(style.opacity, 1), 0);
        ctx.globalAlpha = isNaN(opacity) ? (0, $42aae97fd255cbd2$export$737672163db00fe3).opacity : opacity;
    }
    if (forceSetAll || style.blend !== prevStyle.blend) {
        if (!styleChanged) {
            $e976df33d140e34a$var$flushPathDrawn(ctx, scope);
            styleChanged = true;
        }
        ctx.globalCompositeOperation = style.blend || (0, $42aae97fd255cbd2$export$737672163db00fe3).blend;
    }
    for(var i = 0; i < $e976df33d140e34a$var$SHADOW_NUMBER_PROPS.length; i++){
        var propName = $e976df33d140e34a$var$SHADOW_NUMBER_PROPS[i];
        if (forceSetAll || style[propName] !== prevStyle[propName]) {
            if (!styleChanged) {
                $e976df33d140e34a$var$flushPathDrawn(ctx, scope);
                styleChanged = true;
            }
            ctx[propName] = ctx.dpr * (style[propName] || 0);
        }
    }
    if (forceSetAll || style.shadowColor !== prevStyle.shadowColor) {
        if (!styleChanged) {
            $e976df33d140e34a$var$flushPathDrawn(ctx, scope);
            styleChanged = true;
        }
        ctx.shadowColor = style.shadowColor || (0, $42aae97fd255cbd2$export$737672163db00fe3).shadowColor;
    }
    return styleChanged;
}
function $e976df33d140e34a$var$bindPathAndTextCommonStyle(ctx, el, prevEl, forceSetAll, scope) {
    var style = $e976df33d140e34a$var$getStyle(el, scope.inHover);
    var prevStyle = forceSetAll ? null : prevEl && $e976df33d140e34a$var$getStyle(prevEl, scope.inHover) || {};
    if (style === prevStyle) return false;
    var styleChanged = $e976df33d140e34a$var$bindCommonProps(ctx, style, prevStyle, forceSetAll, scope);
    if (forceSetAll || style.fill !== prevStyle.fill) {
        if (!styleChanged) {
            $e976df33d140e34a$var$flushPathDrawn(ctx, scope);
            styleChanged = true;
        }
        $e976df33d140e34a$var$isValidStrokeFillStyle(style.fill) && (ctx.fillStyle = style.fill);
    }
    if (forceSetAll || style.stroke !== prevStyle.stroke) {
        if (!styleChanged) {
            $e976df33d140e34a$var$flushPathDrawn(ctx, scope);
            styleChanged = true;
        }
        $e976df33d140e34a$var$isValidStrokeFillStyle(style.stroke) && (ctx.strokeStyle = style.stroke);
    }
    if (forceSetAll || style.opacity !== prevStyle.opacity) {
        if (!styleChanged) {
            $e976df33d140e34a$var$flushPathDrawn(ctx, scope);
            styleChanged = true;
        }
        ctx.globalAlpha = style.opacity == null ? 1 : style.opacity;
    }
    if (el.hasStroke()) {
        var lineWidth = style.lineWidth;
        var newLineWidth = lineWidth / (style.strokeNoScale && el.getLineScale ? el.getLineScale() : 1);
        if (ctx.lineWidth !== newLineWidth) {
            if (!styleChanged) {
                $e976df33d140e34a$var$flushPathDrawn(ctx, scope);
                styleChanged = true;
            }
            ctx.lineWidth = newLineWidth;
        }
    }
    for(var i = 0; i < $e976df33d140e34a$var$STROKE_PROPS.length; i++){
        var prop = $e976df33d140e34a$var$STROKE_PROPS[i];
        var propName = prop[0];
        if (forceSetAll || style[propName] !== prevStyle[propName]) {
            if (!styleChanged) {
                $e976df33d140e34a$var$flushPathDrawn(ctx, scope);
                styleChanged = true;
            }
            ctx[propName] = style[propName] || prop[1];
        }
    }
    return styleChanged;
}
function $e976df33d140e34a$var$bindImageStyle(ctx, el, prevEl, forceSetAll, scope) {
    return $e976df33d140e34a$var$bindCommonProps(ctx, $e976df33d140e34a$var$getStyle(el, scope.inHover), prevEl && $e976df33d140e34a$var$getStyle(prevEl, scope.inHover), forceSetAll, scope);
}
function $e976df33d140e34a$var$setContextTransform(ctx, el) {
    var m = el.transform;
    var dpr = ctx.dpr || 1;
    if (m) ctx.setTransform(dpr * m[0], dpr * m[1], dpr * m[2], dpr * m[3], dpr * m[4], dpr * m[5]);
    else ctx.setTransform(dpr, 0, 0, dpr, 0, 0);
}
function $e976df33d140e34a$var$updateClipStatus(clipPaths, ctx, scope) {
    var allClipped = false;
    for(var i = 0; i < clipPaths.length; i++){
        var clipPath = clipPaths[i];
        allClipped = allClipped || clipPath.isZeroArea();
        $e976df33d140e34a$var$setContextTransform(ctx, clipPath);
        ctx.beginPath();
        clipPath.buildPath(ctx, clipPath.shape);
        ctx.clip();
    }
    scope.allClipped = allClipped;
}
function $e976df33d140e34a$var$isTransformChanged(m0, m1) {
    if (m0 && m1) return m0[0] !== m1[0] || m0[1] !== m1[1] || m0[2] !== m1[2] || m0[3] !== m1[3] || m0[4] !== m1[4] || m0[5] !== m1[5];
    else if (!m0 && !m1) return false;
    return true;
}
var $e976df33d140e34a$var$DRAW_TYPE_PATH = 1;
var $e976df33d140e34a$var$DRAW_TYPE_IMAGE = 2;
var $e976df33d140e34a$var$DRAW_TYPE_TEXT = 3;
var $e976df33d140e34a$var$DRAW_TYPE_INCREMENTAL = 4;
function $e976df33d140e34a$var$canPathBatch(style) {
    var hasFill = $e976df33d140e34a$var$styleHasFill(style);
    var hasStroke = $e976df33d140e34a$var$styleHasStroke(style);
    return !(style.lineDash || !(+hasFill ^ +hasStroke) || hasFill && typeof style.fill !== "string" || hasStroke && typeof style.stroke !== "string" || style.strokePercent < 1 || style.strokeOpacity < 1 || style.fillOpacity < 1);
}
function $e976df33d140e34a$var$flushPathDrawn(ctx, scope) {
    scope.batchFill && ctx.fill();
    scope.batchStroke && ctx.stroke();
    scope.batchFill = "";
    scope.batchStroke = "";
}
function $e976df33d140e34a$var$getStyle(el, inHover) {
    return inHover ? el.__hoverStyle || el.style : el.style;
}
function $e976df33d140e34a$export$567881adfc3eb7f3(ctx, el) {
    $e976df33d140e34a$export$da5d6544e8c27bc1(ctx, el, {
        inHover: false,
        viewWidth: 0,
        viewHeight: 0
    }, true);
}
function $e976df33d140e34a$export$da5d6544e8c27bc1(ctx, el, scope, isLast) {
    var m = el.transform;
    if (!el.shouldBePainted(scope.viewWidth, scope.viewHeight, false, false)) {
        el.__dirty &= ~(0, $b870c418b8d2135e$export$a7b6db622c6c7dbd);
        el.__isRendered = false;
        return;
    }
    var clipPaths = el.__clipPaths;
    var prevElClipPaths = scope.prevElClipPaths;
    var forceSetTransform = false;
    var forceSetStyle = false;
    if (!prevElClipPaths || (0, $c642d8e6805d7bb5$export$beeddc5150cb2e83)(clipPaths, prevElClipPaths)) {
        if (prevElClipPaths && prevElClipPaths.length) {
            $e976df33d140e34a$var$flushPathDrawn(ctx, scope);
            ctx.restore();
            forceSetStyle = forceSetTransform = true;
            scope.prevElClipPaths = null;
            scope.allClipped = false;
            scope.prevEl = null;
        }
        if (clipPaths && clipPaths.length) {
            $e976df33d140e34a$var$flushPathDrawn(ctx, scope);
            ctx.save();
            $e976df33d140e34a$var$updateClipStatus(clipPaths, ctx, scope);
            forceSetTransform = true;
        }
        scope.prevElClipPaths = clipPaths;
    }
    if (scope.allClipped) {
        el.__isRendered = false;
        return;
    }
    el.beforeBrush && el.beforeBrush();
    el.innerBeforeBrush();
    var prevEl = scope.prevEl;
    if (!prevEl) forceSetStyle = forceSetTransform = true;
    var canBatchPath = el instanceof (0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039) && el.autoBatch && $e976df33d140e34a$var$canPathBatch(el.style);
    if (forceSetTransform || $e976df33d140e34a$var$isTransformChanged(m, prevEl.transform)) {
        $e976df33d140e34a$var$flushPathDrawn(ctx, scope);
        $e976df33d140e34a$var$setContextTransform(ctx, el);
    } else if (!canBatchPath) $e976df33d140e34a$var$flushPathDrawn(ctx, scope);
    var style = $e976df33d140e34a$var$getStyle(el, scope.inHover);
    if (el instanceof (0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039)) {
        if (scope.lastDrawType !== $e976df33d140e34a$var$DRAW_TYPE_PATH) {
            forceSetStyle = true;
            scope.lastDrawType = $e976df33d140e34a$var$DRAW_TYPE_PATH;
        }
        $e976df33d140e34a$var$bindPathAndTextCommonStyle(ctx, el, prevEl, forceSetStyle, scope);
        if (!canBatchPath || !scope.batchFill && !scope.batchStroke) ctx.beginPath();
        $e976df33d140e34a$var$brushPath(ctx, el, style, canBatchPath);
        if (canBatchPath) {
            scope.batchFill = style.fill || "";
            scope.batchStroke = style.stroke || "";
        }
    } else {
        if (el instanceof (0, $80ac97d0df21d0b5$export$2e2bcd8739ae039)) {
            if (scope.lastDrawType !== $e976df33d140e34a$var$DRAW_TYPE_TEXT) {
                forceSetStyle = true;
                scope.lastDrawType = $e976df33d140e34a$var$DRAW_TYPE_TEXT;
            }
            $e976df33d140e34a$var$bindPathAndTextCommonStyle(ctx, el, prevEl, forceSetStyle, scope);
            $e976df33d140e34a$var$brushText(ctx, el, style);
        } else if (el instanceof (0, $7fb187ddd76ee1dc$export$2e2bcd8739ae039)) {
            if (scope.lastDrawType !== $e976df33d140e34a$var$DRAW_TYPE_IMAGE) {
                forceSetStyle = true;
                scope.lastDrawType = $e976df33d140e34a$var$DRAW_TYPE_IMAGE;
            }
            $e976df33d140e34a$var$bindImageStyle(ctx, el, prevEl, forceSetStyle, scope);
            $e976df33d140e34a$var$brushImage(ctx, el, style);
        } else if (el.getTemporalDisplayables) {
            if (scope.lastDrawType !== $e976df33d140e34a$var$DRAW_TYPE_INCREMENTAL) {
                forceSetStyle = true;
                scope.lastDrawType = $e976df33d140e34a$var$DRAW_TYPE_INCREMENTAL;
            }
            $e976df33d140e34a$var$brushIncremental(ctx, el, scope);
        }
    }
    if (canBatchPath && isLast) $e976df33d140e34a$var$flushPathDrawn(ctx, scope);
    el.innerAfterBrush();
    el.afterBrush && el.afterBrush();
    scope.prevEl = el;
    el.__dirty = 0;
    el.__isRendered = true;
}
function $e976df33d140e34a$var$brushIncremental(ctx, el, scope) {
    var displayables = el.getDisplayables();
    var temporalDisplayables = el.getTemporalDisplayables();
    ctx.save();
    var innerScope = {
        prevElClipPaths: null,
        prevEl: null,
        allClipped: false,
        viewWidth: scope.viewWidth,
        viewHeight: scope.viewHeight,
        inHover: scope.inHover
    };
    var i;
    var len;
    for(i = el.getCursor(), len = displayables.length; i < len; i++){
        var displayable = displayables[i];
        displayable.beforeBrush && displayable.beforeBrush();
        displayable.innerBeforeBrush();
        $e976df33d140e34a$export$da5d6544e8c27bc1(ctx, displayable, innerScope, i === len - 1);
        displayable.innerAfterBrush();
        displayable.afterBrush && displayable.afterBrush();
        innerScope.prevEl = displayable;
    }
    for(var i_1 = 0, len_1 = temporalDisplayables.length; i_1 < len_1; i_1++){
        var displayable = temporalDisplayables[i_1];
        displayable.beforeBrush && displayable.beforeBrush();
        displayable.innerBeforeBrush();
        $e976df33d140e34a$export$da5d6544e8c27bc1(ctx, displayable, innerScope, i_1 === len_1 - 1);
        displayable.innerAfterBrush();
        displayable.afterBrush && displayable.afterBrush();
        innerScope.prevEl = displayable;
    }
    el.clearTemporalDisplayables();
    el.notClear = true;
    ctx.restore();
}



var $0823d6350507a307$var$decalMap = new (0, $f2ec345ef41be692$export$2e2bcd8739ae039)();
var $0823d6350507a307$var$decalCache = new (0, $46a227aab1eccb53$export$2e2bcd8739ae039)(100);
var $0823d6350507a307$var$decalKeys = [
    "symbol",
    "symbolSize",
    "symbolKeepAspect",
    "color",
    "backgroundColor",
    "dashArrayX",
    "dashArrayY",
    "maxTileWidth",
    "maxTileHeight"
];
function $0823d6350507a307$export$a3ba048e1a648972(decalObject, api) {
    if (decalObject === "none") return null;
    var dpr = api.getDevicePixelRatio();
    var zr = api.getZr();
    var isSVG = zr.painter.type === "svg";
    if (decalObject.dirty) $0823d6350507a307$var$decalMap["delete"](decalObject);
    var oldPattern = $0823d6350507a307$var$decalMap.get(decalObject);
    if (oldPattern) return oldPattern;
    var decalOpt = (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)(decalObject, {
        symbol: "rect",
        symbolSize: 1,
        symbolKeepAspect: true,
        color: "rgba(0, 0, 0, 0.2)",
        backgroundColor: null,
        dashArrayX: 5,
        dashArrayY: 5,
        rotation: 0,
        maxTileWidth: 512,
        maxTileHeight: 512
    });
    if (decalOpt.backgroundColor === "none") decalOpt.backgroundColor = null;
    var pattern = {
        repeat: "repeat"
    };
    setPatternnSource(pattern);
    pattern.rotation = decalOpt.rotation;
    pattern.scaleX = pattern.scaleY = isSVG ? 1 : 1 / dpr;
    $0823d6350507a307$var$decalMap.set(decalObject, pattern);
    decalObject.dirty = false;
    return pattern;
    function setPatternnSource(pattern) {
        var keys = [
            dpr
        ];
        var isValidKey = true;
        for(var i = 0; i < $0823d6350507a307$var$decalKeys.length; ++i){
            var value = decalOpt[$0823d6350507a307$var$decalKeys[i]];
            if (value != null && !(0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(value) && !(0, $e44eb14c4271d0f9$export$844ec244b1367d54)(value) && !(0, $e44eb14c4271d0f9$export$7e4aa119212bc614)(value) && typeof value !== "boolean") {
                isValidKey = false;
                break;
            }
            keys.push(value);
        }
        var cacheKey;
        if (isValidKey) {
            cacheKey = keys.join(",") + (isSVG ? "-svg" : "");
            var cache = $0823d6350507a307$var$decalCache.get(cacheKey);
            if (cache) isSVG ? pattern.svgElement = cache : pattern.image = cache;
        }
        var dashArrayX = $0823d6350507a307$var$normalizeDashArrayX(decalOpt.dashArrayX);
        var dashArrayY = $0823d6350507a307$var$normalizeDashArrayY(decalOpt.dashArrayY);
        var symbolArray = $0823d6350507a307$var$normalizeSymbolArray(decalOpt.symbol);
        var lineBlockLengthsX = $0823d6350507a307$var$getLineBlockLengthX(dashArrayX);
        var lineBlockLengthY = $0823d6350507a307$var$getLineBlockLengthY(dashArrayY);
        var canvas = !isSVG && (0, $c7ef4e2442c05203$export$ef5e599365494451).createCanvas();
        var svgRoot = isSVG && {
            tag: "g",
            attrs: {},
            key: "dcl",
            children: []
        };
        var pSize = getPatternSize();
        var ctx;
        if (canvas) {
            canvas.width = pSize.width * dpr;
            canvas.height = pSize.height * dpr;
            ctx = canvas.getContext("2d");
        }
        brushDecal();
        if (isValidKey) $0823d6350507a307$var$decalCache.put(cacheKey, canvas || svgRoot);
        pattern.image = canvas;
        pattern.svgElement = svgRoot;
        pattern.svgWidth = pSize.width;
        pattern.svgHeight = pSize.height;
        /**
     * Get minimum length that can make a repeatable pattern.
     *
     * @return {Object} pattern width and height
     */ function getPatternSize() {
            /**
       * For example, if dash is [[3, 2], [2, 1]] for X, it looks like
       * |---  ---  ---  ---  --- ...
       * |-- -- -- -- -- -- -- -- ...
       * |---  ---  ---  ---  --- ...
       * |-- -- -- -- -- -- -- -- ...
       * So the minimum length of X is 15,
       * which is the least common multiple of `3 + 2` and `2 + 1`
       * |---  ---  ---  |---  --- ...
       * |-- -- -- -- -- |-- -- -- ...
       */ var width = 1;
            for(var i = 0, xlen = lineBlockLengthsX.length; i < xlen; ++i)width = (0, $13e6a1a716300dd4$export$680a45b749323f49)(width, lineBlockLengthsX[i]);
            var symbolRepeats = 1;
            for(var i = 0, xlen = symbolArray.length; i < xlen; ++i)symbolRepeats = (0, $13e6a1a716300dd4$export$680a45b749323f49)(symbolRepeats, symbolArray[i].length);
            width *= symbolRepeats;
            var height = lineBlockLengthY * lineBlockLengthsX.length * symbolArray.length;
            var warn = function(attrName) {
                /* eslint-disable-next-line */ console.warn("Calculated decal size is greater than " + attrName + " due to decal option settings so " + attrName + " is used for the decal size. Please consider changing the decal option to make a smaller decal or set " + attrName + " to be larger to avoid incontinuity.");
            };
            if (width > decalOpt.maxTileWidth) warn("maxTileWidth");
            if (height > decalOpt.maxTileHeight) warn("maxTileHeight");
            return {
                width: Math.max(1, Math.min(width, decalOpt.maxTileWidth)),
                height: Math.max(1, Math.min(height, decalOpt.maxTileHeight))
            };
        }
        function brushDecal() {
            if (ctx) {
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                if (decalOpt.backgroundColor) {
                    ctx.fillStyle = decalOpt.backgroundColor;
                    ctx.fillRect(0, 0, canvas.width, canvas.height);
                }
            }
            var ySum = 0;
            for(var i = 0; i < dashArrayY.length; ++i)ySum += dashArrayY[i];
            if (ySum <= 0) // dashArrayY is 0, draw nothing
            return;
            var y = -lineBlockLengthY;
            var yId = 0;
            var yIdTotal = 0;
            var xId0 = 0;
            while(y < pSize.height){
                if (yId % 2 === 0) {
                    var symbolYId = yIdTotal / 2 % symbolArray.length;
                    var x = 0;
                    var xId1 = 0;
                    var xId1Total = 0;
                    while(x < pSize.width * 2){
                        var xSum = 0;
                        for(var i = 0; i < dashArrayX[xId0].length; ++i)xSum += dashArrayX[xId0][i];
                        if (xSum <= 0) break;
                        // E.g., [15, 5, 20, 5] draws only for 15 and 20
                        if (xId1 % 2 === 0) {
                            var size = (1 - decalOpt.symbolSize) * 0.5;
                            var left = x + dashArrayX[xId0][xId1] * size;
                            var top_1 = y + dashArrayY[yId] * size;
                            var width = dashArrayX[xId0][xId1] * decalOpt.symbolSize;
                            var height = dashArrayY[yId] * decalOpt.symbolSize;
                            var symbolXId = xId1Total / 2 % symbolArray[symbolYId].length;
                            brushSymbol(left, top_1, width, height, symbolArray[symbolYId][symbolXId]);
                        }
                        x += dashArrayX[xId0][xId1];
                        ++xId1Total;
                        ++xId1;
                        if (xId1 === dashArrayX[xId0].length) xId1 = 0;
                    }
                    ++xId0;
                    if (xId0 === dashArrayX.length) xId0 = 0;
                }
                y += dashArrayY[yId];
                ++yIdTotal;
                ++yId;
                if (yId === dashArrayY.length) yId = 0;
            }
            function brushSymbol(x, y, width, height, symbolType) {
                var scale = isSVG ? 1 : dpr;
                var symbol = (0, $f918b475beb849b6$export$af050e04da3a02e8)(symbolType, x * scale, y * scale, width * scale, height * scale, decalOpt.color, decalOpt.symbolKeepAspect);
                if (isSVG) {
                    var symbolVNode = zr.painter.renderOneToVNode(symbol);
                    if (symbolVNode) svgRoot.children.push(symbolVNode);
                } else // Paint to canvas for all other renderers.
                (0, $e976df33d140e34a$export$567881adfc3eb7f3)(ctx, symbol);
            }
        }
    }
}
/**
 * Convert symbol array into normalized array
 *
 * @param {string | (string | string[])[]} symbol symbol input
 * @return {string[][]} normolized symbol array
 */ function $0823d6350507a307$var$normalizeSymbolArray(symbol) {
    if (!symbol || symbol.length === 0) return [
        [
            "rect"
        ]
    ];
    if ((0, $e44eb14c4271d0f9$export$844ec244b1367d54)(symbol)) return [
        [
            symbol
        ]
    ];
    var isAllString = true;
    for(var i = 0; i < symbol.length; ++i)if (!(0, $e44eb14c4271d0f9$export$844ec244b1367d54)(symbol[i])) {
        isAllString = false;
        break;
    }
    if (isAllString) return $0823d6350507a307$var$normalizeSymbolArray([
        symbol
    ]);
    var result = [];
    for(var i = 0; i < symbol.length; ++i)if ((0, $e44eb14c4271d0f9$export$844ec244b1367d54)(symbol[i])) result.push([
        symbol[i]
    ]);
    else result.push(symbol[i]);
    return result;
}
/**
 * Convert dash input into dashArray
 *
 * @param {DecalDashArrayX} dash dash input
 * @return {number[][]} normolized dash array
 */ function $0823d6350507a307$var$normalizeDashArrayX(dash) {
    if (!dash || dash.length === 0) return [
        [
            0,
            0
        ]
    ];
    if ((0, $e44eb14c4271d0f9$export$7e4aa119212bc614)(dash)) {
        var dashValue = Math.ceil(dash);
        return [
            [
                dashValue,
                dashValue
            ]
        ];
    }
    /**
   * [20, 5] should be normalized into [[20, 5]],
   * while [20, [5, 10]] should be normalized into [[20, 20], [5, 10]]
   */ var isAllNumber = true;
    for(var i = 0; i < dash.length; ++i)if (!(0, $e44eb14c4271d0f9$export$7e4aa119212bc614)(dash[i])) {
        isAllNumber = false;
        break;
    }
    if (isAllNumber) return $0823d6350507a307$var$normalizeDashArrayX([
        dash
    ]);
    var result = [];
    for(var i = 0; i < dash.length; ++i)if ((0, $e44eb14c4271d0f9$export$7e4aa119212bc614)(dash[i])) {
        var dashValue = Math.ceil(dash[i]);
        result.push([
            dashValue,
            dashValue
        ]);
    } else {
        var dashValue = (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(dash[i], function(n) {
            return Math.ceil(n);
        });
        if (dashValue.length % 2 === 1) // [4, 2, 1] means |----  -    -- |----  -    -- |
        // so normalize it to be [4, 2, 1, 4, 2, 1]
        result.push(dashValue.concat(dashValue));
        else result.push(dashValue);
    }
    return result;
}
/**
 * Convert dash input into dashArray
 *
 * @param {DecalDashArrayY} dash dash input
 * @return {number[]} normolized dash array
 */ function $0823d6350507a307$var$normalizeDashArrayY(dash) {
    if (!dash || typeof dash === "object" && dash.length === 0) return [
        0,
        0
    ];
    if ((0, $e44eb14c4271d0f9$export$7e4aa119212bc614)(dash)) {
        var dashValue_1 = Math.ceil(dash);
        return [
            dashValue_1,
            dashValue_1
        ];
    }
    var dashValue = (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(dash, function(n) {
        return Math.ceil(n);
    });
    return dash.length % 2 ? dashValue.concat(dashValue) : dashValue;
}
/**
 * Get block length of each line. A block is the length of dash line and space.
 * For example, a line with [4, 1] has a dash line of 4 and a space of 1 after
 * that, so the block length of this line is 5.
 *
 * @param {number[][]} dash dash array of X or Y
 * @return {number[]} block length of each line
 */ function $0823d6350507a307$var$getLineBlockLengthX(dash) {
    return (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(dash, function(line) {
        return $0823d6350507a307$var$getLineBlockLengthY(line);
    });
}
function $0823d6350507a307$var$getLineBlockLengthY(dash) {
    var blockLength = 0;
    for(var i = 0; i < dash.length; ++i)blockLength += dash[i];
    if (dash.length % 2 === 1) // [4, 2, 1] means |----  -    -- |----  -    -- |
    // So total length is (4 + 2 + 1) * 2
    return blockLength * 2;
    return blockLength;
}


function $8cd3e5668907de87$export$2e2bcd8739ae039(ecModel, api) {
    ecModel.eachRawSeries(function(seriesModel) {
        if (ecModel.isSeriesFiltered(seriesModel)) return;
        var data = seriesModel.getData();
        if (data.hasItemVisual()) data.each(function(idx) {
            var decal = data.getItemVisual(idx, "decal");
            if (decal) {
                var itemStyle = data.ensureUniqueItemVisual(idx, "style");
                itemStyle.decal = (0, $0823d6350507a307$export$a3ba048e1a648972)(decal, api);
            }
        });
        var decal = data.getVisual("decal");
        if (decal) {
            var style = data.getVisual("style");
            style.decal = (0, $0823d6350507a307$export$a3ba048e1a648972)(decal, api);
        }
    });
}


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
var $e416c5bf08b74799$var$lifecycle = new (0, $a2a21788c772d0fe$export$2e2bcd8739ae039)();
var $e416c5bf08b74799$export$2e2bcd8739ae039 = $e416c5bf08b74799$var$lifecycle;



/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
// Implementation of exported APIs. For example registerMap, getMap.
// The implementations will be registered when installing the component.
// Avoid these code being bundled to the core module.
var $afa1d4c38c26c33d$var$implsStore = {};
function $afa1d4c38c26c33d$export$9b808fd12256ddd3(name, impl) {
    if ($afa1d4c38c26c33d$var$implsStore[name]) (0, $4796c55e8b767685$export$a3bc9b8ed74fc)("Already has an implementation of " + name + ".");
    $afa1d4c38c26c33d$var$implsStore[name] = impl;
}
function $afa1d4c38c26c33d$export$73333eb8a09d5f61(name) {
    if (!$afa1d4c38c26c33d$var$implsStore[name]) (0, $4796c55e8b767685$export$a3bc9b8ed74fc)("Implementation of " + name + " doesn't exists.");
    return $afa1d4c38c26c33d$var$implsStore[name];
}


var $5f4351e0b7aaad84$export$83d89fbfd8236492 = "5.5.0";
var $5f4351e0b7aaad84$export$b74ff737e0e298b5 = {
    zrender: "5.5.0"
};
var $5f4351e0b7aaad84$var$TEST_FRAME_REMAIN_TIME = 1;
var $5f4351e0b7aaad84$var$PRIORITY_PROCESSOR_SERIES_FILTER = 800;
// Some data processors depends on the stack result dimension (to calculate data extent).
// So data stack stage should be in front of data processing stage.
var $5f4351e0b7aaad84$var$PRIORITY_PROCESSOR_DATASTACK = 900;
// "Data filter" will block the stream, so it should be
// put at the beginning of data processing.
var $5f4351e0b7aaad84$var$PRIORITY_PROCESSOR_FILTER = 1000;
var $5f4351e0b7aaad84$var$PRIORITY_PROCESSOR_DEFAULT = 2000;
var $5f4351e0b7aaad84$var$PRIORITY_PROCESSOR_STATISTIC = 5000;
var $5f4351e0b7aaad84$var$PRIORITY_VISUAL_LAYOUT = 1000;
var $5f4351e0b7aaad84$var$PRIORITY_VISUAL_PROGRESSIVE_LAYOUT = 1100;
var $5f4351e0b7aaad84$var$PRIORITY_VISUAL_GLOBAL = 2000;
var $5f4351e0b7aaad84$var$PRIORITY_VISUAL_CHART = 3000;
var $5f4351e0b7aaad84$var$PRIORITY_VISUAL_COMPONENT = 4000;
// Visual property in data. Greater than `PRIORITY_VISUAL_COMPONENT` to enable to
// overwrite the viusal result of component (like `visualMap`)
// using data item specific setting (like itemStyle.xxx on data item)
var $5f4351e0b7aaad84$var$PRIORITY_VISUAL_CHART_DATA_CUSTOM = 4500;
// Greater than `PRIORITY_VISUAL_CHART_DATA_CUSTOM` to enable to layout based on
// visual result like `symbolSize`.
var $5f4351e0b7aaad84$var$PRIORITY_VISUAL_POST_CHART_LAYOUT = 4600;
var $5f4351e0b7aaad84$var$PRIORITY_VISUAL_BRUSH = 5000;
var $5f4351e0b7aaad84$var$PRIORITY_VISUAL_ARIA = 6000;
var $5f4351e0b7aaad84$var$PRIORITY_VISUAL_DECAL = 7000;
var $5f4351e0b7aaad84$export$bb34f3538ba26c7e = {
    PROCESSOR: {
        FILTER: $5f4351e0b7aaad84$var$PRIORITY_PROCESSOR_FILTER,
        SERIES_FILTER: $5f4351e0b7aaad84$var$PRIORITY_PROCESSOR_SERIES_FILTER,
        STATISTIC: $5f4351e0b7aaad84$var$PRIORITY_PROCESSOR_STATISTIC
    },
    VISUAL: {
        LAYOUT: $5f4351e0b7aaad84$var$PRIORITY_VISUAL_LAYOUT,
        PROGRESSIVE_LAYOUT: $5f4351e0b7aaad84$var$PRIORITY_VISUAL_PROGRESSIVE_LAYOUT,
        GLOBAL: $5f4351e0b7aaad84$var$PRIORITY_VISUAL_GLOBAL,
        CHART: $5f4351e0b7aaad84$var$PRIORITY_VISUAL_CHART,
        POST_CHART_LAYOUT: $5f4351e0b7aaad84$var$PRIORITY_VISUAL_POST_CHART_LAYOUT,
        COMPONENT: $5f4351e0b7aaad84$var$PRIORITY_VISUAL_COMPONENT,
        BRUSH: $5f4351e0b7aaad84$var$PRIORITY_VISUAL_BRUSH,
        CHART_ITEM: $5f4351e0b7aaad84$var$PRIORITY_VISUAL_CHART_DATA_CUSTOM,
        ARIA: $5f4351e0b7aaad84$var$PRIORITY_VISUAL_ARIA,
        DECAL: $5f4351e0b7aaad84$var$PRIORITY_VISUAL_DECAL
    }
};
// Main process have three entries: `setOption`, `dispatchAction` and `resize`,
// where they must not be invoked nestedly, except the only case: invoke
// dispatchAction with updateMethod "none" in main process.
// This flag is used to carry out this rule.
// All events will be triggered out side main process (i.e. when !this[IN_MAIN_PROCESS]).
var $5f4351e0b7aaad84$var$IN_MAIN_PROCESS_KEY = "__flagInMainProcess";
var $5f4351e0b7aaad84$var$PENDING_UPDATE = "__pendingUpdate";
var $5f4351e0b7aaad84$var$STATUS_NEEDS_UPDATE_KEY = "__needsUpdateStatus";
var $5f4351e0b7aaad84$var$ACTION_REG = /^[a-zA-Z0-9_]+$/;
var $5f4351e0b7aaad84$var$CONNECT_STATUS_KEY = "__connectUpdateStatus";
var $5f4351e0b7aaad84$var$CONNECT_STATUS_PENDING = 0;
var $5f4351e0b7aaad84$var$CONNECT_STATUS_UPDATING = 1;
var $5f4351e0b7aaad84$var$CONNECT_STATUS_UPDATED = 2;
function $5f4351e0b7aaad84$var$createRegisterEventWithLowercaseECharts(method) {
    return function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        if (this.isDisposed()) {
            $5f4351e0b7aaad84$var$disposedWarning(this.id);
            return;
        }
        return $5f4351e0b7aaad84$var$toLowercaseNameAndCallEventful(this, method, args);
    };
}
function $5f4351e0b7aaad84$var$createRegisterEventWithLowercaseMessageCenter(method) {
    return function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        return $5f4351e0b7aaad84$var$toLowercaseNameAndCallEventful(this, method, args);
    };
}
function $5f4351e0b7aaad84$var$toLowercaseNameAndCallEventful(host, method, args) {
    // `args[0]` is event name. Event name is all lowercase.
    args[0] = args[0] && args[0].toLowerCase();
    return (0, $a2a21788c772d0fe$export$2e2bcd8739ae039).prototype[method].apply(host, args);
}
var $5f4351e0b7aaad84$var$MessageCenter = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(MessageCenter, _super);
    function MessageCenter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MessageCenter;
}((0, $a2a21788c772d0fe$export$2e2bcd8739ae039));
var $5f4351e0b7aaad84$var$messageCenterProto = $5f4351e0b7aaad84$var$MessageCenter.prototype;
$5f4351e0b7aaad84$var$messageCenterProto.on = $5f4351e0b7aaad84$var$createRegisterEventWithLowercaseMessageCenter("on");
$5f4351e0b7aaad84$var$messageCenterProto.off = $5f4351e0b7aaad84$var$createRegisterEventWithLowercaseMessageCenter("off");
// ---------------------------------------
// Internal method names for class ECharts
// ---------------------------------------
var $5f4351e0b7aaad84$var$prepare;
var $5f4351e0b7aaad84$var$prepareView;
var $5f4351e0b7aaad84$var$updateDirectly;
var $5f4351e0b7aaad84$var$updateMethods;
var $5f4351e0b7aaad84$var$doConvertPixel;
var $5f4351e0b7aaad84$var$updateStreamModes;
var $5f4351e0b7aaad84$var$doDispatchAction;
var $5f4351e0b7aaad84$var$flushPendingActions;
var $5f4351e0b7aaad84$var$triggerUpdatedEvent;
var $5f4351e0b7aaad84$var$bindRenderedEvent;
var $5f4351e0b7aaad84$var$bindMouseEvent;
var $5f4351e0b7aaad84$var$render;
var $5f4351e0b7aaad84$var$renderComponents;
var $5f4351e0b7aaad84$var$renderSeries;
var $5f4351e0b7aaad84$var$createExtensionAPI;
var $5f4351e0b7aaad84$var$enableConnect;
var $5f4351e0b7aaad84$var$markStatusToUpdate;
var $5f4351e0b7aaad84$var$applyChangedStates;
var $5f4351e0b7aaad84$var$ECharts = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(ECharts, _super);
    function ECharts(dom, // Theme name or themeOption.
    theme, opts) {
        var _this = _super.call(this, new (0, $d72026c60ee2cc64$export$d0fd09f950257b52)()) || this;
        _this._chartsViews = [];
        _this._chartsMap = {};
        _this._componentsViews = [];
        _this._componentsMap = {};
        // Can't dispatch action during rendering procedure
        _this._pendingActions = [];
        opts = opts || {};
        // Get theme by name
        if ((0, $e44eb14c4271d0f9$export$844ec244b1367d54)(theme)) theme = $5f4351e0b7aaad84$var$themeStorage[theme];
        _this._dom = dom;
        var defaultRenderer = "canvas";
        var defaultCoarsePointer = "auto";
        var defaultUseDirtyRect = false;
        var root = /* eslint-disable-next-line */ (0, $de9e931273a116c1$export$2e2bcd8739ae039).hasGlobalWindow ? window : $parcel$global;
        if (root) {
            defaultRenderer = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(root.__ECHARTS__DEFAULT__RENDERER__, defaultRenderer);
            defaultCoarsePointer = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(root.__ECHARTS__DEFAULT__COARSE_POINTER, defaultCoarsePointer);
            defaultUseDirtyRect = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(root.__ECHARTS__DEFAULT__USE_DIRTY_RECT__, defaultUseDirtyRect);
        }
        if (opts.ssr) $2d04db0a24ba5285$export$e7a09d7fe68a4f7(function(el) {
            var ecData = (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(el);
            var dataIndex = ecData.dataIndex;
            if (dataIndex == null) return;
            var hashMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
            hashMap.set("series_index", ecData.seriesIndex);
            hashMap.set("data_index", dataIndex);
            ecData.ssrType && hashMap.set("ssr_type", ecData.ssrType);
            return hashMap;
        });
        var zr = _this._zr = $2d04db0a24ba5285$export$2cd8252107eb640b(dom, {
            renderer: opts.renderer || defaultRenderer,
            devicePixelRatio: opts.devicePixelRatio,
            width: opts.width,
            height: opts.height,
            ssr: opts.ssr,
            useDirtyRect: (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(opts.useDirtyRect, defaultUseDirtyRect),
            useCoarsePointer: (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(opts.useCoarsePointer, defaultCoarsePointer),
            pointerSize: opts.pointerSize
        });
        _this._ssr = opts.ssr;
        // Expect 60 fps.
        _this._throttledZrFlush = (0, $1eadeed02cc6d4a8$export$de363e709c412c8a)((0, $e44eb14c4271d0f9$export$2385a24977818dd0)(zr.flush, zr), 17);
        theme = (0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(theme);
        theme && (0, $5bdb0305cf295442$export$2e2bcd8739ae039)(theme, true);
        _this._theme = theme;
        _this._locale = (0, $f959f4cd6380d6eb$export$ddc371781a6af754)(opts.locale || (0, $f959f4cd6380d6eb$export$9a2147b3808d4c6b));
        _this._coordSysMgr = new (0, $8ac678ded05cd5de$export$2e2bcd8739ae039)();
        var api = _this._api = $5f4351e0b7aaad84$var$createExtensionAPI(_this);
        // Sort on demand
        function prioritySortFunc(a, b) {
            return a.__prio - b.__prio;
        }
        (0, $eba99bd519f945da$export$2e2bcd8739ae039)($5f4351e0b7aaad84$var$visualFuncs, prioritySortFunc);
        (0, $eba99bd519f945da$export$2e2bcd8739ae039)($5f4351e0b7aaad84$var$dataProcessorFuncs, prioritySortFunc);
        _this._scheduler = new (0, $c740c2e679d2bea1$export$2e2bcd8739ae039)(_this, api, $5f4351e0b7aaad84$var$dataProcessorFuncs, $5f4351e0b7aaad84$var$visualFuncs);
        _this._messageCenter = new $5f4351e0b7aaad84$var$MessageCenter();
        // Init mouse events
        _this._initEvents();
        // In case some people write `window.onresize = chart.resize`
        _this.resize = (0, $e44eb14c4271d0f9$export$2385a24977818dd0)(_this.resize, _this);
        zr.animation.on("frame", _this._onframe, _this);
        $5f4351e0b7aaad84$var$bindRenderedEvent(zr, _this);
        $5f4351e0b7aaad84$var$bindMouseEvent(zr, _this);
        // ECharts instance can be used as value.
        (0, $e44eb14c4271d0f9$export$112e66431016387b)(_this);
        return _this;
    }
    ECharts.prototype._onframe = function() {
        if (this._disposed) return;
        $5f4351e0b7aaad84$var$applyChangedStates(this);
        var scheduler = this._scheduler;
        // Lazy update
        if (this[$5f4351e0b7aaad84$var$PENDING_UPDATE]) {
            var silent = this[$5f4351e0b7aaad84$var$PENDING_UPDATE].silent;
            this[$5f4351e0b7aaad84$var$IN_MAIN_PROCESS_KEY] = true;
            try {
                $5f4351e0b7aaad84$var$prepare(this);
                $5f4351e0b7aaad84$var$updateMethods.update.call(this, null, this[$5f4351e0b7aaad84$var$PENDING_UPDATE].updateParams);
            } catch (e) {
                this[$5f4351e0b7aaad84$var$IN_MAIN_PROCESS_KEY] = false;
                this[$5f4351e0b7aaad84$var$PENDING_UPDATE] = null;
                throw e;
            }
            // At present, in each frame, zrender performs:
            //   (1) animation step forward.
            //   (2) trigger('frame') (where this `_onframe` is called)
            //   (3) zrender flush (render).
            // If we do nothing here, since we use `setToFinal: true`, the step (3) above
            // will render the final state of the elements before the real animation started.
            this._zr.flush();
            this[$5f4351e0b7aaad84$var$IN_MAIN_PROCESS_KEY] = false;
            this[$5f4351e0b7aaad84$var$PENDING_UPDATE] = null;
            $5f4351e0b7aaad84$var$flushPendingActions.call(this, silent);
            $5f4351e0b7aaad84$var$triggerUpdatedEvent.call(this, silent);
        } else if (scheduler.unfinished) {
            // Stream progress.
            var remainTime = $5f4351e0b7aaad84$var$TEST_FRAME_REMAIN_TIME;
            var ecModel = this._model;
            var api = this._api;
            scheduler.unfinished = false;
            do {
                var startTime = +new Date();
                scheduler.performSeriesTasks(ecModel);
                // Currently dataProcessorFuncs do not check threshold.
                scheduler.performDataProcessorTasks(ecModel);
                $5f4351e0b7aaad84$var$updateStreamModes(this, ecModel);
                // Do not update coordinate system here. Because that coord system update in
                // each frame is not a good user experience. So we follow the rule that
                // the extent of the coordinate system is determined in the first frame (the
                // frame is executed immediately after task reset.
                // this._coordSysMgr.update(ecModel, api);
                // console.log('--- ec frame visual ---', remainTime);
                scheduler.performVisualTasks(ecModel);
                $5f4351e0b7aaad84$var$renderSeries(this, this._model, api, "remain", {});
                remainTime -= +new Date() - startTime;
            }while (remainTime > 0 && scheduler.unfinished);
            // Call flush explicitly for trigger finished event.
            if (!scheduler.unfinished) this._zr.flush();
        // Else, zr flushing be ensue within the same frame,
        // because zr flushing is after onframe event.
        }
    };
    ECharts.prototype.getDom = function() {
        return this._dom;
    };
    ECharts.prototype.getId = function() {
        return this.id;
    };
    ECharts.prototype.getZr = function() {
        return this._zr;
    };
    ECharts.prototype.isSSR = function() {
        return this._ssr;
    };
    /* eslint-disable-next-line */ ECharts.prototype.setOption = function(option, notMerge, lazyUpdate) {
        if (this[$5f4351e0b7aaad84$var$IN_MAIN_PROCESS_KEY]) {
            (0, $4796c55e8b767685$export$a3bc9b8ed74fc)("`setOption` should not be called during main process.");
            return;
        }
        if (this._disposed) {
            $5f4351e0b7aaad84$var$disposedWarning(this.id);
            return;
        }
        var silent;
        var replaceMerge;
        var transitionOpt;
        if ((0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(notMerge)) {
            lazyUpdate = notMerge.lazyUpdate;
            silent = notMerge.silent;
            replaceMerge = notMerge.replaceMerge;
            transitionOpt = notMerge.transition;
            notMerge = notMerge.notMerge;
        }
        this[$5f4351e0b7aaad84$var$IN_MAIN_PROCESS_KEY] = true;
        if (!this._model || notMerge) {
            var optionManager = new (0, $8f4e8d16f52a38b2$export$2e2bcd8739ae039)(this._api);
            var theme = this._theme;
            var ecModel = this._model = new (0, $c50755d14f3a6f2b$export$2e2bcd8739ae039)();
            ecModel.scheduler = this._scheduler;
            ecModel.ssr = this._ssr;
            ecModel.init(null, null, null, theme, this._locale, optionManager);
        }
        this._model.setOption(option, {
            replaceMerge: replaceMerge
        }, $5f4351e0b7aaad84$var$optionPreprocessorFuncs);
        var updateParams = {
            seriesTransition: transitionOpt,
            optionChanged: true
        };
        if (lazyUpdate) {
            this[$5f4351e0b7aaad84$var$PENDING_UPDATE] = {
                silent: silent,
                updateParams: updateParams
            };
            this[$5f4351e0b7aaad84$var$IN_MAIN_PROCESS_KEY] = false;
            // `setOption(option, {lazyMode: true})` may be called when zrender has been slept.
            // It should wake it up to make sure zrender start to render at the next frame.
            this.getZr().wakeUp();
        } else {
            try {
                $5f4351e0b7aaad84$var$prepare(this);
                $5f4351e0b7aaad84$var$updateMethods.update.call(this, null, updateParams);
            } catch (e) {
                this[$5f4351e0b7aaad84$var$PENDING_UPDATE] = null;
                this[$5f4351e0b7aaad84$var$IN_MAIN_PROCESS_KEY] = false;
                throw e;
            }
            // Ensure zr refresh sychronously, and then pixel in canvas can be
            // fetched after `setOption`.
            if (!this._ssr) // not use flush when using ssr mode.
            this._zr.flush();
            this[$5f4351e0b7aaad84$var$PENDING_UPDATE] = null;
            this[$5f4351e0b7aaad84$var$IN_MAIN_PROCESS_KEY] = false;
            $5f4351e0b7aaad84$var$flushPendingActions.call(this, silent);
            $5f4351e0b7aaad84$var$triggerUpdatedEvent.call(this, silent);
        }
    };
    /**
   * @deprecated
   */ ECharts.prototype.setTheme = function() {
        (0, $4796c55e8b767685$export$4a9c0b74eb885aa1)("ECharts#setTheme() is DEPRECATED in ECharts 3.0");
    };
    // We don't want developers to use getModel directly.
    ECharts.prototype.getModel = function() {
        return this._model;
    };
    ECharts.prototype.getOption = function() {
        return this._model && this._model.getOption();
    };
    ECharts.prototype.getWidth = function() {
        return this._zr.getWidth();
    };
    ECharts.prototype.getHeight = function() {
        return this._zr.getHeight();
    };
    ECharts.prototype.getDevicePixelRatio = function() {
        return this._zr.painter.dpr || (0, $de9e931273a116c1$export$2e2bcd8739ae039).hasGlobalWindow && window.devicePixelRatio || 1;
    };
    /**
   * Get canvas which has all thing rendered
   * @deprecated Use renderToCanvas instead.
   */ ECharts.prototype.getRenderedCanvas = function(opts) {
        (0, $4796c55e8b767685$export$bbd91d66002c4ea6)("getRenderedCanvas", "renderToCanvas");
        return this.renderToCanvas(opts);
    };
    ECharts.prototype.renderToCanvas = function(opts) {
        opts = opts || {};
        var painter = this._zr.painter;
        if (painter.type !== "canvas") throw new Error("renderToCanvas can only be used in the canvas renderer.");
        return painter.getRenderedCanvas({
            backgroundColor: opts.backgroundColor || this._model.get("backgroundColor"),
            pixelRatio: opts.pixelRatio || this.getDevicePixelRatio()
        });
    };
    ECharts.prototype.renderToSVGString = function(opts) {
        opts = opts || {};
        var painter = this._zr.painter;
        if (painter.type !== "svg") throw new Error("renderToSVGString can only be used in the svg renderer.");
        return painter.renderToString({
            useViewBox: opts.useViewBox
        });
    };
    /**
   * Get svg data url
   */ ECharts.prototype.getSvgDataURL = function() {
        if (!(0, $de9e931273a116c1$export$2e2bcd8739ae039).svgSupported) return;
        var zr = this._zr;
        var list = zr.storage.getDisplayList();
        // Stop animations
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(list, function(el) {
            el.stopAnimation(null, true);
        });
        return zr.painter.toDataURL();
    };
    ECharts.prototype.getDataURL = function(opts) {
        if (this._disposed) {
            $5f4351e0b7aaad84$var$disposedWarning(this.id);
            return;
        }
        opts = opts || {};
        var excludeComponents = opts.excludeComponents;
        var ecModel = this._model;
        var excludesComponentViews = [];
        var self = this;
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(excludeComponents, function(componentType) {
            ecModel.eachComponent({
                mainType: componentType
            }, function(component) {
                var view = self._componentsMap[component.__viewId];
                if (!view.group.ignore) {
                    excludesComponentViews.push(view);
                    view.group.ignore = true;
                }
            });
        });
        var url = this._zr.painter.getType() === "svg" ? this.getSvgDataURL() : this.renderToCanvas(opts).toDataURL("image/" + (opts && opts.type || "png"));
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(excludesComponentViews, function(view) {
            view.group.ignore = false;
        });
        return url;
    };
    ECharts.prototype.getConnectedDataURL = function(opts) {
        if (this._disposed) {
            $5f4351e0b7aaad84$var$disposedWarning(this.id);
            return;
        }
        var isSvg = opts.type === "svg";
        var groupId = this.group;
        var mathMin = Math.min;
        var mathMax = Math.max;
        var MAX_NUMBER = Infinity;
        if ($5f4351e0b7aaad84$var$connectedGroups[groupId]) {
            var left_1 = MAX_NUMBER;
            var top_1 = MAX_NUMBER;
            var right_1 = -MAX_NUMBER;
            var bottom_1 = -MAX_NUMBER;
            var canvasList_1 = [];
            var dpr_1 = opts && opts.pixelRatio || this.getDevicePixelRatio();
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)($5f4351e0b7aaad84$var$instances, function(chart, id) {
                if (chart.group === groupId) {
                    var canvas = isSvg ? chart.getZr().painter.getSvgDom().innerHTML : chart.renderToCanvas((0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(opts));
                    var boundingRect = chart.getDom().getBoundingClientRect();
                    left_1 = mathMin(boundingRect.left, left_1);
                    top_1 = mathMin(boundingRect.top, top_1);
                    right_1 = mathMax(boundingRect.right, right_1);
                    bottom_1 = mathMax(boundingRect.bottom, bottom_1);
                    canvasList_1.push({
                        dom: canvas,
                        left: boundingRect.left,
                        top: boundingRect.top
                    });
                }
            });
            left_1 *= dpr_1;
            top_1 *= dpr_1;
            right_1 *= dpr_1;
            bottom_1 *= dpr_1;
            var width = right_1 - left_1;
            var height = bottom_1 - top_1;
            var targetCanvas = (0, $c7ef4e2442c05203$export$ef5e599365494451).createCanvas();
            var zr_1 = $2d04db0a24ba5285$export$2cd8252107eb640b(targetCanvas, {
                renderer: isSvg ? "svg" : "canvas"
            });
            zr_1.resize({
                width: width,
                height: height
            });
            if (isSvg) {
                var content_1 = "";
                (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(canvasList_1, function(item) {
                    var x = item.left - left_1;
                    var y = item.top - top_1;
                    content_1 += '<g transform="translate(' + x + "," + y + ')">' + item.dom + "</g>";
                });
                zr_1.painter.getSvgRoot().innerHTML = content_1;
                if (opts.connectedBackgroundColor) zr_1.painter.setBackgroundColor(opts.connectedBackgroundColor);
                zr_1.refreshImmediately();
                return zr_1.painter.toDataURL();
            } else {
                // Background between the charts
                if (opts.connectedBackgroundColor) zr_1.add(new $538026eba361a92a$export$2e2bcd8739ae039({
                    shape: {
                        x: 0,
                        y: 0,
                        width: width,
                        height: height
                    },
                    style: {
                        fill: opts.connectedBackgroundColor
                    }
                }));
                (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(canvasList_1, function(item) {
                    var img = new $7fb187ddd76ee1dc$export$2e2bcd8739ae039({
                        style: {
                            x: item.left * dpr_1 - left_1,
                            y: item.top * dpr_1 - top_1,
                            image: item.dom
                        }
                    });
                    zr_1.add(img);
                });
                zr_1.refreshImmediately();
                return targetCanvas.toDataURL("image/" + (opts && opts.type || "png"));
            }
        } else return this.getDataURL(opts);
    };
    ECharts.prototype.convertToPixel = function(finder, value) {
        return $5f4351e0b7aaad84$var$doConvertPixel(this, "convertToPixel", finder, value);
    };
    ECharts.prototype.convertFromPixel = function(finder, value) {
        return $5f4351e0b7aaad84$var$doConvertPixel(this, "convertFromPixel", finder, value);
    };
    /**
   * Is the specified coordinate systems or components contain the given pixel point.
   * @param {Array|number} value
   * @return {boolean} result
   */ ECharts.prototype.containPixel = function(finder, value) {
        if (this._disposed) {
            $5f4351e0b7aaad84$var$disposedWarning(this.id);
            return;
        }
        var ecModel = this._model;
        var result;
        var findResult = $8917c02fd8256c67$export$95de80076abac814(ecModel, finder);
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(findResult, function(models, key) {
            key.indexOf("Models") >= 0 && (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(models, function(model) {
                var coordSys = model.coordinateSystem;
                if (coordSys && coordSys.containPoint) result = result || !!coordSys.containPoint(value);
                else if (key === "seriesModels") {
                    var view = this._chartsMap[model.__viewId];
                    if (view && view.containPoint) result = result || view.containPoint(value, model);
                    else (0, $4796c55e8b767685$export$c106dd0671a0fc2d)(key + ": " + (view ? "The found component do not support containPoint." : "No view mapping to the found component."));
                } else (0, $4796c55e8b767685$export$c106dd0671a0fc2d)(key + ": containPoint is not supported");
            }, this);
        }, this);
        return !!result;
    };
    /**
   * Get visual from series or data.
   * @param finder
   *        If string, e.g., 'series', means {seriesIndex: 0}.
   *        If Object, could contain some of these properties below:
   *        {
   *            seriesIndex / seriesId / seriesName,
   *            dataIndex / dataIndexInside
   *        }
   *        If dataIndex is not specified, series visual will be fetched,
   *        but not data item visual.
   *        If all of seriesIndex, seriesId, seriesName are not specified,
   *        visual will be fetched from first series.
   * @param visualType 'color', 'symbol', 'symbolSize'
   */ ECharts.prototype.getVisual = function(finder, visualType) {
        var ecModel = this._model;
        var parsedFinder = $8917c02fd8256c67$export$95de80076abac814(ecModel, finder, {
            defaultMainType: "series"
        });
        var seriesModel = parsedFinder.seriesModel;
        if (!seriesModel) (0, $4796c55e8b767685$export$c106dd0671a0fc2d)("There is no specified series model");
        var data = seriesModel.getData();
        var dataIndexInside = parsedFinder.hasOwnProperty("dataIndexInside") ? parsedFinder.dataIndexInside : parsedFinder.hasOwnProperty("dataIndex") ? data.indexOfRawIndex(parsedFinder.dataIndex) : null;
        return dataIndexInside != null ? (0, $db27badcd4437b56$export$91d919a86b2df624)(data, dataIndexInside, visualType) : (0, $db27badcd4437b56$export$d76e333a86ea1a2)(data, visualType);
    };
    /**
   * Get view of corresponding component model
   */ ECharts.prototype.getViewOfComponentModel = function(componentModel) {
        return this._componentsMap[componentModel.__viewId];
    };
    /**
   * Get view of corresponding series model
   */ ECharts.prototype.getViewOfSeriesModel = function(seriesModel) {
        return this._chartsMap[seriesModel.__viewId];
    };
    ECharts.prototype._initEvents = function() {
        var _this = this;
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)($5f4351e0b7aaad84$var$MOUSE_EVENT_NAMES, function(eveName) {
            var handler = function(e) {
                var ecModel = _this.getModel();
                var el = e.target;
                var params;
                var isGlobalOut = eveName === "globalout";
                // no e.target when 'globalout'.
                if (isGlobalOut) params = {};
                else el && (0, $02d5aa029ba8870d$export$8a4fca9e04eb4df6)(el, function(parent) {
                    var ecData = (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(parent);
                    if (ecData && ecData.dataIndex != null) {
                        var dataModel = ecData.dataModel || ecModel.getSeriesByIndex(ecData.seriesIndex);
                        params = dataModel && dataModel.getDataParams(ecData.dataIndex, ecData.dataType, el) || {};
                        return true;
                    } else if (ecData.eventData) {
                        params = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, ecData.eventData);
                        return true;
                    }
                }, true);
                // Contract: if params prepared in mouse event,
                // these properties must be specified:
                // {
                //    componentType: string (component main type)
                //    componentIndex: number
                // }
                // Otherwise event query can not work.
                if (params) {
                    var componentType = params.componentType;
                    var componentIndex = params.componentIndex;
                    // Special handling for historic reason: when trigger by
                    // markLine/markPoint/markArea, the componentType is
                    // 'markLine'/'markPoint'/'markArea', but we should better
                    // enable them to be queried by seriesIndex, since their
                    // option is set in each series.
                    if (componentType === "markLine" || componentType === "markPoint" || componentType === "markArea") {
                        componentType = "series";
                        componentIndex = params.seriesIndex;
                    }
                    var model = componentType && componentIndex != null && ecModel.getComponent(componentType, componentIndex);
                    var view = model && _this[model.mainType === "series" ? "_chartsMap" : "_componentsMap"][model.__viewId];
                    // `event.componentType` and `event[componentTpype + 'Index']` must not
                    // be missed, otherwise there is no way to distinguish source component.
                    // See `dataFormat.getDataParams`.
                    if (!isGlobalOut && !(model && view)) (0, $4796c55e8b767685$export$c106dd0671a0fc2d)("model or view can not be found by params");
                    params.event = e;
                    params.type = eveName;
                    _this._$eventProcessor.eventInfo = {
                        targetEl: el,
                        packedEvent: params,
                        model: model,
                        view: view
                    };
                    _this.trigger(eveName, params);
                }
            };
            // Consider that some component (like tooltip, brush, ...)
            // register zr event handler, but user event handler might
            // do anything, such as call `setOption` or `dispatchAction`,
            // which probably update any of the content and probably
            // cause problem if it is called previous other inner handlers.
            handler.zrEventfulCallAtLast = true;
            _this._zr.on(eveName, handler, _this);
        });
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)($5f4351e0b7aaad84$var$eventActionMap, function(actionType, eventType) {
            _this._messageCenter.on(eventType, function(event) {
                this.trigger(eventType, event);
            }, _this);
        });
        // Extra events
        // TODO register?
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)([
            "selectchanged"
        ], function(eventType) {
            _this._messageCenter.on(eventType, function(event) {
                this.trigger(eventType, event);
            }, _this);
        });
        (0, $f8e4c5d0363696b8$export$2575c83262e49d0c)(this._messageCenter, this, this._api);
    };
    ECharts.prototype.isDisposed = function() {
        return this._disposed;
    };
    ECharts.prototype.clear = function() {
        if (this._disposed) {
            $5f4351e0b7aaad84$var$disposedWarning(this.id);
            return;
        }
        this.setOption({
            series: []
        }, true);
    };
    ECharts.prototype.dispose = function() {
        if (this._disposed) {
            $5f4351e0b7aaad84$var$disposedWarning(this.id);
            return;
        }
        this._disposed = true;
        var dom = this.getDom();
        if (dom) $8917c02fd8256c67$export$9fec4d97f1922e0b(this.getDom(), $5f4351e0b7aaad84$var$DOM_ATTRIBUTE_KEY, "");
        var chart = this;
        var api = chart._api;
        var ecModel = chart._model;
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(chart._componentsViews, function(component) {
            component.dispose(ecModel, api);
        });
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(chart._chartsViews, function(chart) {
            chart.dispose(ecModel, api);
        });
        // Dispose after all views disposed
        chart._zr.dispose();
        // Set properties to null.
        // To reduce the memory cost in case the top code still holds this instance unexpectedly.
        chart._dom = chart._model = chart._chartsMap = chart._componentsMap = chart._chartsViews = chart._componentsViews = chart._scheduler = chart._api = chart._zr = chart._throttledZrFlush = chart._theme = chart._coordSysMgr = chart._messageCenter = null;
        delete $5f4351e0b7aaad84$var$instances[chart.id];
    };
    /**
   * Resize the chart
   */ ECharts.prototype.resize = function(opts) {
        if (this[$5f4351e0b7aaad84$var$IN_MAIN_PROCESS_KEY]) {
            (0, $4796c55e8b767685$export$a3bc9b8ed74fc)("`resize` should not be called during main process.");
            return;
        }
        if (this._disposed) {
            $5f4351e0b7aaad84$var$disposedWarning(this.id);
            return;
        }
        this._zr.resize(opts);
        var ecModel = this._model;
        // Resize loading effect
        this._loadingFX && this._loadingFX.resize();
        if (!ecModel) return;
        var needPrepare = ecModel.resetOption("media");
        var silent = opts && opts.silent;
        // There is some real cases that:
        // chart.setOption(option, { lazyUpdate: true });
        // chart.resize();
        if (this[$5f4351e0b7aaad84$var$PENDING_UPDATE]) {
            if (silent == null) silent = this[$5f4351e0b7aaad84$var$PENDING_UPDATE].silent;
            needPrepare = true;
            this[$5f4351e0b7aaad84$var$PENDING_UPDATE] = null;
        }
        this[$5f4351e0b7aaad84$var$IN_MAIN_PROCESS_KEY] = true;
        try {
            needPrepare && $5f4351e0b7aaad84$var$prepare(this);
            $5f4351e0b7aaad84$var$updateMethods.update.call(this, {
                type: "resize",
                animation: (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({
                    // Disable animation
                    duration: 0
                }, opts && opts.animation)
            });
        } catch (e) {
            this[$5f4351e0b7aaad84$var$IN_MAIN_PROCESS_KEY] = false;
            throw e;
        }
        this[$5f4351e0b7aaad84$var$IN_MAIN_PROCESS_KEY] = false;
        $5f4351e0b7aaad84$var$flushPendingActions.call(this, silent);
        $5f4351e0b7aaad84$var$triggerUpdatedEvent.call(this, silent);
    };
    ECharts.prototype.showLoading = function(name, cfg) {
        if (this._disposed) {
            $5f4351e0b7aaad84$var$disposedWarning(this.id);
            return;
        }
        if ((0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(name)) {
            cfg = name;
            name = "";
        }
        name = name || "default";
        this.hideLoading();
        if (!$5f4351e0b7aaad84$var$loadingEffects[name]) {
            (0, $4796c55e8b767685$export$c106dd0671a0fc2d)("Loading effects " + name + " not exists.");
            return;
        }
        var el = $5f4351e0b7aaad84$var$loadingEffects[name](this._api, cfg);
        var zr = this._zr;
        this._loadingFX = el;
        zr.add(el);
    };
    /**
   * Hide loading effect
   */ ECharts.prototype.hideLoading = function() {
        if (this._disposed) {
            $5f4351e0b7aaad84$var$disposedWarning(this.id);
            return;
        }
        this._loadingFX && this._zr.remove(this._loadingFX);
        this._loadingFX = null;
    };
    ECharts.prototype.makeActionFromEvent = function(eventObj) {
        var payload = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, eventObj);
        payload.type = $5f4351e0b7aaad84$var$eventActionMap[eventObj.type];
        return payload;
    };
    /**
   * @param opt If pass boolean, means opt.silent
   * @param opt.silent Default `false`. Whether trigger events.
   * @param opt.flush Default `undefined`.
   *        true: Flush immediately, and then pixel in canvas can be fetched
   *            immediately. Caution: it might affect performance.
   *        false: Not flush.
   *        undefined: Auto decide whether perform flush.
   */ ECharts.prototype.dispatchAction = function(payload, opt) {
        if (this._disposed) {
            $5f4351e0b7aaad84$var$disposedWarning(this.id);
            return;
        }
        if (!(0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(opt)) opt = {
            silent: !!opt
        };
        if (!$5f4351e0b7aaad84$var$actions[payload.type]) return;
        // Avoid dispatch action before setOption. Especially in `connect`.
        if (!this._model) return;
        // May dispatchAction in rendering procedure
        if (this[$5f4351e0b7aaad84$var$IN_MAIN_PROCESS_KEY]) {
            this._pendingActions.push(payload);
            return;
        }
        var silent = opt.silent;
        $5f4351e0b7aaad84$var$doDispatchAction.call(this, payload, silent);
        var flush = opt.flush;
        if (flush) this._zr.flush();
        else if (flush !== false && (0, $de9e931273a116c1$export$2e2bcd8739ae039).browser.weChat) // In WeChat embedded browser, `requestAnimationFrame` and `setInterval`
        // hang when sliding page (on touch event), which cause that zr does not
        // refresh until user interaction finished, which is not expected.
        // But `dispatchAction` may be called too frequently when pan on touch
        // screen, which impacts performance if do not throttle them.
        this._throttledZrFlush();
        $5f4351e0b7aaad84$var$flushPendingActions.call(this, silent);
        $5f4351e0b7aaad84$var$triggerUpdatedEvent.call(this, silent);
    };
    ECharts.prototype.updateLabelLayout = function() {
        (0, $e416c5bf08b74799$export$2e2bcd8739ae039).trigger("series:layoutlabels", this._model, this._api, {
            // Not adding series labels.
            // TODO
            updatedSeries: []
        });
    };
    ECharts.prototype.appendData = function(params) {
        if (this._disposed) {
            $5f4351e0b7aaad84$var$disposedWarning(this.id);
            return;
        }
        var seriesIndex = params.seriesIndex;
        var ecModel = this.getModel();
        var seriesModel = ecModel.getSeriesByIndex(seriesIndex);
        (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(params.data && seriesModel);
        seriesModel.appendData(params);
        // Note: `appendData` does not support that update extent of coordinate
        // system, util some scenario require that. In the expected usage of
        // `appendData`, the initial extent of coordinate system should better
        // be fixed by axis `min`/`max` setting or initial data, otherwise if
        // the extent changed while `appendData`, the location of the painted
        // graphic elements have to be changed, which make the usage of
        // `appendData` meaningless.
        this._scheduler.unfinished = true;
        this.getZr().wakeUp();
    };
    // A work around for no `internal` modifier in ts yet but
    // need to strictly hide private methods to JS users.
    ECharts.internalField = function() {
        $5f4351e0b7aaad84$var$prepare = function(ecIns) {
            var scheduler = ecIns._scheduler;
            scheduler.restorePipelines(ecIns._model);
            scheduler.prepareStageTasks();
            $5f4351e0b7aaad84$var$prepareView(ecIns, true);
            $5f4351e0b7aaad84$var$prepareView(ecIns, false);
            scheduler.plan();
        };
        /**
     * Prepare view instances of charts and components
     */ $5f4351e0b7aaad84$var$prepareView = function(ecIns, isComponent) {
            var ecModel = ecIns._model;
            var scheduler = ecIns._scheduler;
            var viewList = isComponent ? ecIns._componentsViews : ecIns._chartsViews;
            var viewMap = isComponent ? ecIns._componentsMap : ecIns._chartsMap;
            var zr = ecIns._zr;
            var api = ecIns._api;
            for(var i = 0; i < viewList.length; i++)viewList[i].__alive = false;
            isComponent ? ecModel.eachComponent(function(componentType, model) {
                componentType !== "series" && doPrepare(model);
            }) : ecModel.eachSeries(doPrepare);
            function doPrepare(model) {
                // By default view will be reused if possible for the case that `setOption` with "notMerge"
                // mode and need to enable transition animation. (Usually, when they have the same id, or
                // especially no id but have the same type & name & index. See the `model.id` generation
                // rule in `makeIdAndName` and `viewId` generation rule here).
                // But in `replaceMerge` mode, this feature should be able to disabled when it is clear that
                // the new model has nothing to do with the old model.
                var requireNewView = model.__requireNewView;
                // This command should not work twice.
                model.__requireNewView = false;
                // Consider: id same and type changed.
                var viewId = "_ec_" + model.id + "_" + model.type;
                var view = !requireNewView && viewMap[viewId];
                if (!view) {
                    var classType = (0, $0a7732deba457ada$export$fbe18865d303bf01)(model.type);
                    var Clazz = isComponent ? (0, $ced42ef9869a1e4c$export$2e2bcd8739ae039).getClass(classType.main, classType.sub) : // FIXME:TS
                    // (ChartView as ChartViewConstructor).getClass('series', classType.sub)
                    // For backward compat, still support a chart type declared as only subType
                    // like "liquidfill", but recommend "series.liquidfill"
                    // But need a base class to make a type series.
                    (0, $05e95ba2f0d93dbf$export$2e2bcd8739ae039).getClass(classType.sub);
                    (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(Clazz, classType.sub + " does not exist.");
                    view = new Clazz();
                    view.init(ecModel, api);
                    viewMap[viewId] = view;
                    viewList.push(view);
                    zr.add(view.group);
                }
                model.__viewId = view.__id = viewId;
                view.__alive = true;
                view.__model = model;
                view.group.__ecComponentInfo = {
                    mainType: model.mainType,
                    index: model.componentIndex
                };
                !isComponent && scheduler.prepareView(view, model, ecModel, api);
            }
            for(var i = 0; i < viewList.length;){
                var view = viewList[i];
                if (!view.__alive) {
                    !isComponent && view.renderTask.dispose();
                    zr.remove(view.group);
                    view.dispose(ecModel, api);
                    viewList.splice(i, 1);
                    if (viewMap[view.__id] === view) delete viewMap[view.__id];
                    view.__id = view.group.__ecComponentInfo = null;
                } else i++;
            }
        };
        $5f4351e0b7aaad84$var$updateDirectly = function(ecIns, method, payload, mainType, subType) {
            var ecModel = ecIns._model;
            ecModel.setUpdatePayload(payload);
            // broadcast
            if (!mainType) {
                // FIXME
                // Chart will not be update directly here, except set dirty.
                // But there is no such scenario now.
                (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)([].concat(ecIns._componentsViews).concat(ecIns._chartsViews), callView);
                return;
            }
            var query = {};
            query[mainType + "Id"] = payload[mainType + "Id"];
            query[mainType + "Index"] = payload[mainType + "Index"];
            query[mainType + "Name"] = payload[mainType + "Name"];
            var condition = {
                mainType: mainType,
                query: query
            };
            subType && (condition.subType = subType); // subType may be '' by parseClassType;
            var excludeSeriesId = payload.excludeSeriesId;
            var excludeSeriesIdMap;
            if (excludeSeriesId != null) {
                excludeSeriesIdMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
                (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)($8917c02fd8256c67$export$4f07b212a02c8051(excludeSeriesId), function(id) {
                    var modelId = $8917c02fd8256c67$export$fb1a222ba5dd6e51(id, null);
                    if (modelId != null) excludeSeriesIdMap.set(modelId, true);
                });
            }
            // If dispatchAction before setOption, do nothing.
            ecModel && ecModel.eachComponent(condition, function(model) {
                var isExcluded = excludeSeriesIdMap && excludeSeriesIdMap.get(model.id) != null;
                if (isExcluded) return;
                if ((0, $e3c0a36328c28ac4$export$aebe71265c1b77bf)(payload)) {
                    if (model instanceof (0, $3301f75840f3090f$export$2e2bcd8739ae039)) {
                        if (payload.type === (0, $e3c0a36328c28ac4$export$df035d873a9de64f) && !payload.notBlur && !model.get([
                            "emphasis",
                            "disabled"
                        ])) (0, $e3c0a36328c28ac4$export$64f1fd4daefef21b)(model, payload, ecIns._api);
                    } else {
                        var _a = (0, $e3c0a36328c28ac4$export$f31a644ccca0ef23)(model.mainType, model.componentIndex, payload.name, ecIns._api), focusSelf = _a.focusSelf, dispatchers = _a.dispatchers;
                        if (payload.type === (0, $e3c0a36328c28ac4$export$df035d873a9de64f) && focusSelf && !payload.notBlur) (0, $e3c0a36328c28ac4$export$569da03256c8a55f)(model.mainType, model.componentIndex, ecIns._api);
                        // PENDING:
                        // Whether to put this "enter emphasis" code in `ComponentView`,
                        // which will be the same as `ChartView` but might be not necessary
                        // and will be far from this logic.
                        if (dispatchers) (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(dispatchers, function(dispatcher) {
                            payload.type === (0, $e3c0a36328c28ac4$export$df035d873a9de64f) ? (0, $e3c0a36328c28ac4$export$b2d02638cc34c042)(dispatcher) : (0, $e3c0a36328c28ac4$export$11be6f716239ac55)(dispatcher);
                        });
                    }
                } else if ((0, $e3c0a36328c28ac4$export$72aea10e60e45351)(payload)) // TODO geo
                {
                    if (model instanceof (0, $3301f75840f3090f$export$2e2bcd8739ae039)) {
                        (0, $e3c0a36328c28ac4$export$1c7d489f62372d73)(model, payload, ecIns._api);
                        (0, $e3c0a36328c28ac4$export$e4ea08ef52e0a73)(model);
                        $5f4351e0b7aaad84$var$markStatusToUpdate(ecIns);
                    }
                }
            }, ecIns);
            ecModel && ecModel.eachComponent(condition, function(model) {
                var isExcluded = excludeSeriesIdMap && excludeSeriesIdMap.get(model.id) != null;
                if (isExcluded) return;
                callView(ecIns[mainType === "series" ? "_chartsMap" : "_componentsMap"][model.__viewId]);
            }, ecIns);
            function callView(view) {
                view && view.__alive && view[method] && view[method](view.__model, ecModel, ecIns._api, payload);
            }
        };
        $5f4351e0b7aaad84$var$updateMethods = {
            prepareAndUpdate: function(payload) {
                $5f4351e0b7aaad84$var$prepare(this);
                $5f4351e0b7aaad84$var$updateMethods.update.call(this, payload, {
                    // Needs to mark option changed if newOption is given.
                    // It's from MagicType.
                    // TODO If use a separate flag optionChanged in payload?
                    optionChanged: payload.newOption != null
                });
            },
            update: function(payload, updateParams) {
                var ecModel = this._model;
                var api = this._api;
                var zr = this._zr;
                var coordSysMgr = this._coordSysMgr;
                var scheduler = this._scheduler;
                // update before setOption
                if (!ecModel) return;
                ecModel.setUpdatePayload(payload);
                scheduler.restoreData(ecModel, payload);
                scheduler.performSeriesTasks(ecModel);
                // TODO
                // Save total ecModel here for undo/redo (after restoring data and before processing data).
                // Undo (restoration of total ecModel) can be carried out in 'action' or outside API call.
                // Create new coordinate system each update
                // In LineView may save the old coordinate system and use it to get the original point.
                coordSysMgr.create(ecModel, api);
                scheduler.performDataProcessorTasks(ecModel, payload);
                // Current stream render is not supported in data process. So we can update
                // stream modes after data processing, where the filtered data is used to
                // determine whether to use progressive rendering.
                $5f4351e0b7aaad84$var$updateStreamModes(this, ecModel);
                // We update stream modes before coordinate system updated, then the modes info
                // can be fetched when coord sys updating (consider the barGrid extent fix). But
                // the drawback is the full coord info can not be fetched. Fortunately this full
                // coord is not required in stream mode updater currently.
                coordSysMgr.update(ecModel, api);
                clearColorPalette(ecModel);
                scheduler.performVisualTasks(ecModel, payload);
                $5f4351e0b7aaad84$var$render(this, ecModel, api, payload, updateParams);
                // Set background
                var backgroundColor = ecModel.get("backgroundColor") || "transparent";
                var darkMode = ecModel.get("darkMode");
                zr.setBackgroundColor(backgroundColor);
                // Force set dark mode.
                if (darkMode != null && darkMode !== "auto") zr.setDarkMode(darkMode);
                (0, $e416c5bf08b74799$export$2e2bcd8739ae039).trigger("afterupdate", ecModel, api);
            },
            updateTransform: function(payload) {
                var _this = this;
                var ecModel = this._model;
                var api = this._api;
                // update before setOption
                if (!ecModel) return;
                ecModel.setUpdatePayload(payload);
                // ChartView.markUpdateMethod(payload, 'updateTransform');
                var componentDirtyList = [];
                ecModel.eachComponent(function(componentType, componentModel) {
                    if (componentType === "series") return;
                    var componentView = _this.getViewOfComponentModel(componentModel);
                    if (componentView && componentView.__alive) {
                        if (componentView.updateTransform) {
                            var result = componentView.updateTransform(componentModel, ecModel, api, payload);
                            result && result.update && componentDirtyList.push(componentView);
                        } else componentDirtyList.push(componentView);
                    }
                });
                var seriesDirtyMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
                ecModel.eachSeries(function(seriesModel) {
                    var chartView = _this._chartsMap[seriesModel.__viewId];
                    if (chartView.updateTransform) {
                        var result = chartView.updateTransform(seriesModel, ecModel, api, payload);
                        result && result.update && seriesDirtyMap.set(seriesModel.uid, 1);
                    } else seriesDirtyMap.set(seriesModel.uid, 1);
                });
                clearColorPalette(ecModel);
                // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.
                // this._scheduler.performVisualTasks(ecModel, payload, 'layout', true);
                this._scheduler.performVisualTasks(ecModel, payload, {
                    setDirty: true,
                    dirtyMap: seriesDirtyMap
                });
                // Currently, not call render of components. Geo render cost a lot.
                // renderComponents(ecIns, ecModel, api, payload, componentDirtyList);
                $5f4351e0b7aaad84$var$renderSeries(this, ecModel, api, payload, {}, seriesDirtyMap);
                (0, $e416c5bf08b74799$export$2e2bcd8739ae039).trigger("afterupdate", ecModel, api);
            },
            updateView: function(payload) {
                var ecModel = this._model;
                // update before setOption
                if (!ecModel) return;
                ecModel.setUpdatePayload(payload);
                (0, $05e95ba2f0d93dbf$export$2e2bcd8739ae039).markUpdateMethod(payload, "updateView");
                clearColorPalette(ecModel);
                // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.
                this._scheduler.performVisualTasks(ecModel, payload, {
                    setDirty: true
                });
                $5f4351e0b7aaad84$var$render(this, ecModel, this._api, payload, {});
                (0, $e416c5bf08b74799$export$2e2bcd8739ae039).trigger("afterupdate", ecModel, this._api);
            },
            updateVisual: function(payload) {
                // updateMethods.update.call(this, payload);
                var _this = this;
                var ecModel = this._model;
                // update before setOption
                if (!ecModel) return;
                ecModel.setUpdatePayload(payload);
                // clear all visual
                ecModel.eachSeries(function(seriesModel) {
                    seriesModel.getData().clearAllVisual();
                });
                // Perform visual
                (0, $05e95ba2f0d93dbf$export$2e2bcd8739ae039).markUpdateMethod(payload, "updateVisual");
                clearColorPalette(ecModel);
                // Keep pipe to the exist pipeline because it depends on the render task of the full pipeline.
                this._scheduler.performVisualTasks(ecModel, payload, {
                    visualType: "visual",
                    setDirty: true
                });
                ecModel.eachComponent(function(componentType, componentModel) {
                    if (componentType !== "series") {
                        var componentView = _this.getViewOfComponentModel(componentModel);
                        componentView && componentView.__alive && componentView.updateVisual(componentModel, ecModel, _this._api, payload);
                    }
                });
                ecModel.eachSeries(function(seriesModel) {
                    var chartView = _this._chartsMap[seriesModel.__viewId];
                    chartView.updateVisual(seriesModel, ecModel, _this._api, payload);
                });
                (0, $e416c5bf08b74799$export$2e2bcd8739ae039).trigger("afterupdate", ecModel, this._api);
            },
            updateLayout: function(payload) {
                $5f4351e0b7aaad84$var$updateMethods.update.call(this, payload);
            }
        };
        $5f4351e0b7aaad84$var$doConvertPixel = function(ecIns, methodName, finder, value) {
            if (ecIns._disposed) {
                $5f4351e0b7aaad84$var$disposedWarning(ecIns.id);
                return;
            }
            var ecModel = ecIns._model;
            var coordSysList = ecIns._coordSysMgr.getCoordinateSystems();
            var result;
            var parsedFinder = $8917c02fd8256c67$export$95de80076abac814(ecModel, finder);
            for(var i = 0; i < coordSysList.length; i++){
                var coordSys = coordSysList[i];
                if (coordSys[methodName] && (result = coordSys[methodName](ecModel, parsedFinder, value)) != null) return result;
            }
            (0, $4796c55e8b767685$export$c106dd0671a0fc2d)("No coordinate system that supports " + methodName + " found by the given finder.");
        };
        $5f4351e0b7aaad84$var$updateStreamModes = function(ecIns, ecModel) {
            var chartsMap = ecIns._chartsMap;
            var scheduler = ecIns._scheduler;
            ecModel.eachSeries(function(seriesModel) {
                scheduler.updateStreamModes(seriesModel, chartsMap[seriesModel.__viewId]);
            });
        };
        $5f4351e0b7aaad84$var$doDispatchAction = function(payload, silent) {
            var _this = this;
            var ecModel = this.getModel();
            var payloadType = payload.type;
            var escapeConnect = payload.escapeConnect;
            var actionWrap = $5f4351e0b7aaad84$var$actions[payloadType];
            var actionInfo = actionWrap.actionInfo;
            var cptTypeTmp = (actionInfo.update || "update").split(":");
            var updateMethod = cptTypeTmp.pop();
            var cptType = cptTypeTmp[0] != null && (0, $0a7732deba457ada$export$fbe18865d303bf01)(cptTypeTmp[0]);
            this[$5f4351e0b7aaad84$var$IN_MAIN_PROCESS_KEY] = true;
            var payloads = [
                payload
            ];
            var batched = false;
            // Batch action
            if (payload.batch) {
                batched = true;
                payloads = (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(payload.batch, function(item) {
                    item = (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)((0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, item), payload);
                    item.batch = null;
                    return item;
                });
            }
            var eventObjBatch = [];
            var eventObj;
            var isSelectChange = (0, $e3c0a36328c28ac4$export$72aea10e60e45351)(payload);
            var isHighDown = (0, $e3c0a36328c28ac4$export$aebe71265c1b77bf)(payload);
            // Only leave blur once if there are multiple batches.
            if (isHighDown) (0, $e3c0a36328c28ac4$export$b2a593c7b5243584)(this._api);
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(payloads, function(batchItem) {
                // Action can specify the event by return it.
                eventObj = actionWrap.action(batchItem, _this._model, _this._api);
                // Emit event outside
                eventObj = eventObj || (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, batchItem);
                // Convert type to eventType
                eventObj.type = actionInfo.event || eventObj.type;
                eventObjBatch.push(eventObj);
                // light update does not perform data process, layout and visual.
                if (isHighDown) {
                    var _a = $8917c02fd8256c67$export$fe600815775d9400(payload), queryOptionMap = _a.queryOptionMap, mainTypeSpecified = _a.mainTypeSpecified;
                    var componentMainType = mainTypeSpecified ? queryOptionMap.keys()[0] : "series";
                    $5f4351e0b7aaad84$var$updateDirectly(_this, updateMethod, batchItem, componentMainType);
                    $5f4351e0b7aaad84$var$markStatusToUpdate(_this);
                } else if (isSelectChange) {
                    // At present `dispatchAction({ type: 'select', ... })` is not supported on components.
                    // geo still use 'geoselect'.
                    $5f4351e0b7aaad84$var$updateDirectly(_this, updateMethod, batchItem, "series");
                    $5f4351e0b7aaad84$var$markStatusToUpdate(_this);
                } else if (cptType) $5f4351e0b7aaad84$var$updateDirectly(_this, updateMethod, batchItem, cptType.main, cptType.sub);
            });
            if (updateMethod !== "none" && !isHighDown && !isSelectChange && !cptType) try {
                // Still dirty
                if (this[$5f4351e0b7aaad84$var$PENDING_UPDATE]) {
                    $5f4351e0b7aaad84$var$prepare(this);
                    $5f4351e0b7aaad84$var$updateMethods.update.call(this, payload);
                    this[$5f4351e0b7aaad84$var$PENDING_UPDATE] = null;
                } else $5f4351e0b7aaad84$var$updateMethods[updateMethod].call(this, payload);
            } catch (e) {
                this[$5f4351e0b7aaad84$var$IN_MAIN_PROCESS_KEY] = false;
                throw e;
            }
            // Follow the rule of action batch
            if (batched) eventObj = {
                type: actionInfo.event || payloadType,
                escapeConnect: escapeConnect,
                batch: eventObjBatch
            };
            else eventObj = eventObjBatch[0];
            this[$5f4351e0b7aaad84$var$IN_MAIN_PROCESS_KEY] = false;
            if (!silent) {
                var messageCenter = this._messageCenter;
                messageCenter.trigger(eventObj.type, eventObj);
                // Extra triggered 'selectchanged' event
                if (isSelectChange) {
                    var newObj = {
                        type: "selectchanged",
                        escapeConnect: escapeConnect,
                        selected: (0, $e3c0a36328c28ac4$export$c529643b619af6b3)(ecModel),
                        isFromClick: payload.isFromClick || false,
                        fromAction: payload.type,
                        fromActionPayload: payload
                    };
                    messageCenter.trigger(newObj.type, newObj);
                }
            }
        };
        $5f4351e0b7aaad84$var$flushPendingActions = function(silent) {
            var pendingActions = this._pendingActions;
            while(pendingActions.length){
                var payload = pendingActions.shift();
                $5f4351e0b7aaad84$var$doDispatchAction.call(this, payload, silent);
            }
        };
        $5f4351e0b7aaad84$var$triggerUpdatedEvent = function(silent) {
            !silent && this.trigger("updated");
        };
        /**
     * Event `rendered` is triggered when zr
     * rendered. It is useful for realtime
     * snapshot (reflect animation).
     *
     * Event `finished` is triggered when:
     * (1) zrender rendering finished.
     * (2) initial animation finished.
     * (3) progressive rendering finished.
     * (4) no pending action.
     * (5) no delayed setOption needs to be processed.
     */ $5f4351e0b7aaad84$var$bindRenderedEvent = function(zr, ecIns) {
            zr.on("rendered", function(params) {
                ecIns.trigger("rendered", params);
                // The `finished` event should not be triggered repeatedly,
                // so it should only be triggered when rendering indeed happens
                // in zrender. (Consider the case that dipatchAction is keep
                // triggering when mouse move).
                if (// Although zr is dirty if initial animation is not finished
                // and this checking is called on frame, we also check
                // animation finished for robustness.
                zr.animation.isFinished() && !ecIns[$5f4351e0b7aaad84$var$PENDING_UPDATE] && !ecIns._scheduler.unfinished && !ecIns._pendingActions.length) ecIns.trigger("finished");
            });
        };
        $5f4351e0b7aaad84$var$bindMouseEvent = function(zr, ecIns) {
            zr.on("mouseover", function(e) {
                var el = e.target;
                var dispatcher = (0, $02d5aa029ba8870d$export$8a4fca9e04eb4df6)(el, (0, $e3c0a36328c28ac4$export$77d1445f699c58b5));
                if (dispatcher) {
                    (0, $e3c0a36328c28ac4$export$416765b6198234ff)(dispatcher, e, ecIns._api);
                    $5f4351e0b7aaad84$var$markStatusToUpdate(ecIns);
                }
            }).on("mouseout", function(e) {
                var el = e.target;
                var dispatcher = (0, $02d5aa029ba8870d$export$8a4fca9e04eb4df6)(el, (0, $e3c0a36328c28ac4$export$77d1445f699c58b5));
                if (dispatcher) {
                    (0, $e3c0a36328c28ac4$export$bb1c7b62436282a)(dispatcher, e, ecIns._api);
                    $5f4351e0b7aaad84$var$markStatusToUpdate(ecIns);
                }
            }).on("click", function(e) {
                var el = e.target;
                var dispatcher = (0, $02d5aa029ba8870d$export$8a4fca9e04eb4df6)(el, function(target) {
                    return (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(target).dataIndex != null;
                }, true);
                if (dispatcher) {
                    var actionType = dispatcher.selected ? "unselect" : "select";
                    var ecData = (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(dispatcher);
                    ecIns._api.dispatchAction({
                        type: actionType,
                        dataType: ecData.dataType,
                        dataIndexInside: ecData.dataIndex,
                        seriesIndex: ecData.seriesIndex,
                        isFromClick: true
                    });
                }
            });
        };
        function clearColorPalette(ecModel) {
            ecModel.clearColorPalette();
            ecModel.eachSeries(function(seriesModel) {
                seriesModel.clearColorPalette();
            });
        }
        // Allocate zlevels for series and components
        function allocateZlevels(ecModel) {
            var componentZLevels = [];
            var seriesZLevels = [];
            var hasSeparateZLevel = false;
            ecModel.eachComponent(function(componentType, componentModel) {
                var zlevel = componentModel.get("zlevel") || 0;
                var z = componentModel.get("z") || 0;
                var zlevelKey = componentModel.getZLevelKey();
                hasSeparateZLevel = hasSeparateZLevel || !!zlevelKey;
                (componentType === "series" ? seriesZLevels : componentZLevels).push({
                    zlevel: zlevel,
                    z: z,
                    idx: componentModel.componentIndex,
                    type: componentType,
                    key: zlevelKey
                });
            });
            if (hasSeparateZLevel) {
                // Series after component
                var zLevels = componentZLevels.concat(seriesZLevels);
                var lastSeriesZLevel_1;
                var lastSeriesKey_1;
                (0, $eba99bd519f945da$export$2e2bcd8739ae039)(zLevels, function(a, b) {
                    if (a.zlevel === b.zlevel) return a.z - b.z;
                    return a.zlevel - b.zlevel;
                });
                (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(zLevels, function(item) {
                    var componentModel = ecModel.getComponent(item.type, item.idx);
                    var zlevel = item.zlevel;
                    var key = item.key;
                    if (lastSeriesZLevel_1 != null) zlevel = Math.max(lastSeriesZLevel_1, zlevel);
                    if (key) {
                        if (zlevel === lastSeriesZLevel_1 && key !== lastSeriesKey_1) zlevel++;
                        lastSeriesKey_1 = key;
                    } else if (lastSeriesKey_1) {
                        if (zlevel === lastSeriesZLevel_1) zlevel++;
                        lastSeriesKey_1 = "";
                    }
                    lastSeriesZLevel_1 = zlevel;
                    componentModel.setZLevel(zlevel);
                });
            }
        }
        $5f4351e0b7aaad84$var$render = function(ecIns, ecModel, api, payload, updateParams) {
            allocateZlevels(ecModel);
            $5f4351e0b7aaad84$var$renderComponents(ecIns, ecModel, api, payload, updateParams);
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(ecIns._chartsViews, function(chart) {
                chart.__alive = false;
            });
            $5f4351e0b7aaad84$var$renderSeries(ecIns, ecModel, api, payload, updateParams);
            // Remove groups of unrendered charts
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(ecIns._chartsViews, function(chart) {
                if (!chart.__alive) chart.remove(ecModel, api);
            });
        };
        $5f4351e0b7aaad84$var$renderComponents = function(ecIns, ecModel, api, payload, updateParams, dirtyList) {
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(dirtyList || ecIns._componentsViews, function(componentView) {
                var componentModel = componentView.__model;
                clearStates(componentModel, componentView);
                componentView.render(componentModel, ecModel, api, payload);
                updateZ(componentModel, componentView);
                updateStates(componentModel, componentView);
            });
        };
        /**
     * Render each chart and component
     */ $5f4351e0b7aaad84$var$renderSeries = function(ecIns, ecModel, api, payload, updateParams, dirtyMap) {
            // Render all charts
            var scheduler = ecIns._scheduler;
            updateParams = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)(updateParams || {}, {
                updatedSeries: ecModel.getSeries()
            });
            // TODO progressive?
            (0, $e416c5bf08b74799$export$2e2bcd8739ae039).trigger("series:beforeupdate", ecModel, api, updateParams);
            var unfinished = false;
            ecModel.eachSeries(function(seriesModel) {
                var chartView = ecIns._chartsMap[seriesModel.__viewId];
                chartView.__alive = true;
                var renderTask = chartView.renderTask;
                scheduler.updatePayload(renderTask, payload);
                // TODO states on marker.
                clearStates(seriesModel, chartView);
                if (dirtyMap && dirtyMap.get(seriesModel.uid)) renderTask.dirty();
                if (renderTask.perform(scheduler.getPerformArgs(renderTask))) unfinished = true;
                chartView.group.silent = !!seriesModel.get("silent");
                // Should not call markRedraw on group, because it will disable zrender
                // incremental render (always render from the __startIndex each frame)
                // chartView.group.markRedraw();
                updateBlend(seriesModel, chartView);
                (0, $e3c0a36328c28ac4$export$e4ea08ef52e0a73)(seriesModel);
            });
            scheduler.unfinished = unfinished || scheduler.unfinished;
            (0, $e416c5bf08b74799$export$2e2bcd8739ae039).trigger("series:layoutlabels", ecModel, api, updateParams);
            // transition after label is layouted.
            (0, $e416c5bf08b74799$export$2e2bcd8739ae039).trigger("series:transition", ecModel, api, updateParams);
            ecModel.eachSeries(function(seriesModel) {
                var chartView = ecIns._chartsMap[seriesModel.__viewId];
                // Update Z after labels updated. Before applying states.
                updateZ(seriesModel, chartView);
                // NOTE: Update states after label is updated.
                // label should be in normal status when layouting.
                updateStates(seriesModel, chartView);
            });
            // If use hover layer
            updateHoverLayerStatus(ecIns, ecModel);
            (0, $e416c5bf08b74799$export$2e2bcd8739ae039).trigger("series:afterupdate", ecModel, api, updateParams);
        };
        $5f4351e0b7aaad84$var$markStatusToUpdate = function(ecIns) {
            ecIns[$5f4351e0b7aaad84$var$STATUS_NEEDS_UPDATE_KEY] = true;
            // Wake up zrender if it's sleep. Let it update states in the next frame.
            ecIns.getZr().wakeUp();
        };
        $5f4351e0b7aaad84$var$applyChangedStates = function(ecIns) {
            if (!ecIns[$5f4351e0b7aaad84$var$STATUS_NEEDS_UPDATE_KEY]) return;
            ecIns.getZr().storage.traverse(function(el) {
                // Not applied on removed elements, it may still in fading.
                if ($f7e735722ff36e8c$export$5b89d4b643713034(el)) return;
                applyElementStates(el);
            });
            ecIns[$5f4351e0b7aaad84$var$STATUS_NEEDS_UPDATE_KEY] = false;
        };
        function applyElementStates(el) {
            var newStates = [];
            var oldStates = el.currentStates;
            // Keep other states.
            for(var i = 0; i < oldStates.length; i++){
                var stateName = oldStates[i];
                if (!(stateName === "emphasis" || stateName === "blur" || stateName === "select")) newStates.push(stateName);
            }
            // Only use states when it's exists.
            if (el.selected && el.states.select) newStates.push("select");
            if (el.hoverState === (0, $e3c0a36328c28ac4$export$f0f2bee145debb31) && el.states.emphasis) newStates.push("emphasis");
            else if (el.hoverState === (0, $e3c0a36328c28ac4$export$1307d6a87d56baa) && el.states.blur) newStates.push("blur");
            el.useStates(newStates);
        }
        function updateHoverLayerStatus(ecIns, ecModel) {
            var zr = ecIns._zr;
            var storage = zr.storage;
            var elCount = 0;
            storage.traverse(function(el) {
                if (!el.isGroup) elCount++;
            });
            if (elCount > ecModel.get("hoverLayerThreshold") && !(0, $de9e931273a116c1$export$2e2bcd8739ae039).node && !(0, $de9e931273a116c1$export$2e2bcd8739ae039).worker) ecModel.eachSeries(function(seriesModel) {
                if (seriesModel.preventUsingHoverLayer) return;
                var chartView = ecIns._chartsMap[seriesModel.__viewId];
                if (chartView.__alive) chartView.eachRendered(function(el) {
                    if (el.states.emphasis) el.states.emphasis.hoverLayer = true;
                });
            });
        }
        /**
     * Update chart and blend.
     */ function updateBlend(seriesModel, chartView) {
            var blendMode = seriesModel.get("blendMode") || null;
            chartView.eachRendered(function(el) {
                // FIXME marker and other components
                if (!el.isGroup) // DON'T mark the element dirty. In case element is incremental and don't want to rerender.
                el.style.blend = blendMode;
            });
        }
        function updateZ(model, view) {
            if (model.preventAutoZ) return;
            var z = model.get("z") || 0;
            var zlevel = model.get("zlevel") || 0;
            // Set z and zlevel
            view.eachRendered(function(el) {
                doUpdateZ(el, z, zlevel, -Infinity);
                // Don't traverse the children because it has been traversed in _updateZ.
                return true;
            });
        }
        function doUpdateZ(el, z, zlevel, maxZ2) {
            // Group may also have textContent
            var label = el.getTextContent();
            var labelLine = el.getTextGuideLine();
            var isGroup = el.isGroup;
            if (isGroup) {
                // set z & zlevel of children elements of Group
                var children = el.childrenRef();
                for(var i = 0; i < children.length; i++)maxZ2 = Math.max(doUpdateZ(children[i], z, zlevel, maxZ2), maxZ2);
            } else {
                // not Group
                el.z = z;
                el.zlevel = zlevel;
                maxZ2 = Math.max(el.z2, maxZ2);
            }
            // always set z and zlevel if label/labelLine exists
            if (label) {
                label.z = z;
                label.zlevel = zlevel;
                // lift z2 of text content
                // TODO if el.emphasis.z2 is spcefied, what about textContent.
                isFinite(maxZ2) && (label.z2 = maxZ2 + 2);
            }
            if (labelLine) {
                var textGuideLineConfig = el.textGuideLineConfig;
                labelLine.z = z;
                labelLine.zlevel = zlevel;
                isFinite(maxZ2) && (labelLine.z2 = maxZ2 + (textGuideLineConfig && textGuideLineConfig.showAbove ? 1 : -1));
            }
            return maxZ2;
        }
        // Clear states without animation.
        // TODO States on component.
        function clearStates(model, view) {
            view.eachRendered(function(el) {
                // Not applied on removed elements, it may still in fading.
                if ($f7e735722ff36e8c$export$5b89d4b643713034(el)) return;
                var textContent = el.getTextContent();
                var textGuide = el.getTextGuideLine();
                if (el.stateTransition) el.stateTransition = null;
                if (textContent && textContent.stateTransition) textContent.stateTransition = null;
                if (textGuide && textGuide.stateTransition) textGuide.stateTransition = null;
                // TODO If el is incremental.
                if (el.hasState()) {
                    el.prevStates = el.currentStates;
                    el.clearStates();
                } else if (el.prevStates) el.prevStates = null;
            });
        }
        function updateStates(model, view) {
            var stateAnimationModel = model.getModel("stateAnimation");
            var enableAnimation = model.isAnimationEnabled();
            var duration = stateAnimationModel.get("duration");
            var stateTransition = duration > 0 ? {
                duration: duration,
                delay: stateAnimationModel.get("delay"),
                easing: stateAnimationModel.get("easing")
            } : null;
            view.eachRendered(function(el) {
                if (el.states && el.states.emphasis) {
                    // Not applied on removed elements, it may still in fading.
                    if ($f7e735722ff36e8c$export$5b89d4b643713034(el)) return;
                    if (el instanceof $97f9f9aac9c7fd52$export$2e2bcd8739ae039) (0, $e3c0a36328c28ac4$export$9fe78019e6f395b6)(el);
                    // Only updated on changed element. In case element is incremental and don't want to rerender.
                    // TODO, a more proper way?
                    if (el.__dirty) {
                        var prevStates = el.prevStates;
                        // Restore states without animation
                        if (prevStates) el.useStates(prevStates);
                    }
                    // Update state transition and enable animation again.
                    if (enableAnimation) {
                        el.stateTransition = stateTransition;
                        var textContent = el.getTextContent();
                        var textGuide = el.getTextGuideLine();
                        // TODO Is it necessary to animate label?
                        if (textContent) textContent.stateTransition = stateTransition;
                        if (textGuide) textGuide.stateTransition = stateTransition;
                    }
                    // Use highlighted and selected flag to toggle states.
                    if (el.__dirty) applyElementStates(el);
                }
            });
        }
        $5f4351e0b7aaad84$var$createExtensionAPI = function(ecIns) {
            return new /** @class */ (function(_super) {
                (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(class_1, _super);
                function class_1() {
                    return _super !== null && _super.apply(this, arguments) || this;
                }
                class_1.prototype.getCoordinateSystems = function() {
                    return ecIns._coordSysMgr.getCoordinateSystems();
                };
                class_1.prototype.getComponentByElement = function(el) {
                    while(el){
                        var modelInfo = el.__ecComponentInfo;
                        if (modelInfo != null) return ecIns._model.getComponent(modelInfo.mainType, modelInfo.index);
                        el = el.parent;
                    }
                };
                class_1.prototype.enterEmphasis = function(el, highlightDigit) {
                    (0, $e3c0a36328c28ac4$export$b2d02638cc34c042)(el, highlightDigit);
                    $5f4351e0b7aaad84$var$markStatusToUpdate(ecIns);
                };
                class_1.prototype.leaveEmphasis = function(el, highlightDigit) {
                    (0, $e3c0a36328c28ac4$export$11be6f716239ac55)(el, highlightDigit);
                    $5f4351e0b7aaad84$var$markStatusToUpdate(ecIns);
                };
                class_1.prototype.enterBlur = function(el) {
                    (0, $e3c0a36328c28ac4$export$207f9cb3e1099375)(el);
                    $5f4351e0b7aaad84$var$markStatusToUpdate(ecIns);
                };
                class_1.prototype.leaveBlur = function(el) {
                    (0, $e3c0a36328c28ac4$export$fd4a9ec75456d3c1)(el);
                    $5f4351e0b7aaad84$var$markStatusToUpdate(ecIns);
                };
                class_1.prototype.enterSelect = function(el) {
                    (0, $e3c0a36328c28ac4$export$252d028dda8ef765)(el);
                    $5f4351e0b7aaad84$var$markStatusToUpdate(ecIns);
                };
                class_1.prototype.leaveSelect = function(el) {
                    (0, $e3c0a36328c28ac4$export$ea9a904bd6e32bd3)(el);
                    $5f4351e0b7aaad84$var$markStatusToUpdate(ecIns);
                };
                class_1.prototype.getModel = function() {
                    return ecIns.getModel();
                };
                class_1.prototype.getViewOfComponentModel = function(componentModel) {
                    return ecIns.getViewOfComponentModel(componentModel);
                };
                class_1.prototype.getViewOfSeriesModel = function(seriesModel) {
                    return ecIns.getViewOfSeriesModel(seriesModel);
                };
                return class_1;
            }((0, $3d3bd8865085eb14$export$2e2bcd8739ae039)))(ecIns);
        };
        $5f4351e0b7aaad84$var$enableConnect = function(chart) {
            function updateConnectedChartsStatus(charts, status) {
                for(var i = 0; i < charts.length; i++){
                    var otherChart = charts[i];
                    otherChart[$5f4351e0b7aaad84$var$CONNECT_STATUS_KEY] = status;
                }
            }
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)($5f4351e0b7aaad84$var$eventActionMap, function(actionType, eventType) {
                chart._messageCenter.on(eventType, function(event) {
                    if ($5f4351e0b7aaad84$var$connectedGroups[chart.group] && chart[$5f4351e0b7aaad84$var$CONNECT_STATUS_KEY] !== $5f4351e0b7aaad84$var$CONNECT_STATUS_PENDING) {
                        if (event && event.escapeConnect) return;
                        var action_1 = chart.makeActionFromEvent(event);
                        var otherCharts_1 = [];
                        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)($5f4351e0b7aaad84$var$instances, function(otherChart) {
                            if (otherChart !== chart && otherChart.group === chart.group) otherCharts_1.push(otherChart);
                        });
                        updateConnectedChartsStatus(otherCharts_1, $5f4351e0b7aaad84$var$CONNECT_STATUS_PENDING);
                        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(otherCharts_1, function(otherChart) {
                            if (otherChart[$5f4351e0b7aaad84$var$CONNECT_STATUS_KEY] !== $5f4351e0b7aaad84$var$CONNECT_STATUS_UPDATING) otherChart.dispatchAction(action_1);
                        });
                        updateConnectedChartsStatus(otherCharts_1, $5f4351e0b7aaad84$var$CONNECT_STATUS_UPDATED);
                    }
                });
            });
        };
    }();
    return ECharts;
}((0, $a2a21788c772d0fe$export$2e2bcd8739ae039));
var $5f4351e0b7aaad84$var$echartsProto = $5f4351e0b7aaad84$var$ECharts.prototype;
$5f4351e0b7aaad84$var$echartsProto.on = $5f4351e0b7aaad84$var$createRegisterEventWithLowercaseECharts("on");
$5f4351e0b7aaad84$var$echartsProto.off = $5f4351e0b7aaad84$var$createRegisterEventWithLowercaseECharts("off");
/**
 * @deprecated
 */ // @ts-ignore
$5f4351e0b7aaad84$var$echartsProto.one = function(eventName, cb, ctx) {
    var self = this;
    (0, $4796c55e8b767685$export$4a9c0b74eb885aa1)("ECharts#one is deprecated.");
    function wrapped() {
        var args2 = [];
        for(var _i = 0; _i < arguments.length; _i++)args2[_i] = arguments[_i];
        cb && cb.apply && cb.apply(this, args2);
        // @ts-ignore
        self.off(eventName, wrapped);
    }
    // @ts-ignore
    this.on.call(this, eventName, wrapped, ctx);
};
var $5f4351e0b7aaad84$var$MOUSE_EVENT_NAMES = [
    "click",
    "dblclick",
    "mouseover",
    "mouseout",
    "mousemove",
    "mousedown",
    "mouseup",
    "globalout",
    "contextmenu"
];
function $5f4351e0b7aaad84$var$disposedWarning(id) {
    (0, $4796c55e8b767685$export$c106dd0671a0fc2d)("Instance " + id + " has been disposed");
}
var $5f4351e0b7aaad84$var$actions = {};
/**
 * Map eventType to actionType
 */ var $5f4351e0b7aaad84$var$eventActionMap = {};
var $5f4351e0b7aaad84$var$dataProcessorFuncs = [];
var $5f4351e0b7aaad84$var$optionPreprocessorFuncs = [];
var $5f4351e0b7aaad84$var$visualFuncs = [];
var $5f4351e0b7aaad84$var$themeStorage = {};
var $5f4351e0b7aaad84$var$loadingEffects = {};
var $5f4351e0b7aaad84$var$instances = {};
var $5f4351e0b7aaad84$var$connectedGroups = {};
var $5f4351e0b7aaad84$var$idBase = +new Date() - 0;
var $5f4351e0b7aaad84$var$groupIdBase = +new Date() - 0;
var $5f4351e0b7aaad84$var$DOM_ATTRIBUTE_KEY = "_echarts_instance_";
function $5f4351e0b7aaad84$export$2cd8252107eb640b(dom, theme, opts) {
    var isClient = !(opts && opts.ssr);
    if (isClient) {
        if (!dom) throw new Error("Initialize failed: invalid dom.");
        var existInstance = $5f4351e0b7aaad84$export$33b6fbccd4f643f8(dom);
        if (existInstance) {
            (0, $4796c55e8b767685$export$c106dd0671a0fc2d)("There is a chart instance already initialized on the dom.");
            return existInstance;
        }
        if ((0, $e44eb14c4271d0f9$export$9f57505b7bd8dae)(dom) && dom.nodeName.toUpperCase() !== "CANVAS" && (!dom.clientWidth && (!opts || opts.width == null) || !dom.clientHeight && (!opts || opts.height == null))) (0, $4796c55e8b767685$export$c106dd0671a0fc2d)("Can't get DOM width or height. Please check dom.clientWidth and dom.clientHeight. They should not be 0.For example, you may need to call this in the callback of window.onload.");
    }
    var chart = new $5f4351e0b7aaad84$var$ECharts(dom, theme, opts);
    chart.id = "ec_" + $5f4351e0b7aaad84$var$idBase++;
    $5f4351e0b7aaad84$var$instances[chart.id] = chart;
    isClient && $8917c02fd8256c67$export$9fec4d97f1922e0b(dom, $5f4351e0b7aaad84$var$DOM_ATTRIBUTE_KEY, chart.id);
    $5f4351e0b7aaad84$var$enableConnect(chart);
    (0, $e416c5bf08b74799$export$2e2bcd8739ae039).trigger("afterinit", chart);
    return chart;
}
function $5f4351e0b7aaad84$export$64605811ab45167f(groupId) {
    // Is array of charts
    if ((0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(groupId)) {
        var charts = groupId;
        groupId = null;
        // If any chart has group
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(charts, function(chart) {
            if (chart.group != null) groupId = chart.group;
        });
        groupId = groupId || "g_" + $5f4351e0b7aaad84$var$groupIdBase++;
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(charts, function(chart) {
            chart.group = groupId;
        });
    }
    $5f4351e0b7aaad84$var$connectedGroups[groupId] = true;
    return groupId;
}
function $5f4351e0b7aaad84$export$37dfea93db2e14ed(groupId) {
    $5f4351e0b7aaad84$var$connectedGroups[groupId] = false;
}
var $5f4351e0b7aaad84$export$87cd6834112ecb52 = $5f4351e0b7aaad84$export$37dfea93db2e14ed;
function $5f4351e0b7aaad84$export$fcfbbcec2cb820d5(chart) {
    if ((0, $e44eb14c4271d0f9$export$844ec244b1367d54)(chart)) chart = $5f4351e0b7aaad84$var$instances[chart];
    else if (!(chart instanceof $5f4351e0b7aaad84$var$ECharts)) // Try to treat as dom
    chart = $5f4351e0b7aaad84$export$33b6fbccd4f643f8(chart);
    if (chart instanceof $5f4351e0b7aaad84$var$ECharts && !chart.isDisposed()) chart.dispose();
}
function $5f4351e0b7aaad84$export$33b6fbccd4f643f8(dom) {
    return $5f4351e0b7aaad84$var$instances[$8917c02fd8256c67$export$735ee1799fd02602(dom, $5f4351e0b7aaad84$var$DOM_ATTRIBUTE_KEY)];
}
function $5f4351e0b7aaad84$export$89b4be35062c4a3f(key) {
    return $5f4351e0b7aaad84$var$instances[key];
}
function $5f4351e0b7aaad84$export$f9c59eed5de5ff80(name, theme) {
    $5f4351e0b7aaad84$var$themeStorage[name] = theme;
}
function $5f4351e0b7aaad84$export$77095792a057b768(preprocessorFunc) {
    if ((0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)($5f4351e0b7aaad84$var$optionPreprocessorFuncs, preprocessorFunc) < 0) $5f4351e0b7aaad84$var$optionPreprocessorFuncs.push(preprocessorFunc);
}
function $5f4351e0b7aaad84$export$d575e6557ac1729f(priority, processor) {
    $5f4351e0b7aaad84$var$normalizeRegister($5f4351e0b7aaad84$var$dataProcessorFuncs, priority, processor, $5f4351e0b7aaad84$var$PRIORITY_PROCESSOR_DEFAULT);
}
function $5f4351e0b7aaad84$export$c8c249911ee8c1ed(postInitFunc) {
    $5f4351e0b7aaad84$export$c9ec4b5faef04865("afterinit", postInitFunc);
}
function $5f4351e0b7aaad84$export$99560909c18c76bb(postUpdateFunc) {
    $5f4351e0b7aaad84$export$c9ec4b5faef04865("afterupdate", postUpdateFunc);
}
function $5f4351e0b7aaad84$export$c9ec4b5faef04865(name, cb) {
    (0, $e416c5bf08b74799$export$2e2bcd8739ae039).on(name, cb);
}
function $5f4351e0b7aaad84$export$408c24786cd729c6(actionInfo, eventName, action) {
    if ((0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(eventName)) {
        action = eventName;
        eventName = "";
    }
    var actionType = (0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(actionInfo) ? actionInfo.type : [
        actionInfo,
        actionInfo = {
            event: eventName
        }
    ][0];
    // Event name is all lowercase
    actionInfo.event = (actionInfo.event || actionType).toLowerCase();
    eventName = actionInfo.event;
    if ($5f4351e0b7aaad84$var$eventActionMap[eventName]) // Already registered.
    return;
    // Validate action type and event name.
    (0, $e44eb14c4271d0f9$export$a7a9523472993e97)($5f4351e0b7aaad84$var$ACTION_REG.test(actionType) && $5f4351e0b7aaad84$var$ACTION_REG.test(eventName));
    if (!$5f4351e0b7aaad84$var$actions[actionType]) $5f4351e0b7aaad84$var$actions[actionType] = {
        action: action,
        actionInfo: actionInfo
    };
    $5f4351e0b7aaad84$var$eventActionMap[eventName] = actionType;
}
function $5f4351e0b7aaad84$export$1dd5e025a8a37dd(type, coordSysCreator) {
    (0, $8ac678ded05cd5de$export$2e2bcd8739ae039).register(type, coordSysCreator);
}
function $5f4351e0b7aaad84$export$fc2638719e4159b9(type) {
    var coordSysCreator = (0, $8ac678ded05cd5de$export$2e2bcd8739ae039).get(type);
    if (coordSysCreator) return coordSysCreator.getDimensionsInfo ? coordSysCreator.getDimensionsInfo() : coordSysCreator.dimensions.slice();
}
function $5f4351e0b7aaad84$export$d768f97700ca6bea(priority, layoutTask) {
    $5f4351e0b7aaad84$var$normalizeRegister($5f4351e0b7aaad84$var$visualFuncs, priority, layoutTask, $5f4351e0b7aaad84$var$PRIORITY_VISUAL_LAYOUT, "layout");
}
function $5f4351e0b7aaad84$export$5f32c1eb94c381bb(priority, visualTask) {
    $5f4351e0b7aaad84$var$normalizeRegister($5f4351e0b7aaad84$var$visualFuncs, priority, visualTask, $5f4351e0b7aaad84$var$PRIORITY_VISUAL_CHART, "visual");
}
var $5f4351e0b7aaad84$var$registeredTasks = [];
function $5f4351e0b7aaad84$var$normalizeRegister(targetList, priority, fn, defaultPriority, visualType) {
    if ((0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(priority) || (0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(priority)) {
        fn = priority;
        priority = defaultPriority;
    }
    if (isNaN(priority) || priority == null) throw new Error("Illegal priority");
    // Check duplicate
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(targetList, function(wrap) {
        (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(wrap.__raw !== fn);
    });
    // Already registered
    if ((0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)($5f4351e0b7aaad84$var$registeredTasks, fn) >= 0) return;
    $5f4351e0b7aaad84$var$registeredTasks.push(fn);
    var stageHandler = (0, $c740c2e679d2bea1$export$2e2bcd8739ae039).wrapStageHandler(fn, visualType);
    stageHandler.__prio = priority;
    stageHandler.__raw = fn;
    targetList.push(stageHandler);
}
function $5f4351e0b7aaad84$export$e06b68a82007c015(name, loadingFx) {
    $5f4351e0b7aaad84$var$loadingEffects[name] = loadingFx;
}
function $5f4351e0b7aaad84$export$10425ea7a243b114(creator) {
    (0, $4796c55e8b767685$export$4a9c0b74eb885aa1)("setCanvasCreator is deprecated. Use setPlatformAPI({ createCanvas }) instead.");
    (0, $c7ef4e2442c05203$export$61bcfd79465c1b7c)({
        createCanvas: creator
    });
}
function $5f4351e0b7aaad84$export$d456de060be2dba1(mapName, geoJson, specialAreas) {
    var registerMap = (0, $afa1d4c38c26c33d$export$73333eb8a09d5f61)("registerMap");
    registerMap && registerMap(mapName, geoJson, specialAreas);
}
function $5f4351e0b7aaad84$export$b8586192aead8a7e(mapName) {
    var getMap = (0, $afa1d4c38c26c33d$export$73333eb8a09d5f61)("getMap");
    return getMap && getMap(mapName);
}
var $5f4351e0b7aaad84$export$f01d71dd0389d7e4 = (0, $8d7e345fe242a315$export$92c96c6d8b255b7d);
/**
 * Globa dispatchAction to a specified chart instance.
 */ // export function dispatchAction(payload: { chartId: string } & Payload, opt?: Parameters<ECharts['dispatchAction']>[1]) {
//     if (!payload || !payload.chartId) {
//         // Must have chartId to find chart
//         return;
//     }
//     const chart = instances[payload.chartId];
//     if (chart) {
//         chart.dispatchAction(payload, opt);
//     }
// }
// Builtin global visual
$5f4351e0b7aaad84$export$5f32c1eb94c381bb($5f4351e0b7aaad84$var$PRIORITY_VISUAL_GLOBAL, (0, $b81efdf4317990e3$export$7ce4d65f9b69240));
$5f4351e0b7aaad84$export$5f32c1eb94c381bb($5f4351e0b7aaad84$var$PRIORITY_VISUAL_CHART_DATA_CUSTOM, (0, $b81efdf4317990e3$export$f7dcb66a065003d1));
$5f4351e0b7aaad84$export$5f32c1eb94c381bb($5f4351e0b7aaad84$var$PRIORITY_VISUAL_CHART_DATA_CUSTOM, (0, $b81efdf4317990e3$export$cf9758b0d6dc0aa9));
$5f4351e0b7aaad84$export$5f32c1eb94c381bb($5f4351e0b7aaad84$var$PRIORITY_VISUAL_GLOBAL, (0, $dc892e38568f2418$export$144ac3beded415d9));
$5f4351e0b7aaad84$export$5f32c1eb94c381bb($5f4351e0b7aaad84$var$PRIORITY_VISUAL_CHART_DATA_CUSTOM, (0, $dc892e38568f2418$export$435b956f7f1071fb));
$5f4351e0b7aaad84$export$5f32c1eb94c381bb($5f4351e0b7aaad84$var$PRIORITY_VISUAL_DECAL, (0, $8cd3e5668907de87$export$2e2bcd8739ae039));
$5f4351e0b7aaad84$export$77095792a057b768((0, $5bdb0305cf295442$export$2e2bcd8739ae039));
$5f4351e0b7aaad84$export$d575e6557ac1729f($5f4351e0b7aaad84$var$PRIORITY_PROCESSOR_DATASTACK, (0, $7b2947e84eff5f10$export$2e2bcd8739ae039));
$5f4351e0b7aaad84$export$e06b68a82007c015("default", (0, $922cf61a00310968$export$2e2bcd8739ae039));
// Default actions
$5f4351e0b7aaad84$export$408c24786cd729c6({
    type: (0, $e3c0a36328c28ac4$export$df035d873a9de64f),
    event: (0, $e3c0a36328c28ac4$export$df035d873a9de64f),
    update: (0, $e3c0a36328c28ac4$export$df035d873a9de64f)
}, (0, $e44eb14c4271d0f9$export$8793edee2d425525));
$5f4351e0b7aaad84$export$408c24786cd729c6({
    type: (0, $e3c0a36328c28ac4$export$f8a2f7807cc185ea),
    event: (0, $e3c0a36328c28ac4$export$f8a2f7807cc185ea),
    update: (0, $e3c0a36328c28ac4$export$f8a2f7807cc185ea)
}, (0, $e44eb14c4271d0f9$export$8793edee2d425525));
$5f4351e0b7aaad84$export$408c24786cd729c6({
    type: (0, $e3c0a36328c28ac4$export$89616263e7d38fe9),
    event: (0, $e3c0a36328c28ac4$export$89616263e7d38fe9),
    update: (0, $e3c0a36328c28ac4$export$89616263e7d38fe9)
}, (0, $e44eb14c4271d0f9$export$8793edee2d425525));
$5f4351e0b7aaad84$export$408c24786cd729c6({
    type: (0, $e3c0a36328c28ac4$export$7636ad95c0f68a79),
    event: (0, $e3c0a36328c28ac4$export$7636ad95c0f68a79),
    update: (0, $e3c0a36328c28ac4$export$7636ad95c0f68a79)
}, (0, $e44eb14c4271d0f9$export$8793edee2d425525));
$5f4351e0b7aaad84$export$408c24786cd729c6({
    type: (0, $e3c0a36328c28ac4$export$1e90ed8a25542516),
    event: (0, $e3c0a36328c28ac4$export$1e90ed8a25542516),
    update: (0, $e3c0a36328c28ac4$export$1e90ed8a25542516)
}, (0, $e44eb14c4271d0f9$export$8793edee2d425525));
// Default theme
$5f4351e0b7aaad84$export$f9c59eed5de5ff80("light", (0, $962c77692571bac1$export$2e2bcd8739ae039));
$5f4351e0b7aaad84$export$f9c59eed5de5ff80("dark", (0, $fb99273772ba8f3f$export$2e2bcd8739ae039));
var $5f4351e0b7aaad84$export$73cae5e090579589 = {};

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 







var $2456b78b4596463d$var$extensions = [];
var $2456b78b4596463d$var$extensionRegisters = {
    registerPreprocessor: (0, $5f4351e0b7aaad84$export$77095792a057b768),
    registerProcessor: (0, $5f4351e0b7aaad84$export$d575e6557ac1729f),
    registerPostInit: (0, $5f4351e0b7aaad84$export$c8c249911ee8c1ed),
    registerPostUpdate: (0, $5f4351e0b7aaad84$export$99560909c18c76bb),
    registerUpdateLifecycle: (0, $5f4351e0b7aaad84$export$c9ec4b5faef04865),
    registerAction: (0, $5f4351e0b7aaad84$export$408c24786cd729c6),
    registerCoordinateSystem: (0, $5f4351e0b7aaad84$export$1dd5e025a8a37dd),
    registerLayout: (0, $5f4351e0b7aaad84$export$d768f97700ca6bea),
    registerVisual: (0, $5f4351e0b7aaad84$export$5f32c1eb94c381bb),
    registerTransform: (0, $5f4351e0b7aaad84$export$f01d71dd0389d7e4),
    registerLoading: (0, $5f4351e0b7aaad84$export$e06b68a82007c015),
    registerMap: (0, $5f4351e0b7aaad84$export$d456de060be2dba1),
    registerImpl: (0, $afa1d4c38c26c33d$export$9b808fd12256ddd3),
    PRIORITY: (0, $5f4351e0b7aaad84$export$bb34f3538ba26c7e),
    ComponentModel: (0, $a756077528c07361$export$2e2bcd8739ae039),
    ComponentView: (0, $ced42ef9869a1e4c$export$2e2bcd8739ae039),
    SeriesModel: (0, $3301f75840f3090f$export$2e2bcd8739ae039),
    ChartView: (0, $05e95ba2f0d93dbf$export$2e2bcd8739ae039),
    // TODO Use ComponentModel and SeriesModel instead of Constructor
    registerComponentModel: function(ComponentModelClass) {
        (0, $a756077528c07361$export$2e2bcd8739ae039).registerClass(ComponentModelClass);
    },
    registerComponentView: function(ComponentViewClass) {
        (0, $ced42ef9869a1e4c$export$2e2bcd8739ae039).registerClass(ComponentViewClass);
    },
    registerSeriesModel: function(SeriesModelClass) {
        (0, $3301f75840f3090f$export$2e2bcd8739ae039).registerClass(SeriesModelClass);
    },
    registerChartView: function(ChartViewClass) {
        (0, $05e95ba2f0d93dbf$export$2e2bcd8739ae039).registerClass(ChartViewClass);
    },
    registerSubTypeDefaulter: function(componentType, defaulter) {
        (0, $a756077528c07361$export$2e2bcd8739ae039).registerSubTypeDefaulter(componentType, defaulter);
    },
    registerPainter: function(painterType, PainterCtor) {
        (0, $2d04db0a24ba5285$export$a3e793ccb11823a5)(painterType, PainterCtor);
    }
};
function $2456b78b4596463d$export$1f96ae73734a86cc(ext) {
    if ((0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(ext)) {
        // use([ChartLine, ChartBar]);
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(ext, function(singleExt) {
            $2456b78b4596463d$export$1f96ae73734a86cc(singleExt);
        });
        return;
    }
    if ((0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)($2456b78b4596463d$var$extensions, ext) >= 0) return;
    $2456b78b4596463d$var$extensions.push(ext);
    if ((0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(ext)) ext = {
        install: ext
    };
    ext.install($2456b78b4596463d$var$extensionRegisters);
}


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ // TODO: move labels out of viewport.




/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 







var $236f5e00db2cbaf8$var$PI2 = Math.PI * 2;
var $236f5e00db2cbaf8$var$CMD = (0, $9638c378ac086dea$export$2e2bcd8739ae039).CMD;
var $236f5e00db2cbaf8$var$DEFAULT_SEARCH_SPACE = [
    "top",
    "right",
    "bottom",
    "left"
];
function $236f5e00db2cbaf8$var$getCandidateAnchor(pos, distance, rect, outPt, outDir) {
    var width = rect.width;
    var height = rect.height;
    switch(pos){
        case "top":
            outPt.set(rect.x + width / 2, rect.y - distance);
            outDir.set(0, -1);
            break;
        case "bottom":
            outPt.set(rect.x + width / 2, rect.y + height + distance);
            outDir.set(0, 1);
            break;
        case "left":
            outPt.set(rect.x - distance, rect.y + height / 2);
            outDir.set(-1, 0);
            break;
        case "right":
            outPt.set(rect.x + width + distance, rect.y + height / 2);
            outDir.set(1, 0);
            break;
    }
}
function $236f5e00db2cbaf8$var$projectPointToArc(cx, cy, r, startAngle, endAngle, anticlockwise, x, y, out) {
    x -= cx;
    y -= cy;
    var d = Math.sqrt(x * x + y * y);
    x /= d;
    y /= d;
    // Intersect point.
    var ox = x * r + cx;
    var oy = y * r + cy;
    if (Math.abs(startAngle - endAngle) % $236f5e00db2cbaf8$var$PI2 < 1e-4) {
        // Is a circle
        out[0] = ox;
        out[1] = oy;
        return d - r;
    }
    if (anticlockwise) {
        var tmp = startAngle;
        startAngle = (0, $aa92342602f64ba4$export$d44861331f213635)(endAngle);
        endAngle = (0, $aa92342602f64ba4$export$d44861331f213635)(tmp);
    } else {
        startAngle = (0, $aa92342602f64ba4$export$d44861331f213635)(startAngle);
        endAngle = (0, $aa92342602f64ba4$export$d44861331f213635)(endAngle);
    }
    if (startAngle > endAngle) endAngle += $236f5e00db2cbaf8$var$PI2;
    var angle = Math.atan2(y, x);
    if (angle < 0) angle += $236f5e00db2cbaf8$var$PI2;
    if (angle >= startAngle && angle <= endAngle || angle + $236f5e00db2cbaf8$var$PI2 >= startAngle && angle + $236f5e00db2cbaf8$var$PI2 <= endAngle) {
        // Project point is on the arc.
        out[0] = ox;
        out[1] = oy;
        return d - r;
    }
    var x1 = r * Math.cos(startAngle) + cx;
    var y1 = r * Math.sin(startAngle) + cy;
    var x2 = r * Math.cos(endAngle) + cx;
    var y2 = r * Math.sin(endAngle) + cy;
    var d1 = (x1 - x) * (x1 - x) + (y1 - y) * (y1 - y);
    var d2 = (x2 - x) * (x2 - x) + (y2 - y) * (y2 - y);
    if (d1 < d2) {
        out[0] = x1;
        out[1] = y1;
        return Math.sqrt(d1);
    } else {
        out[0] = x2;
        out[1] = y2;
        return Math.sqrt(d2);
    }
}
function $236f5e00db2cbaf8$var$projectPointToLine(x1, y1, x2, y2, x, y, out, limitToEnds) {
    var dx = x - x1;
    var dy = y - y1;
    var dx1 = x2 - x1;
    var dy1 = y2 - y1;
    var lineLen = Math.sqrt(dx1 * dx1 + dy1 * dy1);
    dx1 /= lineLen;
    dy1 /= lineLen;
    // dot product
    var projectedLen = dx * dx1 + dy * dy1;
    var t = projectedLen / lineLen;
    if (limitToEnds) t = Math.min(Math.max(t, 0), 1);
    t *= lineLen;
    var ox = out[0] = x1 + t * dx1;
    var oy = out[1] = y1 + t * dy1;
    return Math.sqrt((ox - x) * (ox - x) + (oy - y) * (oy - y));
}
function $236f5e00db2cbaf8$var$projectPointToRect(x1, y1, width, height, x, y, out) {
    if (width < 0) {
        x1 = x1 + width;
        width = -width;
    }
    if (height < 0) {
        y1 = y1 + height;
        height = -height;
    }
    var x2 = x1 + width;
    var y2 = y1 + height;
    var ox = out[0] = Math.min(Math.max(x, x1), x2);
    var oy = out[1] = Math.min(Math.max(y, y1), y2);
    return Math.sqrt((ox - x) * (ox - x) + (oy - y) * (oy - y));
}
var $236f5e00db2cbaf8$var$tmpPt = [];
function $236f5e00db2cbaf8$var$nearestPointOnRect(pt, rect, out) {
    var dist = $236f5e00db2cbaf8$var$projectPointToRect(rect.x, rect.y, rect.width, rect.height, pt.x, pt.y, $236f5e00db2cbaf8$var$tmpPt);
    out.set($236f5e00db2cbaf8$var$tmpPt[0], $236f5e00db2cbaf8$var$tmpPt[1]);
    return dist;
}
/**
 * Calculate min distance corresponding point.
 * This method won't evaluate if point is in the path.
 */ function $236f5e00db2cbaf8$var$nearestPointOnPath(pt, path, out) {
    var xi = 0;
    var yi = 0;
    var x0 = 0;
    var y0 = 0;
    var x1;
    var y1;
    var minDist = Infinity;
    var data = path.data;
    var x = pt.x;
    var y = pt.y;
    for(var i = 0; i < data.length;){
        var cmd = data[i++];
        if (i === 1) {
            xi = data[i];
            yi = data[i + 1];
            x0 = xi;
            y0 = yi;
        }
        var d = minDist;
        switch(cmd){
            case $236f5e00db2cbaf8$var$CMD.M:
                // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点
                // 在 closePath 的时候使用
                x0 = data[i++];
                y0 = data[i++];
                xi = x0;
                yi = y0;
                break;
            case $236f5e00db2cbaf8$var$CMD.L:
                d = $236f5e00db2cbaf8$var$projectPointToLine(xi, yi, data[i], data[i + 1], x, y, $236f5e00db2cbaf8$var$tmpPt, true);
                xi = data[i++];
                yi = data[i++];
                break;
            case $236f5e00db2cbaf8$var$CMD.C:
                d = (0, $b1facc0bcf653177$export$dbaa3801d1284367)(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], x, y, $236f5e00db2cbaf8$var$tmpPt);
                xi = data[i++];
                yi = data[i++];
                break;
            case $236f5e00db2cbaf8$var$CMD.Q:
                d = (0, $b1facc0bcf653177$export$81915a594fe10dee)(xi, yi, data[i++], data[i++], data[i], data[i + 1], x, y, $236f5e00db2cbaf8$var$tmpPt);
                xi = data[i++];
                yi = data[i++];
                break;
            case $236f5e00db2cbaf8$var$CMD.A:
                // TODO Arc 判断的开销比较大
                var cx = data[i++];
                var cy = data[i++];
                var rx = data[i++];
                var ry = data[i++];
                var theta = data[i++];
                var dTheta = data[i++];
                // TODO Arc 旋转
                i += 1;
                var anticlockwise = !!(1 - data[i++]);
                x1 = Math.cos(theta) * rx + cx;
                y1 = Math.sin(theta) * ry + cy;
                // 不是直接使用 arc 命令
                if (i <= 1) {
                    // 第一个命令起点还未定义
                    x0 = x1;
                    y0 = y1;
                }
                // zr 使用scale来模拟椭圆, 这里也对x做一定的缩放
                var _x = (x - cx) * ry / rx + cx;
                d = $236f5e00db2cbaf8$var$projectPointToArc(cx, cy, ry, theta, theta + dTheta, anticlockwise, _x, y, $236f5e00db2cbaf8$var$tmpPt);
                xi = Math.cos(theta + dTheta) * rx + cx;
                yi = Math.sin(theta + dTheta) * ry + cy;
                break;
            case $236f5e00db2cbaf8$var$CMD.R:
                x0 = xi = data[i++];
                y0 = yi = data[i++];
                var width = data[i++];
                var height = data[i++];
                d = $236f5e00db2cbaf8$var$projectPointToRect(x0, y0, width, height, x, y, $236f5e00db2cbaf8$var$tmpPt);
                break;
            case $236f5e00db2cbaf8$var$CMD.Z:
                d = $236f5e00db2cbaf8$var$projectPointToLine(xi, yi, x0, y0, x, y, $236f5e00db2cbaf8$var$tmpPt, true);
                xi = x0;
                yi = y0;
                break;
        }
        if (d < minDist) {
            minDist = d;
            out.set($236f5e00db2cbaf8$var$tmpPt[0], $236f5e00db2cbaf8$var$tmpPt[1]);
        }
    }
    return minDist;
}
// Temporal variable for intermediate usage.
var $236f5e00db2cbaf8$var$pt0 = new (0, $98bf1aab7582d293$export$2e2bcd8739ae039)();
var $236f5e00db2cbaf8$var$pt1 = new (0, $98bf1aab7582d293$export$2e2bcd8739ae039)();
var $236f5e00db2cbaf8$var$pt2 = new (0, $98bf1aab7582d293$export$2e2bcd8739ae039)();
var $236f5e00db2cbaf8$var$dir = new (0, $98bf1aab7582d293$export$2e2bcd8739ae039)();
var $236f5e00db2cbaf8$var$dir2 = new (0, $98bf1aab7582d293$export$2e2bcd8739ae039)();
function $236f5e00db2cbaf8$export$cc93ba643cd97d83(target, labelLineModel) {
    if (!target) return;
    var labelLine = target.getTextGuideLine();
    var label = target.getTextContent();
    // Needs to create text guide in each charts.
    if (!(label && labelLine)) return;
    var labelGuideConfig = target.textGuideLineConfig || {};
    var points = [
        [
            0,
            0
        ],
        [
            0,
            0
        ],
        [
            0,
            0
        ]
    ];
    var searchSpace = labelGuideConfig.candidates || $236f5e00db2cbaf8$var$DEFAULT_SEARCH_SPACE;
    var labelRect = label.getBoundingRect().clone();
    labelRect.applyTransform(label.getComputedTransform());
    var minDist = Infinity;
    var anchorPoint = labelGuideConfig.anchor;
    var targetTransform = target.getComputedTransform();
    var targetInversedTransform = targetTransform && (0, $27fca49e20b3ee21$export$6897c284b6f9f4dc)([], targetTransform);
    var len = labelLineModel.get("length2") || 0;
    if (anchorPoint) $236f5e00db2cbaf8$var$pt2.copy(anchorPoint);
    for(var i = 0; i < searchSpace.length; i++){
        var candidate = searchSpace[i];
        $236f5e00db2cbaf8$var$getCandidateAnchor(candidate, 0, labelRect, $236f5e00db2cbaf8$var$pt0, $236f5e00db2cbaf8$var$dir);
        (0, $98bf1aab7582d293$export$2e2bcd8739ae039).scaleAndAdd($236f5e00db2cbaf8$var$pt1, $236f5e00db2cbaf8$var$pt0, $236f5e00db2cbaf8$var$dir, len);
        // Transform to target coord space.
        $236f5e00db2cbaf8$var$pt1.transform(targetInversedTransform);
        // Note: getBoundingRect will ensure the `path` being created.
        var boundingRect = target.getBoundingRect();
        var dist = anchorPoint ? anchorPoint.distance($236f5e00db2cbaf8$var$pt1) : target instanceof (0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039) ? $236f5e00db2cbaf8$var$nearestPointOnPath($236f5e00db2cbaf8$var$pt1, target.path, $236f5e00db2cbaf8$var$pt2) : $236f5e00db2cbaf8$var$nearestPointOnRect($236f5e00db2cbaf8$var$pt1, boundingRect, $236f5e00db2cbaf8$var$pt2);
        // TODO pt2 is in the path
        if (dist < minDist) {
            minDist = dist;
            // Transform back to global space.
            $236f5e00db2cbaf8$var$pt1.transform(targetTransform);
            $236f5e00db2cbaf8$var$pt2.transform(targetTransform);
            $236f5e00db2cbaf8$var$pt2.toArray(points[0]);
            $236f5e00db2cbaf8$var$pt1.toArray(points[1]);
            $236f5e00db2cbaf8$var$pt0.toArray(points[2]);
        }
    }
    $236f5e00db2cbaf8$export$ac52062003fbe6a(points, labelLineModel.get("minTurnAngle"));
    labelLine.setShape({
        points: points
    });
}
// Temporal variable for the limitTurnAngle function
var $236f5e00db2cbaf8$var$tmpArr = [];
var $236f5e00db2cbaf8$var$tmpProjPoint = new (0, $98bf1aab7582d293$export$2e2bcd8739ae039)();
function $236f5e00db2cbaf8$export$ac52062003fbe6a(linePoints, minTurnAngle) {
    if (!(minTurnAngle <= 180 && minTurnAngle > 0)) return;
    minTurnAngle = minTurnAngle / 180 * Math.PI;
    // The line points can be
    //      /pt1----pt2 (label)
    //     /
    // pt0/
    $236f5e00db2cbaf8$var$pt0.fromArray(linePoints[0]);
    $236f5e00db2cbaf8$var$pt1.fromArray(linePoints[1]);
    $236f5e00db2cbaf8$var$pt2.fromArray(linePoints[2]);
    (0, $98bf1aab7582d293$export$2e2bcd8739ae039).sub($236f5e00db2cbaf8$var$dir, $236f5e00db2cbaf8$var$pt0, $236f5e00db2cbaf8$var$pt1);
    (0, $98bf1aab7582d293$export$2e2bcd8739ae039).sub($236f5e00db2cbaf8$var$dir2, $236f5e00db2cbaf8$var$pt2, $236f5e00db2cbaf8$var$pt1);
    var len1 = $236f5e00db2cbaf8$var$dir.len();
    var len2 = $236f5e00db2cbaf8$var$dir2.len();
    if (len1 < 1e-3 || len2 < 1e-3) return;
    $236f5e00db2cbaf8$var$dir.scale(1 / len1);
    $236f5e00db2cbaf8$var$dir2.scale(1 / len2);
    var angleCos = $236f5e00db2cbaf8$var$dir.dot($236f5e00db2cbaf8$var$dir2);
    var minTurnAngleCos = Math.cos(minTurnAngle);
    if (minTurnAngleCos < angleCos) {
        // Smaller than minTurnAngle
        // Calculate project point of pt0 on pt1-pt2
        var d = $236f5e00db2cbaf8$var$projectPointToLine($236f5e00db2cbaf8$var$pt1.x, $236f5e00db2cbaf8$var$pt1.y, $236f5e00db2cbaf8$var$pt2.x, $236f5e00db2cbaf8$var$pt2.y, $236f5e00db2cbaf8$var$pt0.x, $236f5e00db2cbaf8$var$pt0.y, $236f5e00db2cbaf8$var$tmpArr, false);
        $236f5e00db2cbaf8$var$tmpProjPoint.fromArray($236f5e00db2cbaf8$var$tmpArr);
        // Calculate new projected length with limited minTurnAngle and get the new connect point
        $236f5e00db2cbaf8$var$tmpProjPoint.scaleAndAdd($236f5e00db2cbaf8$var$dir2, d / Math.tan(Math.PI - minTurnAngle));
        // Limit the new calculated connect point between pt1 and pt2.
        var t = $236f5e00db2cbaf8$var$pt2.x !== $236f5e00db2cbaf8$var$pt1.x ? ($236f5e00db2cbaf8$var$tmpProjPoint.x - $236f5e00db2cbaf8$var$pt1.x) / ($236f5e00db2cbaf8$var$pt2.x - $236f5e00db2cbaf8$var$pt1.x) : ($236f5e00db2cbaf8$var$tmpProjPoint.y - $236f5e00db2cbaf8$var$pt1.y) / ($236f5e00db2cbaf8$var$pt2.y - $236f5e00db2cbaf8$var$pt1.y);
        if (isNaN(t)) return;
        if (t < 0) (0, $98bf1aab7582d293$export$2e2bcd8739ae039).copy($236f5e00db2cbaf8$var$tmpProjPoint, $236f5e00db2cbaf8$var$pt1);
        else if (t > 1) (0, $98bf1aab7582d293$export$2e2bcd8739ae039).copy($236f5e00db2cbaf8$var$tmpProjPoint, $236f5e00db2cbaf8$var$pt2);
        $236f5e00db2cbaf8$var$tmpProjPoint.toArray(linePoints[1]);
    }
}
function $236f5e00db2cbaf8$export$973e1fdb2708f71b(linePoints, surfaceNormal, maxSurfaceAngle) {
    if (!(maxSurfaceAngle <= 180 && maxSurfaceAngle > 0)) return;
    maxSurfaceAngle = maxSurfaceAngle / 180 * Math.PI;
    $236f5e00db2cbaf8$var$pt0.fromArray(linePoints[0]);
    $236f5e00db2cbaf8$var$pt1.fromArray(linePoints[1]);
    $236f5e00db2cbaf8$var$pt2.fromArray(linePoints[2]);
    (0, $98bf1aab7582d293$export$2e2bcd8739ae039).sub($236f5e00db2cbaf8$var$dir, $236f5e00db2cbaf8$var$pt1, $236f5e00db2cbaf8$var$pt0);
    (0, $98bf1aab7582d293$export$2e2bcd8739ae039).sub($236f5e00db2cbaf8$var$dir2, $236f5e00db2cbaf8$var$pt2, $236f5e00db2cbaf8$var$pt1);
    var len1 = $236f5e00db2cbaf8$var$dir.len();
    var len2 = $236f5e00db2cbaf8$var$dir2.len();
    if (len1 < 1e-3 || len2 < 1e-3) return;
    $236f5e00db2cbaf8$var$dir.scale(1 / len1);
    $236f5e00db2cbaf8$var$dir2.scale(1 / len2);
    var angleCos = $236f5e00db2cbaf8$var$dir.dot(surfaceNormal);
    var maxSurfaceAngleCos = Math.cos(maxSurfaceAngle);
    if (angleCos < maxSurfaceAngleCos) {
        // Calculate project point of pt0 on pt1-pt2
        var d = $236f5e00db2cbaf8$var$projectPointToLine($236f5e00db2cbaf8$var$pt1.x, $236f5e00db2cbaf8$var$pt1.y, $236f5e00db2cbaf8$var$pt2.x, $236f5e00db2cbaf8$var$pt2.y, $236f5e00db2cbaf8$var$pt0.x, $236f5e00db2cbaf8$var$pt0.y, $236f5e00db2cbaf8$var$tmpArr, false);
        $236f5e00db2cbaf8$var$tmpProjPoint.fromArray($236f5e00db2cbaf8$var$tmpArr);
        var HALF_PI = Math.PI / 2;
        var angle2 = Math.acos($236f5e00db2cbaf8$var$dir2.dot(surfaceNormal));
        var newAngle = HALF_PI + angle2 - maxSurfaceAngle;
        if (newAngle >= HALF_PI) // parallel
        (0, $98bf1aab7582d293$export$2e2bcd8739ae039).copy($236f5e00db2cbaf8$var$tmpProjPoint, $236f5e00db2cbaf8$var$pt2);
        else {
            // Calculate new projected length with limited minTurnAngle and get the new connect point
            $236f5e00db2cbaf8$var$tmpProjPoint.scaleAndAdd($236f5e00db2cbaf8$var$dir2, d / Math.tan(Math.PI / 2 - newAngle));
            // Limit the new calculated connect point between pt1 and pt2.
            var t = $236f5e00db2cbaf8$var$pt2.x !== $236f5e00db2cbaf8$var$pt1.x ? ($236f5e00db2cbaf8$var$tmpProjPoint.x - $236f5e00db2cbaf8$var$pt1.x) / ($236f5e00db2cbaf8$var$pt2.x - $236f5e00db2cbaf8$var$pt1.x) : ($236f5e00db2cbaf8$var$tmpProjPoint.y - $236f5e00db2cbaf8$var$pt1.y) / ($236f5e00db2cbaf8$var$pt2.y - $236f5e00db2cbaf8$var$pt1.y);
            if (isNaN(t)) return;
            if (t < 0) (0, $98bf1aab7582d293$export$2e2bcd8739ae039).copy($236f5e00db2cbaf8$var$tmpProjPoint, $236f5e00db2cbaf8$var$pt1);
            else if (t > 1) (0, $98bf1aab7582d293$export$2e2bcd8739ae039).copy($236f5e00db2cbaf8$var$tmpProjPoint, $236f5e00db2cbaf8$var$pt2);
        }
        $236f5e00db2cbaf8$var$tmpProjPoint.toArray(linePoints[1]);
    }
}
function $236f5e00db2cbaf8$var$setLabelLineState(labelLine, ignore, stateName, stateModel) {
    var isNormal = stateName === "normal";
    var stateObj = isNormal ? labelLine : labelLine.ensureState(stateName);
    // Make sure display.
    stateObj.ignore = ignore;
    // Set smooth
    var smooth = stateModel.get("smooth");
    if (smooth && smooth === true) smooth = 0.3;
    stateObj.shape = stateObj.shape || {};
    if (smooth > 0) stateObj.shape.smooth = smooth;
    var styleObj = stateModel.getModel("lineStyle").getLineStyle();
    isNormal ? labelLine.useStyle(styleObj) : stateObj.style = styleObj;
}
function $236f5e00db2cbaf8$var$buildLabelLinePath(path, shape) {
    var smooth = shape.smooth;
    var points = shape.points;
    if (!points) return;
    path.moveTo(points[0][0], points[0][1]);
    if (smooth > 0 && points.length >= 3) {
        var len1 = $187eb1bf1a49fd34$export$6c4a311cc157c764(points[0], points[1]);
        var len2 = $187eb1bf1a49fd34$export$6c4a311cc157c764(points[1], points[2]);
        if (!len1 || !len2) {
            path.lineTo(points[1][0], points[1][1]);
            path.lineTo(points[2][0], points[2][1]);
            return;
        }
        var moveLen = Math.min(len1, len2) * smooth;
        var midPoint0 = $187eb1bf1a49fd34$export$3a89f8d6f6bf6c9f([], points[1], points[0], moveLen / len1);
        var midPoint2 = $187eb1bf1a49fd34$export$3a89f8d6f6bf6c9f([], points[1], points[2], moveLen / len2);
        var midPoint1 = $187eb1bf1a49fd34$export$3a89f8d6f6bf6c9f([], midPoint0, midPoint2, 0.5);
        path.bezierCurveTo(midPoint0[0], midPoint0[1], midPoint0[0], midPoint0[1], midPoint1[0], midPoint1[1]);
        path.bezierCurveTo(midPoint2[0], midPoint2[1], midPoint2[0], midPoint2[1], points[2][0], points[2][1]);
    } else for(var i = 1; i < points.length; i++)path.lineTo(points[i][0], points[i][1]);
}
function $236f5e00db2cbaf8$export$c09e0b0574bdd2dc(targetEl, statesModels, defaultStyle) {
    var labelLine = targetEl.getTextGuideLine();
    var label = targetEl.getTextContent();
    if (!label) {
        // Not show label line if there is no label.
        if (labelLine) targetEl.removeTextGuideLine();
        return;
    }
    var normalModel = statesModels.normal;
    var showNormal = normalModel.get("show");
    var labelIgnoreNormal = label.ignore;
    for(var i = 0; i < (0, $e3c0a36328c28ac4$export$57ee5306b85ad7d5).length; i++){
        var stateName = (0, $e3c0a36328c28ac4$export$57ee5306b85ad7d5)[i];
        var stateModel = statesModels[stateName];
        var isNormal = stateName === "normal";
        if (stateModel) {
            var stateShow = stateModel.get("show");
            var isLabelIgnored = isNormal ? labelIgnoreNormal : (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(label.states[stateName] && label.states[stateName].ignore, labelIgnoreNormal);
            if (isLabelIgnored // Not show when label is not shown in this state.
             || !(0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(stateShow, showNormal) // Use normal state by default if not set.
            ) {
                var stateObj = isNormal ? labelLine : labelLine && labelLine.states[stateName];
                if (stateObj) stateObj.ignore = true;
                if (!!labelLine) $236f5e00db2cbaf8$var$setLabelLineState(labelLine, true, stateName, stateModel);
                continue;
            }
            // Create labelLine if not exists
            if (!labelLine) {
                labelLine = new (0, $8e5cb49aeb92b686$export$2e2bcd8739ae039)();
                targetEl.setTextGuideLine(labelLine);
                // Reset state of normal because it's new created.
                // NOTE: NORMAL should always been the first!
                if (!isNormal && (labelIgnoreNormal || !showNormal)) $236f5e00db2cbaf8$var$setLabelLineState(labelLine, true, "normal", statesModels.normal);
                // Use same state proxy.
                if (targetEl.stateProxy) labelLine.stateProxy = targetEl.stateProxy;
            }
            $236f5e00db2cbaf8$var$setLabelLineState(labelLine, false, stateName, stateModel);
        }
    }
    if (labelLine) {
        (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)(labelLine.style, defaultStyle);
        // Not fill.
        labelLine.style.fill = null;
        var showAbove = normalModel.get("showAbove");
        var labelLineConfig = targetEl.textGuideLineConfig = targetEl.textGuideLineConfig || {};
        labelLineConfig.showAbove = showAbove || false;
        // Custom the buildPath.
        labelLine.buildPath = $236f5e00db2cbaf8$var$buildLabelLinePath;
    }
}
function $236f5e00db2cbaf8$export$2979fdbf5ebce521(itemModel, labelLineName) {
    labelLineName = labelLineName || "labelLine";
    var statesModels = {
        normal: itemModel.getModel(labelLineName)
    };
    for(var i = 0; i < (0, $e3c0a36328c28ac4$export$151308dceb52d5b).length; i++){
        var stateName = (0, $e3c0a36328c28ac4$export$151308dceb52d5b)[i];
        statesModels[stateName] = itemModel.getModel([
            stateName,
            labelLineName
        ]);
    }
    return statesModels;
}




/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
function $345e515c98a3cbaf$export$6c403cad1ae3e239(input) {
    var list = [];
    for(var i = 0; i < input.length; i++){
        var rawItem = input[i];
        if (rawItem.defaultAttr.ignore) continue;
        var label = rawItem.label;
        var transform = label.getComputedTransform();
        // NOTE: Get bounding rect after getComputedTransform, or label may not been updated by the host el.
        var localRect = label.getBoundingRect();
        var isAxisAligned = !transform || transform[1] < 1e-5 && transform[2] < 1e-5;
        var minMargin = label.style.margin || 0;
        var globalRect = localRect.clone();
        globalRect.applyTransform(transform);
        globalRect.x -= minMargin / 2;
        globalRect.y -= minMargin / 2;
        globalRect.width += minMargin;
        globalRect.height += minMargin;
        var obb = isAxisAligned ? new (0, $7c86064f0296c532$export$2e2bcd8739ae039)(localRect, transform) : null;
        list.push({
            label: label,
            labelLine: rawItem.labelLine,
            rect: globalRect,
            localRect: localRect,
            obb: obb,
            priority: rawItem.priority,
            defaultAttr: rawItem.defaultAttr,
            layoutOption: rawItem.computedLayoutOption,
            axisAligned: isAxisAligned,
            transform: transform
        });
    }
    return list;
}
function $345e515c98a3cbaf$var$shiftLayout(list, xyDim, sizeDim, minBound, maxBound, balanceShift) {
    var len = list.length;
    if (len < 2) return;
    list.sort(function(a, b) {
        return a.rect[xyDim] - b.rect[xyDim];
    });
    var lastPos = 0;
    var delta;
    var adjusted = false;
    var shifts = [];
    var totalShifts = 0;
    for(var i = 0; i < len; i++){
        var item = list[i];
        var rect = item.rect;
        delta = rect[xyDim] - lastPos;
        if (delta < 0) {
            // shiftForward(i, len, -delta);
            rect[xyDim] -= delta;
            item.label[xyDim] -= delta;
            adjusted = true;
        }
        var shift = Math.max(-delta, 0);
        shifts.push(shift);
        totalShifts += shift;
        lastPos = rect[xyDim] + rect[sizeDim];
    }
    if (totalShifts > 0 && balanceShift) // Shift back to make the distribution more equally.
    shiftList(-totalShifts / len, 0, len);
    // TODO bleedMargin?
    var first = list[0];
    var last = list[len - 1];
    var minGap;
    var maxGap;
    updateMinMaxGap();
    // If ends exceed two bounds, squeeze at most 80%, then take the gap of two bounds.
    minGap < 0 && squeezeGaps(-minGap, 0.8);
    maxGap < 0 && squeezeGaps(maxGap, 0.8);
    updateMinMaxGap();
    takeBoundsGap(minGap, maxGap, 1);
    takeBoundsGap(maxGap, minGap, -1);
    // Handle bailout when there is not enough space.
    updateMinMaxGap();
    if (minGap < 0) squeezeWhenBailout(-minGap);
    if (maxGap < 0) squeezeWhenBailout(maxGap);
    function updateMinMaxGap() {
        minGap = first.rect[xyDim] - minBound;
        maxGap = maxBound - last.rect[xyDim] - last.rect[sizeDim];
    }
    function takeBoundsGap(gapThisBound, gapOtherBound, moveDir) {
        if (gapThisBound < 0) {
            // Move from other gap if can.
            var moveFromMaxGap = Math.min(gapOtherBound, -gapThisBound);
            if (moveFromMaxGap > 0) {
                shiftList(moveFromMaxGap * moveDir, 0, len);
                var remained = moveFromMaxGap + gapThisBound;
                if (remained < 0) squeezeGaps(-remained * moveDir, 1);
            } else squeezeGaps(-gapThisBound * moveDir, 1);
        }
    }
    function shiftList(delta, start, end) {
        if (delta !== 0) adjusted = true;
        for(var i = start; i < end; i++){
            var item = list[i];
            var rect = item.rect;
            rect[xyDim] += delta;
            item.label[xyDim] += delta;
        }
    }
    // Squeeze gaps if the labels exceed margin.
    function squeezeGaps(delta, maxSqeezePercent) {
        var gaps = [];
        var totalGaps = 0;
        for(var i = 1; i < len; i++){
            var prevItemRect = list[i - 1].rect;
            var gap = Math.max(list[i].rect[xyDim] - prevItemRect[xyDim] - prevItemRect[sizeDim], 0);
            gaps.push(gap);
            totalGaps += gap;
        }
        if (!totalGaps) return;
        var squeezePercent = Math.min(Math.abs(delta) / totalGaps, maxSqeezePercent);
        if (delta > 0) for(var i = 0; i < len - 1; i++){
            // Distribute the shift delta to all gaps.
            var movement = gaps[i] * squeezePercent;
            // Forward
            shiftList(movement, 0, i + 1);
        }
        else // Backward
        for(var i = len - 1; i > 0; i--){
            // Distribute the shift delta to all gaps.
            var movement = gaps[i - 1] * squeezePercent;
            shiftList(-movement, i, len);
        }
    }
    /**
   * Squeeze to allow overlap if there is no more space available.
   * Let other overlapping strategy like hideOverlap do the job instead of keep exceeding the bounds.
   */ function squeezeWhenBailout(delta) {
        var dir = delta < 0 ? -1 : 1;
        delta = Math.abs(delta);
        var moveForEachLabel = Math.ceil(delta / (len - 1));
        for(var i = 0; i < len - 1; i++){
            if (dir > 0) // Forward
            shiftList(moveForEachLabel, 0, i + 1);
            else // Backward
            shiftList(-moveForEachLabel, len - i - 1, len);
            delta -= moveForEachLabel;
            if (delta <= 0) return;
        }
    }
    return adjusted;
}
function $345e515c98a3cbaf$export$b6b2b07f8ed32bd6(list, leftBound, rightBound, // If average the shifts on all labels and add them to 0
// TODO: Not sure if should enable it.
// Pros: The angle of lines will distribute more equally
// Cons: In some layout. It may not what user wanted. like in pie. the label of last sector is usually changed unexpectedly.
balanceShift) {
    return $345e515c98a3cbaf$var$shiftLayout(list, "x", "width", leftBound, rightBound, balanceShift);
}
function $345e515c98a3cbaf$export$118c25e0932528e4(list, topBound, bottomBound, // If average the shifts on all labels and add them to 0
balanceShift) {
    return $345e515c98a3cbaf$var$shiftLayout(list, "y", "height", topBound, bottomBound, balanceShift);
}
function $345e515c98a3cbaf$export$8ce774e164a49410(labelList) {
    var displayedLabels = [];
    // TODO, render overflow visible first, put in the displayedLabels.
    labelList.sort(function(a, b) {
        return b.priority - a.priority;
    });
    var globalRect = new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)(0, 0, 0, 0);
    function hideEl(el) {
        if (!el.ignore) {
            // Show on emphasis.
            var emphasisState = el.ensureState("emphasis");
            if (emphasisState.ignore == null) emphasisState.ignore = false;
        }
        el.ignore = true;
    }
    for(var i = 0; i < labelList.length; i++){
        var labelItem = labelList[i];
        var isAxisAligned = labelItem.axisAligned;
        var localRect = labelItem.localRect;
        var transform = labelItem.transform;
        var label = labelItem.label;
        var labelLine = labelItem.labelLine;
        globalRect.copy(labelItem.rect);
        // Add a threshold because layout may be aligned precisely.
        globalRect.width -= 0.1;
        globalRect.height -= 0.1;
        globalRect.x += 0.05;
        globalRect.y += 0.05;
        var obb = labelItem.obb;
        var overlapped = false;
        for(var j = 0; j < displayedLabels.length; j++){
            var existsTextCfg = displayedLabels[j];
            // Fast rejection.
            if (!globalRect.intersect(existsTextCfg.rect)) continue;
            if (isAxisAligned && existsTextCfg.axisAligned) {
                // Is overlapped
                overlapped = true;
                break;
            }
            if (!existsTextCfg.obb) // If self is not axis aligned. But other is.
            existsTextCfg.obb = new (0, $7c86064f0296c532$export$2e2bcd8739ae039)(existsTextCfg.localRect, existsTextCfg.transform);
            if (!obb) // If self is axis aligned. But other is not.
            obb = new (0, $7c86064f0296c532$export$2e2bcd8739ae039)(localRect, transform);
            if (obb.intersect(existsTextCfg.obb)) {
                overlapped = true;
                break;
            }
        }
        // TODO Callback to determine if this overlap should be handled?
        if (overlapped) {
            hideEl(label);
            labelLine && hideEl(labelLine);
        } else {
            label.attr("ignore", labelItem.defaultAttr.ignore);
            labelLine && labelLine.attr("ignore", labelItem.defaultAttr.labelGuideIgnore);
            displayedLabels.push(labelItem);
        }
    }
}




function $88fd6bd586b939a5$var$cloneArr(points) {
    if (points) {
        var newPoints = [];
        for(var i = 0; i < points.length; i++)newPoints.push(points[i].slice());
        return newPoints;
    }
}
function $88fd6bd586b939a5$var$prepareLayoutCallbackParams(labelItem, hostEl) {
    var label = labelItem.label;
    var labelLine = hostEl && hostEl.getTextGuideLine();
    return {
        dataIndex: labelItem.dataIndex,
        dataType: labelItem.dataType,
        seriesIndex: labelItem.seriesModel.seriesIndex,
        text: labelItem.label.style.text,
        rect: labelItem.hostRect,
        labelRect: labelItem.rect,
        // x: labelAttr.x,
        // y: labelAttr.y,
        align: label.style.align,
        verticalAlign: label.style.verticalAlign,
        labelLinePoints: $88fd6bd586b939a5$var$cloneArr(labelLine && labelLine.shape.points)
    };
}
var $88fd6bd586b939a5$var$LABEL_OPTION_TO_STYLE_KEYS = [
    "align",
    "verticalAlign",
    "width",
    "height",
    "fontSize"
];
var $88fd6bd586b939a5$var$dummyTransformable = new (0, $039fe2b24eabe4b4$export$2e2bcd8739ae039)();
var $88fd6bd586b939a5$var$labelLayoutInnerStore = (0, $8917c02fd8256c67$export$64df9f8d92ae083f)();
var $88fd6bd586b939a5$var$labelLineAnimationStore = (0, $8917c02fd8256c67$export$64df9f8d92ae083f)();
function $88fd6bd586b939a5$var$extendWithKeys(target, source, keys) {
    for(var i = 0; i < keys.length; i++){
        var key = keys[i];
        if (source[key] != null) target[key] = source[key];
    }
}
var $88fd6bd586b939a5$var$LABEL_LAYOUT_PROPS = [
    "x",
    "y",
    "rotation"
];
var $88fd6bd586b939a5$var$LabelManager = /** @class */ function() {
    function LabelManager() {
        this._labelList = [];
        this._chartViewList = [];
    }
    LabelManager.prototype.clearLabels = function() {
        this._labelList = [];
        this._chartViewList = [];
    };
    /**
   * Add label to manager
   */ LabelManager.prototype._addLabel = function(dataIndex, dataType, seriesModel, label, layoutOption) {
        var labelStyle = label.style;
        var hostEl = label.__hostTarget;
        var textConfig = hostEl.textConfig || {};
        // TODO: If label is in other state.
        var labelTransform = label.getComputedTransform();
        var labelRect = label.getBoundingRect().plain();
        (0, $bf33be5184c664d0$export$2e2bcd8739ae039).applyTransform(labelRect, labelRect, labelTransform);
        if (labelTransform) $88fd6bd586b939a5$var$dummyTransformable.setLocalTransform(labelTransform);
        else {
            // Identity transform.
            $88fd6bd586b939a5$var$dummyTransformable.x = $88fd6bd586b939a5$var$dummyTransformable.y = $88fd6bd586b939a5$var$dummyTransformable.rotation = $88fd6bd586b939a5$var$dummyTransformable.originX = $88fd6bd586b939a5$var$dummyTransformable.originY = 0;
            $88fd6bd586b939a5$var$dummyTransformable.scaleX = $88fd6bd586b939a5$var$dummyTransformable.scaleY = 1;
        }
        $88fd6bd586b939a5$var$dummyTransformable.rotation = (0, $aa92342602f64ba4$export$d44861331f213635)($88fd6bd586b939a5$var$dummyTransformable.rotation);
        var host = label.__hostTarget;
        var hostRect;
        if (host) {
            hostRect = host.getBoundingRect().plain();
            var transform = host.getComputedTransform();
            (0, $bf33be5184c664d0$export$2e2bcd8739ae039).applyTransform(hostRect, hostRect, transform);
        }
        var labelGuide = hostRect && host.getTextGuideLine();
        this._labelList.push({
            label: label,
            labelLine: labelGuide,
            seriesModel: seriesModel,
            dataIndex: dataIndex,
            dataType: dataType,
            layoutOption: layoutOption,
            computedLayoutOption: null,
            rect: labelRect,
            hostRect: hostRect,
            // Label with lower priority will be hidden when overlapped
            // Use rect size as default priority
            priority: hostRect ? hostRect.width * hostRect.height : 0,
            // Save default label attributes.
            // For restore if developers want get back to default value in callback.
            defaultAttr: {
                ignore: label.ignore,
                labelGuideIgnore: labelGuide && labelGuide.ignore,
                x: $88fd6bd586b939a5$var$dummyTransformable.x,
                y: $88fd6bd586b939a5$var$dummyTransformable.y,
                scaleX: $88fd6bd586b939a5$var$dummyTransformable.scaleX,
                scaleY: $88fd6bd586b939a5$var$dummyTransformable.scaleY,
                rotation: $88fd6bd586b939a5$var$dummyTransformable.rotation,
                style: {
                    x: labelStyle.x,
                    y: labelStyle.y,
                    align: labelStyle.align,
                    verticalAlign: labelStyle.verticalAlign,
                    width: labelStyle.width,
                    height: labelStyle.height,
                    fontSize: labelStyle.fontSize
                },
                cursor: label.cursor,
                attachedPos: textConfig.position,
                attachedRot: textConfig.rotation
            }
        });
    };
    LabelManager.prototype.addLabelsOfSeries = function(chartView) {
        var _this = this;
        this._chartViewList.push(chartView);
        var seriesModel = chartView.__model;
        var layoutOption = seriesModel.get("labelLayout");
        /**
     * Ignore layouting if it's not specified anything.
     */ if (!((0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(layoutOption) || (0, $e44eb14c4271d0f9$export$ed97f33186d4b816)(layoutOption).length)) return;
        chartView.group.traverse(function(child) {
            if (child.ignore) return true; // Stop traverse descendants.
            // Only support label being hosted on graphic elements.
            var textEl = child.getTextContent();
            var ecData = (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(child);
            // Can only attach the text on the element with dataIndex
            if (textEl && !textEl.disableLabelLayout) _this._addLabel(ecData.dataIndex, ecData.dataType, seriesModel, textEl, layoutOption);
        });
    };
    LabelManager.prototype.updateLayoutConfig = function(api) {
        var width = api.getWidth();
        var height = api.getHeight();
        function createDragHandler(el, labelLineModel) {
            return function() {
                (0, $236f5e00db2cbaf8$export$cc93ba643cd97d83)(el, labelLineModel);
            };
        }
        for(var i = 0; i < this._labelList.length; i++){
            var labelItem = this._labelList[i];
            var label = labelItem.label;
            var hostEl = label.__hostTarget;
            var defaultLabelAttr = labelItem.defaultAttr;
            var layoutOption = void 0;
            // TODO A global layout option?
            if ((0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(labelItem.layoutOption)) layoutOption = labelItem.layoutOption($88fd6bd586b939a5$var$prepareLayoutCallbackParams(labelItem, hostEl));
            else layoutOption = labelItem.layoutOption;
            layoutOption = layoutOption || {};
            labelItem.computedLayoutOption = layoutOption;
            var degreeToRadian = Math.PI / 180;
            // TODO hostEl should always exists.
            // Or label should not have parent because the x, y is all in global space.
            if (hostEl) hostEl.setTextConfig({
                // Force to set local false.
                local: false,
                // Ignore position and rotation config on the host el if x or y is changed.
                position: layoutOption.x != null || layoutOption.y != null ? null : defaultLabelAttr.attachedPos,
                // Ignore rotation config on the host el if rotation is changed.
                rotation: layoutOption.rotate != null ? layoutOption.rotate * degreeToRadian : defaultLabelAttr.attachedRot,
                offset: [
                    layoutOption.dx || 0,
                    layoutOption.dy || 0
                ]
            });
            var needsUpdateLabelLine = false;
            if (layoutOption.x != null) {
                // TODO width of chart view.
                label.x = (0, $13e6a1a716300dd4$export$e8514cb5a5e2b40f)(layoutOption.x, width);
                label.setStyle("x", 0); // Ignore movement in style. TODO: origin.
                needsUpdateLabelLine = true;
            } else {
                label.x = defaultLabelAttr.x;
                label.setStyle("x", defaultLabelAttr.style.x);
            }
            if (layoutOption.y != null) {
                // TODO height of chart view.
                label.y = (0, $13e6a1a716300dd4$export$e8514cb5a5e2b40f)(layoutOption.y, height);
                label.setStyle("y", 0); // Ignore movement in style.
                needsUpdateLabelLine = true;
            } else {
                label.y = defaultLabelAttr.y;
                label.setStyle("y", defaultLabelAttr.style.y);
            }
            if (layoutOption.labelLinePoints) {
                var guideLine = hostEl.getTextGuideLine();
                if (guideLine) {
                    guideLine.setShape({
                        points: layoutOption.labelLinePoints
                    });
                    // Not update
                    needsUpdateLabelLine = false;
                }
            }
            var labelLayoutStore = $88fd6bd586b939a5$var$labelLayoutInnerStore(label);
            labelLayoutStore.needsUpdateLabelLine = needsUpdateLabelLine;
            label.rotation = layoutOption.rotate != null ? layoutOption.rotate * degreeToRadian : defaultLabelAttr.rotation;
            label.scaleX = defaultLabelAttr.scaleX;
            label.scaleY = defaultLabelAttr.scaleY;
            for(var k = 0; k < $88fd6bd586b939a5$var$LABEL_OPTION_TO_STYLE_KEYS.length; k++){
                var key = $88fd6bd586b939a5$var$LABEL_OPTION_TO_STYLE_KEYS[k];
                label.setStyle(key, layoutOption[key] != null ? layoutOption[key] : defaultLabelAttr.style[key]);
            }
            if (layoutOption.draggable) {
                label.draggable = true;
                label.cursor = "move";
                if (hostEl) {
                    var hostModel = labelItem.seriesModel;
                    if (labelItem.dataIndex != null) {
                        var data = labelItem.seriesModel.getData(labelItem.dataType);
                        hostModel = data.getItemModel(labelItem.dataIndex);
                    }
                    label.on("drag", createDragHandler(hostEl, hostModel.getModel("labelLine")));
                }
            } else {
                // TODO Other drag functions?
                label.off("drag");
                label.cursor = defaultLabelAttr.cursor;
            }
        }
    };
    LabelManager.prototype.layout = function(api) {
        var width = api.getWidth();
        var height = api.getHeight();
        var labelList = (0, $345e515c98a3cbaf$export$6c403cad1ae3e239)(this._labelList);
        var labelsNeedsAdjustOnX = (0, $e44eb14c4271d0f9$export$3dea766d36a8935f)(labelList, function(item) {
            return item.layoutOption.moveOverlap === "shiftX";
        });
        var labelsNeedsAdjustOnY = (0, $e44eb14c4271d0f9$export$3dea766d36a8935f)(labelList, function(item) {
            return item.layoutOption.moveOverlap === "shiftY";
        });
        (0, $345e515c98a3cbaf$export$b6b2b07f8ed32bd6)(labelsNeedsAdjustOnX, 0, width);
        (0, $345e515c98a3cbaf$export$118c25e0932528e4)(labelsNeedsAdjustOnY, 0, height);
        var labelsNeedsHideOverlap = (0, $e44eb14c4271d0f9$export$3dea766d36a8935f)(labelList, function(item) {
            return item.layoutOption.hideOverlap;
        });
        (0, $345e515c98a3cbaf$export$8ce774e164a49410)(labelsNeedsHideOverlap);
    };
    /**
   * Process all labels. Not only labels with layoutOption.
   */ LabelManager.prototype.processLabelsOverall = function() {
        var _this = this;
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(this._chartViewList, function(chartView) {
            var seriesModel = chartView.__model;
            var ignoreLabelLineUpdate = chartView.ignoreLabelLineUpdate;
            var animationEnabled = seriesModel.isAnimationEnabled();
            chartView.group.traverse(function(child) {
                if (child.ignore && !child.forceLabelAnimation) return true; // Stop traverse descendants.
                var needsUpdateLabelLine = !ignoreLabelLineUpdate;
                var label = child.getTextContent();
                if (!needsUpdateLabelLine && label) needsUpdateLabelLine = $88fd6bd586b939a5$var$labelLayoutInnerStore(label).needsUpdateLabelLine;
                if (needsUpdateLabelLine) _this._updateLabelLine(child, seriesModel);
                if (animationEnabled) _this._animateLabels(child, seriesModel);
            });
        });
    };
    LabelManager.prototype._updateLabelLine = function(el, seriesModel) {
        // Only support label being hosted on graphic elements.
        var textEl = el.getTextContent();
        // Update label line style.
        var ecData = (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(el);
        var dataIndex = ecData.dataIndex;
        // Only support labelLine on the labels represent data.
        if (textEl && dataIndex != null) {
            var data = seriesModel.getData(ecData.dataType);
            var itemModel = data.getItemModel(dataIndex);
            var defaultStyle = {};
            var visualStyle = data.getItemVisual(dataIndex, "style");
            if (visualStyle) {
                var visualType = data.getVisual("drawType");
                // Default to be same with main color
                defaultStyle.stroke = visualStyle[visualType];
            }
            var labelLineModel = itemModel.getModel("labelLine");
            (0, $236f5e00db2cbaf8$export$c09e0b0574bdd2dc)(el, (0, $236f5e00db2cbaf8$export$2979fdbf5ebce521)(itemModel), defaultStyle);
            (0, $236f5e00db2cbaf8$export$cc93ba643cd97d83)(el, labelLineModel);
        }
    };
    LabelManager.prototype._animateLabels = function(el, seriesModel) {
        var textEl = el.getTextContent();
        var guideLine = el.getTextGuideLine();
        // Animate
        if (textEl && (el.forceLabelAnimation || !textEl.ignore && !textEl.invisible && !el.disableLabelAnimation && !(0, $f7e735722ff36e8c$export$5b89d4b643713034)(el))) {
            var layoutStore = $88fd6bd586b939a5$var$labelLayoutInnerStore(textEl);
            var oldLayout = layoutStore.oldLayout;
            var ecData = (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(el);
            var dataIndex = ecData.dataIndex;
            var newProps = {
                x: textEl.x,
                y: textEl.y,
                rotation: textEl.rotation
            };
            var data = seriesModel.getData(ecData.dataType);
            if (!oldLayout) {
                textEl.attr(newProps);
                // Disable fade in animation if value animation is enabled.
                if (!(0, $75926670b032879d$export$f62786d3261ab0f4)(textEl).valueAnimation) {
                    var oldOpacity = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(textEl.style.opacity, 1);
                    // Fade in animation
                    textEl.style.opacity = 0;
                    (0, $f7e735722ff36e8c$export$a121566aadcfe021)(textEl, {
                        style: {
                            opacity: oldOpacity
                        }
                    }, seriesModel, dataIndex);
                }
            } else {
                textEl.attr(oldLayout);
                // Make sure the animation from is in the right status.
                var prevStates = el.prevStates;
                if (prevStates) {
                    if ((0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)(prevStates, "select") >= 0) textEl.attr(layoutStore.oldLayoutSelect);
                    if ((0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)(prevStates, "emphasis") >= 0) textEl.attr(layoutStore.oldLayoutEmphasis);
                }
                (0, $f7e735722ff36e8c$export$c8dce3c08436e91e)(textEl, newProps, seriesModel, dataIndex);
            }
            layoutStore.oldLayout = newProps;
            if (textEl.states.select) {
                var layoutSelect = layoutStore.oldLayoutSelect = {};
                $88fd6bd586b939a5$var$extendWithKeys(layoutSelect, newProps, $88fd6bd586b939a5$var$LABEL_LAYOUT_PROPS);
                $88fd6bd586b939a5$var$extendWithKeys(layoutSelect, textEl.states.select, $88fd6bd586b939a5$var$LABEL_LAYOUT_PROPS);
            }
            if (textEl.states.emphasis) {
                var layoutEmphasis = layoutStore.oldLayoutEmphasis = {};
                $88fd6bd586b939a5$var$extendWithKeys(layoutEmphasis, newProps, $88fd6bd586b939a5$var$LABEL_LAYOUT_PROPS);
                $88fd6bd586b939a5$var$extendWithKeys(layoutEmphasis, textEl.states.emphasis, $88fd6bd586b939a5$var$LABEL_LAYOUT_PROPS);
            }
            (0, $75926670b032879d$export$dd6101605f5c186)(textEl, dataIndex, data, seriesModel, seriesModel);
        }
        if (guideLine && !guideLine.ignore && !guideLine.invisible) {
            var layoutStore = $88fd6bd586b939a5$var$labelLineAnimationStore(guideLine);
            var oldLayout = layoutStore.oldLayout;
            var newLayout = {
                points: guideLine.shape.points
            };
            if (!oldLayout) {
                guideLine.setShape(newLayout);
                guideLine.style.strokePercent = 0;
                (0, $f7e735722ff36e8c$export$a121566aadcfe021)(guideLine, {
                    style: {
                        strokePercent: 1
                    }
                }, seriesModel);
            } else {
                guideLine.attr({
                    shape: oldLayout
                });
                (0, $f7e735722ff36e8c$export$c8dce3c08436e91e)(guideLine, {
                    shape: newLayout
                }, seriesModel);
            }
            layoutStore.oldLayout = newLayout;
        }
    };
    return LabelManager;
}();
var $88fd6bd586b939a5$export$2e2bcd8739ae039 = $88fd6bd586b939a5$var$LabelManager;


var $73fd4b606fbc7eb8$var$getLabelManager = (0, $8917c02fd8256c67$export$64df9f8d92ae083f)();
function $73fd4b606fbc7eb8$export$5320d1b3745c02a5(registers) {
    registers.registerUpdateLifecycle("series:beforeupdate", function(ecModel, api, params) {
        // TODO api provide an namespace that can save stuff per instance
        var labelManager = $73fd4b606fbc7eb8$var$getLabelManager(api).labelManager;
        if (!labelManager) labelManager = $73fd4b606fbc7eb8$var$getLabelManager(api).labelManager = new (0, $88fd6bd586b939a5$export$2e2bcd8739ae039)();
        labelManager.clearLabels();
    });
    registers.registerUpdateLifecycle("series:layoutlabels", function(ecModel, api, params) {
        var labelManager = $73fd4b606fbc7eb8$var$getLabelManager(api).labelManager;
        params.updatedSeries.forEach(function(series) {
            labelManager.addLabelsOfSeries(api.getViewOfSeriesModel(series));
        });
        labelManager.updateLayoutConfig(api);
        labelManager.layout(api);
        labelManager.processLabelsOverall();
    });
}




function $44e3098839051485$export$7e4aa119212bc614(value) {
    return value != null && value !== "" && !isNaN(Number(value.toString()));
}
function $44e3098839051485$export$a0a81dc3380ce7d3(value, defaultValue) {
    return value != null && $44e3098839051485$export$7e4aa119212bc614(value) ? +value : defaultValue;
}
function $44e3098839051485$export$a6cdc56e425d0d0a(item) {
    return item && typeof item === "object" && !Array.isArray(item);
}
function $44e3098839051485$export$dd702b3c8240390c(target, ...sources) {
    if (!sources.length) return target;
    const source = sources.shift();
    if ($44e3098839051485$export$a6cdc56e425d0d0a(target) && $44e3098839051485$export$a6cdc56e425d0d0a(source)) {
        for(const key in source)if ($44e3098839051485$export$a6cdc56e425d0d0a(source[key])) {
            if (!target[key]) Object.assign(target, {
                [key]: {}
            });
            $44e3098839051485$export$dd702b3c8240390c(target[key], source[key]);
        } else Object.assign(target, {
            [key]: source[key]
        });
    }
    return $44e3098839051485$export$dd702b3c8240390c(target, ...sources);
}
class $44e3098839051485$export$db030d70d2d24a2b {
    static min(dateTime1, dateTime2) {
        return dateTime1 < dateTime2 ? dateTime1 : dateTime2;
    }
    static max(dateTime1, dateTime2) {
        return dateTime1 > dateTime2 ? dateTime1 : dateTime2;
    }
    static toString(dateTime, showMilliseconds = false) {
        let format = "dd.LL.yyyy hh:mm:ss";
        if (showMilliseconds) format += " SSS";
        return dateTime.toFormat(format);
    }
}


function $33684afa3d8783a3$var$getSquareDistance(p1, p2) {
    const dx = p1[0] - p2[0];
    const dy = p1[1] - p2[1];
    return dx * dx + dy * dy;
}
// square distance from a point to a segment
function $33684afa3d8783a3$var$getSquareSegmentDistance(p, p1, p2) {
    let x = p1[0];
    let y = p1[1];
    let dx = p2[0] - x;
    let dy = p2[1] - y;
    if (dx !== 0 || dy !== 0) {
        const t = ((p[0] - x) * dx + (p[1] - y) * dy) / (dx * dx + dy * dy);
        if (t > 1) {
            x = p2[0];
            y = p2[1];
        } else if (t > 0) {
            x += dx * t;
            y += dy * t;
        }
    }
    dx = p[0] - x;
    dy = p[1] - y;
    return dx * dx + dy * dy;
}
// rest of the code doesn't care about point format
// basic distance-based simplification
function $33684afa3d8783a3$var$simplifyRadialDist(points, squareTolerance) {
    let prevPoint = points[0];
    const newPoints = [
        prevPoint
    ];
    let point = null;
    for(let i = 1, len = points.length; i < len; i++){
        point = points[i];
        if ($33684afa3d8783a3$var$getSquareDistance(point, prevPoint) > squareTolerance) {
            newPoints.push(point);
            prevPoint = point;
        }
    }
    if (point != null && prevPoint !== point) newPoints.push(point);
    return newPoints;
}
function $33684afa3d8783a3$var$simplifyDPStep(points, first, last, squareTolerance, simplified) {
    let maxSquareDistance = squareTolerance;
    let index = 0;
    for(let i = first + 1; i < last; i++){
        const sqDist = $33684afa3d8783a3$var$getSquareSegmentDistance(points[i], points[first], points[last]);
        if (sqDist > maxSquareDistance) {
            index = i;
            maxSquareDistance = sqDist;
        }
    }
    if (maxSquareDistance > squareTolerance) {
        if (index - first > 1) $33684afa3d8783a3$var$simplifyDPStep(points, first, index, squareTolerance, simplified);
        simplified.push(points[index]);
        if (last - index > 1) $33684afa3d8783a3$var$simplifyDPStep(points, index, last, squareTolerance, simplified);
    }
}
// simplification using Ramer-Douglas-Peucker algorithm
function $33684afa3d8783a3$var$simplifyDouglasPeucker(points, squareTolerance, minTime, maxTime) {
    const simplified = [];
    let first = null;
    let lastIndex = -1;
    for(let index = 0; index < points.length; ++index){
        const point = points[index];
        if (point[0] >= minTime && point[0] <= maxTime) {
            const value = point[1];
            if (!isNaN(value) && value != null) {
                if (first == null) first = index;
                lastIndex = index;
            } else if (first != null) {
                const last = index - 1;
                simplified.push(points[first]);
                $33684afa3d8783a3$var$simplifyDPStep(points, first, last, squareTolerance, simplified);
                simplified.push(points[last]);
                simplified.push(point); // add point with NaN value
                first = null;
            }
        } else if (point[0] > maxTime) break;
    }
    if (first != null) {
        simplified.push(points[first]);
        $33684afa3d8783a3$var$simplifyDPStep(points, first, lastIndex, squareTolerance, simplified);
        simplified.push(points[lastIndex]);
    }
    return simplified;
}
function $33684afa3d8783a3$export$798b53621063651(points, tolerance, minTime, maxTime, highestQuality) {
    if (points.length <= 2) return points;
    const squareTolerance = tolerance !== undefined ? tolerance * tolerance : 1;
    points = highestQuality ? points : $33684afa3d8783a3$var$simplifyRadialDist(points, squareTolerance);
    points = $33684afa3d8783a3$var$simplifyDouglasPeucker(points, squareTolerance, minTime, maxTime);
    return points;
}


var $c70e8820d152b235$exports = {};
"use strict";
Object.defineProperty($c70e8820d152b235$exports, "__esModule", {
    value: true
});
function $c70e8820d152b235$var$_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, $c70e8820d152b235$var$_toPropertyKey(descriptor.key), descriptor);
    }
}
function $c70e8820d152b235$var$_createClass(Constructor, protoProps, staticProps) {
    if (protoProps) $c70e8820d152b235$var$_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) $c70e8820d152b235$var$_defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
function $c70e8820d152b235$var$_extends() {
    $c70e8820d152b235$var$_extends = Object.assign ? Object.assign.bind() : function(target) {
        for(var i = 1; i < arguments.length; i++){
            var source = arguments[i];
            for(var key in source)if (Object.prototype.hasOwnProperty.call(source, key)) target[key] = source[key];
        }
        return target;
    };
    return $c70e8820d152b235$var$_extends.apply(this, arguments);
}
function $c70e8820d152b235$var$_inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    $c70e8820d152b235$var$_setPrototypeOf(subClass, superClass);
}
function $c70e8820d152b235$var$_getPrototypeOf(o) {
    $c70e8820d152b235$var$_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return $c70e8820d152b235$var$_getPrototypeOf(o);
}
function $c70e8820d152b235$var$_setPrototypeOf(o, p) {
    $c70e8820d152b235$var$_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return $c70e8820d152b235$var$_setPrototypeOf(o, p);
}
function $c70e8820d152b235$var$_isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function $c70e8820d152b235$var$_construct(Parent, args, Class) {
    if ($c70e8820d152b235$var$_isNativeReflectConstruct()) $c70e8820d152b235$var$_construct = Reflect.construct.bind();
    else $c70e8820d152b235$var$_construct = function _construct(Parent, args, Class) {
        var a = [
            null
        ];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) $c70e8820d152b235$var$_setPrototypeOf(instance, Class.prototype);
        return instance;
    };
    return $c70e8820d152b235$var$_construct.apply(null, arguments);
}
function $c70e8820d152b235$var$_isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function $c70e8820d152b235$var$_wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    $c70e8820d152b235$var$_wrapNativeSuper = function _wrapNativeSuper(Class) {
        if (Class === null || !$c70e8820d152b235$var$_isNativeFunction(Class)) return Class;
        if (typeof Class !== "function") throw new TypeError("Super expression must either be null or a function");
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return $c70e8820d152b235$var$_construct(Class, arguments, $c70e8820d152b235$var$_getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return $c70e8820d152b235$var$_setPrototypeOf(Wrapper, Class);
    };
    return $c70e8820d152b235$var$_wrapNativeSuper(Class);
}
function $c70e8820d152b235$var$_objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for(i = 0; i < sourceKeys.length; i++){
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        target[key] = source[key];
    }
    return target;
}
function $c70e8820d152b235$var$_unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return $c70e8820d152b235$var$_arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return $c70e8820d152b235$var$_arrayLikeToArray(o, minLen);
}
function $c70e8820d152b235$var$_arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function $c70e8820d152b235$var$_createForOfIteratorHelperLoose(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (it) return (it = it.call(o)).next.bind(it);
    if (Array.isArray(o) || (it = $c70e8820d152b235$var$_unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it) o = it;
        var i = 0;
        return function() {
            if (i >= o.length) return {
                done: true
            };
            return {
                done: false,
                value: o[i++]
            };
        };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function $c70e8820d152b235$var$_toPrimitive(input, hint) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (typeof res !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
function $c70e8820d152b235$var$_toPropertyKey(arg) {
    var key = $c70e8820d152b235$var$_toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
}
// these aren't really private, but nor are they really useful to document
/**
 * @private
 */ var $c70e8820d152b235$var$LuxonError = /*#__PURE__*/ function(_Error) {
    $c70e8820d152b235$var$_inheritsLoose(LuxonError, _Error);
    function LuxonError() {
        return _Error.apply(this, arguments) || this;
    }
    return LuxonError;
}(/*#__PURE__*/ $c70e8820d152b235$var$_wrapNativeSuper(Error));
/**
 * @private
 */ var $c70e8820d152b235$var$InvalidDateTimeError = /*#__PURE__*/ function(_LuxonError) {
    $c70e8820d152b235$var$_inheritsLoose(InvalidDateTimeError, _LuxonError);
    function InvalidDateTimeError(reason) {
        return _LuxonError.call(this, "Invalid DateTime: " + reason.toMessage()) || this;
    }
    return InvalidDateTimeError;
}($c70e8820d152b235$var$LuxonError);
/**
 * @private
 */ var $c70e8820d152b235$var$InvalidIntervalError = /*#__PURE__*/ function(_LuxonError2) {
    $c70e8820d152b235$var$_inheritsLoose(InvalidIntervalError, _LuxonError2);
    function InvalidIntervalError(reason) {
        return _LuxonError2.call(this, "Invalid Interval: " + reason.toMessage()) || this;
    }
    return InvalidIntervalError;
}($c70e8820d152b235$var$LuxonError);
/**
 * @private
 */ var $c70e8820d152b235$var$InvalidDurationError = /*#__PURE__*/ function(_LuxonError3) {
    $c70e8820d152b235$var$_inheritsLoose(InvalidDurationError, _LuxonError3);
    function InvalidDurationError(reason) {
        return _LuxonError3.call(this, "Invalid Duration: " + reason.toMessage()) || this;
    }
    return InvalidDurationError;
}($c70e8820d152b235$var$LuxonError);
/**
 * @private
 */ var $c70e8820d152b235$var$ConflictingSpecificationError = /*#__PURE__*/ function(_LuxonError4) {
    $c70e8820d152b235$var$_inheritsLoose(ConflictingSpecificationError, _LuxonError4);
    function ConflictingSpecificationError() {
        return _LuxonError4.apply(this, arguments) || this;
    }
    return ConflictingSpecificationError;
}($c70e8820d152b235$var$LuxonError);
/**
 * @private
 */ var $c70e8820d152b235$var$InvalidUnitError = /*#__PURE__*/ function(_LuxonError5) {
    $c70e8820d152b235$var$_inheritsLoose(InvalidUnitError, _LuxonError5);
    function InvalidUnitError(unit) {
        return _LuxonError5.call(this, "Invalid unit " + unit) || this;
    }
    return InvalidUnitError;
}($c70e8820d152b235$var$LuxonError);
/**
 * @private
 */ var $c70e8820d152b235$var$InvalidArgumentError = /*#__PURE__*/ function(_LuxonError6) {
    $c70e8820d152b235$var$_inheritsLoose(InvalidArgumentError, _LuxonError6);
    function InvalidArgumentError() {
        return _LuxonError6.apply(this, arguments) || this;
    }
    return InvalidArgumentError;
}($c70e8820d152b235$var$LuxonError);
/**
 * @private
 */ var $c70e8820d152b235$var$ZoneIsAbstractError = /*#__PURE__*/ function(_LuxonError7) {
    $c70e8820d152b235$var$_inheritsLoose(ZoneIsAbstractError, _LuxonError7);
    function ZoneIsAbstractError() {
        return _LuxonError7.call(this, "Zone is an abstract class") || this;
    }
    return ZoneIsAbstractError;
}($c70e8820d152b235$var$LuxonError);
/**
 * @private
 */ var $c70e8820d152b235$var$n = "numeric", $c70e8820d152b235$var$s = "short", $c70e8820d152b235$var$l = "long";
var $c70e8820d152b235$var$DATE_SHORT = {
    year: $c70e8820d152b235$var$n,
    month: $c70e8820d152b235$var$n,
    day: $c70e8820d152b235$var$n
};
var $c70e8820d152b235$var$DATE_MED = {
    year: $c70e8820d152b235$var$n,
    month: $c70e8820d152b235$var$s,
    day: $c70e8820d152b235$var$n
};
var $c70e8820d152b235$var$DATE_MED_WITH_WEEKDAY = {
    year: $c70e8820d152b235$var$n,
    month: $c70e8820d152b235$var$s,
    day: $c70e8820d152b235$var$n,
    weekday: $c70e8820d152b235$var$s
};
var $c70e8820d152b235$var$DATE_FULL = {
    year: $c70e8820d152b235$var$n,
    month: $c70e8820d152b235$var$l,
    day: $c70e8820d152b235$var$n
};
var $c70e8820d152b235$var$DATE_HUGE = {
    year: $c70e8820d152b235$var$n,
    month: $c70e8820d152b235$var$l,
    day: $c70e8820d152b235$var$n,
    weekday: $c70e8820d152b235$var$l
};
var $c70e8820d152b235$var$TIME_SIMPLE = {
    hour: $c70e8820d152b235$var$n,
    minute: $c70e8820d152b235$var$n
};
var $c70e8820d152b235$var$TIME_WITH_SECONDS = {
    hour: $c70e8820d152b235$var$n,
    minute: $c70e8820d152b235$var$n,
    second: $c70e8820d152b235$var$n
};
var $c70e8820d152b235$var$TIME_WITH_SHORT_OFFSET = {
    hour: $c70e8820d152b235$var$n,
    minute: $c70e8820d152b235$var$n,
    second: $c70e8820d152b235$var$n,
    timeZoneName: $c70e8820d152b235$var$s
};
var $c70e8820d152b235$var$TIME_WITH_LONG_OFFSET = {
    hour: $c70e8820d152b235$var$n,
    minute: $c70e8820d152b235$var$n,
    second: $c70e8820d152b235$var$n,
    timeZoneName: $c70e8820d152b235$var$l
};
var $c70e8820d152b235$var$TIME_24_SIMPLE = {
    hour: $c70e8820d152b235$var$n,
    minute: $c70e8820d152b235$var$n,
    hourCycle: "h23"
};
var $c70e8820d152b235$var$TIME_24_WITH_SECONDS = {
    hour: $c70e8820d152b235$var$n,
    minute: $c70e8820d152b235$var$n,
    second: $c70e8820d152b235$var$n,
    hourCycle: "h23"
};
var $c70e8820d152b235$var$TIME_24_WITH_SHORT_OFFSET = {
    hour: $c70e8820d152b235$var$n,
    minute: $c70e8820d152b235$var$n,
    second: $c70e8820d152b235$var$n,
    hourCycle: "h23",
    timeZoneName: $c70e8820d152b235$var$s
};
var $c70e8820d152b235$var$TIME_24_WITH_LONG_OFFSET = {
    hour: $c70e8820d152b235$var$n,
    minute: $c70e8820d152b235$var$n,
    second: $c70e8820d152b235$var$n,
    hourCycle: "h23",
    timeZoneName: $c70e8820d152b235$var$l
};
var $c70e8820d152b235$var$DATETIME_SHORT = {
    year: $c70e8820d152b235$var$n,
    month: $c70e8820d152b235$var$n,
    day: $c70e8820d152b235$var$n,
    hour: $c70e8820d152b235$var$n,
    minute: $c70e8820d152b235$var$n
};
var $c70e8820d152b235$var$DATETIME_SHORT_WITH_SECONDS = {
    year: $c70e8820d152b235$var$n,
    month: $c70e8820d152b235$var$n,
    day: $c70e8820d152b235$var$n,
    hour: $c70e8820d152b235$var$n,
    minute: $c70e8820d152b235$var$n,
    second: $c70e8820d152b235$var$n
};
var $c70e8820d152b235$var$DATETIME_MED = {
    year: $c70e8820d152b235$var$n,
    month: $c70e8820d152b235$var$s,
    day: $c70e8820d152b235$var$n,
    hour: $c70e8820d152b235$var$n,
    minute: $c70e8820d152b235$var$n
};
var $c70e8820d152b235$var$DATETIME_MED_WITH_SECONDS = {
    year: $c70e8820d152b235$var$n,
    month: $c70e8820d152b235$var$s,
    day: $c70e8820d152b235$var$n,
    hour: $c70e8820d152b235$var$n,
    minute: $c70e8820d152b235$var$n,
    second: $c70e8820d152b235$var$n
};
var $c70e8820d152b235$var$DATETIME_MED_WITH_WEEKDAY = {
    year: $c70e8820d152b235$var$n,
    month: $c70e8820d152b235$var$s,
    day: $c70e8820d152b235$var$n,
    weekday: $c70e8820d152b235$var$s,
    hour: $c70e8820d152b235$var$n,
    minute: $c70e8820d152b235$var$n
};
var $c70e8820d152b235$var$DATETIME_FULL = {
    year: $c70e8820d152b235$var$n,
    month: $c70e8820d152b235$var$l,
    day: $c70e8820d152b235$var$n,
    hour: $c70e8820d152b235$var$n,
    minute: $c70e8820d152b235$var$n,
    timeZoneName: $c70e8820d152b235$var$s
};
var $c70e8820d152b235$var$DATETIME_FULL_WITH_SECONDS = {
    year: $c70e8820d152b235$var$n,
    month: $c70e8820d152b235$var$l,
    day: $c70e8820d152b235$var$n,
    hour: $c70e8820d152b235$var$n,
    minute: $c70e8820d152b235$var$n,
    second: $c70e8820d152b235$var$n,
    timeZoneName: $c70e8820d152b235$var$s
};
var $c70e8820d152b235$var$DATETIME_HUGE = {
    year: $c70e8820d152b235$var$n,
    month: $c70e8820d152b235$var$l,
    day: $c70e8820d152b235$var$n,
    weekday: $c70e8820d152b235$var$l,
    hour: $c70e8820d152b235$var$n,
    minute: $c70e8820d152b235$var$n,
    timeZoneName: $c70e8820d152b235$var$l
};
var $c70e8820d152b235$var$DATETIME_HUGE_WITH_SECONDS = {
    year: $c70e8820d152b235$var$n,
    month: $c70e8820d152b235$var$l,
    day: $c70e8820d152b235$var$n,
    weekday: $c70e8820d152b235$var$l,
    hour: $c70e8820d152b235$var$n,
    minute: $c70e8820d152b235$var$n,
    second: $c70e8820d152b235$var$n,
    timeZoneName: $c70e8820d152b235$var$l
};
/**
 * @interface
 */ var $c70e8820d152b235$var$Zone = /*#__PURE__*/ function() {
    function Zone() {}
    var _proto = Zone.prototype;
    /**
   * Returns the offset's common name (such as EST) at the specified timestamp
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to get the name
   * @param {Object} opts - Options to affect the format
   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.
   * @param {string} opts.locale - What locale to return the offset name in.
   * @return {string}
   */ _proto.offsetName = function offsetName(ts, opts) {
        throw new $c70e8820d152b235$var$ZoneIsAbstractError();
    } /**
   * Returns the offset's value as a string
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to get the offset
   * @param {string} format - What style of offset to return.
   *                          Accepts 'narrow', 'short', or 'techie'. Returning '+6', '+06:00', or '+0600' respectively
   * @return {string}
   */ ;
    _proto.formatOffset = function formatOffset(ts, format) {
        throw new $c70e8820d152b235$var$ZoneIsAbstractError();
    } /**
   * Return the offset in minutes for this zone at the specified timestamp.
   * @abstract
   * @param {number} ts - Epoch milliseconds for which to compute the offset
   * @return {number}
   */ ;
    _proto.offset = function offset(ts) {
        throw new $c70e8820d152b235$var$ZoneIsAbstractError();
    } /**
   * Return whether this Zone is equal to another zone
   * @abstract
   * @param {Zone} otherZone - the zone to compare
   * @return {boolean}
   */ ;
    _proto.equals = function equals(otherZone) {
        throw new $c70e8820d152b235$var$ZoneIsAbstractError();
    } /**
   * Return whether this Zone is valid.
   * @abstract
   * @type {boolean}
   */ ;
    $c70e8820d152b235$var$_createClass(Zone, [
        {
            key: "type",
            get: /**
     * The type of zone
     * @abstract
     * @type {string}
     */ function get() {
                throw new $c70e8820d152b235$var$ZoneIsAbstractError();
            }
        },
        {
            key: "name",
            get: function get() {
                throw new $c70e8820d152b235$var$ZoneIsAbstractError();
            }
        },
        {
            key: "ianaName",
            get: function get() {
                return this.name;
            }
        },
        {
            key: "isUniversal",
            get: function get() {
                throw new $c70e8820d152b235$var$ZoneIsAbstractError();
            }
        },
        {
            key: "isValid",
            get: function get() {
                throw new $c70e8820d152b235$var$ZoneIsAbstractError();
            }
        }
    ]);
    return Zone;
}();
var $c70e8820d152b235$var$singleton$1 = null;
/**
 * Represents the local zone for this JavaScript environment.
 * @implements {Zone}
 */ var $c70e8820d152b235$var$SystemZone = /*#__PURE__*/ function(_Zone) {
    $c70e8820d152b235$var$_inheritsLoose(SystemZone, _Zone);
    function SystemZone() {
        return _Zone.apply(this, arguments) || this;
    }
    var _proto = SystemZone.prototype;
    /** @override **/ _proto.offsetName = function offsetName(ts, _ref) {
        var format = _ref.format, locale = _ref.locale;
        return $c70e8820d152b235$var$parseZoneInfo(ts, format, locale);
    } /** @override **/ ;
    _proto.formatOffset = function formatOffset$1(ts, format) {
        return $c70e8820d152b235$var$formatOffset(this.offset(ts), format);
    } /** @override **/ ;
    _proto.offset = function offset(ts) {
        return -new Date(ts).getTimezoneOffset();
    } /** @override **/ ;
    _proto.equals = function equals(otherZone) {
        return otherZone.type === "system";
    } /** @override **/ ;
    $c70e8820d152b235$var$_createClass(SystemZone, [
        {
            key: "type",
            get: /** @override **/ function get() {
                return "system";
            }
        },
        {
            key: "name",
            get: function get() {
                return new Intl.DateTimeFormat().resolvedOptions().timeZone;
            }
        },
        {
            key: "isUniversal",
            get: function get() {
                return false;
            }
        },
        {
            key: "isValid",
            get: function get() {
                return true;
            }
        }
    ], [
        {
            key: "instance",
            get: /**
     * Get a singleton instance of the local zone
     * @return {SystemZone}
     */ function get() {
                if ($c70e8820d152b235$var$singleton$1 === null) $c70e8820d152b235$var$singleton$1 = new SystemZone();
                return $c70e8820d152b235$var$singleton$1;
            }
        }
    ]);
    return SystemZone;
}($c70e8820d152b235$var$Zone);
var $c70e8820d152b235$var$dtfCache = {};
function $c70e8820d152b235$var$makeDTF(zone) {
    if (!$c70e8820d152b235$var$dtfCache[zone]) $c70e8820d152b235$var$dtfCache[zone] = new Intl.DateTimeFormat("en-US", {
        hour12: false,
        timeZone: zone,
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
        era: "short"
    });
    return $c70e8820d152b235$var$dtfCache[zone];
}
var $c70e8820d152b235$var$typeToPos = {
    year: 0,
    month: 1,
    day: 2,
    era: 3,
    hour: 4,
    minute: 5,
    second: 6
};
function $c70e8820d152b235$var$hackyOffset(dtf, date) {
    var formatted = dtf.format(date).replace(/\u200E/g, ""), parsed = /(\d+)\/(\d+)\/(\d+) (AD|BC),? (\d+):(\d+):(\d+)/.exec(formatted), fMonth = parsed[1], fDay = parsed[2], fYear = parsed[3], fadOrBc = parsed[4], fHour = parsed[5], fMinute = parsed[6], fSecond = parsed[7];
    return [
        fYear,
        fMonth,
        fDay,
        fadOrBc,
        fHour,
        fMinute,
        fSecond
    ];
}
function $c70e8820d152b235$var$partsOffset(dtf, date) {
    var formatted = dtf.formatToParts(date);
    var filled = [];
    for(var i = 0; i < formatted.length; i++){
        var _formatted$i = formatted[i], type = _formatted$i.type, value = _formatted$i.value;
        var pos = $c70e8820d152b235$var$typeToPos[type];
        if (type === "era") filled[pos] = value;
        else if (!$c70e8820d152b235$var$isUndefined(pos)) filled[pos] = parseInt(value, 10);
    }
    return filled;
}
var $c70e8820d152b235$var$ianaZoneCache = {};
/**
 * A zone identified by an IANA identifier, like America/New_York
 * @implements {Zone}
 */ var $c70e8820d152b235$var$IANAZone = /*#__PURE__*/ function(_Zone) {
    $c70e8820d152b235$var$_inheritsLoose(IANAZone, _Zone);
    /**
   * @param {string} name - Zone name
   * @return {IANAZone}
   */ IANAZone.create = function create(name) {
        if (!$c70e8820d152b235$var$ianaZoneCache[name]) $c70e8820d152b235$var$ianaZoneCache[name] = new IANAZone(name);
        return $c70e8820d152b235$var$ianaZoneCache[name];
    } /**
   * Reset local caches. Should only be necessary in testing scenarios.
   * @return {void}
   */ ;
    IANAZone.resetCache = function resetCache() {
        $c70e8820d152b235$var$ianaZoneCache = {};
        $c70e8820d152b235$var$dtfCache = {};
    } /**
   * Returns whether the provided string is a valid specifier. This only checks the string's format, not that the specifier identifies a known zone; see isValidZone for that.
   * @param {string} s - The string to check validity on
   * @example IANAZone.isValidSpecifier("America/New_York") //=> true
   * @example IANAZone.isValidSpecifier("Sport~~blorp") //=> false
   * @deprecated This method returns false for some valid IANA names. Use isValidZone instead.
   * @return {boolean}
   */ ;
    IANAZone.isValidSpecifier = function isValidSpecifier(s) {
        return this.isValidZone(s);
    } /**
   * Returns whether the provided string identifies a real zone
   * @param {string} zone - The string to check
   * @example IANAZone.isValidZone("America/New_York") //=> true
   * @example IANAZone.isValidZone("Fantasia/Castle") //=> false
   * @example IANAZone.isValidZone("Sport~~blorp") //=> false
   * @return {boolean}
   */ ;
    IANAZone.isValidZone = function isValidZone(zone) {
        if (!zone) return false;
        try {
            new Intl.DateTimeFormat("en-US", {
                timeZone: zone
            }).format();
            return true;
        } catch (e) {
            return false;
        }
    };
    function IANAZone(name) {
        var _this;
        _this = _Zone.call(this) || this;
        /** @private **/ _this.zoneName = name;
        /** @private **/ _this.valid = IANAZone.isValidZone(name);
        return _this;
    }
    /** @override **/ var _proto = IANAZone.prototype;
    /** @override **/ _proto.offsetName = function offsetName(ts, _ref) {
        var format = _ref.format, locale = _ref.locale;
        return $c70e8820d152b235$var$parseZoneInfo(ts, format, locale, this.name);
    } /** @override **/ ;
    _proto.formatOffset = function formatOffset$1(ts, format) {
        return $c70e8820d152b235$var$formatOffset(this.offset(ts), format);
    } /** @override **/ ;
    _proto.offset = function offset(ts) {
        var date = new Date(ts);
        if (isNaN(date)) return NaN;
        var dtf = $c70e8820d152b235$var$makeDTF(this.name);
        var _ref2 = dtf.formatToParts ? $c70e8820d152b235$var$partsOffset(dtf, date) : $c70e8820d152b235$var$hackyOffset(dtf, date), year = _ref2[0], month = _ref2[1], day = _ref2[2], adOrBc = _ref2[3], hour = _ref2[4], minute = _ref2[5], second = _ref2[6];
        if (adOrBc === "BC") year = -Math.abs(year) + 1;
        // because we're using hour12 and https://bugs.chromium.org/p/chromium/issues/detail?id=1025564&can=2&q=%2224%3A00%22%20datetimeformat
        var adjustedHour = hour === 24 ? 0 : hour;
        var asUTC = $c70e8820d152b235$var$objToLocalTS({
            year: year,
            month: month,
            day: day,
            hour: adjustedHour,
            minute: minute,
            second: second,
            millisecond: 0
        });
        var asTS = +date;
        var over = asTS % 1000;
        asTS -= over >= 0 ? over : 1000 + over;
        return (asUTC - asTS) / 60000;
    } /** @override **/ ;
    _proto.equals = function equals(otherZone) {
        return otherZone.type === "iana" && otherZone.name === this.name;
    } /** @override **/ ;
    $c70e8820d152b235$var$_createClass(IANAZone, [
        {
            key: "type",
            get: function get() {
                return "iana";
            }
        },
        {
            key: "name",
            get: function get() {
                return this.zoneName;
            }
        },
        {
            key: "isUniversal",
            get: function get() {
                return false;
            }
        },
        {
            key: "isValid",
            get: function get() {
                return this.valid;
            }
        }
    ]);
    return IANAZone;
}($c70e8820d152b235$var$Zone);
var $c70e8820d152b235$var$_excluded = [
    "base"
], $c70e8820d152b235$var$_excluded2 = [
    "padTo",
    "floor"
];
// todo - remap caching
var $c70e8820d152b235$var$intlLFCache = {};
function $c70e8820d152b235$var$getCachedLF(locString, opts) {
    if (opts === void 0) opts = {};
    var key = JSON.stringify([
        locString,
        opts
    ]);
    var dtf = $c70e8820d152b235$var$intlLFCache[key];
    if (!dtf) {
        dtf = new Intl.ListFormat(locString, opts);
        $c70e8820d152b235$var$intlLFCache[key] = dtf;
    }
    return dtf;
}
var $c70e8820d152b235$var$intlDTCache = {};
function $c70e8820d152b235$var$getCachedDTF(locString, opts) {
    if (opts === void 0) opts = {};
    var key = JSON.stringify([
        locString,
        opts
    ]);
    var dtf = $c70e8820d152b235$var$intlDTCache[key];
    if (!dtf) {
        dtf = new Intl.DateTimeFormat(locString, opts);
        $c70e8820d152b235$var$intlDTCache[key] = dtf;
    }
    return dtf;
}
var $c70e8820d152b235$var$intlNumCache = {};
function $c70e8820d152b235$var$getCachedINF(locString, opts) {
    if (opts === void 0) opts = {};
    var key = JSON.stringify([
        locString,
        opts
    ]);
    var inf = $c70e8820d152b235$var$intlNumCache[key];
    if (!inf) {
        inf = new Intl.NumberFormat(locString, opts);
        $c70e8820d152b235$var$intlNumCache[key] = inf;
    }
    return inf;
}
var $c70e8820d152b235$var$intlRelCache = {};
function $c70e8820d152b235$var$getCachedRTF(locString, opts) {
    if (opts === void 0) opts = {};
    var _opts = opts;
    _opts.base;
    var cacheKeyOpts = $c70e8820d152b235$var$_objectWithoutPropertiesLoose(_opts, $c70e8820d152b235$var$_excluded); // exclude `base` from the options
    var key = JSON.stringify([
        locString,
        cacheKeyOpts
    ]);
    var inf = $c70e8820d152b235$var$intlRelCache[key];
    if (!inf) {
        inf = new Intl.RelativeTimeFormat(locString, opts);
        $c70e8820d152b235$var$intlRelCache[key] = inf;
    }
    return inf;
}
var $c70e8820d152b235$var$sysLocaleCache = null;
function $c70e8820d152b235$var$systemLocale() {
    if ($c70e8820d152b235$var$sysLocaleCache) return $c70e8820d152b235$var$sysLocaleCache;
    else {
        $c70e8820d152b235$var$sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;
        return $c70e8820d152b235$var$sysLocaleCache;
    }
}
var $c70e8820d152b235$var$weekInfoCache = {};
function $c70e8820d152b235$var$getCachedWeekInfo(locString) {
    var data = $c70e8820d152b235$var$weekInfoCache[locString];
    if (!data) {
        var locale = new Intl.Locale(locString);
        // browsers currently implement this as a property, but spec says it should be a getter function
        data = "getWeekInfo" in locale ? locale.getWeekInfo() : locale.weekInfo;
        $c70e8820d152b235$var$weekInfoCache[locString] = data;
    }
    return data;
}
function $c70e8820d152b235$var$parseLocaleString(localeStr) {
    // I really want to avoid writing a BCP 47 parser
    // see, e.g. https://github.com/wooorm/bcp-47
    // Instead, we'll do this:
    // a) if the string has no -u extensions, just leave it alone
    // b) if it does, use Intl to resolve everything
    // c) if Intl fails, try again without the -u
    // private subtags and unicode subtags have ordering requirements,
    // and we're not properly parsing this, so just strip out the
    // private ones if they exist.
    var xIndex = localeStr.indexOf("-x-");
    if (xIndex !== -1) localeStr = localeStr.substring(0, xIndex);
    var uIndex = localeStr.indexOf("-u-");
    if (uIndex === -1) return [
        localeStr
    ];
    else {
        var options;
        var selectedStr;
        try {
            options = $c70e8820d152b235$var$getCachedDTF(localeStr).resolvedOptions();
            selectedStr = localeStr;
        } catch (e) {
            var smaller = localeStr.substring(0, uIndex);
            options = $c70e8820d152b235$var$getCachedDTF(smaller).resolvedOptions();
            selectedStr = smaller;
        }
        var _options = options, numberingSystem = _options.numberingSystem, calendar = _options.calendar;
        return [
            selectedStr,
            numberingSystem,
            calendar
        ];
    }
}
function $c70e8820d152b235$var$intlConfigString(localeStr, numberingSystem, outputCalendar) {
    if (outputCalendar || numberingSystem) {
        if (!localeStr.includes("-u-")) localeStr += "-u";
        if (outputCalendar) localeStr += "-ca-" + outputCalendar;
        if (numberingSystem) localeStr += "-nu-" + numberingSystem;
        return localeStr;
    } else return localeStr;
}
function $c70e8820d152b235$var$mapMonths(f) {
    var ms = [];
    for(var i = 1; i <= 12; i++){
        var dt = $c70e8820d152b235$var$DateTime.utc(2009, i, 1);
        ms.push(f(dt));
    }
    return ms;
}
function $c70e8820d152b235$var$mapWeekdays(f) {
    var ms = [];
    for(var i = 1; i <= 7; i++){
        var dt = $c70e8820d152b235$var$DateTime.utc(2016, 11, 13 + i);
        ms.push(f(dt));
    }
    return ms;
}
function $c70e8820d152b235$var$listStuff(loc, length, englishFn, intlFn) {
    var mode = loc.listingMode();
    if (mode === "error") return null;
    else if (mode === "en") return englishFn(length);
    else return intlFn(length);
}
function $c70e8820d152b235$var$supportsFastNumbers(loc) {
    if (loc.numberingSystem && loc.numberingSystem !== "latn") return false;
    else return loc.numberingSystem === "latn" || !loc.locale || loc.locale.startsWith("en") || new Intl.DateTimeFormat(loc.intl).resolvedOptions().numberingSystem === "latn";
}
/**
 * @private
 */ var $c70e8820d152b235$var$PolyNumberFormatter = /*#__PURE__*/ function() {
    function PolyNumberFormatter(intl, forceSimple, opts) {
        this.padTo = opts.padTo || 0;
        this.floor = opts.floor || false;
        opts.padTo;
        opts.floor;
        var otherOpts = $c70e8820d152b235$var$_objectWithoutPropertiesLoose(opts, $c70e8820d152b235$var$_excluded2);
        if (!forceSimple || Object.keys(otherOpts).length > 0) {
            var intlOpts = $c70e8820d152b235$var$_extends({
                useGrouping: false
            }, opts);
            if (opts.padTo > 0) intlOpts.minimumIntegerDigits = opts.padTo;
            this.inf = $c70e8820d152b235$var$getCachedINF(intl, intlOpts);
        }
    }
    var _proto = PolyNumberFormatter.prototype;
    _proto.format = function format(i) {
        if (this.inf) {
            var fixed = this.floor ? Math.floor(i) : i;
            return this.inf.format(fixed);
        } else {
            // to match the browser's numberformatter defaults
            var _fixed = this.floor ? Math.floor(i) : $c70e8820d152b235$var$roundTo(i, 3);
            return $c70e8820d152b235$var$padStart(_fixed, this.padTo);
        }
    };
    return PolyNumberFormatter;
}();
/**
 * @private
 */ var $c70e8820d152b235$var$PolyDateFormatter = /*#__PURE__*/ function() {
    function PolyDateFormatter(dt, intl, opts) {
        this.opts = opts;
        this.originalZone = undefined;
        var z = undefined;
        if (this.opts.timeZone) // Don't apply any workarounds if a timeZone is explicitly provided in opts
        this.dt = dt;
        else if (dt.zone.type === "fixed") {
            // UTC-8 or Etc/UTC-8 are not part of tzdata, only Etc/GMT+8 and the like.
            // That is why fixed-offset TZ is set to that unless it is:
            // 1. Representing offset 0 when UTC is used to maintain previous behavior and does not become GMT.
            // 2. Unsupported by the browser:
            //    - some do not support Etc/
            //    - < Etc/GMT-14, > Etc/GMT+12, and 30-minute or 45-minute offsets are not part of tzdata
            var gmtOffset = -1 * (dt.offset / 60);
            var offsetZ = gmtOffset >= 0 ? "Etc/GMT+" + gmtOffset : "Etc/GMT" + gmtOffset;
            if (dt.offset !== 0 && $c70e8820d152b235$var$IANAZone.create(offsetZ).valid) {
                z = offsetZ;
                this.dt = dt;
            } else {
                // Not all fixed-offset zones like Etc/+4:30 are present in tzdata so
                // we manually apply the offset and substitute the zone as needed.
                z = "UTC";
                this.dt = dt.offset === 0 ? dt : dt.setZone("UTC").plus({
                    minutes: dt.offset
                });
                this.originalZone = dt.zone;
            }
        } else if (dt.zone.type === "system") this.dt = dt;
        else if (dt.zone.type === "iana") {
            this.dt = dt;
            z = dt.zone.name;
        } else {
            // Custom zones can have any offset / offsetName so we just manually
            // apply the offset and substitute the zone as needed.
            z = "UTC";
            this.dt = dt.setZone("UTC").plus({
                minutes: dt.offset
            });
            this.originalZone = dt.zone;
        }
        var intlOpts = $c70e8820d152b235$var$_extends({}, this.opts);
        intlOpts.timeZone = intlOpts.timeZone || z;
        this.dtf = $c70e8820d152b235$var$getCachedDTF(intl, intlOpts);
    }
    var _proto2 = PolyDateFormatter.prototype;
    _proto2.format = function format() {
        if (this.originalZone) // If we have to substitute in the actual zone name, we have to use
        // formatToParts so that the timezone can be replaced.
        return this.formatToParts().map(function(_ref) {
            var value = _ref.value;
            return value;
        }).join("");
        return this.dtf.format(this.dt.toJSDate());
    };
    _proto2.formatToParts = function formatToParts() {
        var _this = this;
        var parts = this.dtf.formatToParts(this.dt.toJSDate());
        if (this.originalZone) return parts.map(function(part) {
            if (part.type === "timeZoneName") {
                var offsetName = _this.originalZone.offsetName(_this.dt.ts, {
                    locale: _this.dt.locale,
                    format: _this.opts.timeZoneName
                });
                return $c70e8820d152b235$var$_extends({}, part, {
                    value: offsetName
                });
            } else return part;
        });
        return parts;
    };
    _proto2.resolvedOptions = function resolvedOptions() {
        return this.dtf.resolvedOptions();
    };
    return PolyDateFormatter;
}();
/**
 * @private
 */ var $c70e8820d152b235$var$PolyRelFormatter = /*#__PURE__*/ function() {
    function PolyRelFormatter(intl, isEnglish, opts) {
        this.opts = $c70e8820d152b235$var$_extends({
            style: "long"
        }, opts);
        if (!isEnglish && $c70e8820d152b235$var$hasRelative()) this.rtf = $c70e8820d152b235$var$getCachedRTF(intl, opts);
    }
    var _proto3 = PolyRelFormatter.prototype;
    _proto3.format = function format(count, unit) {
        if (this.rtf) return this.rtf.format(count, unit);
        else return $c70e8820d152b235$var$formatRelativeTime(unit, count, this.opts.numeric, this.opts.style !== "long");
    };
    _proto3.formatToParts = function formatToParts(count, unit) {
        if (this.rtf) return this.rtf.formatToParts(count, unit);
        else return [];
    };
    return PolyRelFormatter;
}();
var $c70e8820d152b235$var$fallbackWeekSettings = {
    firstDay: 1,
    minimalDays: 4,
    weekend: [
        6,
        7
    ]
};
/**
 * @private
 */ var $c70e8820d152b235$var$Locale = /*#__PURE__*/ function() {
    Locale.fromOpts = function fromOpts(opts) {
        return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.weekSettings, opts.defaultToEN);
    };
    Locale.create = function create(locale, numberingSystem, outputCalendar, weekSettings, defaultToEN) {
        if (defaultToEN === void 0) defaultToEN = false;
        var specifiedLocale = locale || $c70e8820d152b235$var$Settings.defaultLocale;
        // the system locale is useful for human readable strings but annoying for parsing/formatting known formats
        var localeR = specifiedLocale || (defaultToEN ? "en-US" : $c70e8820d152b235$var$systemLocale());
        var numberingSystemR = numberingSystem || $c70e8820d152b235$var$Settings.defaultNumberingSystem;
        var outputCalendarR = outputCalendar || $c70e8820d152b235$var$Settings.defaultOutputCalendar;
        var weekSettingsR = $c70e8820d152b235$var$validateWeekSettings(weekSettings) || $c70e8820d152b235$var$Settings.defaultWeekSettings;
        return new Locale(localeR, numberingSystemR, outputCalendarR, weekSettingsR, specifiedLocale);
    };
    Locale.resetCache = function resetCache() {
        $c70e8820d152b235$var$sysLocaleCache = null;
        $c70e8820d152b235$var$intlDTCache = {};
        $c70e8820d152b235$var$intlNumCache = {};
        $c70e8820d152b235$var$intlRelCache = {};
    };
    Locale.fromObject = function fromObject(_temp) {
        var _ref2 = _temp === void 0 ? {} : _temp, locale = _ref2.locale, numberingSystem = _ref2.numberingSystem, outputCalendar = _ref2.outputCalendar, weekSettings = _ref2.weekSettings;
        return Locale.create(locale, numberingSystem, outputCalendar, weekSettings);
    };
    function Locale(locale, numbering, outputCalendar, weekSettings, specifiedLocale) {
        var _parseLocaleString = $c70e8820d152b235$var$parseLocaleString(locale), parsedLocale = _parseLocaleString[0], parsedNumberingSystem = _parseLocaleString[1], parsedOutputCalendar = _parseLocaleString[2];
        this.locale = parsedLocale;
        this.numberingSystem = numbering || parsedNumberingSystem || null;
        this.outputCalendar = outputCalendar || parsedOutputCalendar || null;
        this.weekSettings = weekSettings;
        this.intl = $c70e8820d152b235$var$intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);
        this.weekdaysCache = {
            format: {},
            standalone: {}
        };
        this.monthsCache = {
            format: {},
            standalone: {}
        };
        this.meridiemCache = null;
        this.eraCache = {};
        this.specifiedLocale = specifiedLocale;
        this.fastNumbersCached = null;
    }
    var _proto4 = Locale.prototype;
    _proto4.listingMode = function listingMode() {
        var isActuallyEn = this.isEnglish();
        var hasNoWeirdness = (this.numberingSystem === null || this.numberingSystem === "latn") && (this.outputCalendar === null || this.outputCalendar === "gregory");
        return isActuallyEn && hasNoWeirdness ? "en" : "intl";
    };
    _proto4.clone = function clone(alts) {
        if (!alts || Object.getOwnPropertyNames(alts).length === 0) return this;
        else return Locale.create(alts.locale || this.specifiedLocale, alts.numberingSystem || this.numberingSystem, alts.outputCalendar || this.outputCalendar, $c70e8820d152b235$var$validateWeekSettings(alts.weekSettings) || this.weekSettings, alts.defaultToEN || false);
    };
    _proto4.redefaultToEN = function redefaultToEN(alts) {
        if (alts === void 0) alts = {};
        return this.clone($c70e8820d152b235$var$_extends({}, alts, {
            defaultToEN: true
        }));
    };
    _proto4.redefaultToSystem = function redefaultToSystem(alts) {
        if (alts === void 0) alts = {};
        return this.clone($c70e8820d152b235$var$_extends({}, alts, {
            defaultToEN: false
        }));
    };
    _proto4.months = function months$1(length, format) {
        var _this2 = this;
        if (format === void 0) format = false;
        return $c70e8820d152b235$var$listStuff(this, length, $c70e8820d152b235$var$months, function() {
            var intl = format ? {
                month: length,
                day: "numeric"
            } : {
                month: length
            }, formatStr = format ? "format" : "standalone";
            if (!_this2.monthsCache[formatStr][length]) _this2.monthsCache[formatStr][length] = $c70e8820d152b235$var$mapMonths(function(dt) {
                return _this2.extract(dt, intl, "month");
            });
            return _this2.monthsCache[formatStr][length];
        });
    };
    _proto4.weekdays = function weekdays$1(length, format) {
        var _this3 = this;
        if (format === void 0) format = false;
        return $c70e8820d152b235$var$listStuff(this, length, $c70e8820d152b235$var$weekdays, function() {
            var intl = format ? {
                weekday: length,
                year: "numeric",
                month: "long",
                day: "numeric"
            } : {
                weekday: length
            }, formatStr = format ? "format" : "standalone";
            if (!_this3.weekdaysCache[formatStr][length]) _this3.weekdaysCache[formatStr][length] = $c70e8820d152b235$var$mapWeekdays(function(dt) {
                return _this3.extract(dt, intl, "weekday");
            });
            return _this3.weekdaysCache[formatStr][length];
        });
    };
    _proto4.meridiems = function meridiems$1() {
        var _this4 = this;
        return $c70e8820d152b235$var$listStuff(this, undefined, function() {
            return $c70e8820d152b235$var$meridiems;
        }, function() {
            // In theory there could be aribitrary day periods. We're gonna assume there are exactly two
            // for AM and PM. This is probably wrong, but it's makes parsing way easier.
            if (!_this4.meridiemCache) {
                var intl = {
                    hour: "numeric",
                    hourCycle: "h12"
                };
                _this4.meridiemCache = [
                    $c70e8820d152b235$var$DateTime.utc(2016, 11, 13, 9),
                    $c70e8820d152b235$var$DateTime.utc(2016, 11, 13, 19)
                ].map(function(dt) {
                    return _this4.extract(dt, intl, "dayperiod");
                });
            }
            return _this4.meridiemCache;
        });
    };
    _proto4.eras = function eras$1(length) {
        var _this5 = this;
        return $c70e8820d152b235$var$listStuff(this, length, $c70e8820d152b235$var$eras, function() {
            var intl = {
                era: length
            };
            // This is problematic. Different calendars are going to define eras totally differently. What I need is the minimum set of dates
            // to definitely enumerate them.
            if (!_this5.eraCache[length]) _this5.eraCache[length] = [
                $c70e8820d152b235$var$DateTime.utc(-40, 1, 1),
                $c70e8820d152b235$var$DateTime.utc(2017, 1, 1)
            ].map(function(dt) {
                return _this5.extract(dt, intl, "era");
            });
            return _this5.eraCache[length];
        });
    };
    _proto4.extract = function extract(dt, intlOpts, field) {
        var df = this.dtFormatter(dt, intlOpts), results = df.formatToParts(), matching = results.find(function(m) {
            return m.type.toLowerCase() === field;
        });
        return matching ? matching.value : null;
    };
    _proto4.numberFormatter = function numberFormatter(opts) {
        if (opts === void 0) opts = {};
        // this forcesimple option is never used (the only caller short-circuits on it, but it seems safer to leave)
        // (in contrast, the rest of the condition is used heavily)
        return new $c70e8820d152b235$var$PolyNumberFormatter(this.intl, opts.forceSimple || this.fastNumbers, opts);
    };
    _proto4.dtFormatter = function dtFormatter(dt, intlOpts) {
        if (intlOpts === void 0) intlOpts = {};
        return new $c70e8820d152b235$var$PolyDateFormatter(dt, this.intl, intlOpts);
    };
    _proto4.relFormatter = function relFormatter(opts) {
        if (opts === void 0) opts = {};
        return new $c70e8820d152b235$var$PolyRelFormatter(this.intl, this.isEnglish(), opts);
    };
    _proto4.listFormatter = function listFormatter(opts) {
        if (opts === void 0) opts = {};
        return $c70e8820d152b235$var$getCachedLF(this.intl, opts);
    };
    _proto4.isEnglish = function isEnglish() {
        return this.locale === "en" || this.locale.toLowerCase() === "en-us" || new Intl.DateTimeFormat(this.intl).resolvedOptions().locale.startsWith("en-us");
    };
    _proto4.getWeekSettings = function getWeekSettings() {
        if (this.weekSettings) return this.weekSettings;
        else if (!$c70e8820d152b235$var$hasLocaleWeekInfo()) return $c70e8820d152b235$var$fallbackWeekSettings;
        else return $c70e8820d152b235$var$getCachedWeekInfo(this.locale);
    };
    _proto4.getStartOfWeek = function getStartOfWeek() {
        return this.getWeekSettings().firstDay;
    };
    _proto4.getMinDaysInFirstWeek = function getMinDaysInFirstWeek() {
        return this.getWeekSettings().minimalDays;
    };
    _proto4.getWeekendDays = function getWeekendDays() {
        return this.getWeekSettings().weekend;
    };
    _proto4.equals = function equals(other) {
        return this.locale === other.locale && this.numberingSystem === other.numberingSystem && this.outputCalendar === other.outputCalendar;
    };
    $c70e8820d152b235$var$_createClass(Locale, [
        {
            key: "fastNumbers",
            get: function get() {
                if (this.fastNumbersCached == null) this.fastNumbersCached = $c70e8820d152b235$var$supportsFastNumbers(this);
                return this.fastNumbersCached;
            }
        }
    ]);
    return Locale;
}();
var $c70e8820d152b235$var$singleton = null;
/**
 * A zone with a fixed offset (meaning no DST)
 * @implements {Zone}
 */ var $c70e8820d152b235$var$FixedOffsetZone = /*#__PURE__*/ function(_Zone) {
    $c70e8820d152b235$var$_inheritsLoose(FixedOffsetZone, _Zone);
    /**
   * Get an instance with a specified offset
   * @param {number} offset - The offset in minutes
   * @return {FixedOffsetZone}
   */ FixedOffsetZone.instance = function instance(offset) {
        return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);
    } /**
   * Get an instance of FixedOffsetZone from a UTC offset string, like "UTC+6"
   * @param {string} s - The offset string to parse
   * @example FixedOffsetZone.parseSpecifier("UTC+6")
   * @example FixedOffsetZone.parseSpecifier("UTC+06")
   * @example FixedOffsetZone.parseSpecifier("UTC-6:00")
   * @return {FixedOffsetZone}
   */ ;
    FixedOffsetZone.parseSpecifier = function parseSpecifier(s) {
        if (s) {
            var r = s.match(/^utc(?:([+-]\d{1,2})(?::(\d{2}))?)?$/i);
            if (r) return new FixedOffsetZone($c70e8820d152b235$var$signedOffset(r[1], r[2]));
        }
        return null;
    };
    function FixedOffsetZone(offset) {
        var _this;
        _this = _Zone.call(this) || this;
        /** @private **/ _this.fixed = offset;
        return _this;
    }
    /** @override **/ var _proto = FixedOffsetZone.prototype;
    /** @override **/ _proto.offsetName = function offsetName() {
        return this.name;
    } /** @override **/ ;
    _proto.formatOffset = function formatOffset$1(ts, format) {
        return $c70e8820d152b235$var$formatOffset(this.fixed, format);
    } /** @override **/ ;
    /** @override **/ _proto.offset = function offset() {
        return this.fixed;
    } /** @override **/ ;
    _proto.equals = function equals(otherZone) {
        return otherZone.type === "fixed" && otherZone.fixed === this.fixed;
    } /** @override **/ ;
    $c70e8820d152b235$var$_createClass(FixedOffsetZone, [
        {
            key: "type",
            get: function get() {
                return "fixed";
            }
        },
        {
            key: "name",
            get: function get() {
                return this.fixed === 0 ? "UTC" : "UTC" + $c70e8820d152b235$var$formatOffset(this.fixed, "narrow");
            }
        },
        {
            key: "ianaName",
            get: function get() {
                if (this.fixed === 0) return "Etc/UTC";
                else return "Etc/GMT" + $c70e8820d152b235$var$formatOffset(-this.fixed, "narrow");
            }
        },
        {
            key: "isUniversal",
            get: function get() {
                return true;
            }
        },
        {
            key: "isValid",
            get: function get() {
                return true;
            }
        }
    ], [
        {
            key: "utcInstance",
            get: /**
     * Get a singleton instance of UTC
     * @return {FixedOffsetZone}
     */ function get() {
                if ($c70e8820d152b235$var$singleton === null) $c70e8820d152b235$var$singleton = new FixedOffsetZone(0);
                return $c70e8820d152b235$var$singleton;
            }
        }
    ]);
    return FixedOffsetZone;
}($c70e8820d152b235$var$Zone);
/**
 * A zone that failed to parse. You should never need to instantiate this.
 * @implements {Zone}
 */ var $c70e8820d152b235$var$InvalidZone = /*#__PURE__*/ function(_Zone) {
    $c70e8820d152b235$var$_inheritsLoose(InvalidZone, _Zone);
    function InvalidZone(zoneName) {
        var _this;
        _this = _Zone.call(this) || this;
        /**  @private */ _this.zoneName = zoneName;
        return _this;
    }
    /** @override **/ var _proto = InvalidZone.prototype;
    /** @override **/ _proto.offsetName = function offsetName() {
        return null;
    } /** @override **/ ;
    _proto.formatOffset = function formatOffset() {
        return "";
    } /** @override **/ ;
    _proto.offset = function offset() {
        return NaN;
    } /** @override **/ ;
    _proto.equals = function equals() {
        return false;
    } /** @override **/ ;
    $c70e8820d152b235$var$_createClass(InvalidZone, [
        {
            key: "type",
            get: function get() {
                return "invalid";
            }
        },
        {
            key: "name",
            get: function get() {
                return this.zoneName;
            }
        },
        {
            key: "isUniversal",
            get: function get() {
                return false;
            }
        },
        {
            key: "isValid",
            get: function get() {
                return false;
            }
        }
    ]);
    return InvalidZone;
}($c70e8820d152b235$var$Zone);
/**
 * @private
 */ function $c70e8820d152b235$var$normalizeZone(input, defaultZone) {
    if ($c70e8820d152b235$var$isUndefined(input) || input === null) return defaultZone;
    else if (input instanceof $c70e8820d152b235$var$Zone) return input;
    else if ($c70e8820d152b235$var$isString(input)) {
        var lowered = input.toLowerCase();
        if (lowered === "default") return defaultZone;
        else if (lowered === "local" || lowered === "system") return $c70e8820d152b235$var$SystemZone.instance;
        else if (lowered === "utc" || lowered === "gmt") return $c70e8820d152b235$var$FixedOffsetZone.utcInstance;
        else return $c70e8820d152b235$var$FixedOffsetZone.parseSpecifier(lowered) || $c70e8820d152b235$var$IANAZone.create(input);
    } else if ($c70e8820d152b235$var$isNumber(input)) return $c70e8820d152b235$var$FixedOffsetZone.instance(input);
    else if (typeof input === "object" && "offset" in input && typeof input.offset === "function") // This is dumb, but the instanceof check above doesn't seem to really work
    // so we're duck checking it
    return input;
    else return new $c70e8820d152b235$var$InvalidZone(input);
}
var $c70e8820d152b235$var$now = function now() {
    return Date.now();
}, $c70e8820d152b235$var$defaultZone = "system", $c70e8820d152b235$var$defaultLocale = null, $c70e8820d152b235$var$defaultNumberingSystem = null, $c70e8820d152b235$var$defaultOutputCalendar = null, $c70e8820d152b235$var$twoDigitCutoffYear = 60, $c70e8820d152b235$var$throwOnInvalid, $c70e8820d152b235$var$defaultWeekSettings = null;
/**
 * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.
 */ var $c70e8820d152b235$var$Settings = /*#__PURE__*/ function() {
    function Settings() {}
    /**
   * Reset Luxon's global caches. Should only be necessary in testing scenarios.
   * @return {void}
   */ Settings.resetCaches = function resetCaches() {
        $c70e8820d152b235$var$Locale.resetCache();
        $c70e8820d152b235$var$IANAZone.resetCache();
    };
    $c70e8820d152b235$var$_createClass(Settings, null, [
        {
            key: "now",
            get: /**
     * Get the callback for returning the current timestamp.
     * @type {function}
     */ function get() {
                return $c70e8820d152b235$var$now;
            },
            set: function set(n) {
                $c70e8820d152b235$var$now = n;
            }
        },
        {
            key: "defaultZone",
            get: /**
     * Get the default time zone object currently used to create DateTimes. Does not affect existing instances.
     * The default value is the system's time zone (the one set on the machine that runs this code).
     * @type {Zone}
     */ function get() {
                return $c70e8820d152b235$var$normalizeZone($c70e8820d152b235$var$defaultZone, $c70e8820d152b235$var$SystemZone.instance);
            },
            set: function set(zone) {
                $c70e8820d152b235$var$defaultZone = zone;
            }
        },
        {
            key: "defaultLocale",
            get: function get() {
                return $c70e8820d152b235$var$defaultLocale;
            },
            set: function set(locale) {
                $c70e8820d152b235$var$defaultLocale = locale;
            }
        },
        {
            key: "defaultNumberingSystem",
            get: function get() {
                return $c70e8820d152b235$var$defaultNumberingSystem;
            },
            set: function set(numberingSystem) {
                $c70e8820d152b235$var$defaultNumberingSystem = numberingSystem;
            }
        },
        {
            key: "defaultOutputCalendar",
            get: function get() {
                return $c70e8820d152b235$var$defaultOutputCalendar;
            },
            set: function set(outputCalendar) {
                $c70e8820d152b235$var$defaultOutputCalendar = outputCalendar;
            }
        },
        {
            key: "defaultWeekSettings",
            get: function get() {
                return $c70e8820d152b235$var$defaultWeekSettings;
            },
            set: function set(weekSettings) {
                $c70e8820d152b235$var$defaultWeekSettings = $c70e8820d152b235$var$validateWeekSettings(weekSettings);
            }
        },
        {
            key: "twoDigitCutoffYear",
            get: function get() {
                return $c70e8820d152b235$var$twoDigitCutoffYear;
            },
            set: function set(cutoffYear) {
                $c70e8820d152b235$var$twoDigitCutoffYear = cutoffYear % 100;
            }
        },
        {
            key: "throwOnInvalid",
            get: function get() {
                return $c70e8820d152b235$var$throwOnInvalid;
            },
            set: function set(t) {
                $c70e8820d152b235$var$throwOnInvalid = t;
            }
        }
    ]);
    return Settings;
}();
var $c70e8820d152b235$var$Invalid = /*#__PURE__*/ function() {
    function Invalid(reason, explanation) {
        this.reason = reason;
        this.explanation = explanation;
    }
    var _proto = Invalid.prototype;
    _proto.toMessage = function toMessage() {
        if (this.explanation) return this.reason + ": " + this.explanation;
        else return this.reason;
    };
    return Invalid;
}();
var $c70e8820d152b235$var$nonLeapLadder = [
    0,
    31,
    59,
    90,
    120,
    151,
    181,
    212,
    243,
    273,
    304,
    334
], $c70e8820d152b235$var$leapLadder = [
    0,
    31,
    60,
    91,
    121,
    152,
    182,
    213,
    244,
    274,
    305,
    335
];
function $c70e8820d152b235$var$unitOutOfRange(unit, value) {
    return new $c70e8820d152b235$var$Invalid("unit out of range", "you specified " + value + " (of type " + typeof value + ") as a " + unit + ", which is invalid");
}
function $c70e8820d152b235$var$dayOfWeek(year, month, day) {
    var d = new Date(Date.UTC(year, month - 1, day));
    if (year < 100 && year >= 0) d.setUTCFullYear(d.getUTCFullYear() - 1900);
    var js = d.getUTCDay();
    return js === 0 ? 7 : js;
}
function $c70e8820d152b235$var$computeOrdinal(year, month, day) {
    return day + ($c70e8820d152b235$var$isLeapYear(year) ? $c70e8820d152b235$var$leapLadder : $c70e8820d152b235$var$nonLeapLadder)[month - 1];
}
function $c70e8820d152b235$var$uncomputeOrdinal(year, ordinal) {
    var table = $c70e8820d152b235$var$isLeapYear(year) ? $c70e8820d152b235$var$leapLadder : $c70e8820d152b235$var$nonLeapLadder, month0 = table.findIndex(function(i) {
        return i < ordinal;
    }), day = ordinal - table[month0];
    return {
        month: month0 + 1,
        day: day
    };
}
function $c70e8820d152b235$var$isoWeekdayToLocal(isoWeekday, startOfWeek) {
    return (isoWeekday - startOfWeek + 7) % 7 + 1;
}
/**
 * @private
 */ function $c70e8820d152b235$var$gregorianToWeek(gregObj, minDaysInFirstWeek, startOfWeek) {
    if (minDaysInFirstWeek === void 0) minDaysInFirstWeek = 4;
    if (startOfWeek === void 0) startOfWeek = 1;
    var year = gregObj.year, month = gregObj.month, day = gregObj.day, ordinal = $c70e8820d152b235$var$computeOrdinal(year, month, day), weekday = $c70e8820d152b235$var$isoWeekdayToLocal($c70e8820d152b235$var$dayOfWeek(year, month, day), startOfWeek);
    var weekNumber = Math.floor((ordinal - weekday + 14 - minDaysInFirstWeek) / 7), weekYear;
    if (weekNumber < 1) {
        weekYear = year - 1;
        weekNumber = $c70e8820d152b235$var$weeksInWeekYear(weekYear, minDaysInFirstWeek, startOfWeek);
    } else if (weekNumber > $c70e8820d152b235$var$weeksInWeekYear(year, minDaysInFirstWeek, startOfWeek)) {
        weekYear = year + 1;
        weekNumber = 1;
    } else weekYear = year;
    return $c70e8820d152b235$var$_extends({
        weekYear: weekYear,
        weekNumber: weekNumber,
        weekday: weekday
    }, $c70e8820d152b235$var$timeObject(gregObj));
}
function $c70e8820d152b235$var$weekToGregorian(weekData, minDaysInFirstWeek, startOfWeek) {
    if (minDaysInFirstWeek === void 0) minDaysInFirstWeek = 4;
    if (startOfWeek === void 0) startOfWeek = 1;
    var weekYear = weekData.weekYear, weekNumber = weekData.weekNumber, weekday = weekData.weekday, weekdayOfJan4 = $c70e8820d152b235$var$isoWeekdayToLocal($c70e8820d152b235$var$dayOfWeek(weekYear, 1, minDaysInFirstWeek), startOfWeek), yearInDays = $c70e8820d152b235$var$daysInYear(weekYear);
    var ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 7 + minDaysInFirstWeek, year;
    if (ordinal < 1) {
        year = weekYear - 1;
        ordinal += $c70e8820d152b235$var$daysInYear(year);
    } else if (ordinal > yearInDays) {
        year = weekYear + 1;
        ordinal -= $c70e8820d152b235$var$daysInYear(weekYear);
    } else year = weekYear;
    var _uncomputeOrdinal = $c70e8820d152b235$var$uncomputeOrdinal(year, ordinal), month = _uncomputeOrdinal.month, day = _uncomputeOrdinal.day;
    return $c70e8820d152b235$var$_extends({
        year: year,
        month: month,
        day: day
    }, $c70e8820d152b235$var$timeObject(weekData));
}
function $c70e8820d152b235$var$gregorianToOrdinal(gregData) {
    var year = gregData.year, month = gregData.month, day = gregData.day;
    var ordinal = $c70e8820d152b235$var$computeOrdinal(year, month, day);
    return $c70e8820d152b235$var$_extends({
        year: year,
        ordinal: ordinal
    }, $c70e8820d152b235$var$timeObject(gregData));
}
function $c70e8820d152b235$var$ordinalToGregorian(ordinalData) {
    var year = ordinalData.year, ordinal = ordinalData.ordinal;
    var _uncomputeOrdinal2 = $c70e8820d152b235$var$uncomputeOrdinal(year, ordinal), month = _uncomputeOrdinal2.month, day = _uncomputeOrdinal2.day;
    return $c70e8820d152b235$var$_extends({
        year: year,
        month: month,
        day: day
    }, $c70e8820d152b235$var$timeObject(ordinalData));
}
/**
 * Check if local week units like localWeekday are used in obj.
 * If so, validates that they are not mixed with ISO week units and then copies them to the normal week unit properties.
 * Modifies obj in-place!
 * @param obj the object values
 */ function $c70e8820d152b235$var$usesLocalWeekValues(obj, loc) {
    var hasLocaleWeekData = !$c70e8820d152b235$var$isUndefined(obj.localWeekday) || !$c70e8820d152b235$var$isUndefined(obj.localWeekNumber) || !$c70e8820d152b235$var$isUndefined(obj.localWeekYear);
    if (hasLocaleWeekData) {
        var hasIsoWeekData = !$c70e8820d152b235$var$isUndefined(obj.weekday) || !$c70e8820d152b235$var$isUndefined(obj.weekNumber) || !$c70e8820d152b235$var$isUndefined(obj.weekYear);
        if (hasIsoWeekData) throw new $c70e8820d152b235$var$ConflictingSpecificationError("Cannot mix locale-based week fields with ISO-based week fields");
        if (!$c70e8820d152b235$var$isUndefined(obj.localWeekday)) obj.weekday = obj.localWeekday;
        if (!$c70e8820d152b235$var$isUndefined(obj.localWeekNumber)) obj.weekNumber = obj.localWeekNumber;
        if (!$c70e8820d152b235$var$isUndefined(obj.localWeekYear)) obj.weekYear = obj.localWeekYear;
        delete obj.localWeekday;
        delete obj.localWeekNumber;
        delete obj.localWeekYear;
        return {
            minDaysInFirstWeek: loc.getMinDaysInFirstWeek(),
            startOfWeek: loc.getStartOfWeek()
        };
    } else return {
        minDaysInFirstWeek: 4,
        startOfWeek: 1
    };
}
function $c70e8820d152b235$var$hasInvalidWeekData(obj, minDaysInFirstWeek, startOfWeek) {
    if (minDaysInFirstWeek === void 0) minDaysInFirstWeek = 4;
    if (startOfWeek === void 0) startOfWeek = 1;
    var validYear = $c70e8820d152b235$var$isInteger(obj.weekYear), validWeek = $c70e8820d152b235$var$integerBetween(obj.weekNumber, 1, $c70e8820d152b235$var$weeksInWeekYear(obj.weekYear, minDaysInFirstWeek, startOfWeek)), validWeekday = $c70e8820d152b235$var$integerBetween(obj.weekday, 1, 7);
    if (!validYear) return $c70e8820d152b235$var$unitOutOfRange("weekYear", obj.weekYear);
    else if (!validWeek) return $c70e8820d152b235$var$unitOutOfRange("week", obj.weekNumber);
    else if (!validWeekday) return $c70e8820d152b235$var$unitOutOfRange("weekday", obj.weekday);
    else return false;
}
function $c70e8820d152b235$var$hasInvalidOrdinalData(obj) {
    var validYear = $c70e8820d152b235$var$isInteger(obj.year), validOrdinal = $c70e8820d152b235$var$integerBetween(obj.ordinal, 1, $c70e8820d152b235$var$daysInYear(obj.year));
    if (!validYear) return $c70e8820d152b235$var$unitOutOfRange("year", obj.year);
    else if (!validOrdinal) return $c70e8820d152b235$var$unitOutOfRange("ordinal", obj.ordinal);
    else return false;
}
function $c70e8820d152b235$var$hasInvalidGregorianData(obj) {
    var validYear = $c70e8820d152b235$var$isInteger(obj.year), validMonth = $c70e8820d152b235$var$integerBetween(obj.month, 1, 12), validDay = $c70e8820d152b235$var$integerBetween(obj.day, 1, $c70e8820d152b235$var$daysInMonth(obj.year, obj.month));
    if (!validYear) return $c70e8820d152b235$var$unitOutOfRange("year", obj.year);
    else if (!validMonth) return $c70e8820d152b235$var$unitOutOfRange("month", obj.month);
    else if (!validDay) return $c70e8820d152b235$var$unitOutOfRange("day", obj.day);
    else return false;
}
function $c70e8820d152b235$var$hasInvalidTimeData(obj) {
    var hour = obj.hour, minute = obj.minute, second = obj.second, millisecond = obj.millisecond;
    var validHour = $c70e8820d152b235$var$integerBetween(hour, 0, 23) || hour === 24 && minute === 0 && second === 0 && millisecond === 0, validMinute = $c70e8820d152b235$var$integerBetween(minute, 0, 59), validSecond = $c70e8820d152b235$var$integerBetween(second, 0, 59), validMillisecond = $c70e8820d152b235$var$integerBetween(millisecond, 0, 999);
    if (!validHour) return $c70e8820d152b235$var$unitOutOfRange("hour", hour);
    else if (!validMinute) return $c70e8820d152b235$var$unitOutOfRange("minute", minute);
    else if (!validSecond) return $c70e8820d152b235$var$unitOutOfRange("second", second);
    else if (!validMillisecond) return $c70e8820d152b235$var$unitOutOfRange("millisecond", millisecond);
    else return false;
}
/**
 * @private
 */ // TYPES
function $c70e8820d152b235$var$isUndefined(o) {
    return typeof o === "undefined";
}
function $c70e8820d152b235$var$isNumber(o) {
    return typeof o === "number";
}
function $c70e8820d152b235$var$isInteger(o) {
    return typeof o === "number" && o % 1 === 0;
}
function $c70e8820d152b235$var$isString(o) {
    return typeof o === "string";
}
function $c70e8820d152b235$var$isDate(o) {
    return Object.prototype.toString.call(o) === "[object Date]";
}
// CAPABILITIES
function $c70e8820d152b235$var$hasRelative() {
    try {
        return typeof Intl !== "undefined" && !!Intl.RelativeTimeFormat;
    } catch (e) {
        return false;
    }
}
function $c70e8820d152b235$var$hasLocaleWeekInfo() {
    try {
        return typeof Intl !== "undefined" && !!Intl.Locale && ("weekInfo" in Intl.Locale.prototype || "getWeekInfo" in Intl.Locale.prototype);
    } catch (e) {
        return false;
    }
}
// OBJECTS AND ARRAYS
function $c70e8820d152b235$var$maybeArray(thing) {
    return Array.isArray(thing) ? thing : [
        thing
    ];
}
function $c70e8820d152b235$var$bestBy(arr, by, compare) {
    if (arr.length === 0) return undefined;
    return arr.reduce(function(best, next) {
        var pair = [
            by(next),
            next
        ];
        if (!best) return pair;
        else if (compare(best[0], pair[0]) === best[0]) return best;
        else return pair;
    }, null)[1];
}
function $c70e8820d152b235$var$pick(obj, keys) {
    return keys.reduce(function(a, k) {
        a[k] = obj[k];
        return a;
    }, {});
}
function $c70e8820d152b235$var$hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}
function $c70e8820d152b235$var$validateWeekSettings(settings) {
    if (settings == null) return null;
    else if (typeof settings !== "object") throw new $c70e8820d152b235$var$InvalidArgumentError("Week settings must be an object");
    else {
        if (!$c70e8820d152b235$var$integerBetween(settings.firstDay, 1, 7) || !$c70e8820d152b235$var$integerBetween(settings.minimalDays, 1, 7) || !Array.isArray(settings.weekend) || settings.weekend.some(function(v) {
            return !$c70e8820d152b235$var$integerBetween(v, 1, 7);
        })) throw new $c70e8820d152b235$var$InvalidArgumentError("Invalid week settings");
        return {
            firstDay: settings.firstDay,
            minimalDays: settings.minimalDays,
            weekend: Array.from(settings.weekend)
        };
    }
}
// NUMBERS AND STRINGS
function $c70e8820d152b235$var$integerBetween(thing, bottom, top) {
    return $c70e8820d152b235$var$isInteger(thing) && thing >= bottom && thing <= top;
}
// x % n but takes the sign of n instead of x
function $c70e8820d152b235$var$floorMod(x, n) {
    return x - n * Math.floor(x / n);
}
function $c70e8820d152b235$var$padStart(input, n) {
    if (n === void 0) n = 2;
    var isNeg = input < 0;
    var padded;
    if (isNeg) padded = "-" + ("" + -input).padStart(n, "0");
    else padded = ("" + input).padStart(n, "0");
    return padded;
}
function $c70e8820d152b235$var$parseInteger(string) {
    if ($c70e8820d152b235$var$isUndefined(string) || string === null || string === "") return undefined;
    else return parseInt(string, 10);
}
function $c70e8820d152b235$var$parseFloating(string) {
    if ($c70e8820d152b235$var$isUndefined(string) || string === null || string === "") return undefined;
    else return parseFloat(string);
}
function $c70e8820d152b235$var$parseMillis(fraction) {
    // Return undefined (instead of 0) in these cases, where fraction is not set
    if ($c70e8820d152b235$var$isUndefined(fraction) || fraction === null || fraction === "") return undefined;
    else {
        var f = parseFloat("0." + fraction) * 1000;
        return Math.floor(f);
    }
}
function $c70e8820d152b235$var$roundTo(number, digits, towardZero) {
    if (towardZero === void 0) towardZero = false;
    var factor = Math.pow(10, digits), rounder = towardZero ? Math.trunc : Math.round;
    return rounder(number * factor) / factor;
}
// DATE BASICS
function $c70e8820d152b235$var$isLeapYear(year) {
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
}
function $c70e8820d152b235$var$daysInYear(year) {
    return $c70e8820d152b235$var$isLeapYear(year) ? 366 : 365;
}
function $c70e8820d152b235$var$daysInMonth(year, month) {
    var modMonth = $c70e8820d152b235$var$floorMod(month - 1, 12) + 1, modYear = year + (month - modMonth) / 12;
    if (modMonth === 2) return $c70e8820d152b235$var$isLeapYear(modYear) ? 29 : 28;
    else return [
        31,
        null,
        31,
        30,
        31,
        30,
        31,
        31,
        30,
        31,
        30,
        31
    ][modMonth - 1];
}
// convert a calendar object to a local timestamp (epoch, but with the offset baked in)
function $c70e8820d152b235$var$objToLocalTS(obj) {
    var d = Date.UTC(obj.year, obj.month - 1, obj.day, obj.hour, obj.minute, obj.second, obj.millisecond);
    // for legacy reasons, years between 0 and 99 are interpreted as 19XX; revert that
    if (obj.year < 100 && obj.year >= 0) {
        d = new Date(d);
        // set the month and day again, this is necessary because year 2000 is a leap year, but year 100 is not
        // so if obj.year is in 99, but obj.day makes it roll over into year 100,
        // the calculations done by Date.UTC are using year 2000 - which is incorrect
        d.setUTCFullYear(obj.year, obj.month - 1, obj.day);
    }
    return +d;
}
// adapted from moment.js: https://github.com/moment/moment/blob/000ac1800e620f770f4eb31b5ae908f6167b0ab2/src/lib/units/week-calendar-utils.js
function $c70e8820d152b235$var$firstWeekOffset(year, minDaysInFirstWeek, startOfWeek) {
    var fwdlw = $c70e8820d152b235$var$isoWeekdayToLocal($c70e8820d152b235$var$dayOfWeek(year, 1, minDaysInFirstWeek), startOfWeek);
    return -fwdlw + minDaysInFirstWeek - 1;
}
function $c70e8820d152b235$var$weeksInWeekYear(weekYear, minDaysInFirstWeek, startOfWeek) {
    if (minDaysInFirstWeek === void 0) minDaysInFirstWeek = 4;
    if (startOfWeek === void 0) startOfWeek = 1;
    var weekOffset = $c70e8820d152b235$var$firstWeekOffset(weekYear, minDaysInFirstWeek, startOfWeek);
    var weekOffsetNext = $c70e8820d152b235$var$firstWeekOffset(weekYear + 1, minDaysInFirstWeek, startOfWeek);
    return ($c70e8820d152b235$var$daysInYear(weekYear) - weekOffset + weekOffsetNext) / 7;
}
function $c70e8820d152b235$var$untruncateYear(year) {
    if (year > 99) return year;
    else return year > $c70e8820d152b235$var$Settings.twoDigitCutoffYear ? 1900 + year : 2000 + year;
}
// PARSING
function $c70e8820d152b235$var$parseZoneInfo(ts, offsetFormat, locale, timeZone) {
    if (timeZone === void 0) timeZone = null;
    var date = new Date(ts), intlOpts = {
        hourCycle: "h23",
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit"
    };
    if (timeZone) intlOpts.timeZone = timeZone;
    var modified = $c70e8820d152b235$var$_extends({
        timeZoneName: offsetFormat
    }, intlOpts);
    var parsed = new Intl.DateTimeFormat(locale, modified).formatToParts(date).find(function(m) {
        return m.type.toLowerCase() === "timezonename";
    });
    return parsed ? parsed.value : null;
}
// signedOffset('-5', '30') -> -330
function $c70e8820d152b235$var$signedOffset(offHourStr, offMinuteStr) {
    var offHour = parseInt(offHourStr, 10);
    // don't || this because we want to preserve -0
    if (Number.isNaN(offHour)) offHour = 0;
    var offMin = parseInt(offMinuteStr, 10) || 0, offMinSigned = offHour < 0 || Object.is(offHour, -0) ? -offMin : offMin;
    return offHour * 60 + offMinSigned;
}
// COERCION
function $c70e8820d152b235$var$asNumber(value) {
    var numericValue = Number(value);
    if (typeof value === "boolean" || value === "" || Number.isNaN(numericValue)) throw new $c70e8820d152b235$var$InvalidArgumentError("Invalid unit value " + value);
    return numericValue;
}
function $c70e8820d152b235$var$normalizeObject(obj, normalizer) {
    var normalized = {};
    for(var u in obj)if ($c70e8820d152b235$var$hasOwnProperty(obj, u)) {
        var v = obj[u];
        if (v === undefined || v === null) continue;
        normalized[normalizer(u)] = $c70e8820d152b235$var$asNumber(v);
    }
    return normalized;
}
function $c70e8820d152b235$var$formatOffset(offset, format) {
    var hours = Math.trunc(Math.abs(offset / 60)), minutes = Math.trunc(Math.abs(offset % 60)), sign = offset >= 0 ? "+" : "-";
    switch(format){
        case "short":
            return "" + sign + $c70e8820d152b235$var$padStart(hours, 2) + ":" + $c70e8820d152b235$var$padStart(minutes, 2);
        case "narrow":
            return "" + sign + hours + (minutes > 0 ? ":" + minutes : "");
        case "techie":
            return "" + sign + $c70e8820d152b235$var$padStart(hours, 2) + $c70e8820d152b235$var$padStart(minutes, 2);
        default:
            throw new RangeError("Value format " + format + " is out of range for property format");
    }
}
function $c70e8820d152b235$var$timeObject(obj) {
    return $c70e8820d152b235$var$pick(obj, [
        "hour",
        "minute",
        "second",
        "millisecond"
    ]);
}
/**
 * @private
 */ var $c70e8820d152b235$var$monthsLong = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
];
var $c70e8820d152b235$var$monthsShort = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
];
var $c70e8820d152b235$var$monthsNarrow = [
    "J",
    "F",
    "M",
    "A",
    "M",
    "J",
    "J",
    "A",
    "S",
    "O",
    "N",
    "D"
];
function $c70e8820d152b235$var$months(length) {
    switch(length){
        case "narrow":
            return [].concat($c70e8820d152b235$var$monthsNarrow);
        case "short":
            return [].concat($c70e8820d152b235$var$monthsShort);
        case "long":
            return [].concat($c70e8820d152b235$var$monthsLong);
        case "numeric":
            return [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12"
            ];
        case "2-digit":
            return [
                "01",
                "02",
                "03",
                "04",
                "05",
                "06",
                "07",
                "08",
                "09",
                "10",
                "11",
                "12"
            ];
        default:
            return null;
    }
}
var $c70e8820d152b235$var$weekdaysLong = [
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
    "Sunday"
];
var $c70e8820d152b235$var$weekdaysShort = [
    "Mon",
    "Tue",
    "Wed",
    "Thu",
    "Fri",
    "Sat",
    "Sun"
];
var $c70e8820d152b235$var$weekdaysNarrow = [
    "M",
    "T",
    "W",
    "T",
    "F",
    "S",
    "S"
];
function $c70e8820d152b235$var$weekdays(length) {
    switch(length){
        case "narrow":
            return [].concat($c70e8820d152b235$var$weekdaysNarrow);
        case "short":
            return [].concat($c70e8820d152b235$var$weekdaysShort);
        case "long":
            return [].concat($c70e8820d152b235$var$weekdaysLong);
        case "numeric":
            return [
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7"
            ];
        default:
            return null;
    }
}
var $c70e8820d152b235$var$meridiems = [
    "AM",
    "PM"
];
var $c70e8820d152b235$var$erasLong = [
    "Before Christ",
    "Anno Domini"
];
var $c70e8820d152b235$var$erasShort = [
    "BC",
    "AD"
];
var $c70e8820d152b235$var$erasNarrow = [
    "B",
    "A"
];
function $c70e8820d152b235$var$eras(length) {
    switch(length){
        case "narrow":
            return [].concat($c70e8820d152b235$var$erasNarrow);
        case "short":
            return [].concat($c70e8820d152b235$var$erasShort);
        case "long":
            return [].concat($c70e8820d152b235$var$erasLong);
        default:
            return null;
    }
}
function $c70e8820d152b235$var$meridiemForDateTime(dt) {
    return $c70e8820d152b235$var$meridiems[dt.hour < 12 ? 0 : 1];
}
function $c70e8820d152b235$var$weekdayForDateTime(dt, length) {
    return $c70e8820d152b235$var$weekdays(length)[dt.weekday - 1];
}
function $c70e8820d152b235$var$monthForDateTime(dt, length) {
    return $c70e8820d152b235$var$months(length)[dt.month - 1];
}
function $c70e8820d152b235$var$eraForDateTime(dt, length) {
    return $c70e8820d152b235$var$eras(length)[dt.year < 0 ? 0 : 1];
}
function $c70e8820d152b235$var$formatRelativeTime(unit, count, numeric, narrow) {
    if (numeric === void 0) numeric = "always";
    if (narrow === void 0) narrow = false;
    var units = {
        years: [
            "year",
            "yr."
        ],
        quarters: [
            "quarter",
            "qtr."
        ],
        months: [
            "month",
            "mo."
        ],
        weeks: [
            "week",
            "wk."
        ],
        days: [
            "day",
            "day",
            "days"
        ],
        hours: [
            "hour",
            "hr."
        ],
        minutes: [
            "minute",
            "min."
        ],
        seconds: [
            "second",
            "sec."
        ]
    };
    var lastable = [
        "hours",
        "minutes",
        "seconds"
    ].indexOf(unit) === -1;
    if (numeric === "auto" && lastable) {
        var isDay = unit === "days";
        switch(count){
            case 1:
                return isDay ? "tomorrow" : "next " + units[unit][0];
            case -1:
                return isDay ? "yesterday" : "last " + units[unit][0];
            case 0:
                return isDay ? "today" : "this " + units[unit][0];
        }
    }
    var isInPast = Object.is(count, -0) || count < 0, fmtValue = Math.abs(count), singular = fmtValue === 1, lilUnits = units[unit], fmtUnit = narrow ? singular ? lilUnits[1] : lilUnits[2] || lilUnits[1] : singular ? units[unit][0] : unit;
    return isInPast ? fmtValue + " " + fmtUnit + " ago" : "in " + fmtValue + " " + fmtUnit;
}
function $c70e8820d152b235$var$stringifyTokens(splits, tokenToString) {
    var s = "";
    for(var _iterator = $c70e8820d152b235$var$_createForOfIteratorHelperLoose(splits), _step; !(_step = _iterator()).done;){
        var token = _step.value;
        if (token.literal) s += token.val;
        else s += tokenToString(token.val);
    }
    return s;
}
var $c70e8820d152b235$var$_macroTokenToFormatOpts = {
    D: $c70e8820d152b235$var$DATE_SHORT,
    DD: $c70e8820d152b235$var$DATE_MED,
    DDD: $c70e8820d152b235$var$DATE_FULL,
    DDDD: $c70e8820d152b235$var$DATE_HUGE,
    t: $c70e8820d152b235$var$TIME_SIMPLE,
    tt: $c70e8820d152b235$var$TIME_WITH_SECONDS,
    ttt: $c70e8820d152b235$var$TIME_WITH_SHORT_OFFSET,
    tttt: $c70e8820d152b235$var$TIME_WITH_LONG_OFFSET,
    T: $c70e8820d152b235$var$TIME_24_SIMPLE,
    TT: $c70e8820d152b235$var$TIME_24_WITH_SECONDS,
    TTT: $c70e8820d152b235$var$TIME_24_WITH_SHORT_OFFSET,
    TTTT: $c70e8820d152b235$var$TIME_24_WITH_LONG_OFFSET,
    f: $c70e8820d152b235$var$DATETIME_SHORT,
    ff: $c70e8820d152b235$var$DATETIME_MED,
    fff: $c70e8820d152b235$var$DATETIME_FULL,
    ffff: $c70e8820d152b235$var$DATETIME_HUGE,
    F: $c70e8820d152b235$var$DATETIME_SHORT_WITH_SECONDS,
    FF: $c70e8820d152b235$var$DATETIME_MED_WITH_SECONDS,
    FFF: $c70e8820d152b235$var$DATETIME_FULL_WITH_SECONDS,
    FFFF: $c70e8820d152b235$var$DATETIME_HUGE_WITH_SECONDS
};
/**
 * @private
 */ var $c70e8820d152b235$var$Formatter = /*#__PURE__*/ function() {
    Formatter.create = function create(locale, opts) {
        if (opts === void 0) opts = {};
        return new Formatter(locale, opts);
    };
    Formatter.parseFormat = function parseFormat(fmt) {
        // white-space is always considered a literal in user-provided formats
        // the " " token has a special meaning (see unitForToken)
        var current = null, currentFull = "", bracketed = false;
        var splits = [];
        for(var i = 0; i < fmt.length; i++){
            var c = fmt.charAt(i);
            if (c === "'") {
                if (currentFull.length > 0) splits.push({
                    literal: bracketed || /^\s+$/.test(currentFull),
                    val: currentFull
                });
                current = null;
                currentFull = "";
                bracketed = !bracketed;
            } else if (bracketed) currentFull += c;
            else if (c === current) currentFull += c;
            else {
                if (currentFull.length > 0) splits.push({
                    literal: /^\s+$/.test(currentFull),
                    val: currentFull
                });
                currentFull = c;
                current = c;
            }
        }
        if (currentFull.length > 0) splits.push({
            literal: bracketed || /^\s+$/.test(currentFull),
            val: currentFull
        });
        return splits;
    };
    Formatter.macroTokenToFormatOpts = function macroTokenToFormatOpts(token) {
        return $c70e8820d152b235$var$_macroTokenToFormatOpts[token];
    };
    function Formatter(locale, formatOpts) {
        this.opts = formatOpts;
        this.loc = locale;
        this.systemLoc = null;
    }
    var _proto = Formatter.prototype;
    _proto.formatWithSystemDefault = function formatWithSystemDefault(dt, opts) {
        if (this.systemLoc === null) this.systemLoc = this.loc.redefaultToSystem();
        var df = this.systemLoc.dtFormatter(dt, $c70e8820d152b235$var$_extends({}, this.opts, opts));
        return df.format();
    };
    _proto.dtFormatter = function dtFormatter(dt, opts) {
        if (opts === void 0) opts = {};
        return this.loc.dtFormatter(dt, $c70e8820d152b235$var$_extends({}, this.opts, opts));
    };
    _proto.formatDateTime = function formatDateTime(dt, opts) {
        return this.dtFormatter(dt, opts).format();
    };
    _proto.formatDateTimeParts = function formatDateTimeParts(dt, opts) {
        return this.dtFormatter(dt, opts).formatToParts();
    };
    _proto.formatInterval = function formatInterval(interval, opts) {
        var df = this.dtFormatter(interval.start, opts);
        return df.dtf.formatRange(interval.start.toJSDate(), interval.end.toJSDate());
    };
    _proto.resolvedOptions = function resolvedOptions(dt, opts) {
        return this.dtFormatter(dt, opts).resolvedOptions();
    };
    _proto.num = function num(n, p) {
        if (p === void 0) p = 0;
        // we get some perf out of doing this here, annoyingly
        if (this.opts.forceSimple) return $c70e8820d152b235$var$padStart(n, p);
        var opts = $c70e8820d152b235$var$_extends({}, this.opts);
        if (p > 0) opts.padTo = p;
        return this.loc.numberFormatter(opts).format(n);
    };
    _proto.formatDateTimeFromString = function formatDateTimeFromString(dt, fmt) {
        var _this = this;
        var knownEnglish = this.loc.listingMode() === "en", useDateTimeFormatter = this.loc.outputCalendar && this.loc.outputCalendar !== "gregory", string = function string(opts, extract) {
            return _this.loc.extract(dt, opts, extract);
        }, formatOffset = function formatOffset(opts) {
            if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) return "Z";
            return dt.isValid ? dt.zone.formatOffset(dt.ts, opts.format) : "";
        }, meridiem = function meridiem() {
            return knownEnglish ? $c70e8820d152b235$var$meridiemForDateTime(dt) : string({
                hour: "numeric",
                hourCycle: "h12"
            }, "dayperiod");
        }, month = function month(length, standalone) {
            return knownEnglish ? $c70e8820d152b235$var$monthForDateTime(dt, length) : string(standalone ? {
                month: length
            } : {
                month: length,
                day: "numeric"
            }, "month");
        }, weekday = function weekday(length, standalone) {
            return knownEnglish ? $c70e8820d152b235$var$weekdayForDateTime(dt, length) : string(standalone ? {
                weekday: length
            } : {
                weekday: length,
                month: "long",
                day: "numeric"
            }, "weekday");
        }, maybeMacro = function maybeMacro(token) {
            var formatOpts = Formatter.macroTokenToFormatOpts(token);
            if (formatOpts) return _this.formatWithSystemDefault(dt, formatOpts);
            else return token;
        }, era = function era(length) {
            return knownEnglish ? $c70e8820d152b235$var$eraForDateTime(dt, length) : string({
                era: length
            }, "era");
        }, tokenToString = function tokenToString(token) {
            // Where possible: https://cldr.unicode.org/translation/date-time/date-time-symbols
            switch(token){
                // ms
                case "S":
                    return _this.num(dt.millisecond);
                case "u":
                // falls through
                case "SSS":
                    return _this.num(dt.millisecond, 3);
                // seconds
                case "s":
                    return _this.num(dt.second);
                case "ss":
                    return _this.num(dt.second, 2);
                // fractional seconds
                case "uu":
                    return _this.num(Math.floor(dt.millisecond / 10), 2);
                case "uuu":
                    return _this.num(Math.floor(dt.millisecond / 100));
                // minutes
                case "m":
                    return _this.num(dt.minute);
                case "mm":
                    return _this.num(dt.minute, 2);
                // hours
                case "h":
                    return _this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);
                case "hh":
                    return _this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);
                case "H":
                    return _this.num(dt.hour);
                case "HH":
                    return _this.num(dt.hour, 2);
                // offset
                case "Z":
                    // like +6
                    return formatOffset({
                        format: "narrow",
                        allowZ: _this.opts.allowZ
                    });
                case "ZZ":
                    // like +06:00
                    return formatOffset({
                        format: "short",
                        allowZ: _this.opts.allowZ
                    });
                case "ZZZ":
                    // like +0600
                    return formatOffset({
                        format: "techie",
                        allowZ: _this.opts.allowZ
                    });
                case "ZZZZ":
                    // like EST
                    return dt.zone.offsetName(dt.ts, {
                        format: "short",
                        locale: _this.loc.locale
                    });
                case "ZZZZZ":
                    // like Eastern Standard Time
                    return dt.zone.offsetName(dt.ts, {
                        format: "long",
                        locale: _this.loc.locale
                    });
                // zone
                case "z":
                    // like America/New_York
                    return dt.zoneName;
                // meridiems
                case "a":
                    return meridiem();
                // dates
                case "d":
                    return useDateTimeFormatter ? string({
                        day: "numeric"
                    }, "day") : _this.num(dt.day);
                case "dd":
                    return useDateTimeFormatter ? string({
                        day: "2-digit"
                    }, "day") : _this.num(dt.day, 2);
                // weekdays - standalone
                case "c":
                    // like 1
                    return _this.num(dt.weekday);
                case "ccc":
                    // like 'Tues'
                    return weekday("short", true);
                case "cccc":
                    // like 'Tuesday'
                    return weekday("long", true);
                case "ccccc":
                    // like 'T'
                    return weekday("narrow", true);
                // weekdays - format
                case "E":
                    // like 1
                    return _this.num(dt.weekday);
                case "EEE":
                    // like 'Tues'
                    return weekday("short", false);
                case "EEEE":
                    // like 'Tuesday'
                    return weekday("long", false);
                case "EEEEE":
                    // like 'T'
                    return weekday("narrow", false);
                // months - standalone
                case "L":
                    // like 1
                    return useDateTimeFormatter ? string({
                        month: "numeric",
                        day: "numeric"
                    }, "month") : _this.num(dt.month);
                case "LL":
                    // like 01, doesn't seem to work
                    return useDateTimeFormatter ? string({
                        month: "2-digit",
                        day: "numeric"
                    }, "month") : _this.num(dt.month, 2);
                case "LLL":
                    // like Jan
                    return month("short", true);
                case "LLLL":
                    // like January
                    return month("long", true);
                case "LLLLL":
                    // like J
                    return month("narrow", true);
                // months - format
                case "M":
                    // like 1
                    return useDateTimeFormatter ? string({
                        month: "numeric"
                    }, "month") : _this.num(dt.month);
                case "MM":
                    // like 01
                    return useDateTimeFormatter ? string({
                        month: "2-digit"
                    }, "month") : _this.num(dt.month, 2);
                case "MMM":
                    // like Jan
                    return month("short", false);
                case "MMMM":
                    // like January
                    return month("long", false);
                case "MMMMM":
                    // like J
                    return month("narrow", false);
                // years
                case "y":
                    // like 2014
                    return useDateTimeFormatter ? string({
                        year: "numeric"
                    }, "year") : _this.num(dt.year);
                case "yy":
                    // like 14
                    return useDateTimeFormatter ? string({
                        year: "2-digit"
                    }, "year") : _this.num(dt.year.toString().slice(-2), 2);
                case "yyyy":
                    // like 0012
                    return useDateTimeFormatter ? string({
                        year: "numeric"
                    }, "year") : _this.num(dt.year, 4);
                case "yyyyyy":
                    // like 000012
                    return useDateTimeFormatter ? string({
                        year: "numeric"
                    }, "year") : _this.num(dt.year, 6);
                // eras
                case "G":
                    // like AD
                    return era("short");
                case "GG":
                    // like Anno Domini
                    return era("long");
                case "GGGGG":
                    return era("narrow");
                case "kk":
                    return _this.num(dt.weekYear.toString().slice(-2), 2);
                case "kkkk":
                    return _this.num(dt.weekYear, 4);
                case "W":
                    return _this.num(dt.weekNumber);
                case "WW":
                    return _this.num(dt.weekNumber, 2);
                case "n":
                    return _this.num(dt.localWeekNumber);
                case "nn":
                    return _this.num(dt.localWeekNumber, 2);
                case "ii":
                    return _this.num(dt.localWeekYear.toString().slice(-2), 2);
                case "iiii":
                    return _this.num(dt.localWeekYear, 4);
                case "o":
                    return _this.num(dt.ordinal);
                case "ooo":
                    return _this.num(dt.ordinal, 3);
                case "q":
                    // like 1
                    return _this.num(dt.quarter);
                case "qq":
                    // like 01
                    return _this.num(dt.quarter, 2);
                case "X":
                    return _this.num(Math.floor(dt.ts / 1000));
                case "x":
                    return _this.num(dt.ts);
                default:
                    return maybeMacro(token);
            }
        };
        return $c70e8820d152b235$var$stringifyTokens(Formatter.parseFormat(fmt), tokenToString);
    };
    _proto.formatDurationFromString = function formatDurationFromString(dur, fmt) {
        var _this2 = this;
        var tokenToField = function tokenToField(token) {
            switch(token[0]){
                case "S":
                    return "millisecond";
                case "s":
                    return "second";
                case "m":
                    return "minute";
                case "h":
                    return "hour";
                case "d":
                    return "day";
                case "w":
                    return "week";
                case "M":
                    return "month";
                case "y":
                    return "year";
                default:
                    return null;
            }
        }, tokenToString = function tokenToString(lildur) {
            return function(token) {
                var mapped = tokenToField(token);
                if (mapped) return _this2.num(lildur.get(mapped), token.length);
                else return token;
            };
        }, tokens = Formatter.parseFormat(fmt), realTokens = tokens.reduce(function(found, _ref) {
            var literal = _ref.literal, val = _ref.val;
            return literal ? found : found.concat(val);
        }, []), collapsed = dur.shiftTo.apply(dur, realTokens.map(tokenToField).filter(function(t) {
            return t;
        }));
        return $c70e8820d152b235$var$stringifyTokens(tokens, tokenToString(collapsed));
    };
    return Formatter;
}();
/*
 * This file handles parsing for well-specified formats. Here's how it works:
 * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.
 * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object
 * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.
 * Extractors can take a "cursor" representing the offset in the match to look at. This makes it easy to combine extractors.
 * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.
 * Some extractions are super dumb and simpleParse and fromStrings help DRY them.
 */ var $c70e8820d152b235$var$ianaRegex = /[A-Za-z_+-]{1,256}(?::?\/[A-Za-z0-9_+-]{1,256}(?:\/[A-Za-z0-9_+-]{1,256})?)?/;
function $c70e8820d152b235$var$combineRegexes() {
    for(var _len = arguments.length, regexes = new Array(_len), _key = 0; _key < _len; _key++)regexes[_key] = arguments[_key];
    var full = regexes.reduce(function(f, r) {
        return f + r.source;
    }, "");
    return RegExp("^" + full + "$");
}
function $c70e8820d152b235$var$combineExtractors() {
    for(var _len2 = arguments.length, extractors = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)extractors[_key2] = arguments[_key2];
    return function(m) {
        return extractors.reduce(function(_ref, ex) {
            var mergedVals = _ref[0], mergedZone = _ref[1], cursor = _ref[2];
            var _ex = ex(m, cursor), val = _ex[0], zone = _ex[1], next = _ex[2];
            return [
                $c70e8820d152b235$var$_extends({}, mergedVals, val),
                zone || mergedZone,
                next
            ];
        }, [
            {},
            null,
            1
        ]).slice(0, 2);
    };
}
function $c70e8820d152b235$var$parse(s) {
    if (s == null) return [
        null,
        null
    ];
    for(var _len3 = arguments.length, patterns = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++)patterns[_key3 - 1] = arguments[_key3];
    for(var _i = 0, _patterns = patterns; _i < _patterns.length; _i++){
        var _patterns$_i = _patterns[_i], regex = _patterns$_i[0], extractor = _patterns$_i[1];
        var m = regex.exec(s);
        if (m) return extractor(m);
    }
    return [
        null,
        null
    ];
}
function $c70e8820d152b235$var$simpleParse() {
    for(var _len4 = arguments.length, keys = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++)keys[_key4] = arguments[_key4];
    return function(match, cursor) {
        var ret = {};
        var i;
        for(i = 0; i < keys.length; i++)ret[keys[i]] = $c70e8820d152b235$var$parseInteger(match[cursor + i]);
        return [
            ret,
            null,
            cursor + i
        ];
    };
}
// ISO and SQL parsing
var $c70e8820d152b235$var$offsetRegex = /(?:(Z)|([+-]\d\d)(?::?(\d\d))?)/;
var $c70e8820d152b235$var$isoExtendedZone = "(?:" + $c70e8820d152b235$var$offsetRegex.source + "?(?:\\[(" + $c70e8820d152b235$var$ianaRegex.source + ")\\])?)?";
var $c70e8820d152b235$var$isoTimeBaseRegex = /(\d\d)(?::?(\d\d)(?::?(\d\d)(?:[.,](\d{1,30}))?)?)?/;
var $c70e8820d152b235$var$isoTimeRegex = RegExp("" + $c70e8820d152b235$var$isoTimeBaseRegex.source + $c70e8820d152b235$var$isoExtendedZone);
var $c70e8820d152b235$var$isoTimeExtensionRegex = RegExp("(?:T" + $c70e8820d152b235$var$isoTimeRegex.source + ")?");
var $c70e8820d152b235$var$isoYmdRegex = /([+-]\d{6}|\d{4})(?:-?(\d\d)(?:-?(\d\d))?)?/;
var $c70e8820d152b235$var$isoWeekRegex = /(\d{4})-?W(\d\d)(?:-?(\d))?/;
var $c70e8820d152b235$var$isoOrdinalRegex = /(\d{4})-?(\d{3})/;
var $c70e8820d152b235$var$extractISOWeekData = $c70e8820d152b235$var$simpleParse("weekYear", "weekNumber", "weekDay");
var $c70e8820d152b235$var$extractISOOrdinalData = $c70e8820d152b235$var$simpleParse("year", "ordinal");
var $c70e8820d152b235$var$sqlYmdRegex = /(\d{4})-(\d\d)-(\d\d)/; // dumbed-down version of the ISO one
var $c70e8820d152b235$var$sqlTimeRegex = RegExp($c70e8820d152b235$var$isoTimeBaseRegex.source + " ?(?:" + $c70e8820d152b235$var$offsetRegex.source + "|(" + $c70e8820d152b235$var$ianaRegex.source + "))?");
var $c70e8820d152b235$var$sqlTimeExtensionRegex = RegExp("(?: " + $c70e8820d152b235$var$sqlTimeRegex.source + ")?");
function $c70e8820d152b235$var$int(match, pos, fallback) {
    var m = match[pos];
    return $c70e8820d152b235$var$isUndefined(m) ? fallback : $c70e8820d152b235$var$parseInteger(m);
}
function $c70e8820d152b235$var$extractISOYmd(match, cursor) {
    var item = {
        year: $c70e8820d152b235$var$int(match, cursor),
        month: $c70e8820d152b235$var$int(match, cursor + 1, 1),
        day: $c70e8820d152b235$var$int(match, cursor + 2, 1)
    };
    return [
        item,
        null,
        cursor + 3
    ];
}
function $c70e8820d152b235$var$extractISOTime(match, cursor) {
    var item = {
        hours: $c70e8820d152b235$var$int(match, cursor, 0),
        minutes: $c70e8820d152b235$var$int(match, cursor + 1, 0),
        seconds: $c70e8820d152b235$var$int(match, cursor + 2, 0),
        milliseconds: $c70e8820d152b235$var$parseMillis(match[cursor + 3])
    };
    return [
        item,
        null,
        cursor + 4
    ];
}
function $c70e8820d152b235$var$extractISOOffset(match, cursor) {
    var local = !match[cursor] && !match[cursor + 1], fullOffset = $c70e8820d152b235$var$signedOffset(match[cursor + 1], match[cursor + 2]), zone = local ? null : $c70e8820d152b235$var$FixedOffsetZone.instance(fullOffset);
    return [
        {},
        zone,
        cursor + 3
    ];
}
function $c70e8820d152b235$var$extractIANAZone(match, cursor) {
    var zone = match[cursor] ? $c70e8820d152b235$var$IANAZone.create(match[cursor]) : null;
    return [
        {},
        zone,
        cursor + 1
    ];
}
// ISO time parsing
var $c70e8820d152b235$var$isoTimeOnly = RegExp("^T?" + $c70e8820d152b235$var$isoTimeBaseRegex.source + "$");
// ISO duration parsing
var $c70e8820d152b235$var$isoDuration = /^-?P(?:(?:(-?\d{1,20}(?:\.\d{1,20})?)Y)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20}(?:\.\d{1,20})?)W)?(?:(-?\d{1,20}(?:\.\d{1,20})?)D)?(?:T(?:(-?\d{1,20}(?:\.\d{1,20})?)H)?(?:(-?\d{1,20}(?:\.\d{1,20})?)M)?(?:(-?\d{1,20})(?:[.,](-?\d{1,20}))?S)?)?)$/;
function $c70e8820d152b235$var$extractISODuration(match) {
    var s = match[0], yearStr = match[1], monthStr = match[2], weekStr = match[3], dayStr = match[4], hourStr = match[5], minuteStr = match[6], secondStr = match[7], millisecondsStr = match[8];
    var hasNegativePrefix = s[0] === "-";
    var negativeSeconds = secondStr && secondStr[0] === "-";
    var maybeNegate = function maybeNegate(num, force) {
        if (force === void 0) force = false;
        return num !== undefined && (force || num && hasNegativePrefix) ? -num : num;
    };
    return [
        {
            years: maybeNegate($c70e8820d152b235$var$parseFloating(yearStr)),
            months: maybeNegate($c70e8820d152b235$var$parseFloating(monthStr)),
            weeks: maybeNegate($c70e8820d152b235$var$parseFloating(weekStr)),
            days: maybeNegate($c70e8820d152b235$var$parseFloating(dayStr)),
            hours: maybeNegate($c70e8820d152b235$var$parseFloating(hourStr)),
            minutes: maybeNegate($c70e8820d152b235$var$parseFloating(minuteStr)),
            seconds: maybeNegate($c70e8820d152b235$var$parseFloating(secondStr), secondStr === "-0"),
            milliseconds: maybeNegate($c70e8820d152b235$var$parseMillis(millisecondsStr), negativeSeconds)
        }
    ];
}
// These are a little braindead. EDT *should* tell us that we're in, say, America/New_York
// and not just that we're in -240 *right now*. But since I don't think these are used that often
// I'm just going to ignore that
var $c70e8820d152b235$var$obsOffsets = {
    GMT: 0,
    EDT: -240,
    EST: -300,
    CDT: -300,
    CST: -360,
    MDT: -360,
    MST: -420,
    PDT: -420,
    PST: -480
};
function $c70e8820d152b235$var$fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
    var result = {
        year: yearStr.length === 2 ? $c70e8820d152b235$var$untruncateYear($c70e8820d152b235$var$parseInteger(yearStr)) : $c70e8820d152b235$var$parseInteger(yearStr),
        month: $c70e8820d152b235$var$monthsShort.indexOf(monthStr) + 1,
        day: $c70e8820d152b235$var$parseInteger(dayStr),
        hour: $c70e8820d152b235$var$parseInteger(hourStr),
        minute: $c70e8820d152b235$var$parseInteger(minuteStr)
    };
    if (secondStr) result.second = $c70e8820d152b235$var$parseInteger(secondStr);
    if (weekdayStr) result.weekday = weekdayStr.length > 3 ? $c70e8820d152b235$var$weekdaysLong.indexOf(weekdayStr) + 1 : $c70e8820d152b235$var$weekdaysShort.indexOf(weekdayStr) + 1;
    return result;
}
// RFC 2822/5322
var $c70e8820d152b235$var$rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\d\d)(\d\d)))$/;
function $c70e8820d152b235$var$extractRFC2822(match) {
    var weekdayStr = match[1], dayStr = match[2], monthStr = match[3], yearStr = match[4], hourStr = match[5], minuteStr = match[6], secondStr = match[7], obsOffset = match[8], milOffset = match[9], offHourStr = match[10], offMinuteStr = match[11], result = $c70e8820d152b235$var$fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
    var offset;
    if (obsOffset) offset = $c70e8820d152b235$var$obsOffsets[obsOffset];
    else if (milOffset) offset = 0;
    else offset = $c70e8820d152b235$var$signedOffset(offHourStr, offMinuteStr);
    return [
        result,
        new $c70e8820d152b235$var$FixedOffsetZone(offset)
    ];
}
function $c70e8820d152b235$var$preprocessRFC2822(s) {
    // Remove comments and folding whitespace and replace multiple-spaces with a single space
    return s.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").trim();
}
// http date
var $c70e8820d152b235$var$rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d\d):(\d\d):(\d\d) GMT$/, $c70e8820d152b235$var$rfc850 = /^(Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d\d) (\d\d):(\d\d):(\d\d) GMT$/, $c70e8820d152b235$var$ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \d|\d\d) (\d\d):(\d\d):(\d\d) (\d{4})$/;
function $c70e8820d152b235$var$extractRFC1123Or850(match) {
    var weekdayStr = match[1], dayStr = match[2], monthStr = match[3], yearStr = match[4], hourStr = match[5], minuteStr = match[6], secondStr = match[7], result = $c70e8820d152b235$var$fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
    return [
        result,
        $c70e8820d152b235$var$FixedOffsetZone.utcInstance
    ];
}
function $c70e8820d152b235$var$extractASCII(match) {
    var weekdayStr = match[1], monthStr = match[2], dayStr = match[3], hourStr = match[4], minuteStr = match[5], secondStr = match[6], yearStr = match[7], result = $c70e8820d152b235$var$fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);
    return [
        result,
        $c70e8820d152b235$var$FixedOffsetZone.utcInstance
    ];
}
var $c70e8820d152b235$var$isoYmdWithTimeExtensionRegex = $c70e8820d152b235$var$combineRegexes($c70e8820d152b235$var$isoYmdRegex, $c70e8820d152b235$var$isoTimeExtensionRegex);
var $c70e8820d152b235$var$isoWeekWithTimeExtensionRegex = $c70e8820d152b235$var$combineRegexes($c70e8820d152b235$var$isoWeekRegex, $c70e8820d152b235$var$isoTimeExtensionRegex);
var $c70e8820d152b235$var$isoOrdinalWithTimeExtensionRegex = $c70e8820d152b235$var$combineRegexes($c70e8820d152b235$var$isoOrdinalRegex, $c70e8820d152b235$var$isoTimeExtensionRegex);
var $c70e8820d152b235$var$isoTimeCombinedRegex = $c70e8820d152b235$var$combineRegexes($c70e8820d152b235$var$isoTimeRegex);
var $c70e8820d152b235$var$extractISOYmdTimeAndOffset = $c70e8820d152b235$var$combineExtractors($c70e8820d152b235$var$extractISOYmd, $c70e8820d152b235$var$extractISOTime, $c70e8820d152b235$var$extractISOOffset, $c70e8820d152b235$var$extractIANAZone);
var $c70e8820d152b235$var$extractISOWeekTimeAndOffset = $c70e8820d152b235$var$combineExtractors($c70e8820d152b235$var$extractISOWeekData, $c70e8820d152b235$var$extractISOTime, $c70e8820d152b235$var$extractISOOffset, $c70e8820d152b235$var$extractIANAZone);
var $c70e8820d152b235$var$extractISOOrdinalDateAndTime = $c70e8820d152b235$var$combineExtractors($c70e8820d152b235$var$extractISOOrdinalData, $c70e8820d152b235$var$extractISOTime, $c70e8820d152b235$var$extractISOOffset, $c70e8820d152b235$var$extractIANAZone);
var $c70e8820d152b235$var$extractISOTimeAndOffset = $c70e8820d152b235$var$combineExtractors($c70e8820d152b235$var$extractISOTime, $c70e8820d152b235$var$extractISOOffset, $c70e8820d152b235$var$extractIANAZone);
/*
 * @private
 */ function $c70e8820d152b235$var$parseISODate(s) {
    return $c70e8820d152b235$var$parse(s, [
        $c70e8820d152b235$var$isoYmdWithTimeExtensionRegex,
        $c70e8820d152b235$var$extractISOYmdTimeAndOffset
    ], [
        $c70e8820d152b235$var$isoWeekWithTimeExtensionRegex,
        $c70e8820d152b235$var$extractISOWeekTimeAndOffset
    ], [
        $c70e8820d152b235$var$isoOrdinalWithTimeExtensionRegex,
        $c70e8820d152b235$var$extractISOOrdinalDateAndTime
    ], [
        $c70e8820d152b235$var$isoTimeCombinedRegex,
        $c70e8820d152b235$var$extractISOTimeAndOffset
    ]);
}
function $c70e8820d152b235$var$parseRFC2822Date(s) {
    return $c70e8820d152b235$var$parse($c70e8820d152b235$var$preprocessRFC2822(s), [
        $c70e8820d152b235$var$rfc2822,
        $c70e8820d152b235$var$extractRFC2822
    ]);
}
function $c70e8820d152b235$var$parseHTTPDate(s) {
    return $c70e8820d152b235$var$parse(s, [
        $c70e8820d152b235$var$rfc1123,
        $c70e8820d152b235$var$extractRFC1123Or850
    ], [
        $c70e8820d152b235$var$rfc850,
        $c70e8820d152b235$var$extractRFC1123Or850
    ], [
        $c70e8820d152b235$var$ascii,
        $c70e8820d152b235$var$extractASCII
    ]);
}
function $c70e8820d152b235$var$parseISODuration(s) {
    return $c70e8820d152b235$var$parse(s, [
        $c70e8820d152b235$var$isoDuration,
        $c70e8820d152b235$var$extractISODuration
    ]);
}
var $c70e8820d152b235$var$extractISOTimeOnly = $c70e8820d152b235$var$combineExtractors($c70e8820d152b235$var$extractISOTime);
function $c70e8820d152b235$var$parseISOTimeOnly(s) {
    return $c70e8820d152b235$var$parse(s, [
        $c70e8820d152b235$var$isoTimeOnly,
        $c70e8820d152b235$var$extractISOTimeOnly
    ]);
}
var $c70e8820d152b235$var$sqlYmdWithTimeExtensionRegex = $c70e8820d152b235$var$combineRegexes($c70e8820d152b235$var$sqlYmdRegex, $c70e8820d152b235$var$sqlTimeExtensionRegex);
var $c70e8820d152b235$var$sqlTimeCombinedRegex = $c70e8820d152b235$var$combineRegexes($c70e8820d152b235$var$sqlTimeRegex);
var $c70e8820d152b235$var$extractISOTimeOffsetAndIANAZone = $c70e8820d152b235$var$combineExtractors($c70e8820d152b235$var$extractISOTime, $c70e8820d152b235$var$extractISOOffset, $c70e8820d152b235$var$extractIANAZone);
function $c70e8820d152b235$var$parseSQL(s) {
    return $c70e8820d152b235$var$parse(s, [
        $c70e8820d152b235$var$sqlYmdWithTimeExtensionRegex,
        $c70e8820d152b235$var$extractISOYmdTimeAndOffset
    ], [
        $c70e8820d152b235$var$sqlTimeCombinedRegex,
        $c70e8820d152b235$var$extractISOTimeOffsetAndIANAZone
    ]);
}
var $c70e8820d152b235$var$INVALID$2 = "Invalid Duration";
// unit conversion constants
var $c70e8820d152b235$var$lowOrderMatrix = {
    weeks: {
        days: 7,
        hours: 168,
        minutes: 10080,
        seconds: 604800,
        milliseconds: 604800000
    },
    days: {
        hours: 24,
        minutes: 1440,
        seconds: 86400,
        milliseconds: 86400000
    },
    hours: {
        minutes: 60,
        seconds: 3600,
        milliseconds: 3600000
    },
    minutes: {
        seconds: 60,
        milliseconds: 60000
    },
    seconds: {
        milliseconds: 1000
    }
}, $c70e8820d152b235$var$casualMatrix = $c70e8820d152b235$var$_extends({
    years: {
        quarters: 4,
        months: 12,
        weeks: 52,
        days: 365,
        hours: 8760,
        minutes: 525600,
        seconds: 31536000,
        milliseconds: 31536000000
    },
    quarters: {
        months: 3,
        weeks: 13,
        days: 91,
        hours: 2184,
        minutes: 131040,
        seconds: 7862400,
        milliseconds: 7862400000
    },
    months: {
        weeks: 4,
        days: 30,
        hours: 720,
        minutes: 43200,
        seconds: 2592000,
        milliseconds: 2592000000
    }
}, $c70e8820d152b235$var$lowOrderMatrix), $c70e8820d152b235$var$daysInYearAccurate = 365.2425, $c70e8820d152b235$var$daysInMonthAccurate = 30.436875, $c70e8820d152b235$var$accurateMatrix = $c70e8820d152b235$var$_extends({
    years: {
        quarters: 4,
        months: 12,
        weeks: $c70e8820d152b235$var$daysInYearAccurate / 7,
        days: $c70e8820d152b235$var$daysInYearAccurate,
        hours: $c70e8820d152b235$var$daysInYearAccurate * 24,
        minutes: $c70e8820d152b235$var$daysInYearAccurate * 1440,
        seconds: $c70e8820d152b235$var$daysInYearAccurate * 86400,
        milliseconds: $c70e8820d152b235$var$daysInYearAccurate * 86400000
    },
    quarters: {
        months: 3,
        weeks: $c70e8820d152b235$var$daysInYearAccurate / 28,
        days: $c70e8820d152b235$var$daysInYearAccurate / 4,
        hours: $c70e8820d152b235$var$daysInYearAccurate * 24 / 4,
        minutes: $c70e8820d152b235$var$daysInYearAccurate * 1440 / 4,
        seconds: $c70e8820d152b235$var$daysInYearAccurate * 86400 / 4,
        milliseconds: $c70e8820d152b235$var$daysInYearAccurate * 86400000 / 4
    },
    months: {
        weeks: $c70e8820d152b235$var$daysInMonthAccurate / 7,
        days: $c70e8820d152b235$var$daysInMonthAccurate,
        hours: $c70e8820d152b235$var$daysInMonthAccurate * 24,
        minutes: $c70e8820d152b235$var$daysInMonthAccurate * 1440,
        seconds: $c70e8820d152b235$var$daysInMonthAccurate * 86400,
        milliseconds: $c70e8820d152b235$var$daysInMonthAccurate * 86400000
    }
}, $c70e8820d152b235$var$lowOrderMatrix);
// units ordered by size
var $c70e8820d152b235$var$orderedUnits$1 = [
    "years",
    "quarters",
    "months",
    "weeks",
    "days",
    "hours",
    "minutes",
    "seconds",
    "milliseconds"
];
var $c70e8820d152b235$var$reverseUnits = $c70e8820d152b235$var$orderedUnits$1.slice(0).reverse();
// clone really means "create another instance just like this one, but with these changes"
function $c70e8820d152b235$var$clone$1(dur, alts, clear) {
    if (clear === void 0) clear = false;
    // deep merge for vals
    var conf = {
        values: clear ? alts.values : $c70e8820d152b235$var$_extends({}, dur.values, alts.values || {}),
        loc: dur.loc.clone(alts.loc),
        conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy,
        matrix: alts.matrix || dur.matrix
    };
    return new $c70e8820d152b235$var$Duration(conf);
}
function $c70e8820d152b235$var$durationToMillis(matrix, vals) {
    var _vals$milliseconds;
    var sum = (_vals$milliseconds = vals.milliseconds) != null ? _vals$milliseconds : 0;
    for(var _iterator = $c70e8820d152b235$var$_createForOfIteratorHelperLoose($c70e8820d152b235$var$reverseUnits.slice(1)), _step; !(_step = _iterator()).done;){
        var unit = _step.value;
        if (vals[unit]) sum += vals[unit] * matrix[unit]["milliseconds"];
    }
    return sum;
}
// NB: mutates parameters
function $c70e8820d152b235$var$normalizeValues(matrix, vals) {
    // the logic below assumes the overall value of the duration is positive
    // if this is not the case, factor is used to make it so
    var factor = $c70e8820d152b235$var$durationToMillis(matrix, vals) < 0 ? -1 : 1;
    $c70e8820d152b235$var$orderedUnits$1.reduceRight(function(previous, current) {
        if (!$c70e8820d152b235$var$isUndefined(vals[current])) {
            if (previous) {
                var previousVal = vals[previous] * factor;
                var conv = matrix[current][previous];
                // if (previousVal < 0):
                // lower order unit is negative (e.g. { years: 2, days: -2 })
                // normalize this by reducing the higher order unit by the appropriate amount
                // and increasing the lower order unit
                // this can never make the higher order unit negative, because this function only operates
                // on positive durations, so the amount of time represented by the lower order unit cannot
                // be larger than the higher order unit
                // else:
                // lower order unit is positive (e.g. { years: 2, days: 450 } or { years: -2, days: 450 })
                // in this case we attempt to convert as much as possible from the lower order unit into
                // the higher order one
                //
                // Math.floor takes care of both of these cases, rounding away from 0
                // if previousVal < 0 it makes the absolute value larger
                // if previousVal >= it makes the absolute value smaller
                var rollUp = Math.floor(previousVal / conv);
                vals[current] += rollUp * factor;
                vals[previous] -= rollUp * conv * factor;
            }
            return current;
        } else return previous;
    }, null);
    // try to convert any decimals into smaller units if possible
    // for example for { years: 2.5, days: 0, seconds: 0 } we want to get { years: 2, days: 182, hours: 12 }
    $c70e8820d152b235$var$orderedUnits$1.reduce(function(previous, current) {
        if (!$c70e8820d152b235$var$isUndefined(vals[current])) {
            if (previous) {
                var fraction = vals[previous] % 1;
                vals[previous] -= fraction;
                vals[current] += fraction * matrix[previous][current];
            }
            return current;
        } else return previous;
    }, null);
}
// Remove all properties with a value of 0 from an object
function $c70e8820d152b235$var$removeZeroes(vals) {
    var newVals = {};
    for(var _i = 0, _Object$entries = Object.entries(vals); _i < _Object$entries.length; _i++){
        var _Object$entries$_i = _Object$entries[_i], key = _Object$entries$_i[0], value = _Object$entries$_i[1];
        if (value !== 0) newVals[key] = value;
    }
    return newVals;
}
/**
 * A Duration object represents a period of time, like "2 months" or "1 day, 1 hour". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime#plus} to add a Duration object to a DateTime, producing another DateTime.
 *
 * Here is a brief overview of commonly used methods and getters in Duration:
 *
 * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.
 * * **Unit values** See the {@link Duration#years}, {@link Duration#months}, {@link Duration#weeks}, {@link Duration#days}, {@link Duration#hours}, {@link Duration#minutes}, {@link Duration#seconds}, {@link Duration#milliseconds} accessors.
 * * **Configuration** See  {@link Duration#locale} and {@link Duration#numberingSystem} accessors.
 * * **Transformation** To create new Durations out of old ones use {@link Duration#plus}, {@link Duration#minus}, {@link Duration#normalize}, {@link Duration#set}, {@link Duration#reconfigure}, {@link Duration#shiftTo}, and {@link Duration#negate}.
 * * **Output** To convert the Duration into other representations, see {@link Duration#as}, {@link Duration#toISO}, {@link Duration#toFormat}, and {@link Duration#toJSON}
 *
 * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.
 */ var $c70e8820d152b235$var$Duration = /*#__PURE__*/ function(_Symbol$for) {
    /**
   * @private
   */ function Duration(config) {
        var accurate = config.conversionAccuracy === "longterm" || false;
        var matrix = accurate ? $c70e8820d152b235$var$accurateMatrix : $c70e8820d152b235$var$casualMatrix;
        if (config.matrix) matrix = config.matrix;
        /**
     * @access private
     */ this.values = config.values;
        /**
     * @access private
     */ this.loc = config.loc || $c70e8820d152b235$var$Locale.create();
        /**
     * @access private
     */ this.conversionAccuracy = accurate ? "longterm" : "casual";
        /**
     * @access private
     */ this.invalid = config.invalid || null;
        /**
     * @access private
     */ this.matrix = matrix;
        /**
     * @access private
     */ this.isLuxonDuration = true;
    }
    /**
   * Create Duration from a number of milliseconds.
   * @param {number} count of milliseconds
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @return {Duration}
   */ Duration.fromMillis = function fromMillis(count, opts) {
        return Duration.fromObject({
            milliseconds: count
        }, opts);
    } /**
   * Create a Duration from a JavaScript object with keys like 'years' and 'hours'.
   * If this object is empty then a zero milliseconds duration is returned.
   * @param {Object} obj - the object to create the DateTime from
   * @param {number} obj.years
   * @param {number} obj.quarters
   * @param {number} obj.months
   * @param {number} obj.weeks
   * @param {number} obj.days
   * @param {number} obj.hours
   * @param {number} obj.minutes
   * @param {number} obj.seconds
   * @param {number} obj.milliseconds
   * @param {Object} [opts=[]] - options for creating this Duration
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
   * @param {string} [opts.matrix=Object] - the custom conversion system to use
   * @return {Duration}
   */ ;
    Duration.fromObject = function fromObject(obj, opts) {
        if (opts === void 0) opts = {};
        if (obj == null || typeof obj !== "object") throw new $c70e8820d152b235$var$InvalidArgumentError("Duration.fromObject: argument expected to be an object, got " + (obj === null ? "null" : typeof obj));
        return new Duration({
            values: $c70e8820d152b235$var$normalizeObject(obj, Duration.normalizeUnit),
            loc: $c70e8820d152b235$var$Locale.fromObject(opts),
            conversionAccuracy: opts.conversionAccuracy,
            matrix: opts.matrix
        });
    } /**
   * Create a Duration from DurationLike.
   *
   * @param {Object | number | Duration} durationLike
   * One of:
   * - object with keys like 'years' and 'hours'.
   * - number representing milliseconds
   * - Duration instance
   * @return {Duration}
   */ ;
    Duration.fromDurationLike = function fromDurationLike(durationLike) {
        if ($c70e8820d152b235$var$isNumber(durationLike)) return Duration.fromMillis(durationLike);
        else if (Duration.isDuration(durationLike)) return durationLike;
        else if (typeof durationLike === "object") return Duration.fromObject(durationLike);
        else throw new $c70e8820d152b235$var$InvalidArgumentError("Unknown duration argument " + durationLike + " of type " + typeof durationLike);
    } /**
   * Create a Duration from an ISO 8601 duration string.
   * @param {string} text - text to parse
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
   * @param {string} [opts.matrix=Object] - the preset conversion system to use
   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
   * @example Duration.fromISO('P3Y6M1W4DT12H30M5S').toObject() //=> { years: 3, months: 6, weeks: 1, days: 4, hours: 12, minutes: 30, seconds: 5 }
   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }
   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }
   * @return {Duration}
   */ ;
    Duration.fromISO = function fromISO(text, opts) {
        var _parseISODuration = $c70e8820d152b235$var$parseISODuration(text), parsed = _parseISODuration[0];
        if (parsed) return Duration.fromObject(parsed, opts);
        else return Duration.invalid("unparsable", 'the input "' + text + "\" can't be parsed as ISO 8601");
    } /**
   * Create a Duration from an ISO 8601 time string.
   * @param {string} text - text to parse
   * @param {Object} opts - options for parsing
   * @param {string} [opts.locale='en-US'] - the locale to use
   * @param {string} opts.numberingSystem - the numbering system to use
   * @param {string} [opts.conversionAccuracy='casual'] - the preset conversion system to use
   * @param {string} [opts.matrix=Object] - the conversion system to use
   * @see https://en.wikipedia.org/wiki/ISO_8601#Times
   * @example Duration.fromISOTime('11:22:33.444').toObject() //=> { hours: 11, minutes: 22, seconds: 33, milliseconds: 444 }
   * @example Duration.fromISOTime('11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @example Duration.fromISOTime('T11:00').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @example Duration.fromISOTime('1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @example Duration.fromISOTime('T1100').toObject() //=> { hours: 11, minutes: 0, seconds: 0 }
   * @return {Duration}
   */ ;
    Duration.fromISOTime = function fromISOTime(text, opts) {
        var _parseISOTimeOnly = $c70e8820d152b235$var$parseISOTimeOnly(text), parsed = _parseISOTimeOnly[0];
        if (parsed) return Duration.fromObject(parsed, opts);
        else return Duration.invalid("unparsable", 'the input "' + text + "\" can't be parsed as ISO 8601");
    } /**
   * Create an invalid Duration.
   * @param {string} reason - simple string of why this datetime is invalid. Should not contain parameters or anything else data-dependent
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {Duration}
   */ ;
    Duration.invalid = function invalid(reason, explanation) {
        if (explanation === void 0) explanation = null;
        if (!reason) throw new $c70e8820d152b235$var$InvalidArgumentError("need to specify a reason the Duration is invalid");
        var invalid = reason instanceof $c70e8820d152b235$var$Invalid ? reason : new $c70e8820d152b235$var$Invalid(reason, explanation);
        if ($c70e8820d152b235$var$Settings.throwOnInvalid) throw new $c70e8820d152b235$var$InvalidDurationError(invalid);
        else return new Duration({
            invalid: invalid
        });
    } /**
   * @private
   */ ;
    Duration.normalizeUnit = function normalizeUnit(unit) {
        var normalized = {
            year: "years",
            years: "years",
            quarter: "quarters",
            quarters: "quarters",
            month: "months",
            months: "months",
            week: "weeks",
            weeks: "weeks",
            day: "days",
            days: "days",
            hour: "hours",
            hours: "hours",
            minute: "minutes",
            minutes: "minutes",
            second: "seconds",
            seconds: "seconds",
            millisecond: "milliseconds",
            milliseconds: "milliseconds"
        }[unit ? unit.toLowerCase() : unit];
        if (!normalized) throw new $c70e8820d152b235$var$InvalidUnitError(unit);
        return normalized;
    } /**
   * Check if an object is a Duration. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */ ;
    Duration.isDuration = function isDuration(o) {
        return o && o.isLuxonDuration || false;
    } /**
   * Get  the locale of a Duration, such 'en-GB'
   * @type {string}
   */ ;
    var _proto = Duration.prototype;
    /**
   * Returns a string representation of this Duration formatted according to the specified format string. You may use these tokens:
   * * `S` for milliseconds
   * * `s` for seconds
   * * `m` for minutes
   * * `h` for hours
   * * `d` for days
   * * `w` for weeks
   * * `M` for months
   * * `y` for years
   * Notes:
   * * Add padding by repeating the token, e.g. "yy" pads the years to two digits, "hhhh" pads the hours out to four digits
   * * Tokens can be escaped by wrapping with single quotes.
   * * The duration will be converted to the set of units in the format string using {@link Duration#shiftTo} and the Durations's conversion accuracy setting.
   * @param {string} fmt - the format string
   * @param {Object} opts - options
   * @param {boolean} [opts.floor=true] - floor numerical values
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("y d s") //=> "1 6 2"
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("yy dd sss") //=> "01 06 002"
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toFormat("M S") //=> "12 518402000"
   * @return {string}
   */ _proto.toFormat = function toFormat(fmt, opts) {
        if (opts === void 0) opts = {};
        // reverse-compat since 1.2; we always round down now, never up, and we do it by default
        var fmtOpts = $c70e8820d152b235$var$_extends({}, opts, {
            floor: opts.round !== false && opts.floor !== false
        });
        return this.isValid ? $c70e8820d152b235$var$Formatter.create(this.loc, fmtOpts).formatDurationFromString(this, fmt) : $c70e8820d152b235$var$INVALID$2;
    } /**
   * Returns a string representation of a Duration with all units included.
   * To modify its behavior, use `listStyle` and any Intl.NumberFormat option, though `unitDisplay` is especially relevant.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#options
   * @param {Object} opts - Formatting options. Accepts the same keys as the options parameter of the native `Intl.NumberFormat` constructor, as well as `listStyle`.
   * @param {string} [opts.listStyle='narrow'] - How to format the merged list. Corresponds to the `style` property of the options parameter of the native `Intl.ListFormat` constructor.
   * @example
   * ```js
   * var dur = Duration.fromObject({ days: 1, hours: 5, minutes: 6 })
   * dur.toHuman() //=> '1 day, 5 hours, 6 minutes'
   * dur.toHuman({ listStyle: "long" }) //=> '1 day, 5 hours, and 6 minutes'
   * dur.toHuman({ unitDisplay: "short" }) //=> '1 day, 5 hr, 6 min'
   * ```
   */ ;
    _proto.toHuman = function toHuman(opts) {
        var _this = this;
        if (opts === void 0) opts = {};
        if (!this.isValid) return $c70e8820d152b235$var$INVALID$2;
        var l = $c70e8820d152b235$var$orderedUnits$1.map(function(unit) {
            var val = _this.values[unit];
            if ($c70e8820d152b235$var$isUndefined(val)) return null;
            return _this.loc.numberFormatter($c70e8820d152b235$var$_extends({
                style: "unit",
                unitDisplay: "long"
            }, opts, {
                unit: unit.slice(0, -1)
            })).format(val);
        }).filter(function(n) {
            return n;
        });
        return this.loc.listFormatter($c70e8820d152b235$var$_extends({
            type: "conjunction",
            style: opts.listStyle || "narrow"
        }, opts)).format(l);
    } /**
   * Returns a JavaScript object with this Duration's values.
   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }
   * @return {Object}
   */ ;
    _proto.toObject = function toObject() {
        if (!this.isValid) return {};
        return $c70e8820d152b235$var$_extends({}, this.values);
    } /**
   * Returns an ISO 8601-compliant string representation of this Duration.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations
   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'
   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'
   * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'
   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'
   * @example Duration.fromObject({ milliseconds: 6 }).toISO() //=> 'PT0.006S'
   * @return {string}
   */ ;
    _proto.toISO = function toISO() {
        // we could use the formatter, but this is an easier way to get the minimum string
        if (!this.isValid) return null;
        var s = "P";
        if (this.years !== 0) s += this.years + "Y";
        if (this.months !== 0 || this.quarters !== 0) s += this.months + this.quarters * 3 + "M";
        if (this.weeks !== 0) s += this.weeks + "W";
        if (this.days !== 0) s += this.days + "D";
        if (this.hours !== 0 || this.minutes !== 0 || this.seconds !== 0 || this.milliseconds !== 0) s += "T";
        if (this.hours !== 0) s += this.hours + "H";
        if (this.minutes !== 0) s += this.minutes + "M";
        if (this.seconds !== 0 || this.milliseconds !== 0) // this will handle "floating point madness" by removing extra decimal places
        // https://stackoverflow.com/questions/588004/is-floating-point-math-broken
        s += $c70e8820d152b235$var$roundTo(this.seconds + this.milliseconds / 1000, 3) + "S";
        if (s === "P") s += "T0S";
        return s;
    } /**
   * Returns an ISO 8601-compliant string representation of this Duration, formatted as a time of day.
   * Note that this will return null if the duration is invalid, negative, or equal to or greater than 24 hours.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Times
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example Duration.fromObject({ hours: 11 }).toISOTime() //=> '11:00:00.000'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressMilliseconds: true }) //=> '11:00:00'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ suppressSeconds: true }) //=> '11:00'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ includePrefix: true }) //=> 'T11:00:00.000'
   * @example Duration.fromObject({ hours: 11 }).toISOTime({ format: 'basic' }) //=> '110000.000'
   * @return {string}
   */ ;
    _proto.toISOTime = function toISOTime(opts) {
        if (opts === void 0) opts = {};
        if (!this.isValid) return null;
        var millis = this.toMillis();
        if (millis < 0 || millis >= 86400000) return null;
        opts = $c70e8820d152b235$var$_extends({
            suppressMilliseconds: false,
            suppressSeconds: false,
            includePrefix: false,
            format: "extended"
        }, opts, {
            includeOffset: false
        });
        var dateTime = $c70e8820d152b235$var$DateTime.fromMillis(millis, {
            zone: "UTC"
        });
        return dateTime.toISOTime(opts);
    } /**
   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.
   * @return {string}
   */ ;
    _proto.toJSON = function toJSON() {
        return this.toISO();
    } /**
   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.
   * @return {string}
   */ ;
    _proto.toString = function toString() {
        return this.toISO();
    } /**
   * Returns a string representation of this Duration appropriate for the REPL.
   * @return {string}
   */ ;
    _proto[_Symbol$for] = function() {
        if (this.isValid) return "Duration { values: " + JSON.stringify(this.values) + " }";
        else return "Duration { Invalid, reason: " + this.invalidReason + " }";
    } /**
   * Returns an milliseconds value of this Duration.
   * @return {number}
   */ ;
    _proto.toMillis = function toMillis() {
        if (!this.isValid) return NaN;
        return $c70e8820d152b235$var$durationToMillis(this.matrix, this.values);
    } /**
   * Returns an milliseconds value of this Duration. Alias of {@link toMillis}
   * @return {number}
   */ ;
    _proto.valueOf = function valueOf() {
        return this.toMillis();
    } /**
   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.
   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @return {Duration}
   */ ;
    _proto.plus = function plus(duration) {
        if (!this.isValid) return this;
        var dur = Duration.fromDurationLike(duration), result = {};
        for(var _i2 = 0, _orderedUnits = $c70e8820d152b235$var$orderedUnits$1; _i2 < _orderedUnits.length; _i2++){
            var k = _orderedUnits[_i2];
            if ($c70e8820d152b235$var$hasOwnProperty(dur.values, k) || $c70e8820d152b235$var$hasOwnProperty(this.values, k)) result[k] = dur.get(k) + this.get(k);
        }
        return $c70e8820d152b235$var$clone$1(this, {
            values: result
        }, true);
    } /**
   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.
   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @return {Duration}
   */ ;
    _proto.minus = function minus(duration) {
        if (!this.isValid) return this;
        var dur = Duration.fromDurationLike(duration);
        return this.plus(dur.negate());
    } /**
   * Scale this Duration by the specified amount. Return a newly-constructed Duration.
   * @param {function} fn - The function to apply to each unit. Arity is 1 or 2: the value of the unit and, optionally, the unit name. Must return a number.
   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits(x => x * 2) //=> { hours: 2, minutes: 60 }
   * @example Duration.fromObject({ hours: 1, minutes: 30 }).mapUnits((x, u) => u === "hours" ? x * 2 : x) //=> { hours: 2, minutes: 30 }
   * @return {Duration}
   */ ;
    _proto.mapUnits = function mapUnits(fn) {
        if (!this.isValid) return this;
        var result = {};
        for(var _i3 = 0, _Object$keys = Object.keys(this.values); _i3 < _Object$keys.length; _i3++){
            var k = _Object$keys[_i3];
            result[k] = $c70e8820d152b235$var$asNumber(fn(this.values[k], k));
        }
        return $c70e8820d152b235$var$clone$1(this, {
            values: result
        }, true);
    } /**
   * Get the value of unit.
   * @param {string} unit - a unit such as 'minute' or 'day'
   * @example Duration.fromObject({years: 2, days: 3}).get('years') //=> 2
   * @example Duration.fromObject({years: 2, days: 3}).get('months') //=> 0
   * @example Duration.fromObject({years: 2, days: 3}).get('days') //=> 3
   * @return {number}
   */ ;
    _proto.get = function get(unit) {
        return this[Duration.normalizeUnit(unit)];
    } /**
   * "Set" the values of specified units. Return a newly-constructed Duration.
   * @param {Object} values - a mapping of units to numbers
   * @example dur.set({ years: 2017 })
   * @example dur.set({ hours: 8, minutes: 30 })
   * @return {Duration}
   */ ;
    _proto.set = function set(values) {
        if (!this.isValid) return this;
        var mixed = $c70e8820d152b235$var$_extends({}, this.values, $c70e8820d152b235$var$normalizeObject(values, Duration.normalizeUnit));
        return $c70e8820d152b235$var$clone$1(this, {
            values: mixed
        });
    } /**
   * "Set" the locale and/or numberingSystem.  Returns a newly-constructed Duration.
   * @example dur.reconfigure({ locale: 'en-GB' })
   * @return {Duration}
   */ ;
    _proto.reconfigure = function reconfigure(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, locale = _ref.locale, numberingSystem = _ref.numberingSystem, conversionAccuracy = _ref.conversionAccuracy, matrix = _ref.matrix;
        var loc = this.loc.clone({
            locale: locale,
            numberingSystem: numberingSystem
        });
        var opts = {
            loc: loc,
            matrix: matrix,
            conversionAccuracy: conversionAccuracy
        };
        return $c70e8820d152b235$var$clone$1(this, opts);
    } /**
   * Return the length of the duration in the specified unit.
   * @param {string} unit - a unit such as 'minutes' or 'days'
   * @example Duration.fromObject({years: 1}).as('days') //=> 365
   * @example Duration.fromObject({years: 1}).as('months') //=> 12
   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5
   * @return {number}
   */ ;
    _proto.as = function as(unit) {
        return this.isValid ? this.shiftTo(unit).get(unit) : NaN;
    } /**
   * Reduce this Duration to its canonical representation in its current units.
   * Assuming the overall value of the Duration is positive, this means:
   * - excessive values for lower-order units are converted to higher-order units (if possible, see first and second example)
   * - negative lower-order units are converted to higher order units (there must be such a higher order unit, otherwise
   *   the overall value would be negative, see third example)
   * - fractional values for higher-order units are converted to lower-order units (if possible, see fourth example)
   *
   * If the overall value is negative, the result of this method is equivalent to `this.negate().normalize().negate()`.
   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }
   * @example Duration.fromObject({ days: 5000 }).normalize().toObject() //=> { days: 5000 }
   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }
   * @example Duration.fromObject({ years: 2.5, days: 0, hours: 0 }).normalize().toObject() //=> { years: 2, days: 182, hours: 12 }
   * @return {Duration}
   */ ;
    _proto.normalize = function normalize() {
        if (!this.isValid) return this;
        var vals = this.toObject();
        $c70e8820d152b235$var$normalizeValues(this.matrix, vals);
        return $c70e8820d152b235$var$clone$1(this, {
            values: vals
        }, true);
    } /**
   * Rescale units to its largest representation
   * @example Duration.fromObject({ milliseconds: 90000 }).rescale().toObject() //=> { minutes: 1, seconds: 30 }
   * @return {Duration}
   */ ;
    _proto.rescale = function rescale() {
        if (!this.isValid) return this;
        var vals = $c70e8820d152b235$var$removeZeroes(this.normalize().shiftToAll().toObject());
        return $c70e8820d152b235$var$clone$1(this, {
            values: vals
        }, true);
    } /**
   * Convert this Duration into its representation in a different set of units.
   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }
   * @return {Duration}
   */ ;
    _proto.shiftTo = function shiftTo() {
        for(var _len = arguments.length, units = new Array(_len), _key = 0; _key < _len; _key++)units[_key] = arguments[_key];
        if (!this.isValid) return this;
        if (units.length === 0) return this;
        units = units.map(function(u) {
            return Duration.normalizeUnit(u);
        });
        var built = {}, accumulated = {}, vals = this.toObject();
        var lastUnit;
        for(var _i4 = 0, _orderedUnits2 = $c70e8820d152b235$var$orderedUnits$1; _i4 < _orderedUnits2.length; _i4++){
            var k = _orderedUnits2[_i4];
            if (units.indexOf(k) >= 0) {
                lastUnit = k;
                var own = 0;
                // anything we haven't boiled down yet should get boiled to this unit
                for(var ak in accumulated){
                    own += this.matrix[ak][k] * accumulated[ak];
                    accumulated[ak] = 0;
                }
                // plus anything that's already in this unit
                if ($c70e8820d152b235$var$isNumber(vals[k])) own += vals[k];
                // only keep the integer part for now in the hopes of putting any decimal part
                // into a smaller unit later
                var i = Math.trunc(own);
                built[k] = i;
                accumulated[k] = (own * 1000 - i * 1000) / 1000;
            // otherwise, keep it in the wings to boil it later
            } else if ($c70e8820d152b235$var$isNumber(vals[k])) accumulated[k] = vals[k];
        }
        // anything leftover becomes the decimal for the last unit
        // lastUnit must be defined since units is not empty
        for(var key in accumulated)if (accumulated[key] !== 0) built[lastUnit] += key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];
        $c70e8820d152b235$var$normalizeValues(this.matrix, built);
        return $c70e8820d152b235$var$clone$1(this, {
            values: built
        }, true);
    } /**
   * Shift this Duration to all available units.
   * Same as shiftTo("years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds")
   * @return {Duration}
   */ ;
    _proto.shiftToAll = function shiftToAll() {
        if (!this.isValid) return this;
        return this.shiftTo("years", "months", "weeks", "days", "hours", "minutes", "seconds", "milliseconds");
    } /**
   * Return the negative of this Duration.
   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }
   * @return {Duration}
   */ ;
    _proto.negate = function negate() {
        if (!this.isValid) return this;
        var negated = {};
        for(var _i5 = 0, _Object$keys2 = Object.keys(this.values); _i5 < _Object$keys2.length; _i5++){
            var k = _Object$keys2[_i5];
            negated[k] = this.values[k] === 0 ? 0 : -this.values[k];
        }
        return $c70e8820d152b235$var$clone$1(this, {
            values: negated
        }, true);
    } /**
   * Get the years.
   * @type {number}
   */ ;
    /**
   * Equality check
   * Two Durations are equal iff they have the same units and the same values for each unit.
   * @param {Duration} other
   * @return {boolean}
   */ _proto.equals = function equals(other) {
        if (!this.isValid || !other.isValid) return false;
        if (!this.loc.equals(other.loc)) return false;
        function eq(v1, v2) {
            // Consider 0 and undefined as equal
            if (v1 === undefined || v1 === 0) return v2 === undefined || v2 === 0;
            return v1 === v2;
        }
        for(var _i6 = 0, _orderedUnits3 = $c70e8820d152b235$var$orderedUnits$1; _i6 < _orderedUnits3.length; _i6++){
            var u = _orderedUnits3[_i6];
            if (!eq(this.values[u], other.values[u])) return false;
        }
        return true;
    };
    $c70e8820d152b235$var$_createClass(Duration, [
        {
            key: "locale",
            get: function get() {
                return this.isValid ? this.loc.locale : null;
            }
        },
        {
            key: "numberingSystem",
            get: function get() {
                return this.isValid ? this.loc.numberingSystem : null;
            }
        },
        {
            key: "years",
            get: function get() {
                return this.isValid ? this.values.years || 0 : NaN;
            }
        },
        {
            key: "quarters",
            get: function get() {
                return this.isValid ? this.values.quarters || 0 : NaN;
            }
        },
        {
            key: "months",
            get: function get() {
                return this.isValid ? this.values.months || 0 : NaN;
            }
        },
        {
            key: "weeks",
            get: function get() {
                return this.isValid ? this.values.weeks || 0 : NaN;
            }
        },
        {
            key: "days",
            get: function get() {
                return this.isValid ? this.values.days || 0 : NaN;
            }
        },
        {
            key: "hours",
            get: function get() {
                return this.isValid ? this.values.hours || 0 : NaN;
            }
        },
        {
            key: "minutes",
            get: function get() {
                return this.isValid ? this.values.minutes || 0 : NaN;
            }
        },
        {
            key: "seconds",
            get: function get() {
                return this.isValid ? this.values.seconds || 0 : NaN;
            }
        },
        {
            key: "milliseconds",
            get: function get() {
                return this.isValid ? this.values.milliseconds || 0 : NaN;
            }
        },
        {
            key: "isValid",
            get: function get() {
                return this.invalid === null;
            }
        },
        {
            key: "invalidReason",
            get: function get() {
                return this.invalid ? this.invalid.reason : null;
            }
        },
        {
            key: "invalidExplanation",
            get: function get() {
                return this.invalid ? this.invalid.explanation : null;
            }
        }
    ]);
    return Duration;
}(Symbol.for("nodejs.util.inspect.custom"));
var $c70e8820d152b235$var$INVALID$1 = "Invalid Interval";
// checks if the start is equal to or before the end
function $c70e8820d152b235$var$validateStartEnd(start, end) {
    if (!start || !start.isValid) return $c70e8820d152b235$var$Interval.invalid("missing or invalid start");
    else if (!end || !end.isValid) return $c70e8820d152b235$var$Interval.invalid("missing or invalid end");
    else if (end < start) return $c70e8820d152b235$var$Interval.invalid("end before start", "The end of an interval must be after its start, but you had start=" + start.toISO() + " and end=" + end.toISO());
    else return null;
}
/**
 * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.
 *
 * Here is a brief overview of the most commonly used methods and getters in Interval:
 *
 * * **Creation** To create an Interval, use {@link Interval.fromDateTimes}, {@link Interval.after}, {@link Interval.before}, or {@link Interval.fromISO}.
 * * **Accessors** Use {@link Interval#start} and {@link Interval#end} to get the start and end.
 * * **Interrogation** To analyze the Interval, use {@link Interval#count}, {@link Interval#length}, {@link Interval#hasSame}, {@link Interval#contains}, {@link Interval#isAfter}, or {@link Interval#isBefore}.
 * * **Transformation** To create other Intervals out of this one, use {@link Interval#set}, {@link Interval#splitAt}, {@link Interval#splitBy}, {@link Interval#divideEqually}, {@link Interval.merge}, {@link Interval.xor}, {@link Interval#union}, {@link Interval#intersection}, or {@link Interval#difference}.
 * * **Comparison** To compare this Interval to another one, use {@link Interval#equals}, {@link Interval#overlaps}, {@link Interval#abutsStart}, {@link Interval#abutsEnd}, {@link Interval#engulfs}
 * * **Output** To convert the Interval into other representations, see {@link Interval#toString}, {@link Interval#toLocaleString}, {@link Interval#toISO}, {@link Interval#toISODate}, {@link Interval#toISOTime}, {@link Interval#toFormat}, and {@link Interval#toDuration}.
 */ var $c70e8820d152b235$var$Interval = /*#__PURE__*/ function(_Symbol$for) {
    /**
   * @private
   */ function Interval(config) {
        /**
     * @access private
     */ this.s = config.start;
        /**
     * @access private
     */ this.e = config.end;
        /**
     * @access private
     */ this.invalid = config.invalid || null;
        /**
     * @access private
     */ this.isLuxonInterval = true;
    }
    /**
   * Create an invalid Interval.
   * @param {string} reason - simple string of why this Interval is invalid. Should not contain parameters or anything else data-dependent
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {Interval}
   */ Interval.invalid = function invalid(reason, explanation) {
        if (explanation === void 0) explanation = null;
        if (!reason) throw new $c70e8820d152b235$var$InvalidArgumentError("need to specify a reason the Interval is invalid");
        var invalid = reason instanceof $c70e8820d152b235$var$Invalid ? reason : new $c70e8820d152b235$var$Invalid(reason, explanation);
        if ($c70e8820d152b235$var$Settings.throwOnInvalid) throw new $c70e8820d152b235$var$InvalidIntervalError(invalid);
        else return new Interval({
            invalid: invalid
        });
    } /**
   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.
   * @param {DateTime|Date|Object} start
   * @param {DateTime|Date|Object} end
   * @return {Interval}
   */ ;
    Interval.fromDateTimes = function fromDateTimes(start, end) {
        var builtStart = $c70e8820d152b235$var$friendlyDateTime(start), builtEnd = $c70e8820d152b235$var$friendlyDateTime(end);
        var validateError = $c70e8820d152b235$var$validateStartEnd(builtStart, builtEnd);
        if (validateError == null) return new Interval({
            start: builtStart,
            end: builtEnd
        });
        else return validateError;
    } /**
   * Create an Interval from a start DateTime and a Duration to extend to.
   * @param {DateTime|Date|Object} start
   * @param {Duration|Object|number} duration - the length of the Interval.
   * @return {Interval}
   */ ;
    Interval.after = function after(start, duration) {
        var dur = $c70e8820d152b235$var$Duration.fromDurationLike(duration), dt = $c70e8820d152b235$var$friendlyDateTime(start);
        return Interval.fromDateTimes(dt, dt.plus(dur));
    } /**
   * Create an Interval from an end DateTime and a Duration to extend backwards to.
   * @param {DateTime|Date|Object} end
   * @param {Duration|Object|number} duration - the length of the Interval.
   * @return {Interval}
   */ ;
    Interval.before = function before(end, duration) {
        var dur = $c70e8820d152b235$var$Duration.fromDurationLike(duration), dt = $c70e8820d152b235$var$friendlyDateTime(end);
        return Interval.fromDateTimes(dt.minus(dur), dt);
    } /**
   * Create an Interval from an ISO 8601 string.
   * Accepts `<start>/<end>`, `<start>/<duration>`, and `<duration>/<end>` formats.
   * @param {string} text - the ISO string to parse
   * @param {Object} [opts] - options to pass {@link DateTime#fromISO} and optionally {@link Duration#fromISO}
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @return {Interval}
   */ ;
    Interval.fromISO = function fromISO(text, opts) {
        var _split = (text || "").split("/", 2), s = _split[0], e = _split[1];
        if (s && e) {
            var start, startIsValid;
            try {
                start = $c70e8820d152b235$var$DateTime.fromISO(s, opts);
                startIsValid = start.isValid;
            } catch (e) {
                startIsValid = false;
            }
            var end, endIsValid;
            try {
                end = $c70e8820d152b235$var$DateTime.fromISO(e, opts);
                endIsValid = end.isValid;
            } catch (e) {
                endIsValid = false;
            }
            if (startIsValid && endIsValid) return Interval.fromDateTimes(start, end);
            if (startIsValid) {
                var dur = $c70e8820d152b235$var$Duration.fromISO(e, opts);
                if (dur.isValid) return Interval.after(start, dur);
            } else if (endIsValid) {
                var _dur = $c70e8820d152b235$var$Duration.fromISO(s, opts);
                if (_dur.isValid) return Interval.before(end, _dur);
            }
        }
        return Interval.invalid("unparsable", 'the input "' + text + "\" can't be parsed as ISO 8601");
    } /**
   * Check if an object is an Interval. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */ ;
    Interval.isInterval = function isInterval(o) {
        return o && o.isLuxonInterval || false;
    } /**
   * Returns the start of the Interval
   * @type {DateTime}
   */ ;
    var _proto = Interval.prototype;
    /**
   * Returns the length of the Interval in the specified unit.
   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.
   * @return {number}
   */ _proto.length = function length(unit) {
        if (unit === void 0) unit = "milliseconds";
        return this.isValid ? this.toDuration.apply(this, [
            unit
        ]).get(unit) : NaN;
    } /**
   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.
   * Unlike {@link Interval#length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'
   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'
   * @param {string} [unit='milliseconds'] - the unit of time to count.
   * @param {Object} opts - options
   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; this operation will always use the locale of the start DateTime
   * @return {number}
   */ ;
    _proto.count = function count(unit, opts) {
        if (unit === void 0) unit = "milliseconds";
        if (!this.isValid) return NaN;
        var start = this.start.startOf(unit, opts);
        var end;
        if (opts != null && opts.useLocaleWeeks) end = this.end.reconfigure({
            locale: start.locale
        });
        else end = this.end;
        end = end.startOf(unit, opts);
        return Math.floor(end.diff(start, unit).get(unit)) + (end.valueOf() !== this.end.valueOf());
    } /**
   * Returns whether this Interval's start and end are both in the same unit of time
   * @param {string} unit - the unit of time to check sameness on
   * @return {boolean}
   */ ;
    _proto.hasSame = function hasSame(unit) {
        return this.isValid ? this.isEmpty() || this.e.minus(1).hasSame(this.s, unit) : false;
    } /**
   * Return whether this Interval has the same start and end DateTimes.
   * @return {boolean}
   */ ;
    _proto.isEmpty = function isEmpty() {
        return this.s.valueOf() === this.e.valueOf();
    } /**
   * Return whether this Interval's start is after the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */ ;
    _proto.isAfter = function isAfter(dateTime) {
        if (!this.isValid) return false;
        return this.s > dateTime;
    } /**
   * Return whether this Interval's end is before the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */ ;
    _proto.isBefore = function isBefore(dateTime) {
        if (!this.isValid) return false;
        return this.e <= dateTime;
    } /**
   * Return whether this Interval contains the specified DateTime.
   * @param {DateTime} dateTime
   * @return {boolean}
   */ ;
    _proto.contains = function contains(dateTime) {
        if (!this.isValid) return false;
        return this.s <= dateTime && this.e > dateTime;
    } /**
   * "Sets" the start and/or end dates. Returns a newly-constructed Interval.
   * @param {Object} values - the values to set
   * @param {DateTime} values.start - the starting DateTime
   * @param {DateTime} values.end - the ending DateTime
   * @return {Interval}
   */ ;
    _proto.set = function set(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, start = _ref.start, end = _ref.end;
        if (!this.isValid) return this;
        return Interval.fromDateTimes(start || this.s, end || this.e);
    } /**
   * Split this Interval at each of the specified DateTimes
   * @param {...DateTime} dateTimes - the unit of time to count.
   * @return {Array}
   */ ;
    _proto.splitAt = function splitAt() {
        var _this = this;
        if (!this.isValid) return [];
        for(var _len = arguments.length, dateTimes = new Array(_len), _key = 0; _key < _len; _key++)dateTimes[_key] = arguments[_key];
        var sorted = dateTimes.map($c70e8820d152b235$var$friendlyDateTime).filter(function(d) {
            return _this.contains(d);
        }).sort(function(a, b) {
            return a.toMillis() - b.toMillis();
        }), results = [];
        var s = this.s, i = 0;
        while(s < this.e){
            var added = sorted[i] || this.e, next = +added > +this.e ? this.e : added;
            results.push(Interval.fromDateTimes(s, next));
            s = next;
            i += 1;
        }
        return results;
    } /**
   * Split this Interval into smaller Intervals, each of the specified length.
   * Left over time is grouped into a smaller interval
   * @param {Duration|Object|number} duration - The length of each resulting interval.
   * @return {Array}
   */ ;
    _proto.splitBy = function splitBy(duration) {
        var dur = $c70e8820d152b235$var$Duration.fromDurationLike(duration);
        if (!this.isValid || !dur.isValid || dur.as("milliseconds") === 0) return [];
        var s = this.s, idx = 1, next;
        var results = [];
        while(s < this.e){
            var added = this.start.plus(dur.mapUnits(function(x) {
                return x * idx;
            }));
            next = +added > +this.e ? this.e : added;
            results.push(Interval.fromDateTimes(s, next));
            s = next;
            idx += 1;
        }
        return results;
    } /**
   * Split this Interval into the specified number of smaller intervals.
   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.
   * @return {Array}
   */ ;
    _proto.divideEqually = function divideEqually(numberOfParts) {
        if (!this.isValid) return [];
        return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);
    } /**
   * Return whether this Interval overlaps with the specified Interval
   * @param {Interval} other
   * @return {boolean}
   */ ;
    _proto.overlaps = function overlaps(other) {
        return this.e > other.s && this.s < other.e;
    } /**
   * Return whether this Interval's end is adjacent to the specified Interval's start.
   * @param {Interval} other
   * @return {boolean}
   */ ;
    _proto.abutsStart = function abutsStart(other) {
        if (!this.isValid) return false;
        return +this.e === +other.s;
    } /**
   * Return whether this Interval's start is adjacent to the specified Interval's end.
   * @param {Interval} other
   * @return {boolean}
   */ ;
    _proto.abutsEnd = function abutsEnd(other) {
        if (!this.isValid) return false;
        return +other.e === +this.s;
    } /**
   * Return whether this Interval engulfs the start and end of the specified Interval.
   * @param {Interval} other
   * @return {boolean}
   */ ;
    _proto.engulfs = function engulfs(other) {
        if (!this.isValid) return false;
        return this.s <= other.s && this.e >= other.e;
    } /**
   * Return whether this Interval has the same start and end as the specified Interval.
   * @param {Interval} other
   * @return {boolean}
   */ ;
    _proto.equals = function equals(other) {
        if (!this.isValid || !other.isValid) return false;
        return this.s.equals(other.s) && this.e.equals(other.e);
    } /**
   * Return an Interval representing the intersection of this Interval and the specified Interval.
   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.
   * Returns null if the intersection is empty, meaning, the intervals don't intersect.
   * @param {Interval} other
   * @return {Interval}
   */ ;
    _proto.intersection = function intersection(other) {
        if (!this.isValid) return this;
        var s = this.s > other.s ? this.s : other.s, e = this.e < other.e ? this.e : other.e;
        if (s >= e) return null;
        else return Interval.fromDateTimes(s, e);
    } /**
   * Return an Interval representing the union of this Interval and the specified Interval.
   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.
   * @param {Interval} other
   * @return {Interval}
   */ ;
    _proto.union = function union(other) {
        if (!this.isValid) return this;
        var s = this.s < other.s ? this.s : other.s, e = this.e > other.e ? this.e : other.e;
        return Interval.fromDateTimes(s, e);
    } /**
   * Merge an array of Intervals into a equivalent minimal set of Intervals.
   * Combines overlapping and adjacent Intervals.
   * @param {Array} intervals
   * @return {Array}
   */ ;
    Interval.merge = function merge(intervals) {
        var _intervals$sort$reduc = intervals.sort(function(a, b) {
            return a.s - b.s;
        }).reduce(function(_ref2, item) {
            var sofar = _ref2[0], current = _ref2[1];
            if (!current) return [
                sofar,
                item
            ];
            else if (current.overlaps(item) || current.abutsStart(item)) return [
                sofar,
                current.union(item)
            ];
            else return [
                sofar.concat([
                    current
                ]),
                item
            ];
        }, [
            [],
            null
        ]), found = _intervals$sort$reduc[0], final = _intervals$sort$reduc[1];
        if (final) found.push(final);
        return found;
    } /**
   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.
   * @param {Array} intervals
   * @return {Array}
   */ ;
    Interval.xor = function xor(intervals) {
        var _Array$prototype;
        var start = null, currentCount = 0;
        var results = [], ends = intervals.map(function(i) {
            return [
                {
                    time: i.s,
                    type: "s"
                },
                {
                    time: i.e,
                    type: "e"
                }
            ];
        }), flattened = (_Array$prototype = Array.prototype).concat.apply(_Array$prototype, ends), arr = flattened.sort(function(a, b) {
            return a.time - b.time;
        });
        for(var _iterator = $c70e8820d152b235$var$_createForOfIteratorHelperLoose(arr), _step; !(_step = _iterator()).done;){
            var i = _step.value;
            currentCount += i.type === "s" ? 1 : -1;
            if (currentCount === 1) start = i.time;
            else {
                if (start && +start !== +i.time) results.push(Interval.fromDateTimes(start, i.time));
                start = null;
            }
        }
        return Interval.merge(results);
    } /**
   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.
   * @param {...Interval} intervals
   * @return {Array}
   */ ;
    _proto.difference = function difference() {
        var _this2 = this;
        for(var _len2 = arguments.length, intervals = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)intervals[_key2] = arguments[_key2];
        return Interval.xor([
            this
        ].concat(intervals)).map(function(i) {
            return _this2.intersection(i);
        }).filter(function(i) {
            return i && !i.isEmpty();
        });
    } /**
   * Returns a string representation of this Interval appropriate for debugging.
   * @return {string}
   */ ;
    _proto.toString = function toString() {
        if (!this.isValid) return $c70e8820d152b235$var$INVALID$1;
        return "[" + this.s.toISO() + " \u2013 " + this.e.toISO() + ")";
    } /**
   * Returns a string representation of this Interval appropriate for the REPL.
   * @return {string}
   */ ;
    _proto[_Symbol$for] = function() {
        if (this.isValid) return "Interval { start: " + this.s.toISO() + ", end: " + this.e.toISO() + " }";
        else return "Interval { Invalid, reason: " + this.invalidReason + " }";
    } /**
   * Returns a localized string representing this Interval. Accepts the same options as the
   * Intl.DateTimeFormat constructor and any presets defined by Luxon, such as
   * {@link DateTime.DATE_FULL} or {@link DateTime.TIME_SIMPLE}. The exact behavior of this method
   * is browser-specific, but in general it will return an appropriate representation of the
   * Interval in the assigned locale. Defaults to the system's locale if no locale has been
   * specified.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param {Object} [formatOpts=DateTime.DATE_SHORT] - Either a DateTime preset or
   * Intl.DateTimeFormat constructor options.
   * @param {Object} opts - Options to override the configuration of the start DateTime.
   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(); //=> 11/7/2022 – 11/8/2022
   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL); //=> November 7 – 8, 2022
   * @example Interval.fromISO('2022-11-07T09:00Z/2022-11-08T09:00Z').toLocaleString(DateTime.DATE_FULL, { locale: 'fr-FR' }); //=> 7–8 novembre 2022
   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString(DateTime.TIME_SIMPLE); //=> 6:00 – 8:00 PM
   * @example Interval.fromISO('2022-11-07T17:00Z/2022-11-07T19:00Z').toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> Mon, Nov 07, 6:00 – 8:00 p
   * @return {string}
   */ ;
    _proto.toLocaleString = function toLocaleString(formatOpts, opts) {
        if (formatOpts === void 0) formatOpts = $c70e8820d152b235$var$DATE_SHORT;
        if (opts === void 0) opts = {};
        return this.isValid ? $c70e8820d152b235$var$Formatter.create(this.s.loc.clone(opts), formatOpts).formatInterval(this) : $c70e8820d152b235$var$INVALID$1;
    } /**
   * Returns an ISO 8601-compliant string representation of this Interval.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @param {Object} opts - The same options as {@link DateTime#toISO}
   * @return {string}
   */ ;
    _proto.toISO = function toISO(opts) {
        if (!this.isValid) return $c70e8820d152b235$var$INVALID$1;
        return this.s.toISO(opts) + "/" + this.e.toISO(opts);
    } /**
   * Returns an ISO 8601-compliant string representation of date of this Interval.
   * The time components are ignored.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @return {string}
   */ ;
    _proto.toISODate = function toISODate() {
        if (!this.isValid) return $c70e8820d152b235$var$INVALID$1;
        return this.s.toISODate() + "/" + this.e.toISODate();
    } /**
   * Returns an ISO 8601-compliant string representation of time of this Interval.
   * The date components are ignored.
   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals
   * @param {Object} opts - The same options as {@link DateTime#toISO}
   * @return {string}
   */ ;
    _proto.toISOTime = function toISOTime(opts) {
        if (!this.isValid) return $c70e8820d152b235$var$INVALID$1;
        return this.s.toISOTime(opts) + "/" + this.e.toISOTime(opts);
    } /**
   * Returns a string representation of this Interval formatted according to the specified format
   * string. **You may not want this.** See {@link Interval#toLocaleString} for a more flexible
   * formatting tool.
   * @param {string} dateFormat - The format string. This string formats the start and end time.
   * See {@link DateTime#toFormat} for details.
   * @param {Object} opts - Options.
   * @param {string} [opts.separator =  ' – '] - A separator to place between the start and end
   * representations.
   * @return {string}
   */ ;
    _proto.toFormat = function toFormat(dateFormat, _temp2) {
        var _ref3 = _temp2 === void 0 ? {} : _temp2, _ref3$separator = _ref3.separator, separator = _ref3$separator === void 0 ? " \u2013 " : _ref3$separator;
        if (!this.isValid) return $c70e8820d152b235$var$INVALID$1;
        return "" + this.s.toFormat(dateFormat) + separator + this.e.toFormat(dateFormat);
    } /**
   * Return a Duration representing the time spanned by this interval.
   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }
   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }
   * @return {Duration}
   */ ;
    _proto.toDuration = function toDuration(unit, opts) {
        if (!this.isValid) return $c70e8820d152b235$var$Duration.invalid(this.invalidReason);
        return this.e.diff(this.s, unit, opts);
    } /**
   * Run mapFn on the interval start and end, returning a new Interval from the resulting DateTimes
   * @param {function} mapFn
   * @return {Interval}
   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.toUTC())
   * @example Interval.fromDateTimes(dt1, dt2).mapEndpoints(endpoint => endpoint.plus({ hours: 2 }))
   */ ;
    _proto.mapEndpoints = function mapEndpoints(mapFn) {
        return Interval.fromDateTimes(mapFn(this.s), mapFn(this.e));
    };
    $c70e8820d152b235$var$_createClass(Interval, [
        {
            key: "start",
            get: function get() {
                return this.isValid ? this.s : null;
            }
        },
        {
            key: "end",
            get: function get() {
                return this.isValid ? this.e : null;
            }
        },
        {
            key: "isValid",
            get: function get() {
                return this.invalidReason === null;
            }
        },
        {
            key: "invalidReason",
            get: function get() {
                return this.invalid ? this.invalid.reason : null;
            }
        },
        {
            key: "invalidExplanation",
            get: function get() {
                return this.invalid ? this.invalid.explanation : null;
            }
        }
    ]);
    return Interval;
}(Symbol.for("nodejs.util.inspect.custom"));
/**
 * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.
 */ var $c70e8820d152b235$var$Info = /*#__PURE__*/ function() {
    function Info() {}
    /**
   * Return whether the specified zone contains a DST.
   * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.
   * @return {boolean}
   */ Info.hasDST = function hasDST(zone) {
        if (zone === void 0) zone = $c70e8820d152b235$var$Settings.defaultZone;
        var proto = $c70e8820d152b235$var$DateTime.now().setZone(zone).set({
            month: 12
        });
        return !zone.isUniversal && proto.offset !== proto.set({
            month: 6
        }).offset;
    } /**
   * Return whether the specified zone is a valid IANA specifier.
   * @param {string} zone - Zone to check
   * @return {boolean}
   */ ;
    Info.isValidIANAZone = function isValidIANAZone(zone) {
        return $c70e8820d152b235$var$IANAZone.isValidZone(zone);
    } /**
   * Converts the input into a {@link Zone} instance.
   *
   * * If `input` is already a Zone instance, it is returned unchanged.
   * * If `input` is a string containing a valid time zone name, a Zone instance
   *   with that name is returned.
   * * If `input` is a string that doesn't refer to a known time zone, a Zone
   *   instance with {@link Zone#isValid} == false is returned.
   * * If `input is a number, a Zone instance with the specified fixed offset
   *   in minutes is returned.
   * * If `input` is `null` or `undefined`, the default zone is returned.
   * @param {string|Zone|number} [input] - the value to be converted
   * @return {Zone}
   */ ;
    Info.normalizeZone = function normalizeZone$1(input) {
        return $c70e8820d152b235$var$normalizeZone(input, $c70e8820d152b235$var$Settings.defaultZone);
    } /**
   * Get the weekday on which the week starts according to the given locale.
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @returns {number} the start of the week, 1 for Monday through 7 for Sunday
   */ ;
    Info.getStartOfWeek = function getStartOfWeek(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, _ref$locale = _ref.locale, locale = _ref$locale === void 0 ? null : _ref$locale, _ref$locObj = _ref.locObj, locObj = _ref$locObj === void 0 ? null : _ref$locObj;
        return (locObj || $c70e8820d152b235$var$Locale.create(locale)).getStartOfWeek();
    } /**
   * Get the minimum number of days necessary in a week before it is considered part of the next year according
   * to the given locale.
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @returns {number}
   */ ;
    Info.getMinimumDaysInFirstWeek = function getMinimumDaysInFirstWeek(_temp2) {
        var _ref2 = _temp2 === void 0 ? {} : _temp2, _ref2$locale = _ref2.locale, locale = _ref2$locale === void 0 ? null : _ref2$locale, _ref2$locObj = _ref2.locObj, locObj = _ref2$locObj === void 0 ? null : _ref2$locObj;
        return (locObj || $c70e8820d152b235$var$Locale.create(locale)).getMinDaysInFirstWeek();
    } /**
   * Get the weekdays, which are considered the weekend according to the given locale
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @returns {number[]} an array of weekdays, 1 for Monday through 7 for Sunday
   */ ;
    Info.getWeekendWeekdays = function getWeekendWeekdays(_temp3) {
        var _ref3 = _temp3 === void 0 ? {} : _temp3, _ref3$locale = _ref3.locale, locale = _ref3$locale === void 0 ? null : _ref3$locale, _ref3$locObj = _ref3.locObj, locObj = _ref3$locObj === void 0 ? null : _ref3$locObj;
        // copy the array, because we cache it internally
        return (locObj || $c70e8820d152b235$var$Locale.create(locale)).getWeekendDays().slice();
    } /**
   * Return an array of standalone month names.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @param {string} [opts.outputCalendar='gregory'] - the calendar
   * @example Info.months()[0] //=> 'January'
   * @example Info.months('short')[0] //=> 'Jan'
   * @example Info.months('numeric')[0] //=> '1'
   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'
   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'
   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'
   * @return {Array}
   */ ;
    Info.months = function months(length, _temp4) {
        if (length === void 0) length = "long";
        var _ref4 = _temp4 === void 0 ? {} : _temp4, _ref4$locale = _ref4.locale, locale = _ref4$locale === void 0 ? null : _ref4$locale, _ref4$numberingSystem = _ref4.numberingSystem, numberingSystem = _ref4$numberingSystem === void 0 ? null : _ref4$numberingSystem, _ref4$locObj = _ref4.locObj, locObj = _ref4$locObj === void 0 ? null : _ref4$locObj, _ref4$outputCalendar = _ref4.outputCalendar, outputCalendar = _ref4$outputCalendar === void 0 ? "gregory" : _ref4$outputCalendar;
        return (locObj || $c70e8820d152b235$var$Locale.create(locale, numberingSystem, outputCalendar)).months(length);
    } /**
   * Return an array of format month names.
   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that
   * changes the string.
   * See {@link Info#months}
   * @param {string} [length='long'] - the length of the month representation, such as "numeric", "2-digit", "narrow", "short", "long"
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @param {string} [opts.outputCalendar='gregory'] - the calendar
   * @return {Array}
   */ ;
    Info.monthsFormat = function monthsFormat(length, _temp5) {
        if (length === void 0) length = "long";
        var _ref5 = _temp5 === void 0 ? {} : _temp5, _ref5$locale = _ref5.locale, locale = _ref5$locale === void 0 ? null : _ref5$locale, _ref5$numberingSystem = _ref5.numberingSystem, numberingSystem = _ref5$numberingSystem === void 0 ? null : _ref5$numberingSystem, _ref5$locObj = _ref5.locObj, locObj = _ref5$locObj === void 0 ? null : _ref5$locObj, _ref5$outputCalendar = _ref5.outputCalendar, outputCalendar = _ref5$outputCalendar === void 0 ? "gregory" : _ref5$outputCalendar;
        return (locObj || $c70e8820d152b235$var$Locale.create(locale, numberingSystem, outputCalendar)).months(length, true);
    } /**
   * Return an array of standalone week names.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param {string} [length='long'] - the length of the weekday representation, such as "narrow", "short", "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @example Info.weekdays()[0] //=> 'Monday'
   * @example Info.weekdays('short')[0] //=> 'Mon'
   * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'
   * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'
   * @return {Array}
   */ ;
    Info.weekdays = function weekdays(length, _temp6) {
        if (length === void 0) length = "long";
        var _ref6 = _temp6 === void 0 ? {} : _temp6, _ref6$locale = _ref6.locale, locale = _ref6$locale === void 0 ? null : _ref6$locale, _ref6$numberingSystem = _ref6.numberingSystem, numberingSystem = _ref6$numberingSystem === void 0 ? null : _ref6$numberingSystem, _ref6$locObj = _ref6.locObj, locObj = _ref6$locObj === void 0 ? null : _ref6$locObj;
        return (locObj || $c70e8820d152b235$var$Locale.create(locale, numberingSystem, null)).weekdays(length);
    } /**
   * Return an array of format week names.
   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that
   * changes the string.
   * See {@link Info#weekdays}
   * @param {string} [length='long'] - the length of the month representation, such as "narrow", "short", "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale=null] - the locale code
   * @param {string} [opts.numberingSystem=null] - the numbering system
   * @param {string} [opts.locObj=null] - an existing locale object to use
   * @return {Array}
   */ ;
    Info.weekdaysFormat = function weekdaysFormat(length, _temp7) {
        if (length === void 0) length = "long";
        var _ref7 = _temp7 === void 0 ? {} : _temp7, _ref7$locale = _ref7.locale, locale = _ref7$locale === void 0 ? null : _ref7$locale, _ref7$numberingSystem = _ref7.numberingSystem, numberingSystem = _ref7$numberingSystem === void 0 ? null : _ref7$numberingSystem, _ref7$locObj = _ref7.locObj, locObj = _ref7$locObj === void 0 ? null : _ref7$locObj;
        return (locObj || $c70e8820d152b235$var$Locale.create(locale, numberingSystem, null)).weekdays(length, true);
    } /**
   * Return an array of meridiems.
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @example Info.meridiems() //=> [ 'AM', 'PM' ]
   * @example Info.meridiems({ locale: 'my' }) //=> [ 'နံနက်', 'ညနေ' ]
   * @return {Array}
   */ ;
    Info.meridiems = function meridiems(_temp8) {
        var _ref8 = _temp8 === void 0 ? {} : _temp8, _ref8$locale = _ref8.locale, locale = _ref8$locale === void 0 ? null : _ref8$locale;
        return $c70e8820d152b235$var$Locale.create(locale).meridiems();
    } /**
   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.
   * @param {string} [length='short'] - the length of the era representation, such as "short" or "long".
   * @param {Object} opts - options
   * @param {string} [opts.locale] - the locale code
   * @example Info.eras() //=> [ 'BC', 'AD' ]
   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]
   * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]
   * @return {Array}
   */ ;
    Info.eras = function eras(length, _temp9) {
        if (length === void 0) length = "short";
        var _ref9 = _temp9 === void 0 ? {} : _temp9, _ref9$locale = _ref9.locale, locale = _ref9$locale === void 0 ? null : _ref9$locale;
        return $c70e8820d152b235$var$Locale.create(locale, null, "gregory").eras(length);
    } /**
   * Return the set of available features in this environment.
   * Some features of Luxon are not available in all environments. For example, on older browsers, relative time formatting support is not available. Use this function to figure out if that's the case.
   * Keys:
   * * `relative`: whether this environment supports relative time formatting
   * * `localeWeek`: whether this environment supports different weekdays for the start of the week based on the locale
   * @example Info.features() //=> { relative: false, localeWeek: true }
   * @return {Object}
   */ ;
    Info.features = function features() {
        return {
            relative: $c70e8820d152b235$var$hasRelative(),
            localeWeek: $c70e8820d152b235$var$hasLocaleWeekInfo()
        };
    };
    return Info;
}();
function $c70e8820d152b235$var$dayDiff(earlier, later) {
    var utcDayStart = function utcDayStart(dt) {
        return dt.toUTC(0, {
            keepLocalTime: true
        }).startOf("day").valueOf();
    }, ms = utcDayStart(later) - utcDayStart(earlier);
    return Math.floor($c70e8820d152b235$var$Duration.fromMillis(ms).as("days"));
}
function $c70e8820d152b235$var$highOrderDiffs(cursor, later, units) {
    var differs = [
        [
            "years",
            function(a, b) {
                return b.year - a.year;
            }
        ],
        [
            "quarters",
            function(a, b) {
                return b.quarter - a.quarter + (b.year - a.year) * 4;
            }
        ],
        [
            "months",
            function(a, b) {
                return b.month - a.month + (b.year - a.year) * 12;
            }
        ],
        [
            "weeks",
            function(a, b) {
                var days = $c70e8820d152b235$var$dayDiff(a, b);
                return (days - days % 7) / 7;
            }
        ],
        [
            "days",
            $c70e8820d152b235$var$dayDiff
        ]
    ];
    var results = {};
    var earlier = cursor;
    var lowestOrder, highWater;
    /* This loop tries to diff using larger units first.
     If we overshoot, we backtrack and try the next smaller unit.
     "cursor" starts out at the earlier timestamp and moves closer and closer to "later"
     as we use smaller and smaller units.
     highWater keeps track of where we would be if we added one more of the smallest unit,
     this is used later to potentially convert any difference smaller than the smallest higher order unit
     into a fraction of that smallest higher order unit
  */ for(var _i = 0, _differs = differs; _i < _differs.length; _i++){
        var _differs$_i = _differs[_i], unit = _differs$_i[0], differ = _differs$_i[1];
        if (units.indexOf(unit) >= 0) {
            lowestOrder = unit;
            results[unit] = differ(cursor, later);
            highWater = earlier.plus(results);
            if (highWater > later) {
                // we overshot the end point, backtrack cursor by 1
                results[unit]--;
                cursor = earlier.plus(results);
                // if we are still overshooting now, we need to backtrack again
                // this happens in certain situations when diffing times in different zones,
                // because this calculation ignores time zones
                if (cursor > later) {
                    // keep the "overshot by 1" around as highWater
                    highWater = cursor;
                    // backtrack cursor by 1
                    results[unit]--;
                    cursor = earlier.plus(results);
                }
            } else cursor = highWater;
        }
    }
    return [
        cursor,
        results,
        highWater,
        lowestOrder
    ];
}
function $c70e8820d152b235$var$_diff(earlier, later, units, opts) {
    var _highOrderDiffs = $c70e8820d152b235$var$highOrderDiffs(earlier, later, units), cursor = _highOrderDiffs[0], results = _highOrderDiffs[1], highWater = _highOrderDiffs[2], lowestOrder = _highOrderDiffs[3];
    var remainingMillis = later - cursor;
    var lowerOrderUnits = units.filter(function(u) {
        return [
            "hours",
            "minutes",
            "seconds",
            "milliseconds"
        ].indexOf(u) >= 0;
    });
    if (lowerOrderUnits.length === 0) {
        if (highWater < later) {
            var _cursor$plus;
            highWater = cursor.plus((_cursor$plus = {}, _cursor$plus[lowestOrder] = 1, _cursor$plus));
        }
        if (highWater !== cursor) results[lowestOrder] = (results[lowestOrder] || 0) + remainingMillis / (highWater - cursor);
    }
    var duration = $c70e8820d152b235$var$Duration.fromObject(results, opts);
    if (lowerOrderUnits.length > 0) {
        var _Duration$fromMillis;
        return (_Duration$fromMillis = $c70e8820d152b235$var$Duration.fromMillis(remainingMillis, opts)).shiftTo.apply(_Duration$fromMillis, lowerOrderUnits).plus(duration);
    } else return duration;
}
var $c70e8820d152b235$var$numberingSystems = {
    arab: "[\u0660-\u0669]",
    arabext: "[\u06F0-\u06F9]",
    bali: "[\u1B50-\u1B59]",
    beng: "[\u09E6-\u09EF]",
    deva: "[\u0966-\u096F]",
    fullwide: "[\uFF10-\uFF19]",
    gujr: "[\u0AE6-\u0AEF]",
    hanidec: "[\u3007|\u4E00|\u4E8C|\u4E09|\u56DB|\u4E94|\u516D|\u4E03|\u516B|\u4E5D]",
    khmr: "[\u17E0-\u17E9]",
    knda: "[\u0CE6-\u0CEF]",
    laoo: "[\u0ED0-\u0ED9]",
    limb: "[\u1946-\u194F]",
    mlym: "[\u0D66-\u0D6F]",
    mong: "[\u1810-\u1819]",
    mymr: "[\u1040-\u1049]",
    orya: "[\u0B66-\u0B6F]",
    tamldec: "[\u0BE6-\u0BEF]",
    telu: "[\u0C66-\u0C6F]",
    thai: "[\u0E50-\u0E59]",
    tibt: "[\u0F20-\u0F29]",
    latn: "\\d"
};
var $c70e8820d152b235$var$numberingSystemsUTF16 = {
    arab: [
        1632,
        1641
    ],
    arabext: [
        1776,
        1785
    ],
    bali: [
        6992,
        7001
    ],
    beng: [
        2534,
        2543
    ],
    deva: [
        2406,
        2415
    ],
    fullwide: [
        65296,
        65303
    ],
    gujr: [
        2790,
        2799
    ],
    khmr: [
        6112,
        6121
    ],
    knda: [
        3302,
        3311
    ],
    laoo: [
        3792,
        3801
    ],
    limb: [
        6470,
        6479
    ],
    mlym: [
        3430,
        3439
    ],
    mong: [
        6160,
        6169
    ],
    mymr: [
        4160,
        4169
    ],
    orya: [
        2918,
        2927
    ],
    tamldec: [
        3046,
        3055
    ],
    telu: [
        3174,
        3183
    ],
    thai: [
        3664,
        3673
    ],
    tibt: [
        3872,
        3881
    ]
};
var $c70e8820d152b235$var$hanidecChars = $c70e8820d152b235$var$numberingSystems.hanidec.replace(/[\[|\]]/g, "").split("");
function $c70e8820d152b235$var$parseDigits(str) {
    var value = parseInt(str, 10);
    if (isNaN(value)) {
        value = "";
        for(var i = 0; i < str.length; i++){
            var code = str.charCodeAt(i);
            if (str[i].search($c70e8820d152b235$var$numberingSystems.hanidec) !== -1) value += $c70e8820d152b235$var$hanidecChars.indexOf(str[i]);
            else for(var key in $c70e8820d152b235$var$numberingSystemsUTF16){
                var _numberingSystemsUTF = $c70e8820d152b235$var$numberingSystemsUTF16[key], min = _numberingSystemsUTF[0], max = _numberingSystemsUTF[1];
                if (code >= min && code <= max) value += code - min;
            }
        }
        return parseInt(value, 10);
    } else return value;
}
function $c70e8820d152b235$var$digitRegex(_ref, append) {
    var numberingSystem = _ref.numberingSystem;
    if (append === void 0) append = "";
    return new RegExp("" + $c70e8820d152b235$var$numberingSystems[numberingSystem || "latn"] + append);
}
var $c70e8820d152b235$var$MISSING_FTP = "missing Intl.DateTimeFormat.formatToParts support";
function $c70e8820d152b235$var$intUnit(regex, post) {
    if (post === void 0) post = function post(i) {
        return i;
    };
    return {
        regex: regex,
        deser: function deser(_ref) {
            var s = _ref[0];
            return post($c70e8820d152b235$var$parseDigits(s));
        }
    };
}
var $c70e8820d152b235$var$NBSP = String.fromCharCode(160);
var $c70e8820d152b235$var$spaceOrNBSP = "[ " + $c70e8820d152b235$var$NBSP + "]";
var $c70e8820d152b235$var$spaceOrNBSPRegExp = new RegExp($c70e8820d152b235$var$spaceOrNBSP, "g");
function $c70e8820d152b235$var$fixListRegex(s) {
    // make dots optional and also make them literal
    // make space and non breakable space characters interchangeable
    return s.replace(/\./g, "\\.?").replace($c70e8820d152b235$var$spaceOrNBSPRegExp, $c70e8820d152b235$var$spaceOrNBSP);
}
function $c70e8820d152b235$var$stripInsensitivities(s) {
    return s.replace(/\./g, "") // ignore dots that were made optional
    .replace($c70e8820d152b235$var$spaceOrNBSPRegExp, " ") // interchange space and nbsp
    .toLowerCase();
}
function $c70e8820d152b235$var$oneOf(strings, startIndex) {
    if (strings === null) return null;
    else return {
        regex: RegExp(strings.map($c70e8820d152b235$var$fixListRegex).join("|")),
        deser: function deser(_ref2) {
            var s = _ref2[0];
            return strings.findIndex(function(i) {
                return $c70e8820d152b235$var$stripInsensitivities(s) === $c70e8820d152b235$var$stripInsensitivities(i);
            }) + startIndex;
        }
    };
}
function $c70e8820d152b235$var$offset(regex, groups) {
    return {
        regex: regex,
        deser: function deser(_ref3) {
            var h = _ref3[1], m = _ref3[2];
            return $c70e8820d152b235$var$signedOffset(h, m);
        },
        groups: groups
    };
}
function $c70e8820d152b235$var$simple(regex) {
    return {
        regex: regex,
        deser: function deser(_ref4) {
            var s = _ref4[0];
            return s;
        }
    };
}
function $c70e8820d152b235$var$escapeToken(value) {
    return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
}
/**
 * @param token
 * @param {Locale} loc
 */ function $c70e8820d152b235$var$unitForToken(token, loc) {
    var one = $c70e8820d152b235$var$digitRegex(loc), two = $c70e8820d152b235$var$digitRegex(loc, "{2}"), three = $c70e8820d152b235$var$digitRegex(loc, "{3}"), four = $c70e8820d152b235$var$digitRegex(loc, "{4}"), six = $c70e8820d152b235$var$digitRegex(loc, "{6}"), oneOrTwo = $c70e8820d152b235$var$digitRegex(loc, "{1,2}"), oneToThree = $c70e8820d152b235$var$digitRegex(loc, "{1,3}"), oneToSix = $c70e8820d152b235$var$digitRegex(loc, "{1,6}"), oneToNine = $c70e8820d152b235$var$digitRegex(loc, "{1,9}"), twoToFour = $c70e8820d152b235$var$digitRegex(loc, "{2,4}"), fourToSix = $c70e8820d152b235$var$digitRegex(loc, "{4,6}"), literal = function literal(t) {
        return {
            regex: RegExp($c70e8820d152b235$var$escapeToken(t.val)),
            deser: function deser(_ref5) {
                var s = _ref5[0];
                return s;
            },
            literal: true
        };
    }, unitate = function unitate(t) {
        if (token.literal) return literal(t);
        switch(t.val){
            // era
            case "G":
                return $c70e8820d152b235$var$oneOf(loc.eras("short"), 0);
            case "GG":
                return $c70e8820d152b235$var$oneOf(loc.eras("long"), 0);
            // years
            case "y":
                return $c70e8820d152b235$var$intUnit(oneToSix);
            case "yy":
                return $c70e8820d152b235$var$intUnit(twoToFour, $c70e8820d152b235$var$untruncateYear);
            case "yyyy":
                return $c70e8820d152b235$var$intUnit(four);
            case "yyyyy":
                return $c70e8820d152b235$var$intUnit(fourToSix);
            case "yyyyyy":
                return $c70e8820d152b235$var$intUnit(six);
            // months
            case "M":
                return $c70e8820d152b235$var$intUnit(oneOrTwo);
            case "MM":
                return $c70e8820d152b235$var$intUnit(two);
            case "MMM":
                return $c70e8820d152b235$var$oneOf(loc.months("short", true), 1);
            case "MMMM":
                return $c70e8820d152b235$var$oneOf(loc.months("long", true), 1);
            case "L":
                return $c70e8820d152b235$var$intUnit(oneOrTwo);
            case "LL":
                return $c70e8820d152b235$var$intUnit(two);
            case "LLL":
                return $c70e8820d152b235$var$oneOf(loc.months("short", false), 1);
            case "LLLL":
                return $c70e8820d152b235$var$oneOf(loc.months("long", false), 1);
            // dates
            case "d":
                return $c70e8820d152b235$var$intUnit(oneOrTwo);
            case "dd":
                return $c70e8820d152b235$var$intUnit(two);
            // ordinals
            case "o":
                return $c70e8820d152b235$var$intUnit(oneToThree);
            case "ooo":
                return $c70e8820d152b235$var$intUnit(three);
            // time
            case "HH":
                return $c70e8820d152b235$var$intUnit(two);
            case "H":
                return $c70e8820d152b235$var$intUnit(oneOrTwo);
            case "hh":
                return $c70e8820d152b235$var$intUnit(two);
            case "h":
                return $c70e8820d152b235$var$intUnit(oneOrTwo);
            case "mm":
                return $c70e8820d152b235$var$intUnit(two);
            case "m":
                return $c70e8820d152b235$var$intUnit(oneOrTwo);
            case "q":
                return $c70e8820d152b235$var$intUnit(oneOrTwo);
            case "qq":
                return $c70e8820d152b235$var$intUnit(two);
            case "s":
                return $c70e8820d152b235$var$intUnit(oneOrTwo);
            case "ss":
                return $c70e8820d152b235$var$intUnit(two);
            case "S":
                return $c70e8820d152b235$var$intUnit(oneToThree);
            case "SSS":
                return $c70e8820d152b235$var$intUnit(three);
            case "u":
                return $c70e8820d152b235$var$simple(oneToNine);
            case "uu":
                return $c70e8820d152b235$var$simple(oneOrTwo);
            case "uuu":
                return $c70e8820d152b235$var$intUnit(one);
            // meridiem
            case "a":
                return $c70e8820d152b235$var$oneOf(loc.meridiems(), 0);
            // weekYear (k)
            case "kkkk":
                return $c70e8820d152b235$var$intUnit(four);
            case "kk":
                return $c70e8820d152b235$var$intUnit(twoToFour, $c70e8820d152b235$var$untruncateYear);
            // weekNumber (W)
            case "W":
                return $c70e8820d152b235$var$intUnit(oneOrTwo);
            case "WW":
                return $c70e8820d152b235$var$intUnit(two);
            // weekdays
            case "E":
            case "c":
                return $c70e8820d152b235$var$intUnit(one);
            case "EEE":
                return $c70e8820d152b235$var$oneOf(loc.weekdays("short", false), 1);
            case "EEEE":
                return $c70e8820d152b235$var$oneOf(loc.weekdays("long", false), 1);
            case "ccc":
                return $c70e8820d152b235$var$oneOf(loc.weekdays("short", true), 1);
            case "cccc":
                return $c70e8820d152b235$var$oneOf(loc.weekdays("long", true), 1);
            // offset/zone
            case "Z":
            case "ZZ":
                return $c70e8820d152b235$var$offset(new RegExp("([+-]" + oneOrTwo.source + ")(?::(" + two.source + "))?"), 2);
            case "ZZZ":
                return $c70e8820d152b235$var$offset(new RegExp("([+-]" + oneOrTwo.source + ")(" + two.source + ")?"), 2);
            // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing
            // because we don't have any way to figure out what they are
            case "z":
                return $c70e8820d152b235$var$simple(/[a-z_+-/]{1,256}?/i);
            // this special-case "token" represents a place where a macro-token expanded into a white-space literal
            // in this case we accept any non-newline white-space
            case " ":
                return $c70e8820d152b235$var$simple(/[^\S\n\r]/);
            default:
                return literal(t);
        }
    };
    var unit = unitate(token) || {
        invalidReason: $c70e8820d152b235$var$MISSING_FTP
    };
    unit.token = token;
    return unit;
}
var $c70e8820d152b235$var$partTypeStyleToTokenVal = {
    year: {
        "2-digit": "yy",
        numeric: "yyyyy"
    },
    month: {
        numeric: "M",
        "2-digit": "MM",
        short: "MMM",
        long: "MMMM"
    },
    day: {
        numeric: "d",
        "2-digit": "dd"
    },
    weekday: {
        short: "EEE",
        long: "EEEE"
    },
    dayperiod: "a",
    dayPeriod: "a",
    hour12: {
        numeric: "h",
        "2-digit": "hh"
    },
    hour24: {
        numeric: "H",
        "2-digit": "HH"
    },
    minute: {
        numeric: "m",
        "2-digit": "mm"
    },
    second: {
        numeric: "s",
        "2-digit": "ss"
    },
    timeZoneName: {
        long: "ZZZZZ",
        short: "ZZZ"
    }
};
function $c70e8820d152b235$var$tokenForPart(part, formatOpts, resolvedOpts) {
    var type = part.type, value = part.value;
    if (type === "literal") {
        var isSpace = /^\s+$/.test(value);
        return {
            literal: !isSpace,
            val: isSpace ? " " : value
        };
    }
    var style = formatOpts[type];
    // The user might have explicitly specified hour12 or hourCycle
    // if so, respect their decision
    // if not, refer back to the resolvedOpts, which are based on the locale
    var actualType = type;
    if (type === "hour") {
        if (formatOpts.hour12 != null) actualType = formatOpts.hour12 ? "hour12" : "hour24";
        else if (formatOpts.hourCycle != null) {
            if (formatOpts.hourCycle === "h11" || formatOpts.hourCycle === "h12") actualType = "hour12";
            else actualType = "hour24";
        } else // tokens only differentiate between 24 hours or not,
        // so we do not need to check hourCycle here, which is less supported anyways
        actualType = resolvedOpts.hour12 ? "hour12" : "hour24";
    }
    var val = $c70e8820d152b235$var$partTypeStyleToTokenVal[actualType];
    if (typeof val === "object") val = val[style];
    if (val) return {
        literal: false,
        val: val
    };
    return undefined;
}
function $c70e8820d152b235$var$buildRegex(units) {
    var re = units.map(function(u) {
        return u.regex;
    }).reduce(function(f, r) {
        return f + "(" + r.source + ")";
    }, "");
    return [
        "^" + re + "$",
        units
    ];
}
function $c70e8820d152b235$var$match(input, regex, handlers) {
    var matches = input.match(regex);
    if (matches) {
        var all = {};
        var matchIndex = 1;
        for(var i in handlers)if ($c70e8820d152b235$var$hasOwnProperty(handlers, i)) {
            var h = handlers[i], groups = h.groups ? h.groups + 1 : 1;
            if (!h.literal && h.token) all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));
            matchIndex += groups;
        }
        return [
            matches,
            all
        ];
    } else return [
        matches,
        {}
    ];
}
function $c70e8820d152b235$var$dateTimeFromMatches(matches) {
    var toField = function toField(token) {
        switch(token){
            case "S":
                return "millisecond";
            case "s":
                return "second";
            case "m":
                return "minute";
            case "h":
            case "H":
                return "hour";
            case "d":
                return "day";
            case "o":
                return "ordinal";
            case "L":
            case "M":
                return "month";
            case "y":
                return "year";
            case "E":
            case "c":
                return "weekday";
            case "W":
                return "weekNumber";
            case "k":
                return "weekYear";
            case "q":
                return "quarter";
            default:
                return null;
        }
    };
    var zone = null;
    var specificOffset;
    if (!$c70e8820d152b235$var$isUndefined(matches.z)) zone = $c70e8820d152b235$var$IANAZone.create(matches.z);
    if (!$c70e8820d152b235$var$isUndefined(matches.Z)) {
        if (!zone) zone = new $c70e8820d152b235$var$FixedOffsetZone(matches.Z);
        specificOffset = matches.Z;
    }
    if (!$c70e8820d152b235$var$isUndefined(matches.q)) matches.M = (matches.q - 1) * 3 + 1;
    if (!$c70e8820d152b235$var$isUndefined(matches.h)) {
        if (matches.h < 12 && matches.a === 1) matches.h += 12;
        else if (matches.h === 12 && matches.a === 0) matches.h = 0;
    }
    if (matches.G === 0 && matches.y) matches.y = -matches.y;
    if (!$c70e8820d152b235$var$isUndefined(matches.u)) matches.S = $c70e8820d152b235$var$parseMillis(matches.u);
    var vals = Object.keys(matches).reduce(function(r, k) {
        var f = toField(k);
        if (f) r[f] = matches[k];
        return r;
    }, {});
    return [
        vals,
        zone,
        specificOffset
    ];
}
var $c70e8820d152b235$var$dummyDateTimeCache = null;
function $c70e8820d152b235$var$getDummyDateTime() {
    if (!$c70e8820d152b235$var$dummyDateTimeCache) $c70e8820d152b235$var$dummyDateTimeCache = $c70e8820d152b235$var$DateTime.fromMillis(1555555555555);
    return $c70e8820d152b235$var$dummyDateTimeCache;
}
function $c70e8820d152b235$var$maybeExpandMacroToken(token, locale) {
    if (token.literal) return token;
    var formatOpts = $c70e8820d152b235$var$Formatter.macroTokenToFormatOpts(token.val);
    var tokens = $c70e8820d152b235$var$formatOptsToTokens(formatOpts, locale);
    if (tokens == null || tokens.includes(undefined)) return token;
    return tokens;
}
function $c70e8820d152b235$var$expandMacroTokens(tokens, locale) {
    var _Array$prototype;
    return (_Array$prototype = Array.prototype).concat.apply(_Array$prototype, tokens.map(function(t) {
        return $c70e8820d152b235$var$maybeExpandMacroToken(t, locale);
    }));
}
/**
 * @private
 */ function $c70e8820d152b235$var$explainFromTokens(locale, input, format) {
    var tokens = $c70e8820d152b235$var$expandMacroTokens($c70e8820d152b235$var$Formatter.parseFormat(format), locale), units = tokens.map(function(t) {
        return $c70e8820d152b235$var$unitForToken(t, locale);
    }), disqualifyingUnit = units.find(function(t) {
        return t.invalidReason;
    });
    if (disqualifyingUnit) return {
        input: input,
        tokens: tokens,
        invalidReason: disqualifyingUnit.invalidReason
    };
    else {
        var _buildRegex = $c70e8820d152b235$var$buildRegex(units), regexString = _buildRegex[0], handlers = _buildRegex[1], regex = RegExp(regexString, "i"), _match = $c70e8820d152b235$var$match(input, regex, handlers), rawMatches = _match[0], matches = _match[1], _ref6 = matches ? $c70e8820d152b235$var$dateTimeFromMatches(matches) : [
            null,
            null,
            undefined
        ], result = _ref6[0], zone = _ref6[1], specificOffset = _ref6[2];
        if ($c70e8820d152b235$var$hasOwnProperty(matches, "a") && $c70e8820d152b235$var$hasOwnProperty(matches, "H")) throw new $c70e8820d152b235$var$ConflictingSpecificationError("Can't include meridiem when specifying 24-hour format");
        return {
            input: input,
            tokens: tokens,
            regex: regex,
            rawMatches: rawMatches,
            matches: matches,
            result: result,
            zone: zone,
            specificOffset: specificOffset
        };
    }
}
function $c70e8820d152b235$var$parseFromTokens(locale, input, format) {
    var _explainFromTokens = $c70e8820d152b235$var$explainFromTokens(locale, input, format), result = _explainFromTokens.result, zone = _explainFromTokens.zone, specificOffset = _explainFromTokens.specificOffset, invalidReason = _explainFromTokens.invalidReason;
    return [
        result,
        zone,
        specificOffset,
        invalidReason
    ];
}
function $c70e8820d152b235$var$formatOptsToTokens(formatOpts, locale) {
    if (!formatOpts) return null;
    var formatter = $c70e8820d152b235$var$Formatter.create(locale, formatOpts);
    var df = formatter.dtFormatter($c70e8820d152b235$var$getDummyDateTime());
    var parts = df.formatToParts();
    var resolvedOpts = df.resolvedOptions();
    return parts.map(function(p) {
        return $c70e8820d152b235$var$tokenForPart(p, formatOpts, resolvedOpts);
    });
}
var $c70e8820d152b235$var$INVALID = "Invalid DateTime";
var $c70e8820d152b235$var$MAX_DATE = 8.64e15;
function $c70e8820d152b235$var$unsupportedZone(zone) {
    return new $c70e8820d152b235$var$Invalid("unsupported zone", 'the zone "' + zone.name + '" is not supported');
}
// we cache week data on the DT object and this intermediates the cache
/**
 * @param {DateTime} dt
 */ function $c70e8820d152b235$var$possiblyCachedWeekData(dt) {
    if (dt.weekData === null) dt.weekData = $c70e8820d152b235$var$gregorianToWeek(dt.c);
    return dt.weekData;
}
/**
 * @param {DateTime} dt
 */ function $c70e8820d152b235$var$possiblyCachedLocalWeekData(dt) {
    if (dt.localWeekData === null) dt.localWeekData = $c70e8820d152b235$var$gregorianToWeek(dt.c, dt.loc.getMinDaysInFirstWeek(), dt.loc.getStartOfWeek());
    return dt.localWeekData;
}
// clone really means, "make a new object with these modifications". all "setters" really use this
// to create a new object while only changing some of the properties
function $c70e8820d152b235$var$clone(inst, alts) {
    var current = {
        ts: inst.ts,
        zone: inst.zone,
        c: inst.c,
        o: inst.o,
        loc: inst.loc,
        invalid: inst.invalid
    };
    return new $c70e8820d152b235$var$DateTime($c70e8820d152b235$var$_extends({}, current, alts, {
        old: current
    }));
}
// find the right offset a given local time. The o input is our guess, which determines which
// offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)
function $c70e8820d152b235$var$fixOffset(localTS, o, tz) {
    // Our UTC time is just a guess because our offset is just a guess
    var utcGuess = localTS - o * 60000;
    // Test whether the zone matches the offset for this ts
    var o2 = tz.offset(utcGuess);
    // If so, offset didn't change and we're done
    if (o === o2) return [
        utcGuess,
        o
    ];
    // If not, change the ts by the difference in the offset
    utcGuess -= (o2 - o) * 60000;
    // If that gives us the local time we want, we're done
    var o3 = tz.offset(utcGuess);
    if (o2 === o3) return [
        utcGuess,
        o2
    ];
    // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time
    return [
        localTS - Math.min(o2, o3) * 60000,
        Math.max(o2, o3)
    ];
}
// convert an epoch timestamp into a calendar object with the given offset
function $c70e8820d152b235$var$tsToObj(ts, offset) {
    ts += offset * 60000;
    var d = new Date(ts);
    return {
        year: d.getUTCFullYear(),
        month: d.getUTCMonth() + 1,
        day: d.getUTCDate(),
        hour: d.getUTCHours(),
        minute: d.getUTCMinutes(),
        second: d.getUTCSeconds(),
        millisecond: d.getUTCMilliseconds()
    };
}
// convert a calendar object to a epoch timestamp
function $c70e8820d152b235$var$objToTS(obj, offset, zone) {
    return $c70e8820d152b235$var$fixOffset($c70e8820d152b235$var$objToLocalTS(obj), offset, zone);
}
// create a new DT instance by adding a duration, adjusting for DSTs
function $c70e8820d152b235$var$adjustTime(inst, dur) {
    var oPre = inst.o, year = inst.c.year + Math.trunc(dur.years), month = inst.c.month + Math.trunc(dur.months) + Math.trunc(dur.quarters) * 3, c = $c70e8820d152b235$var$_extends({}, inst.c, {
        year: year,
        month: month,
        day: Math.min(inst.c.day, $c70e8820d152b235$var$daysInMonth(year, month)) + Math.trunc(dur.days) + Math.trunc(dur.weeks) * 7
    }), millisToAdd = $c70e8820d152b235$var$Duration.fromObject({
        years: dur.years - Math.trunc(dur.years),
        quarters: dur.quarters - Math.trunc(dur.quarters),
        months: dur.months - Math.trunc(dur.months),
        weeks: dur.weeks - Math.trunc(dur.weeks),
        days: dur.days - Math.trunc(dur.days),
        hours: dur.hours,
        minutes: dur.minutes,
        seconds: dur.seconds,
        milliseconds: dur.milliseconds
    }).as("milliseconds"), localTS = $c70e8820d152b235$var$objToLocalTS(c);
    var _fixOffset = $c70e8820d152b235$var$fixOffset(localTS, oPre, inst.zone), ts = _fixOffset[0], o = _fixOffset[1];
    if (millisToAdd !== 0) {
        ts += millisToAdd;
        // that could have changed the offset by going over a DST, but we want to keep the ts the same
        o = inst.zone.offset(ts);
    }
    return {
        ts: ts,
        o: o
    };
}
// helper useful in turning the results of parsing into real dates
// by handling the zone options
function $c70e8820d152b235$var$parseDataToDateTime(parsed, parsedZone, opts, format, text, specificOffset) {
    var setZone = opts.setZone, zone = opts.zone;
    if (parsed && Object.keys(parsed).length !== 0 || parsedZone) {
        var interpretationZone = parsedZone || zone, inst = $c70e8820d152b235$var$DateTime.fromObject(parsed, $c70e8820d152b235$var$_extends({}, opts, {
            zone: interpretationZone,
            specificOffset: specificOffset
        }));
        return setZone ? inst : inst.setZone(zone);
    } else return $c70e8820d152b235$var$DateTime.invalid(new $c70e8820d152b235$var$Invalid("unparsable", 'the input "' + text + "\" can't be parsed as " + format));
}
// if you want to output a technical format (e.g. RFC 2822), this helper
// helps handle the details
function $c70e8820d152b235$var$toTechFormat(dt, format, allowZ) {
    if (allowZ === void 0) allowZ = true;
    return dt.isValid ? $c70e8820d152b235$var$Formatter.create($c70e8820d152b235$var$Locale.create("en-US"), {
        allowZ: allowZ,
        forceSimple: true
    }).formatDateTimeFromString(dt, format) : null;
}
function $c70e8820d152b235$var$_toISODate(o, extended) {
    var longFormat = o.c.year > 9999 || o.c.year < 0;
    var c = "";
    if (longFormat && o.c.year >= 0) c += "+";
    c += $c70e8820d152b235$var$padStart(o.c.year, longFormat ? 6 : 4);
    if (extended) {
        c += "-";
        c += $c70e8820d152b235$var$padStart(o.c.month);
        c += "-";
        c += $c70e8820d152b235$var$padStart(o.c.day);
    } else {
        c += $c70e8820d152b235$var$padStart(o.c.month);
        c += $c70e8820d152b235$var$padStart(o.c.day);
    }
    return c;
}
function $c70e8820d152b235$var$_toISOTime(o, extended, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone) {
    var c = $c70e8820d152b235$var$padStart(o.c.hour);
    if (extended) {
        c += ":";
        c += $c70e8820d152b235$var$padStart(o.c.minute);
        if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) c += ":";
    } else c += $c70e8820d152b235$var$padStart(o.c.minute);
    if (o.c.millisecond !== 0 || o.c.second !== 0 || !suppressSeconds) {
        c += $c70e8820d152b235$var$padStart(o.c.second);
        if (o.c.millisecond !== 0 || !suppressMilliseconds) {
            c += ".";
            c += $c70e8820d152b235$var$padStart(o.c.millisecond, 3);
        }
    }
    if (includeOffset) {
        if (o.isOffsetFixed && o.offset === 0 && !extendedZone) c += "Z";
        else if (o.o < 0) {
            c += "-";
            c += $c70e8820d152b235$var$padStart(Math.trunc(-o.o / 60));
            c += ":";
            c += $c70e8820d152b235$var$padStart(Math.trunc(-o.o % 60));
        } else {
            c += "+";
            c += $c70e8820d152b235$var$padStart(Math.trunc(o.o / 60));
            c += ":";
            c += $c70e8820d152b235$var$padStart(Math.trunc(o.o % 60));
        }
    }
    if (extendedZone) c += "[" + o.zone.ianaName + "]";
    return c;
}
// defaults for unspecified units in the supported calendars
var $c70e8820d152b235$var$defaultUnitValues = {
    month: 1,
    day: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
}, $c70e8820d152b235$var$defaultWeekUnitValues = {
    weekNumber: 1,
    weekday: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
}, $c70e8820d152b235$var$defaultOrdinalUnitValues = {
    ordinal: 1,
    hour: 0,
    minute: 0,
    second: 0,
    millisecond: 0
};
// Units in the supported calendars, sorted by bigness
var $c70e8820d152b235$var$orderedUnits = [
    "year",
    "month",
    "day",
    "hour",
    "minute",
    "second",
    "millisecond"
], $c70e8820d152b235$var$orderedWeekUnits = [
    "weekYear",
    "weekNumber",
    "weekday",
    "hour",
    "minute",
    "second",
    "millisecond"
], $c70e8820d152b235$var$orderedOrdinalUnits = [
    "year",
    "ordinal",
    "hour",
    "minute",
    "second",
    "millisecond"
];
// standardize case and plurality in units
function $c70e8820d152b235$var$normalizeUnit(unit) {
    var normalized = {
        year: "year",
        years: "year",
        month: "month",
        months: "month",
        day: "day",
        days: "day",
        hour: "hour",
        hours: "hour",
        minute: "minute",
        minutes: "minute",
        quarter: "quarter",
        quarters: "quarter",
        second: "second",
        seconds: "second",
        millisecond: "millisecond",
        milliseconds: "millisecond",
        weekday: "weekday",
        weekdays: "weekday",
        weeknumber: "weekNumber",
        weeksnumber: "weekNumber",
        weeknumbers: "weekNumber",
        weekyear: "weekYear",
        weekyears: "weekYear",
        ordinal: "ordinal"
    }[unit.toLowerCase()];
    if (!normalized) throw new $c70e8820d152b235$var$InvalidUnitError(unit);
    return normalized;
}
function $c70e8820d152b235$var$normalizeUnitWithLocalWeeks(unit) {
    switch(unit.toLowerCase()){
        case "localweekday":
        case "localweekdays":
            return "localWeekday";
        case "localweeknumber":
        case "localweeknumbers":
            return "localWeekNumber";
        case "localweekyear":
        case "localweekyears":
            return "localWeekYear";
        default:
            return $c70e8820d152b235$var$normalizeUnit(unit);
    }
}
// this is a dumbed down version of fromObject() that runs about 60% faster
// but doesn't do any validation, makes a bunch of assumptions about what units
// are present, and so on.
function $c70e8820d152b235$var$quickDT(obj, opts) {
    var zone = $c70e8820d152b235$var$normalizeZone(opts.zone, $c70e8820d152b235$var$Settings.defaultZone), loc = $c70e8820d152b235$var$Locale.fromObject(opts), tsNow = $c70e8820d152b235$var$Settings.now();
    var ts, o;
    // assume we have the higher-order units
    if (!$c70e8820d152b235$var$isUndefined(obj.year)) {
        for(var _i = 0, _orderedUnits = $c70e8820d152b235$var$orderedUnits; _i < _orderedUnits.length; _i++){
            var u = _orderedUnits[_i];
            if ($c70e8820d152b235$var$isUndefined(obj[u])) obj[u] = $c70e8820d152b235$var$defaultUnitValues[u];
        }
        var invalid = $c70e8820d152b235$var$hasInvalidGregorianData(obj) || $c70e8820d152b235$var$hasInvalidTimeData(obj);
        if (invalid) return $c70e8820d152b235$var$DateTime.invalid(invalid);
        var offsetProvis = zone.offset(tsNow);
        var _objToTS = $c70e8820d152b235$var$objToTS(obj, offsetProvis, zone);
        ts = _objToTS[0];
        o = _objToTS[1];
    } else ts = tsNow;
    return new $c70e8820d152b235$var$DateTime({
        ts: ts,
        zone: zone,
        loc: loc,
        o: o
    });
}
function $c70e8820d152b235$var$diffRelative(start, end, opts) {
    var round = $c70e8820d152b235$var$isUndefined(opts.round) ? true : opts.round, format = function format(c, unit) {
        c = $c70e8820d152b235$var$roundTo(c, round || opts.calendary ? 0 : 2, true);
        var formatter = end.loc.clone(opts).relFormatter(opts);
        return formatter.format(c, unit);
    }, differ = function differ(unit) {
        if (opts.calendary) {
            if (!end.hasSame(start, unit)) return end.startOf(unit).diff(start.startOf(unit), unit).get(unit);
            else return 0;
        } else return end.diff(start, unit).get(unit);
    };
    if (opts.unit) return format(differ(opts.unit), opts.unit);
    for(var _iterator = $c70e8820d152b235$var$_createForOfIteratorHelperLoose(opts.units), _step; !(_step = _iterator()).done;){
        var unit = _step.value;
        var count = differ(unit);
        if (Math.abs(count) >= 1) return format(count, unit);
    }
    return format(start > end ? -0 : 0, opts.units[opts.units.length - 1]);
}
function $c70e8820d152b235$var$lastOpts(argList) {
    var opts = {}, args;
    if (argList.length > 0 && typeof argList[argList.length - 1] === "object") {
        opts = argList[argList.length - 1];
        args = Array.from(argList).slice(0, argList.length - 1);
    } else args = Array.from(argList);
    return [
        opts,
        args
    ];
}
/**
 * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.
 *
 * A DateTime comprises of:
 * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.
 * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).
 * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.
 *
 * Here is a brief overview of the most commonly used functionality it provides:
 *
 * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link DateTime.local}, {@link DateTime.utc}, and (most flexibly) {@link DateTime.fromObject}. To create one from a standard string format, use {@link DateTime.fromISO}, {@link DateTime.fromHTTP}, and {@link DateTime.fromRFC2822}. To create one from a custom string format, use {@link DateTime.fromFormat}. To create one from a native JS date, use {@link DateTime.fromJSDate}.
 * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link DateTime#toObject}), use the {@link DateTime#year}, {@link DateTime#month},
 * {@link DateTime#day}, {@link DateTime#hour}, {@link DateTime#minute}, {@link DateTime#second}, {@link DateTime#millisecond} accessors.
 * * **Week calendar**: For ISO week calendar attributes, see the {@link DateTime#weekYear}, {@link DateTime#weekNumber}, and {@link DateTime#weekday} accessors.
 * * **Configuration** See the {@link DateTime#locale} and {@link DateTime#numberingSystem} accessors.
 * * **Transformation**: To transform the DateTime into other DateTimes, use {@link DateTime#set}, {@link DateTime#reconfigure}, {@link DateTime#setZone}, {@link DateTime#setLocale}, {@link DateTime.plus}, {@link DateTime#minus}, {@link DateTime#endOf}, {@link DateTime#startOf}, {@link DateTime#toUTC}, and {@link DateTime#toLocal}.
 * * **Output**: To convert the DateTime to other representations, use the {@link DateTime#toRelative}, {@link DateTime#toRelativeCalendar}, {@link DateTime#toJSON}, {@link DateTime#toISO}, {@link DateTime#toHTTP}, {@link DateTime#toObject}, {@link DateTime#toRFC2822}, {@link DateTime#toString}, {@link DateTime#toLocaleString}, {@link DateTime#toFormat}, {@link DateTime#toMillis} and {@link DateTime#toJSDate}.
 *
 * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.
 */ var $c70e8820d152b235$var$DateTime = /*#__PURE__*/ function(_Symbol$for) {
    /**
   * @access private
   */ function DateTime(config) {
        var zone = config.zone || $c70e8820d152b235$var$Settings.defaultZone;
        var invalid = config.invalid || (Number.isNaN(config.ts) ? new $c70e8820d152b235$var$Invalid("invalid input") : null) || (!zone.isValid ? $c70e8820d152b235$var$unsupportedZone(zone) : null);
        /**
     * @access private
     */ this.ts = $c70e8820d152b235$var$isUndefined(config.ts) ? $c70e8820d152b235$var$Settings.now() : config.ts;
        var c = null, o = null;
        if (!invalid) {
            var unchanged = config.old && config.old.ts === this.ts && config.old.zone.equals(zone);
            if (unchanged) {
                var _ref = [
                    config.old.c,
                    config.old.o
                ];
                c = _ref[0];
                o = _ref[1];
            } else {
                var ot = zone.offset(this.ts);
                c = $c70e8820d152b235$var$tsToObj(this.ts, ot);
                invalid = Number.isNaN(c.year) ? new $c70e8820d152b235$var$Invalid("invalid input") : null;
                c = invalid ? null : c;
                o = invalid ? null : ot;
            }
        }
        /**
     * @access private
     */ this._zone = zone;
        /**
     * @access private
     */ this.loc = config.loc || $c70e8820d152b235$var$Locale.create();
        /**
     * @access private
     */ this.invalid = invalid;
        /**
     * @access private
     */ this.weekData = null;
        /**
     * @access private
     */ this.localWeekData = null;
        /**
     * @access private
     */ this.c = c;
        /**
     * @access private
     */ this.o = o;
        /**
     * @access private
     */ this.isLuxonDateTime = true;
    }
    // CONSTRUCT
    /**
   * Create a DateTime for the current instant, in the system's time zone.
   *
   * Use Settings to override these default values if needed.
   * @example DateTime.now().toISO() //~> now in the ISO format
   * @return {DateTime}
   */ DateTime.now = function now() {
        return new DateTime({});
    } /**
   * Create a local DateTime
   * @param {number} [year] - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used
   * @param {number} [month=1] - The month, 1-indexed
   * @param {number} [day=1] - The day of the month, 1-indexed
   * @param {number} [hour=0] - The hour of the day, in 24-hour time
   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
   * @example DateTime.local()                                  //~> now
   * @example DateTime.local({ zone: "America/New_York" })      //~> now, in US east coast time
   * @example DateTime.local(2017)                              //~> 2017-01-01T00:00:00
   * @example DateTime.local(2017, 3)                           //~> 2017-03-01T00:00:00
   * @example DateTime.local(2017, 3, 12, { locale: "fr" })     //~> 2017-03-12T00:00:00, with a French locale
   * @example DateTime.local(2017, 3, 12, 5)                    //~> 2017-03-12T05:00:00
   * @example DateTime.local(2017, 3, 12, 5, { zone: "utc" })   //~> 2017-03-12T05:00:00, in UTC
   * @example DateTime.local(2017, 3, 12, 5, 45)                //~> 2017-03-12T05:45:00
   * @example DateTime.local(2017, 3, 12, 5, 45, 10)            //~> 2017-03-12T05:45:10
   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765)       //~> 2017-03-12T05:45:10.765
   * @return {DateTime}
   */ ;
    DateTime.local = function local() {
        var _lastOpts = $c70e8820d152b235$var$lastOpts(arguments), opts = _lastOpts[0], args = _lastOpts[1], year = args[0], month = args[1], day = args[2], hour = args[3], minute = args[4], second = args[5], millisecond = args[6];
        return $c70e8820d152b235$var$quickDT({
            year: year,
            month: month,
            day: day,
            hour: hour,
            minute: minute,
            second: second,
            millisecond: millisecond
        }, opts);
    } /**
   * Create a DateTime in UTC
   * @param {number} [year] - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used
   * @param {number} [month=1] - The month, 1-indexed
   * @param {number} [day=1] - The day of the month
   * @param {number} [hour=0] - The hour of the day, in 24-hour time
   * @param {number} [minute=0] - The minute of the hour, meaning a number between 0 and 59
   * @param {number} [second=0] - The second of the minute, meaning a number between 0 and 59
   * @param {number} [millisecond=0] - The millisecond of the second, meaning a number between 0 and 999
   * @param {Object} options - configuration options for the DateTime
   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
   * @param {string} [options.outputCalendar] - the output calendar to set on the resulting DateTime instance
   * @param {string} [options.numberingSystem] - the numbering system to set on the resulting DateTime instance
   * @example DateTime.utc()                                              //~> now
   * @example DateTime.utc(2017)                                          //~> 2017-01-01T00:00:00Z
   * @example DateTime.utc(2017, 3)                                       //~> 2017-03-01T00:00:00Z
   * @example DateTime.utc(2017, 3, 12)                                   //~> 2017-03-12T00:00:00Z
   * @example DateTime.utc(2017, 3, 12, 5)                                //~> 2017-03-12T05:00:00Z
   * @example DateTime.utc(2017, 3, 12, 5, 45)                            //~> 2017-03-12T05:45:00Z
   * @example DateTime.utc(2017, 3, 12, 5, 45, { locale: "fr" })          //~> 2017-03-12T05:45:00Z with a French locale
   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)                        //~> 2017-03-12T05:45:10Z
   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765, { locale: "fr" }) //~> 2017-03-12T05:45:10.765Z with a French locale
   * @return {DateTime}
   */ ;
    DateTime.utc = function utc() {
        var _lastOpts2 = $c70e8820d152b235$var$lastOpts(arguments), opts = _lastOpts2[0], args = _lastOpts2[1], year = args[0], month = args[1], day = args[2], hour = args[3], minute = args[4], second = args[5], millisecond = args[6];
        opts.zone = $c70e8820d152b235$var$FixedOffsetZone.utcInstance;
        return $c70e8820d152b235$var$quickDT({
            year: year,
            month: month,
            day: day,
            hour: hour,
            minute: minute,
            second: second,
            millisecond: millisecond
        }, opts);
    } /**
   * Create a DateTime from a JavaScript Date object. Uses the default zone.
   * @param {Date} date - a JavaScript Date object
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @return {DateTime}
   */ ;
    DateTime.fromJSDate = function fromJSDate(date, options) {
        if (options === void 0) options = {};
        var ts = $c70e8820d152b235$var$isDate(date) ? date.valueOf() : NaN;
        if (Number.isNaN(ts)) return DateTime.invalid("invalid input");
        var zoneToUse = $c70e8820d152b235$var$normalizeZone(options.zone, $c70e8820d152b235$var$Settings.defaultZone);
        if (!zoneToUse.isValid) return DateTime.invalid($c70e8820d152b235$var$unsupportedZone(zoneToUse));
        return new DateTime({
            ts: ts,
            zone: zoneToUse,
            loc: $c70e8820d152b235$var$Locale.fromObject(options)
        });
    } /**
   * Create a DateTime from a number of milliseconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
   * @param {number} milliseconds - a number of milliseconds since 1970 UTC
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @return {DateTime}
   */ ;
    DateTime.fromMillis = function fromMillis(milliseconds, options) {
        if (options === void 0) options = {};
        if (!$c70e8820d152b235$var$isNumber(milliseconds)) throw new $c70e8820d152b235$var$InvalidArgumentError("fromMillis requires a numerical input, but received a " + typeof milliseconds + " with value " + milliseconds);
        else if (milliseconds < -$c70e8820d152b235$var$MAX_DATE || milliseconds > $c70e8820d152b235$var$MAX_DATE) // this isn't perfect because because we can still end up out of range because of additional shifting, but it's a start
        return DateTime.invalid("Timestamp out of range");
        else return new DateTime({
            ts: milliseconds,
            zone: $c70e8820d152b235$var$normalizeZone(options.zone, $c70e8820d152b235$var$Settings.defaultZone),
            loc: $c70e8820d152b235$var$Locale.fromObject(options)
        });
    } /**
   * Create a DateTime from a number of seconds since the epoch (meaning since 1 January 1970 00:00:00 UTC). Uses the default zone.
   * @param {number} seconds - a number of seconds since 1970 UTC
   * @param {Object} options - configuration options for the DateTime
   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into
   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance
   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @return {DateTime}
   */ ;
    DateTime.fromSeconds = function fromSeconds(seconds, options) {
        if (options === void 0) options = {};
        if (!$c70e8820d152b235$var$isNumber(seconds)) throw new $c70e8820d152b235$var$InvalidArgumentError("fromSeconds requires a numerical input");
        else return new DateTime({
            ts: seconds * 1000,
            zone: $c70e8820d152b235$var$normalizeZone(options.zone, $c70e8820d152b235$var$Settings.defaultZone),
            loc: $c70e8820d152b235$var$Locale.fromObject(options)
        });
    } /**
   * Create a DateTime from a JavaScript object with keys like 'year' and 'hour' with reasonable defaults.
   * @param {Object} obj - the object to create the DateTime from
   * @param {number} obj.year - a year, such as 1987
   * @param {number} obj.month - a month, 1-12
   * @param {number} obj.day - a day of the month, 1-31, depending on the month
   * @param {number} obj.ordinal - day of the year, 1-365 or 366
   * @param {number} obj.weekYear - an ISO week year
   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year
   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday
   * @param {number} obj.localWeekYear - a week year, according to the locale
   * @param {number} obj.localWeekNumber - a week number, between 1 and 52 or 53, depending on the year, according to the locale
   * @param {number} obj.localWeekday - a weekday, 1-7, where 1 is the first and 7 is the last day of the week, according to the locale
   * @param {number} obj.hour - hour of the day, 0-23
   * @param {number} obj.minute - minute of the hour, 0-59
   * @param {number} obj.second - second of the minute, 0-59
   * @param {number} obj.millisecond - millisecond of the second, 0-999
   * @param {Object} opts - options for creating this DateTime
   * @param {string|Zone} [opts.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()
   * @param {string} [opts.locale='system\'s locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'
   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01'
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'utc' }),
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'local' })
   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }, { zone: 'America/New_York' })
   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'
   * @example DateTime.fromObject({ localWeekYear: 2022, localWeekNumber: 1, localWeekday: 1 }, { locale: "en-US" }).toISODate() //=> '2021-12-26'
   * @return {DateTime}
   */ ;
    DateTime.fromObject = function fromObject(obj, opts) {
        if (opts === void 0) opts = {};
        obj = obj || {};
        var zoneToUse = $c70e8820d152b235$var$normalizeZone(opts.zone, $c70e8820d152b235$var$Settings.defaultZone);
        if (!zoneToUse.isValid) return DateTime.invalid($c70e8820d152b235$var$unsupportedZone(zoneToUse));
        var loc = $c70e8820d152b235$var$Locale.fromObject(opts);
        var normalized = $c70e8820d152b235$var$normalizeObject(obj, $c70e8820d152b235$var$normalizeUnitWithLocalWeeks);
        var _usesLocalWeekValues = $c70e8820d152b235$var$usesLocalWeekValues(normalized, loc), minDaysInFirstWeek = _usesLocalWeekValues.minDaysInFirstWeek, startOfWeek = _usesLocalWeekValues.startOfWeek;
        var tsNow = $c70e8820d152b235$var$Settings.now(), offsetProvis = !$c70e8820d152b235$var$isUndefined(opts.specificOffset) ? opts.specificOffset : zoneToUse.offset(tsNow), containsOrdinal = !$c70e8820d152b235$var$isUndefined(normalized.ordinal), containsGregorYear = !$c70e8820d152b235$var$isUndefined(normalized.year), containsGregorMD = !$c70e8820d152b235$var$isUndefined(normalized.month) || !$c70e8820d152b235$var$isUndefined(normalized.day), containsGregor = containsGregorYear || containsGregorMD, definiteWeekDef = normalized.weekYear || normalized.weekNumber;
        // cases:
        // just a weekday -> this week's instance of that weekday, no worries
        // (gregorian data or ordinal) + (weekYear or weekNumber) -> error
        // (gregorian month or day) + ordinal -> error
        // otherwise just use weeks or ordinals or gregorian, depending on what's specified
        if ((containsGregor || containsOrdinal) && definiteWeekDef) throw new $c70e8820d152b235$var$ConflictingSpecificationError("Can't mix weekYear/weekNumber units with year/month/day or ordinals");
        if (containsGregorMD && containsOrdinal) throw new $c70e8820d152b235$var$ConflictingSpecificationError("Can't mix ordinal dates with month/day");
        var useWeekData = definiteWeekDef || normalized.weekday && !containsGregor;
        // configure ourselves to deal with gregorian dates or week stuff
        var units, defaultValues, objNow = $c70e8820d152b235$var$tsToObj(tsNow, offsetProvis);
        if (useWeekData) {
            units = $c70e8820d152b235$var$orderedWeekUnits;
            defaultValues = $c70e8820d152b235$var$defaultWeekUnitValues;
            objNow = $c70e8820d152b235$var$gregorianToWeek(objNow, minDaysInFirstWeek, startOfWeek);
        } else if (containsOrdinal) {
            units = $c70e8820d152b235$var$orderedOrdinalUnits;
            defaultValues = $c70e8820d152b235$var$defaultOrdinalUnitValues;
            objNow = $c70e8820d152b235$var$gregorianToOrdinal(objNow);
        } else {
            units = $c70e8820d152b235$var$orderedUnits;
            defaultValues = $c70e8820d152b235$var$defaultUnitValues;
        }
        // set default values for missing stuff
        var foundFirst = false;
        for(var _iterator2 = $c70e8820d152b235$var$_createForOfIteratorHelperLoose(units), _step2; !(_step2 = _iterator2()).done;){
            var u = _step2.value;
            var v = normalized[u];
            if (!$c70e8820d152b235$var$isUndefined(v)) foundFirst = true;
            else if (foundFirst) normalized[u] = defaultValues[u];
            else normalized[u] = objNow[u];
        }
        // make sure the values we have are in range
        var higherOrderInvalid = useWeekData ? $c70e8820d152b235$var$hasInvalidWeekData(normalized, minDaysInFirstWeek, startOfWeek) : containsOrdinal ? $c70e8820d152b235$var$hasInvalidOrdinalData(normalized) : $c70e8820d152b235$var$hasInvalidGregorianData(normalized), invalid = higherOrderInvalid || $c70e8820d152b235$var$hasInvalidTimeData(normalized);
        if (invalid) return DateTime.invalid(invalid);
        // compute the actual time
        var gregorian = useWeekData ? $c70e8820d152b235$var$weekToGregorian(normalized, minDaysInFirstWeek, startOfWeek) : containsOrdinal ? $c70e8820d152b235$var$ordinalToGregorian(normalized) : normalized, _objToTS2 = $c70e8820d152b235$var$objToTS(gregorian, offsetProvis, zoneToUse), tsFinal = _objToTS2[0], offsetFinal = _objToTS2[1], inst = new DateTime({
            ts: tsFinal,
            zone: zoneToUse,
            o: offsetFinal,
            loc: loc
        });
        // gregorian data + weekday serves only to validate
        if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) return DateTime.invalid("mismatched weekday", "you can't specify both a weekday of " + normalized.weekday + " and a date of " + inst.toISO());
        return inst;
    } /**
   * Create a DateTime from an ISO 8601 string
   * @param {string} text - the ISO string
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} [opts.outputCalendar] - the output calendar to set on the resulting DateTime instance
   * @param {string} [opts.numberingSystem] - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromISO('2016-05-25T09:08:34.123')
   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')
   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})
   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc'})
   * @example DateTime.fromISO('2016-W05-4')
   * @return {DateTime}
   */ ;
    DateTime.fromISO = function fromISO(text, opts) {
        if (opts === void 0) opts = {};
        var _parseISODate = $c70e8820d152b235$var$parseISODate(text), vals = _parseISODate[0], parsedZone = _parseISODate[1];
        return $c70e8820d152b235$var$parseDataToDateTime(vals, parsedZone, opts, "ISO 8601", text);
    } /**
   * Create a DateTime from an RFC 2822 string
   * @param {string} text - the RFC 2822 string
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')
   * @example DateTime.fromRFC2822('Fri, 25 Nov 2016 13:23:12 +0600')
   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')
   * @return {DateTime}
   */ ;
    DateTime.fromRFC2822 = function fromRFC2822(text, opts) {
        if (opts === void 0) opts = {};
        var _parseRFC2822Date = $c70e8820d152b235$var$parseRFC2822Date(text), vals = _parseRFC2822Date[0], parsedZone = _parseRFC2822Date[1];
        return $c70e8820d152b235$var$parseDataToDateTime(vals, parsedZone, opts, "RFC 2822", text);
    } /**
   * Create a DateTime from an HTTP header date
   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
   * @param {string} text - the HTTP header date
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.
   * @param {boolean} [opts.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.
   * @param {string} [opts.locale='system's locale'] - a locale to set on the resulting DateTime instance
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance
   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')
   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')
   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')
   * @return {DateTime}
   */ ;
    DateTime.fromHTTP = function fromHTTP(text, opts) {
        if (opts === void 0) opts = {};
        var _parseHTTPDate = $c70e8820d152b235$var$parseHTTPDate(text), vals = _parseHTTPDate[0], parsedZone = _parseHTTPDate[1];
        return $c70e8820d152b235$var$parseDataToDateTime(vals, parsedZone, opts, "HTTP", opts);
    } /**
   * Create a DateTime from an input string and format string.
   * Defaults to en-US if no locale has been specified, regardless of the system's locale. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/parsing?id=table-of-tokens).
   * @param {string} text - the string to parse
   * @param {string} fmt - the format the string is expected to be in (see the link below for the formats)
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @return {DateTime}
   */ ;
    DateTime.fromFormat = function fromFormat(text, fmt, opts) {
        if (opts === void 0) opts = {};
        if ($c70e8820d152b235$var$isUndefined(text) || $c70e8820d152b235$var$isUndefined(fmt)) throw new $c70e8820d152b235$var$InvalidArgumentError("fromFormat requires an input string and a format");
        var _opts = opts, _opts$locale = _opts.locale, locale = _opts$locale === void 0 ? null : _opts$locale, _opts$numberingSystem = _opts.numberingSystem, numberingSystem = _opts$numberingSystem === void 0 ? null : _opts$numberingSystem, localeToUse = $c70e8820d152b235$var$Locale.fromOpts({
            locale: locale,
            numberingSystem: numberingSystem,
            defaultToEN: true
        }), _parseFromTokens = $c70e8820d152b235$var$parseFromTokens(localeToUse, text, fmt), vals = _parseFromTokens[0], parsedZone = _parseFromTokens[1], specificOffset = _parseFromTokens[2], invalid = _parseFromTokens[3];
        if (invalid) return DateTime.invalid(invalid);
        else return $c70e8820d152b235$var$parseDataToDateTime(vals, parsedZone, opts, "format " + fmt, text, specificOffset);
    } /**
   * @deprecated use fromFormat instead
   */ ;
    DateTime.fromString = function fromString(text, fmt, opts) {
        if (opts === void 0) opts = {};
        return DateTime.fromFormat(text, fmt, opts);
    } /**
   * Create a DateTime from a SQL date, time, or datetime
   * Defaults to en-US if no locale has been specified, regardless of the system's locale
   * @param {string} text - the string to parse
   * @param {Object} opts - options to affect the creation
   * @param {string|Zone} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone
   * @param {boolean} [opts.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one
   * @param {string} [opts.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale
   * @param {string} opts.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system
   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance
   * @example DateTime.fromSQL('2017-05-15')
   * @example DateTime.fromSQL('2017-05-15 09:12:34')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })
   * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })
   * @example DateTime.fromSQL('09:12:34.342')
   * @return {DateTime}
   */ ;
    DateTime.fromSQL = function fromSQL(text, opts) {
        if (opts === void 0) opts = {};
        var _parseSQL = $c70e8820d152b235$var$parseSQL(text), vals = _parseSQL[0], parsedZone = _parseSQL[1];
        return $c70e8820d152b235$var$parseDataToDateTime(vals, parsedZone, opts, "SQL", text);
    } /**
   * Create an invalid DateTime.
   * @param {string} reason - simple string of why this DateTime is invalid. Should not contain parameters or anything else data-dependent.
   * @param {string} [explanation=null] - longer explanation, may include parameters and other useful debugging information
   * @return {DateTime}
   */ ;
    DateTime.invalid = function invalid(reason, explanation) {
        if (explanation === void 0) explanation = null;
        if (!reason) throw new $c70e8820d152b235$var$InvalidArgumentError("need to specify a reason the DateTime is invalid");
        var invalid = reason instanceof $c70e8820d152b235$var$Invalid ? reason : new $c70e8820d152b235$var$Invalid(reason, explanation);
        if ($c70e8820d152b235$var$Settings.throwOnInvalid) throw new $c70e8820d152b235$var$InvalidDateTimeError(invalid);
        else return new DateTime({
            invalid: invalid
        });
    } /**
   * Check if an object is an instance of DateTime. Works across context boundaries
   * @param {object} o
   * @return {boolean}
   */ ;
    DateTime.isDateTime = function isDateTime(o) {
        return o && o.isLuxonDateTime || false;
    } /**
   * Produce the format string for a set of options
   * @param formatOpts
   * @param localeOpts
   * @returns {string}
   */ ;
    DateTime.parseFormatForOpts = function parseFormatForOpts(formatOpts, localeOpts) {
        if (localeOpts === void 0) localeOpts = {};
        var tokenList = $c70e8820d152b235$var$formatOptsToTokens(formatOpts, $c70e8820d152b235$var$Locale.fromObject(localeOpts));
        return !tokenList ? null : tokenList.map(function(t) {
            return t ? t.val : null;
        }).join("");
    } /**
   * Produce the the fully expanded format token for the locale
   * Does NOT quote characters, so quoted tokens will not round trip correctly
   * @param fmt
   * @param localeOpts
   * @returns {string}
   */ ;
    DateTime.expandFormat = function expandFormat(fmt, localeOpts) {
        if (localeOpts === void 0) localeOpts = {};
        var expanded = $c70e8820d152b235$var$expandMacroTokens($c70e8820d152b235$var$Formatter.parseFormat(fmt), $c70e8820d152b235$var$Locale.fromObject(localeOpts));
        return expanded.map(function(t) {
            return t.val;
        }).join("");
    } /**
   * Get the value of unit.
   * @param {string} unit - a unit such as 'minute' or 'day'
   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7
   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4
   * @return {number}
   */ ;
    var _proto = DateTime.prototype;
    _proto.get = function get(unit) {
        return this[unit];
    } /**
   * Returns whether the DateTime is valid. Invalid DateTimes occur when:
   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30
   * * The DateTime was created by an operation on another invalid date
   * @type {boolean}
   */ ;
    /**
   * Get those DateTimes which have the same local time as this DateTime, but a different offset from UTC
   * in this DateTime's zone. During DST changes local time can be ambiguous, for example
   * `2023-10-29T02:30:00` in `Europe/Berlin` can have offset `+01:00` or `+02:00`.
   * This method will return both possible DateTimes if this DateTime's local time is ambiguous.
   * @returns {DateTime[]}
   */ _proto.getPossibleOffsets = function getPossibleOffsets() {
        if (!this.isValid || this.isOffsetFixed) return [
            this
        ];
        var dayMs = 86400000;
        var minuteMs = 60000;
        var localTS = $c70e8820d152b235$var$objToLocalTS(this.c);
        var oEarlier = this.zone.offset(localTS - dayMs);
        var oLater = this.zone.offset(localTS + dayMs);
        var o1 = this.zone.offset(localTS - oEarlier * minuteMs);
        var o2 = this.zone.offset(localTS - oLater * minuteMs);
        if (o1 === o2) return [
            this
        ];
        var ts1 = localTS - o1 * minuteMs;
        var ts2 = localTS - o2 * minuteMs;
        var c1 = $c70e8820d152b235$var$tsToObj(ts1, o1);
        var c2 = $c70e8820d152b235$var$tsToObj(ts2, o2);
        if (c1.hour === c2.hour && c1.minute === c2.minute && c1.second === c2.second && c1.millisecond === c2.millisecond) return [
            $c70e8820d152b235$var$clone(this, {
                ts: ts1
            }),
            $c70e8820d152b235$var$clone(this, {
                ts: ts2
            })
        ];
        return [
            this
        ];
    } /**
   * Returns true if this DateTime is in a leap year, false otherwise
   * @example DateTime.local(2016).isInLeapYear //=> true
   * @example DateTime.local(2013).isInLeapYear //=> false
   * @type {boolean}
   */ ;
    /**
   * Returns the resolved Intl options for this DateTime.
   * This is useful in understanding the behavior of formatting methods
   * @param {Object} opts - the same options as toLocaleString
   * @return {Object}
   */ _proto.resolvedLocaleOptions = function resolvedLocaleOptions(opts) {
        if (opts === void 0) opts = {};
        var _Formatter$create$res = $c70e8820d152b235$var$Formatter.create(this.loc.clone(opts), opts).resolvedOptions(this), locale = _Formatter$create$res.locale, numberingSystem = _Formatter$create$res.numberingSystem, calendar = _Formatter$create$res.calendar;
        return {
            locale: locale,
            numberingSystem: numberingSystem,
            outputCalendar: calendar
        };
    } /**
   * "Set" the DateTime's zone to UTC. Returns a newly-constructed DateTime.
   *
   * Equivalent to {@link DateTime#setZone}('utc')
   * @param {number} [offset=0] - optionally, an offset from UTC in minutes
   * @param {Object} [opts={}] - options to pass to `setZone()`
   * @return {DateTime}
   */ ;
    _proto.toUTC = function toUTC(offset, opts) {
        if (offset === void 0) offset = 0;
        if (opts === void 0) opts = {};
        return this.setZone($c70e8820d152b235$var$FixedOffsetZone.instance(offset), opts);
    } /**
   * "Set" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.
   *
   * Equivalent to `setZone('local')`
   * @return {DateTime}
   */ ;
    _proto.toLocal = function toLocal() {
        return this.setZone($c70e8820d152b235$var$Settings.defaultZone);
    } /**
   * "Set" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.
   *
   * By default, the setter keeps the underlying time the same (as in, the same timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link DateTime#plus}. You may wish to use {@link DateTime#toLocal} and {@link DateTime#toUTC} which provide simple convenience wrappers for commonly used zones.
   * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'UTC+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link DateTime#Zone} class.
   * @param {Object} opts - options
   * @param {boolean} [opts.keepLocalTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.
   * @return {DateTime}
   */ ;
    _proto.setZone = function setZone(zone, _temp) {
        var _ref2 = _temp === void 0 ? {} : _temp, _ref2$keepLocalTime = _ref2.keepLocalTime, keepLocalTime = _ref2$keepLocalTime === void 0 ? false : _ref2$keepLocalTime, _ref2$keepCalendarTim = _ref2.keepCalendarTime, keepCalendarTime = _ref2$keepCalendarTim === void 0 ? false : _ref2$keepCalendarTim;
        zone = $c70e8820d152b235$var$normalizeZone(zone, $c70e8820d152b235$var$Settings.defaultZone);
        if (zone.equals(this.zone)) return this;
        else if (!zone.isValid) return DateTime.invalid($c70e8820d152b235$var$unsupportedZone(zone));
        else {
            var newTS = this.ts;
            if (keepLocalTime || keepCalendarTime) {
                var offsetGuess = zone.offset(this.ts);
                var asObj = this.toObject();
                var _objToTS3 = $c70e8820d152b235$var$objToTS(asObj, offsetGuess, zone);
                newTS = _objToTS3[0];
            }
            return $c70e8820d152b235$var$clone(this, {
                ts: newTS,
                zone: zone
            });
        }
    } /**
   * "Set" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.
   * @param {Object} properties - the properties to set
   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })
   * @return {DateTime}
   */ ;
    _proto.reconfigure = function reconfigure(_temp2) {
        var _ref3 = _temp2 === void 0 ? {} : _temp2, locale = _ref3.locale, numberingSystem = _ref3.numberingSystem, outputCalendar = _ref3.outputCalendar;
        var loc = this.loc.clone({
            locale: locale,
            numberingSystem: numberingSystem,
            outputCalendar: outputCalendar
        });
        return $c70e8820d152b235$var$clone(this, {
            loc: loc
        });
    } /**
   * "Set" the locale. Returns a newly-constructed DateTime.
   * Just a convenient alias for reconfigure({ locale })
   * @example DateTime.local(2017, 5, 25).setLocale('en-GB')
   * @return {DateTime}
   */ ;
    _proto.setLocale = function setLocale(locale) {
        return this.reconfigure({
            locale: locale
        });
    } /**
   * "Set" the values of specified units. Returns a newly-constructed DateTime.
   * You can only set units with this method; for "setting" metadata, see {@link DateTime#reconfigure} and {@link DateTime#setZone}.
   *
   * This method also supports setting locale-based week units, i.e. `localWeekday`, `localWeekNumber` and `localWeekYear`.
   * They cannot be mixed with ISO-week units like `weekday`.
   * @param {Object} values - a mapping of units to numbers
   * @example dt.set({ year: 2017 })
   * @example dt.set({ hour: 8, minute: 30 })
   * @example dt.set({ weekday: 5 })
   * @example dt.set({ year: 2005, ordinal: 234 })
   * @return {DateTime}
   */ ;
    _proto.set = function set(values) {
        if (!this.isValid) return this;
        var normalized = $c70e8820d152b235$var$normalizeObject(values, $c70e8820d152b235$var$normalizeUnitWithLocalWeeks);
        var _usesLocalWeekValues2 = $c70e8820d152b235$var$usesLocalWeekValues(normalized, this.loc), minDaysInFirstWeek = _usesLocalWeekValues2.minDaysInFirstWeek, startOfWeek = _usesLocalWeekValues2.startOfWeek;
        var settingWeekStuff = !$c70e8820d152b235$var$isUndefined(normalized.weekYear) || !$c70e8820d152b235$var$isUndefined(normalized.weekNumber) || !$c70e8820d152b235$var$isUndefined(normalized.weekday), containsOrdinal = !$c70e8820d152b235$var$isUndefined(normalized.ordinal), containsGregorYear = !$c70e8820d152b235$var$isUndefined(normalized.year), containsGregorMD = !$c70e8820d152b235$var$isUndefined(normalized.month) || !$c70e8820d152b235$var$isUndefined(normalized.day), containsGregor = containsGregorYear || containsGregorMD, definiteWeekDef = normalized.weekYear || normalized.weekNumber;
        if ((containsGregor || containsOrdinal) && definiteWeekDef) throw new $c70e8820d152b235$var$ConflictingSpecificationError("Can't mix weekYear/weekNumber units with year/month/day or ordinals");
        if (containsGregorMD && containsOrdinal) throw new $c70e8820d152b235$var$ConflictingSpecificationError("Can't mix ordinal dates with month/day");
        var mixed;
        if (settingWeekStuff) mixed = $c70e8820d152b235$var$weekToGregorian($c70e8820d152b235$var$_extends({}, $c70e8820d152b235$var$gregorianToWeek(this.c, minDaysInFirstWeek, startOfWeek), normalized), minDaysInFirstWeek, startOfWeek);
        else if (!$c70e8820d152b235$var$isUndefined(normalized.ordinal)) mixed = $c70e8820d152b235$var$ordinalToGregorian($c70e8820d152b235$var$_extends({}, $c70e8820d152b235$var$gregorianToOrdinal(this.c), normalized));
        else {
            mixed = $c70e8820d152b235$var$_extends({}, this.toObject(), normalized);
            // if we didn't set the day but we ended up on an overflow date,
            // use the last day of the right month
            if ($c70e8820d152b235$var$isUndefined(normalized.day)) mixed.day = Math.min($c70e8820d152b235$var$daysInMonth(mixed.year, mixed.month), mixed.day);
        }
        var _objToTS4 = $c70e8820d152b235$var$objToTS(mixed, this.o, this.zone), ts = _objToTS4[0], o = _objToTS4[1];
        return $c70e8820d152b235$var$clone(this, {
            ts: ts,
            o: o
        });
    } /**
   * Add a period of time to this DateTime and return the resulting DateTime
   *
   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.
   * @param {Duration|Object|number} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   * @example DateTime.now().plus(123) //~> in 123 milliseconds
   * @example DateTime.now().plus({ minutes: 15 }) //~> in 15 minutes
   * @example DateTime.now().plus({ days: 1 }) //~> this time tomorrow
   * @example DateTime.now().plus({ days: -1 }) //~> this time yesterday
   * @example DateTime.now().plus({ hours: 3, minutes: 13 }) //~> in 3 hr, 13 min
   * @example DateTime.now().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 3 hr, 13 min
   * @return {DateTime}
   */ ;
    _proto.plus = function plus(duration) {
        if (!this.isValid) return this;
        var dur = $c70e8820d152b235$var$Duration.fromDurationLike(duration);
        return $c70e8820d152b235$var$clone(this, $c70e8820d152b235$var$adjustTime(this, dur));
    } /**
   * Subtract a period of time to this DateTime and return the resulting DateTime
   * See {@link DateTime#plus}
   * @param {Duration|Object|number} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()
   @return {DateTime}
   */ ;
    _proto.minus = function minus(duration) {
        if (!this.isValid) return this;
        var dur = $c70e8820d152b235$var$Duration.fromDurationLike(duration).negate();
        return $c70e8820d152b235$var$clone(this, $c70e8820d152b235$var$adjustTime(this, dur));
    } /**
   * "Set" this DateTime to the beginning of a unit of time.
   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
   * @param {Object} opts - options
   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week
   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'
   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'
   * @example DateTime.local(2014, 3, 3).startOf('week').toISODate(); //=> '2014-03-03', weeks always start on Mondays
   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'
   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'
   * @return {DateTime}
   */ ;
    _proto.startOf = function startOf(unit, _temp3) {
        var _ref4 = _temp3 === void 0 ? {} : _temp3, _ref4$useLocaleWeeks = _ref4.useLocaleWeeks, useLocaleWeeks = _ref4$useLocaleWeeks === void 0 ? false : _ref4$useLocaleWeeks;
        if (!this.isValid) return this;
        var o = {}, normalizedUnit = $c70e8820d152b235$var$Duration.normalizeUnit(unit);
        switch(normalizedUnit){
            case "years":
                o.month = 1;
            // falls through
            case "quarters":
            case "months":
                o.day = 1;
            // falls through
            case "weeks":
            case "days":
                o.hour = 0;
            // falls through
            case "hours":
                o.minute = 0;
            // falls through
            case "minutes":
                o.second = 0;
            // falls through
            case "seconds":
                o.millisecond = 0;
                break;
        }
        if (normalizedUnit === "weeks") {
            if (useLocaleWeeks) {
                var startOfWeek = this.loc.getStartOfWeek();
                var weekday = this.weekday;
                if (weekday < startOfWeek) o.weekNumber = this.weekNumber - 1;
                o.weekday = startOfWeek;
            } else o.weekday = 1;
        }
        if (normalizedUnit === "quarters") {
            var q = Math.ceil(this.month / 3);
            o.month = (q - 1) * 3 + 1;
        }
        return this.set(o);
    } /**
   * "Set" this DateTime to the end (meaning the last millisecond) of a unit of time
   * @param {string} unit - The unit to go to the end of. Can be 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', or 'millisecond'.
   * @param {Object} opts - options
   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week
   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-31T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3).endOf('week').toISO(); // => '2014-03-09T23:59:59.999-05:00', weeks start on Mondays
   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'
   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'
   * @return {DateTime}
   */ ;
    _proto.endOf = function endOf(unit, opts) {
        var _this$plus;
        return this.isValid ? this.plus((_this$plus = {}, _this$plus[unit] = 1, _this$plus)).startOf(unit, opts).minus(1) : this;
    } /**
   * Returns a string representation of this DateTime formatted according to the specified format string.
   * **You may not want this.** See {@link DateTime#toLocaleString} for a more flexible formatting tool. For a table of tokens and their interpretations, see [here](https://moment.github.io/luxon/#/formatting?id=table-of-tokens).
   * Defaults to en-US if no locale has been specified, regardless of the system's locale.
   * @param {string} fmt - the format string
   * @param {Object} opts - opts to override the configuration options on this DateTime
   * @example DateTime.now().toFormat('yyyy LLL dd') //=> '2017 Apr 22'
   * @example DateTime.now().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 avr. 22'
   * @example DateTime.now().toFormat('yyyy LLL dd', { locale: "fr" }) //=> '2017 avr. 22'
   * @example DateTime.now().toFormat("HH 'hours and' mm 'minutes'") //=> '20 hours and 55 minutes'
   * @return {string}
   */ ;
    _proto.toFormat = function toFormat(fmt, opts) {
        if (opts === void 0) opts = {};
        return this.isValid ? $c70e8820d152b235$var$Formatter.create(this.loc.redefaultToEN(opts)).formatDateTimeFromString(this, fmt) : $c70e8820d152b235$var$INVALID;
    } /**
   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.
   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation
   * of the DateTime in the assigned locale.
   * Defaults to the system's locale if no locale has been specified
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat
   * @param formatOpts {Object} - Intl.DateTimeFormat constructor options and configuration options
   * @param {Object} opts - opts to override the configuration options on this DateTime
   * @example DateTime.now().toLocaleString(); //=> 4/20/2017
   * @example DateTime.now().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'
   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'
   * @example DateTime.now().toLocaleString(DateTime.DATE_FULL, { locale: 'fr' }); //=> '28 août 2022'
   * @example DateTime.now().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'
   * @example DateTime.now().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'
   * @example DateTime.now().toLocaleString({ weekday: 'long', month: 'long', day: '2-digit' }); //=> 'Thursday, April 20'
   * @example DateTime.now().toLocaleString({ weekday: 'short', month: 'short', day: '2-digit', hour: '2-digit', minute: '2-digit' }); //=> 'Thu, Apr 20, 11:27 AM'
   * @example DateTime.now().toLocaleString({ hour: '2-digit', minute: '2-digit', hourCycle: 'h23' }); //=> '11:32'
   * @return {string}
   */ ;
    _proto.toLocaleString = function toLocaleString(formatOpts, opts) {
        if (formatOpts === void 0) formatOpts = $c70e8820d152b235$var$DATE_SHORT;
        if (opts === void 0) opts = {};
        return this.isValid ? $c70e8820d152b235$var$Formatter.create(this.loc.clone(opts), formatOpts).formatDateTime(this) : $c70e8820d152b235$var$INVALID;
    } /**
   * Returns an array of format "parts", meaning individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.
   * Defaults to the system's locale if no locale has been specified
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts
   * @param opts {Object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.
   * @example DateTime.now().toLocaleParts(); //=> [
   *                                   //=>   { type: 'day', value: '25' },
   *                                   //=>   { type: 'literal', value: '/' },
   *                                   //=>   { type: 'month', value: '05' },
   *                                   //=>   { type: 'literal', value: '/' },
   *                                   //=>   { type: 'year', value: '1982' }
   *                                   //=> ]
   */ ;
    _proto.toLocaleParts = function toLocaleParts(opts) {
        if (opts === void 0) opts = {};
        return this.isValid ? $c70e8820d152b235$var$Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this) : [];
    } /**
   * Returns an ISO 8601-compliant string representation of this DateTime
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.extendedZone=false] - add the time zone format extension
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc(1983, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'
   * @example DateTime.now().toISO() //=> '2017-04-22T20:47:05.335-04:00'
   * @example DateTime.now().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'
   * @example DateTime.now().toISO({ format: 'basic' }) //=> '20170422T204705.335-0400'
   * @return {string}
   */ ;
    _proto.toISO = function toISO(_temp4) {
        var _ref5 = _temp4 === void 0 ? {} : _temp4, _ref5$format = _ref5.format, format = _ref5$format === void 0 ? "extended" : _ref5$format, _ref5$suppressSeconds = _ref5.suppressSeconds, suppressSeconds = _ref5$suppressSeconds === void 0 ? false : _ref5$suppressSeconds, _ref5$suppressMillise = _ref5.suppressMilliseconds, suppressMilliseconds = _ref5$suppressMillise === void 0 ? false : _ref5$suppressMillise, _ref5$includeOffset = _ref5.includeOffset, includeOffset = _ref5$includeOffset === void 0 ? true : _ref5$includeOffset, _ref5$extendedZone = _ref5.extendedZone, extendedZone = _ref5$extendedZone === void 0 ? false : _ref5$extendedZone;
        if (!this.isValid) return null;
        var ext = format === "extended";
        var c = $c70e8820d152b235$var$_toISODate(this, ext);
        c += "T";
        c += $c70e8820d152b235$var$_toISOTime(this, ext, suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);
        return c;
    } /**
   * Returns an ISO 8601-compliant string representation of this DateTime's date component
   * @param {Object} opts - options
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'
   * @example DateTime.utc(1982, 5, 25).toISODate({ format: 'basic' }) //=> '19820525'
   * @return {string}
   */ ;
    _proto.toISODate = function toISODate(_temp5) {
        var _ref6 = _temp5 === void 0 ? {} : _temp5, _ref6$format = _ref6.format, format = _ref6$format === void 0 ? "extended" : _ref6$format;
        if (!this.isValid) return null;
        return $c70e8820d152b235$var$_toISODate(this, format === "extended");
    } /**
   * Returns an ISO 8601-compliant string representation of this DateTime's week date
   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'
   * @return {string}
   */ ;
    _proto.toISOWeekDate = function toISOWeekDate() {
        return $c70e8820d152b235$var$toTechFormat(this, "kkkk-'W'WW-c");
    } /**
   * Returns an ISO 8601-compliant string representation of this DateTime's time component
   * @param {Object} opts - options
   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0
   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.extendedZone=true] - add the time zone format extension
   * @param {boolean} [opts.includePrefix=false] - include the `T` prefix
   * @param {string} [opts.format='extended'] - choose between the basic and extended format
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime() //=> '07:34:19.361Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34, seconds: 0, milliseconds: 0 }).toISOTime({ suppressSeconds: true }) //=> '07:34Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ format: 'basic' }) //=> '073419.361Z'
   * @example DateTime.utc().set({ hour: 7, minute: 34 }).toISOTime({ includePrefix: true }) //=> 'T07:34:19.361Z'
   * @return {string}
   */ ;
    _proto.toISOTime = function toISOTime(_temp6) {
        var _ref7 = _temp6 === void 0 ? {} : _temp6, _ref7$suppressMillise = _ref7.suppressMilliseconds, suppressMilliseconds = _ref7$suppressMillise === void 0 ? false : _ref7$suppressMillise, _ref7$suppressSeconds = _ref7.suppressSeconds, suppressSeconds = _ref7$suppressSeconds === void 0 ? false : _ref7$suppressSeconds, _ref7$includeOffset = _ref7.includeOffset, includeOffset = _ref7$includeOffset === void 0 ? true : _ref7$includeOffset, _ref7$includePrefix = _ref7.includePrefix, includePrefix = _ref7$includePrefix === void 0 ? false : _ref7$includePrefix, _ref7$extendedZone = _ref7.extendedZone, extendedZone = _ref7$extendedZone === void 0 ? false : _ref7$extendedZone, _ref7$format = _ref7.format, format = _ref7$format === void 0 ? "extended" : _ref7$format;
        if (!this.isValid) return null;
        var c = includePrefix ? "T" : "";
        return c + $c70e8820d152b235$var$_toISOTime(this, format === "extended", suppressSeconds, suppressMilliseconds, includeOffset, extendedZone);
    } /**
   * Returns an RFC 2822-compatible string representation of this DateTime
   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'
   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'
   * @return {string}
   */ ;
    _proto.toRFC2822 = function toRFC2822() {
        return $c70e8820d152b235$var$toTechFormat(this, "EEE, dd LLL yyyy HH:mm:ss ZZZ", false);
    } /**
   * Returns a string representation of this DateTime appropriate for use in HTTP headers. The output is always expressed in GMT.
   * Specifically, the string conforms to RFC 1123.
   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1
   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'
   * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'
   * @return {string}
   */ ;
    _proto.toHTTP = function toHTTP() {
        return $c70e8820d152b235$var$toTechFormat(this.toUTC(), "EEE, dd LLL yyyy HH:mm:ss 'GMT'");
    } /**
   * Returns a string representation of this DateTime appropriate for use in SQL Date
   * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'
   * @return {string}
   */ ;
    _proto.toSQLDate = function toSQLDate() {
        if (!this.isValid) return null;
        return $c70e8820d152b235$var$_toISODate(this, true);
    } /**
   * Returns a string representation of this DateTime appropriate for use in SQL Time
   * @param {Object} opts - options
   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
   * @example DateTime.utc().toSQL() //=> '05:15:16.345'
   * @example DateTime.now().toSQL() //=> '05:15:16.345 -04:00'
   * @example DateTime.now().toSQL({ includeOffset: false }) //=> '05:15:16.345'
   * @example DateTime.now().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'
   * @return {string}
   */ ;
    _proto.toSQLTime = function toSQLTime(_temp7) {
        var _ref8 = _temp7 === void 0 ? {} : _temp7, _ref8$includeOffset = _ref8.includeOffset, includeOffset = _ref8$includeOffset === void 0 ? true : _ref8$includeOffset, _ref8$includeZone = _ref8.includeZone, includeZone = _ref8$includeZone === void 0 ? false : _ref8$includeZone, _ref8$includeOffsetSp = _ref8.includeOffsetSpace, includeOffsetSpace = _ref8$includeOffsetSp === void 0 ? true : _ref8$includeOffsetSp;
        var fmt = "HH:mm:ss.SSS";
        if (includeZone || includeOffset) {
            if (includeOffsetSpace) fmt += " ";
            if (includeZone) fmt += "z";
            else if (includeOffset) fmt += "ZZ";
        }
        return $c70e8820d152b235$var$toTechFormat(this, fmt, true);
    } /**
   * Returns a string representation of this DateTime appropriate for use in SQL DateTime
   * @param {Object} opts - options
   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.
   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'
   * @param {boolean} [opts.includeOffsetSpace=true] - include the space between the time and the offset, such as '05:15:16.345 -04:00'
   * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'
   * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'
   * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'
   * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: true }) //=> '2014-07-13 00:00:00.000 America/New_York'
   * @return {string}
   */ ;
    _proto.toSQL = function toSQL(opts) {
        if (opts === void 0) opts = {};
        if (!this.isValid) return null;
        return this.toSQLDate() + " " + this.toSQLTime(opts);
    } /**
   * Returns a string representation of this DateTime appropriate for debugging
   * @return {string}
   */ ;
    _proto.toString = function toString() {
        return this.isValid ? this.toISO() : $c70e8820d152b235$var$INVALID;
    } /**
   * Returns a string representation of this DateTime appropriate for the REPL.
   * @return {string}
   */ ;
    _proto[_Symbol$for] = function() {
        if (this.isValid) return "DateTime { ts: " + this.toISO() + ", zone: " + this.zone.name + ", locale: " + this.locale + " }";
        else return "DateTime { Invalid, reason: " + this.invalidReason + " }";
    } /**
   * Returns the epoch milliseconds of this DateTime. Alias of {@link DateTime#toMillis}
   * @return {number}
   */ ;
    _proto.valueOf = function valueOf() {
        return this.toMillis();
    } /**
   * Returns the epoch milliseconds of this DateTime.
   * @return {number}
   */ ;
    _proto.toMillis = function toMillis() {
        return this.isValid ? this.ts : NaN;
    } /**
   * Returns the epoch seconds of this DateTime.
   * @return {number}
   */ ;
    _proto.toSeconds = function toSeconds() {
        return this.isValid ? this.ts / 1000 : NaN;
    } /**
   * Returns the epoch seconds (as a whole number) of this DateTime.
   * @return {number}
   */ ;
    _proto.toUnixInteger = function toUnixInteger() {
        return this.isValid ? Math.floor(this.ts / 1000) : NaN;
    } /**
   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.
   * @return {string}
   */ ;
    _proto.toJSON = function toJSON() {
        return this.toISO();
    } /**
   * Returns a BSON serializable equivalent to this DateTime.
   * @return {Date}
   */ ;
    _proto.toBSON = function toBSON() {
        return this.toJSDate();
    } /**
   * Returns a JavaScript object with this DateTime's year, month, day, and so on.
   * @param opts - options for generating the object
   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output
   * @example DateTime.now().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }
   * @return {Object}
   */ ;
    _proto.toObject = function toObject(opts) {
        if (opts === void 0) opts = {};
        if (!this.isValid) return {};
        var base = $c70e8820d152b235$var$_extends({}, this.c);
        if (opts.includeConfig) {
            base.outputCalendar = this.outputCalendar;
            base.numberingSystem = this.loc.numberingSystem;
            base.locale = this.loc.locale;
        }
        return base;
    } /**
   * Returns a JavaScript Date equivalent to this DateTime.
   * @return {Date}
   */ ;
    _proto.toJSDate = function toJSDate() {
        return new Date(this.isValid ? this.ts : NaN);
    } /**
   * Return the difference between two DateTimes as a Duration.
   * @param {DateTime} otherDateTime - the DateTime to compare this one to
   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @example
   * var i1 = DateTime.fromISO('1982-05-25T09:45'),
   *     i2 = DateTime.fromISO('1983-10-14T10:30');
   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }
   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }
   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }
   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }
   * @return {Duration}
   */ ;
    _proto.diff = function diff(otherDateTime, unit, opts) {
        if (unit === void 0) unit = "milliseconds";
        if (opts === void 0) opts = {};
        if (!this.isValid || !otherDateTime.isValid) return $c70e8820d152b235$var$Duration.invalid("created by diffing an invalid DateTime");
        var durOpts = $c70e8820d152b235$var$_extends({
            locale: this.locale,
            numberingSystem: this.numberingSystem
        }, opts);
        var units = $c70e8820d152b235$var$maybeArray(unit).map($c70e8820d152b235$var$Duration.normalizeUnit), otherIsLater = otherDateTime.valueOf() > this.valueOf(), earlier = otherIsLater ? this : otherDateTime, later = otherIsLater ? otherDateTime : this, diffed = $c70e8820d152b235$var$_diff(earlier, later, units, durOpts);
        return otherIsLater ? diffed.negate() : diffed;
    } /**
   * Return the difference between this DateTime and right now.
   * See {@link DateTime#diff}
   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration
   * @param {Object} opts - options that affect the creation of the Duration
   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use
   * @return {Duration}
   */ ;
    _proto.diffNow = function diffNow(unit, opts) {
        if (unit === void 0) unit = "milliseconds";
        if (opts === void 0) opts = {};
        return this.diff(DateTime.now(), unit, opts);
    } /**
   * Return an Interval spanning between this DateTime and another DateTime
   * @param {DateTime} otherDateTime - the other end point of the Interval
   * @return {Interval}
   */ ;
    _proto.until = function until(otherDateTime) {
        return this.isValid ? $c70e8820d152b235$var$Interval.fromDateTimes(this, otherDateTime) : this;
    } /**
   * Return whether this DateTime is in the same unit of time as another DateTime.
   * Higher-order units must also be identical for this function to return `true`.
   * Note that time zones are **ignored** in this comparison, which compares the **local** calendar time. Use {@link DateTime#setZone} to convert one of the dates if needed.
   * @param {DateTime} otherDateTime - the other DateTime
   * @param {string} unit - the unit of time to check sameness on
   * @param {Object} opts - options
   * @param {boolean} [opts.useLocaleWeeks=false] - If true, use weeks based on the locale, i.e. use the locale-dependent start of the week; only the locale of this DateTime is used
   * @example DateTime.now().hasSame(otherDT, 'day'); //~> true if otherDT is in the same current calendar day
   * @return {boolean}
   */ ;
    _proto.hasSame = function hasSame(otherDateTime, unit, opts) {
        if (!this.isValid) return false;
        var inputMs = otherDateTime.valueOf();
        var adjustedToZone = this.setZone(otherDateTime.zone, {
            keepLocalTime: true
        });
        return adjustedToZone.startOf(unit, opts) <= inputMs && inputMs <= adjustedToZone.endOf(unit, opts);
    } /**
   * Equality check
   * Two DateTimes are equal if and only if they represent the same millisecond, have the same zone and location, and are both valid.
   * To compare just the millisecond values, use `+dt1 === +dt2`.
   * @param {DateTime} other - the other DateTime
   * @return {boolean}
   */ ;
    _proto.equals = function equals(other) {
        return this.isValid && other.isValid && this.valueOf() === other.valueOf() && this.zone.equals(other.zone) && this.loc.equals(other.loc);
    } /**
   * Returns a string representation of a this time relative to now, such as "in two days". Can only internationalize if your
   * platform supports Intl.RelativeTimeFormat. Rounds down by default.
   * @param {Object} options - options that affect the output
   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
   * @param {string} [options.style="long"] - the style of units, must be "long", "short", or "narrow"
   * @param {string|string[]} options.unit - use a specific unit or array of units; if omitted, or an array, the method will pick the best unit. Use an array or one of "years", "quarters", "months", "weeks", "days", "hours", "minutes", or "seconds"
   * @param {boolean} [options.round=true] - whether to round the numbers in the output.
   * @param {number} [options.padding=0] - padding in milliseconds. This allows you to round up the result if it fits inside the threshold. Don't use in combination with {round: false} because the decimal output will include the padding.
   * @param {string} options.locale - override the locale of this DateTime
   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
   * @example DateTime.now().plus({ days: 1 }).toRelative() //=> "in 1 day"
   * @example DateTime.now().setLocale("es").toRelative({ days: 1 }) //=> "dentro de 1 día"
   * @example DateTime.now().plus({ days: 1 }).toRelative({ locale: "fr" }) //=> "dans 23 heures"
   * @example DateTime.now().minus({ days: 2 }).toRelative() //=> "2 days ago"
   * @example DateTime.now().minus({ days: 2 }).toRelative({ unit: "hours" }) //=> "48 hours ago"
   * @example DateTime.now().minus({ hours: 36 }).toRelative({ round: false }) //=> "1.5 days ago"
   */ ;
    _proto.toRelative = function toRelative(options) {
        if (options === void 0) options = {};
        if (!this.isValid) return null;
        var base = options.base || DateTime.fromObject({}, {
            zone: this.zone
        }), padding = options.padding ? this < base ? -options.padding : options.padding : 0;
        var units = [
            "years",
            "months",
            "days",
            "hours",
            "minutes",
            "seconds"
        ];
        var unit = options.unit;
        if (Array.isArray(options.unit)) {
            units = options.unit;
            unit = undefined;
        }
        return $c70e8820d152b235$var$diffRelative(base, this.plus(padding), $c70e8820d152b235$var$_extends({}, options, {
            numeric: "always",
            units: units,
            unit: unit
        }));
    } /**
   * Returns a string representation of this date relative to today, such as "yesterday" or "next month".
   * Only internationalizes on platforms that supports Intl.RelativeTimeFormat.
   * @param {Object} options - options that affect the output
   * @param {DateTime} [options.base=DateTime.now()] - the DateTime to use as the basis to which this time is compared. Defaults to now.
   * @param {string} options.locale - override the locale of this DateTime
   * @param {string} options.unit - use a specific unit; if omitted, the method will pick the unit. Use one of "years", "quarters", "months", "weeks", or "days"
   * @param {string} options.numberingSystem - override the numberingSystem of this DateTime. The Intl system may choose not to honor this
   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar() //=> "tomorrow"
   * @example DateTime.now().setLocale("es").plus({ days: 1 }).toRelative() //=> ""mañana"
   * @example DateTime.now().plus({ days: 1 }).toRelativeCalendar({ locale: "fr" }) //=> "demain"
   * @example DateTime.now().minus({ days: 2 }).toRelativeCalendar() //=> "2 days ago"
   */ ;
    _proto.toRelativeCalendar = function toRelativeCalendar(options) {
        if (options === void 0) options = {};
        if (!this.isValid) return null;
        return $c70e8820d152b235$var$diffRelative(options.base || DateTime.fromObject({}, {
            zone: this.zone
        }), this, $c70e8820d152b235$var$_extends({}, options, {
            numeric: "auto",
            units: [
                "years",
                "months",
                "days"
            ],
            calendary: true
        }));
    } /**
   * Return the min of several date times
   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum
   * @return {DateTime} the min DateTime, or undefined if called with no argument
   */ ;
    DateTime.min = function min() {
        for(var _len = arguments.length, dateTimes = new Array(_len), _key = 0; _key < _len; _key++)dateTimes[_key] = arguments[_key];
        if (!dateTimes.every(DateTime.isDateTime)) throw new $c70e8820d152b235$var$InvalidArgumentError("min requires all arguments be DateTimes");
        return $c70e8820d152b235$var$bestBy(dateTimes, function(i) {
            return i.valueOf();
        }, Math.min);
    } /**
   * Return the max of several date times
   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum
   * @return {DateTime} the max DateTime, or undefined if called with no argument
   */ ;
    DateTime.max = function max() {
        for(var _len2 = arguments.length, dateTimes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++)dateTimes[_key2] = arguments[_key2];
        if (!dateTimes.every(DateTime.isDateTime)) throw new $c70e8820d152b235$var$InvalidArgumentError("max requires all arguments be DateTimes");
        return $c70e8820d152b235$var$bestBy(dateTimes, function(i) {
            return i.valueOf();
        }, Math.max);
    } /**
   * Explain how a string would be parsed by fromFormat()
   * @param {string} text - the string to parse
   * @param {string} fmt - the format the string is expected to be in (see description)
   * @param {Object} options - options taken by fromFormat()
   * @return {Object}
   */ ;
    DateTime.fromFormatExplain = function fromFormatExplain(text, fmt, options) {
        if (options === void 0) options = {};
        var _options = options, _options$locale = _options.locale, locale = _options$locale === void 0 ? null : _options$locale, _options$numberingSys = _options.numberingSystem, numberingSystem = _options$numberingSys === void 0 ? null : _options$numberingSys, localeToUse = $c70e8820d152b235$var$Locale.fromOpts({
            locale: locale,
            numberingSystem: numberingSystem,
            defaultToEN: true
        });
        return $c70e8820d152b235$var$explainFromTokens(localeToUse, text, fmt);
    } /**
   * @deprecated use fromFormatExplain instead
   */ ;
    DateTime.fromStringExplain = function fromStringExplain(text, fmt, options) {
        if (options === void 0) options = {};
        return DateTime.fromFormatExplain(text, fmt, options);
    } /**
   * {@link DateTime#toLocaleString} format like 10/14/1983
   * @type {Object}
   */ ;
    $c70e8820d152b235$var$_createClass(DateTime, [
        {
            key: "isValid",
            get: function get() {
                return this.invalid === null;
            }
        },
        {
            key: "invalidReason",
            get: function get() {
                return this.invalid ? this.invalid.reason : null;
            }
        },
        {
            key: "invalidExplanation",
            get: function get() {
                return this.invalid ? this.invalid.explanation : null;
            }
        },
        {
            key: "locale",
            get: function get() {
                return this.isValid ? this.loc.locale : null;
            }
        },
        {
            key: "numberingSystem",
            get: function get() {
                return this.isValid ? this.loc.numberingSystem : null;
            }
        },
        {
            key: "outputCalendar",
            get: function get() {
                return this.isValid ? this.loc.outputCalendar : null;
            }
        },
        {
            key: "zone",
            get: function get() {
                return this._zone;
            }
        },
        {
            key: "zoneName",
            get: function get() {
                return this.isValid ? this.zone.name : null;
            }
        },
        {
            key: "year",
            get: function get() {
                return this.isValid ? this.c.year : NaN;
            }
        },
        {
            key: "quarter",
            get: function get() {
                return this.isValid ? Math.ceil(this.c.month / 3) : NaN;
            }
        },
        {
            key: "month",
            get: function get() {
                return this.isValid ? this.c.month : NaN;
            }
        },
        {
            key: "day",
            get: function get() {
                return this.isValid ? this.c.day : NaN;
            }
        },
        {
            key: "hour",
            get: function get() {
                return this.isValid ? this.c.hour : NaN;
            }
        },
        {
            key: "minute",
            get: function get() {
                return this.isValid ? this.c.minute : NaN;
            }
        },
        {
            key: "second",
            get: function get() {
                return this.isValid ? this.c.second : NaN;
            }
        },
        {
            key: "millisecond",
            get: function get() {
                return this.isValid ? this.c.millisecond : NaN;
            }
        },
        {
            key: "weekYear",
            get: function get() {
                return this.isValid ? $c70e8820d152b235$var$possiblyCachedWeekData(this).weekYear : NaN;
            }
        },
        {
            key: "weekNumber",
            get: function get() {
                return this.isValid ? $c70e8820d152b235$var$possiblyCachedWeekData(this).weekNumber : NaN;
            }
        },
        {
            key: "weekday",
            get: function get() {
                return this.isValid ? $c70e8820d152b235$var$possiblyCachedWeekData(this).weekday : NaN;
            }
        },
        {
            key: "isWeekend",
            get: function get() {
                return this.isValid && this.loc.getWeekendDays().includes(this.weekday);
            }
        },
        {
            key: "localWeekday",
            get: function get() {
                return this.isValid ? $c70e8820d152b235$var$possiblyCachedLocalWeekData(this).weekday : NaN;
            }
        },
        {
            key: "localWeekNumber",
            get: function get() {
                return this.isValid ? $c70e8820d152b235$var$possiblyCachedLocalWeekData(this).weekNumber : NaN;
            }
        },
        {
            key: "localWeekYear",
            get: function get() {
                return this.isValid ? $c70e8820d152b235$var$possiblyCachedLocalWeekData(this).weekYear : NaN;
            }
        },
        {
            key: "ordinal",
            get: function get() {
                return this.isValid ? $c70e8820d152b235$var$gregorianToOrdinal(this.c).ordinal : NaN;
            }
        },
        {
            key: "monthShort",
            get: function get() {
                return this.isValid ? $c70e8820d152b235$var$Info.months("short", {
                    locObj: this.loc
                })[this.month - 1] : null;
            }
        },
        {
            key: "monthLong",
            get: function get() {
                return this.isValid ? $c70e8820d152b235$var$Info.months("long", {
                    locObj: this.loc
                })[this.month - 1] : null;
            }
        },
        {
            key: "weekdayShort",
            get: function get() {
                return this.isValid ? $c70e8820d152b235$var$Info.weekdays("short", {
                    locObj: this.loc
                })[this.weekday - 1] : null;
            }
        },
        {
            key: "weekdayLong",
            get: function get() {
                return this.isValid ? $c70e8820d152b235$var$Info.weekdays("long", {
                    locObj: this.loc
                })[this.weekday - 1] : null;
            }
        },
        {
            key: "offset",
            get: function get() {
                return this.isValid ? +this.o : NaN;
            }
        },
        {
            key: "offsetNameShort",
            get: function get() {
                if (this.isValid) return this.zone.offsetName(this.ts, {
                    format: "short",
                    locale: this.locale
                });
                else return null;
            }
        },
        {
            key: "offsetNameLong",
            get: function get() {
                if (this.isValid) return this.zone.offsetName(this.ts, {
                    format: "long",
                    locale: this.locale
                });
                else return null;
            }
        },
        {
            key: "isOffsetFixed",
            get: function get() {
                return this.isValid ? this.zone.isUniversal : null;
            }
        },
        {
            key: "isInDST",
            get: function get() {
                if (this.isOffsetFixed) return false;
                else return this.offset > this.set({
                    month: 1,
                    day: 1
                }).offset || this.offset > this.set({
                    month: 5
                }).offset;
            }
        },
        {
            key: "isInLeapYear",
            get: function get() {
                return $c70e8820d152b235$var$isLeapYear(this.year);
            }
        },
        {
            key: "daysInMonth",
            get: function get() {
                return $c70e8820d152b235$var$daysInMonth(this.year, this.month);
            }
        },
        {
            key: "daysInYear",
            get: function get() {
                return this.isValid ? $c70e8820d152b235$var$daysInYear(this.year) : NaN;
            }
        },
        {
            key: "weeksInWeekYear",
            get: function get() {
                return this.isValid ? $c70e8820d152b235$var$weeksInWeekYear(this.weekYear) : NaN;
            }
        },
        {
            key: "weeksInLocalWeekYear",
            get: function get() {
                return this.isValid ? $c70e8820d152b235$var$weeksInWeekYear(this.localWeekYear, this.loc.getMinDaysInFirstWeek(), this.loc.getStartOfWeek()) : NaN;
            }
        }
    ], [
        {
            key: "DATE_SHORT",
            get: function get() {
                return $c70e8820d152b235$var$DATE_SHORT;
            }
        },
        {
            key: "DATE_MED",
            get: function get() {
                return $c70e8820d152b235$var$DATE_MED;
            }
        },
        {
            key: "DATE_MED_WITH_WEEKDAY",
            get: function get() {
                return $c70e8820d152b235$var$DATE_MED_WITH_WEEKDAY;
            }
        },
        {
            key: "DATE_FULL",
            get: function get() {
                return $c70e8820d152b235$var$DATE_FULL;
            }
        },
        {
            key: "DATE_HUGE",
            get: function get() {
                return $c70e8820d152b235$var$DATE_HUGE;
            }
        },
        {
            key: "TIME_SIMPLE",
            get: function get() {
                return $c70e8820d152b235$var$TIME_SIMPLE;
            }
        },
        {
            key: "TIME_WITH_SECONDS",
            get: function get() {
                return $c70e8820d152b235$var$TIME_WITH_SECONDS;
            }
        },
        {
            key: "TIME_WITH_SHORT_OFFSET",
            get: function get() {
                return $c70e8820d152b235$var$TIME_WITH_SHORT_OFFSET;
            }
        },
        {
            key: "TIME_WITH_LONG_OFFSET",
            get: function get() {
                return $c70e8820d152b235$var$TIME_WITH_LONG_OFFSET;
            }
        },
        {
            key: "TIME_24_SIMPLE",
            get: function get() {
                return $c70e8820d152b235$var$TIME_24_SIMPLE;
            }
        },
        {
            key: "TIME_24_WITH_SECONDS",
            get: function get() {
                return $c70e8820d152b235$var$TIME_24_WITH_SECONDS;
            }
        },
        {
            key: "TIME_24_WITH_SHORT_OFFSET",
            get: function get() {
                return $c70e8820d152b235$var$TIME_24_WITH_SHORT_OFFSET;
            }
        },
        {
            key: "TIME_24_WITH_LONG_OFFSET",
            get: function get() {
                return $c70e8820d152b235$var$TIME_24_WITH_LONG_OFFSET;
            }
        },
        {
            key: "DATETIME_SHORT",
            get: function get() {
                return $c70e8820d152b235$var$DATETIME_SHORT;
            }
        },
        {
            key: "DATETIME_SHORT_WITH_SECONDS",
            get: function get() {
                return $c70e8820d152b235$var$DATETIME_SHORT_WITH_SECONDS;
            }
        },
        {
            key: "DATETIME_MED",
            get: function get() {
                return $c70e8820d152b235$var$DATETIME_MED;
            }
        },
        {
            key: "DATETIME_MED_WITH_SECONDS",
            get: function get() {
                return $c70e8820d152b235$var$DATETIME_MED_WITH_SECONDS;
            }
        },
        {
            key: "DATETIME_MED_WITH_WEEKDAY",
            get: function get() {
                return $c70e8820d152b235$var$DATETIME_MED_WITH_WEEKDAY;
            }
        },
        {
            key: "DATETIME_FULL",
            get: function get() {
                return $c70e8820d152b235$var$DATETIME_FULL;
            }
        },
        {
            key: "DATETIME_FULL_WITH_SECONDS",
            get: function get() {
                return $c70e8820d152b235$var$DATETIME_FULL_WITH_SECONDS;
            }
        },
        {
            key: "DATETIME_HUGE",
            get: function get() {
                return $c70e8820d152b235$var$DATETIME_HUGE;
            }
        },
        {
            key: "DATETIME_HUGE_WITH_SECONDS",
            get: function get() {
                return $c70e8820d152b235$var$DATETIME_HUGE_WITH_SECONDS;
            }
        }
    ]);
    return DateTime;
}(Symbol.for("nodejs.util.inspect.custom"));
function $c70e8820d152b235$var$friendlyDateTime(dateTimeish) {
    if ($c70e8820d152b235$var$DateTime.isDateTime(dateTimeish)) return dateTimeish;
    else if (dateTimeish && dateTimeish.valueOf && $c70e8820d152b235$var$isNumber(dateTimeish.valueOf())) return $c70e8820d152b235$var$DateTime.fromJSDate(dateTimeish);
    else if (dateTimeish && typeof dateTimeish === "object") return $c70e8820d152b235$var$DateTime.fromObject(dateTimeish);
    else throw new $c70e8820d152b235$var$InvalidArgumentError("Unknown datetime argument: " + dateTimeish + ", of type " + typeof dateTimeish);
}
var $c70e8820d152b235$var$VERSION = "3.4.4";
$c70e8820d152b235$exports.DateTime = $c70e8820d152b235$var$DateTime;
$c70e8820d152b235$exports.Duration = $c70e8820d152b235$var$Duration;
$c70e8820d152b235$exports.FixedOffsetZone = $c70e8820d152b235$var$FixedOffsetZone;
$c70e8820d152b235$exports.IANAZone = $c70e8820d152b235$var$IANAZone;
$c70e8820d152b235$exports.Info = $c70e8820d152b235$var$Info;
$c70e8820d152b235$exports.Interval = $c70e8820d152b235$var$Interval;
$c70e8820d152b235$exports.InvalidZone = $c70e8820d152b235$var$InvalidZone;
$c70e8820d152b235$exports.Settings = $c70e8820d152b235$var$Settings;
$c70e8820d152b235$exports.SystemZone = $c70e8820d152b235$var$SystemZone;
$c70e8820d152b235$exports.VERSION = $c70e8820d152b235$var$VERSION;
$c70e8820d152b235$exports.Zone = $c70e8820d152b235$var$Zone;



class $53eba6098f86b86c$export$d63d7cff08fe4dc9 {
    constructor(...args){
        if (args.length === 2) {
            this.first = args[0];
            this.second = args[1];
        } else if (args.length === 1) {
            const pair = args[0];
            if (pair != null) {
                this.first = pair.first;
                this.second = pair.second;
            }
        }
    }
    equals(pair) {
        return this.first === pair.first && this.second == pair.second;
    }
    toString() {
        return "[" + this.first + ", " + this.second + "]";
    }
}
class $53eba6098f86b86c$export$74e1c7e2f1829413 extends $53eba6098f86b86c$export$d63d7cff08fe4dc9 {
    get from() {
        return this.first;
    }
    get to() {
        return this.second;
    }
    set from(value) {
        this.first = value;
    }
    set to(value) {
        this.second = value;
    }
    equals(other) {
        if (other instanceof $53eba6098f86b86c$export$74e1c7e2f1829413) return this.first == null == (other.first == null) && this.second == null == (other.second == null) && this.first.equals(other.first) && this.second.equals(other.second);
        else return false;
    }
    toString() {
        return `[${this.from.toFormat("dd.LL.yyyy hh:mm:ss SSS")} - ${this.to.toFormat("dd.LL.yyyy hh:mm:ss SSS")}]`;
    }
}
class $53eba6098f86b86c$var$DataBlock {
    constructor(data){
        this._data = data != null ? data : [];
    }
    getTimeRange() {
        return new $53eba6098f86b86c$export$74e1c7e2f1829413((0, $c70e8820d152b235$exports.DateTime).fromMillis(this._data[0][0]), (0, $c70e8820d152b235$exports.DateTime).fromMillis(this._data[this._data.length - 1][0]));
    }
    hasData() {
        return this._data.length > 0;
    }
    getData() {
        return this._data;
    }
    setData(data) {
        this._data = data;
    }
    add(data) {
        const isUnshift = data.length > 0 && this._data.length > 0 && data[0][0] < this._data[0][0];
        if (isUnshift) this._data.unshift(...data);
        else this._data.push(...data);
    }
    simplify(quality) {
        return (0, $33684afa3d8783a3$export$798b53621063651)(this._data, quality, null, null, true);
    }
}
class $53eba6098f86b86c$export$1402489b11e44f0c {
    constructor(){
        this._map = new Map;
        this._dataBlock = [
            new $53eba6098f86b86c$var$DataBlock()
        ];
    }
    hasData() {
        const dataBlock = this._dataBlock[0];
        return dataBlock.hasData();
    }
    getData(entityQualityIndex) {
        const dataBlock = this._dataBlock[entityQualityIndex];
        return dataBlock.getData();
    }
    getDataByTimeRange(timeRange, entireTimeRange, numberOfPoints) {
        let data = this._map.get(timeRange);
        if (data == null) {
            const dataBlock = this._dataBlock[0];
            const orgData = dataBlock.getData();
            let tolerance = 0.1;
            let lastTolerance = 0;
            const map = new Map();
            const list = [];
            if (orgData.length > numberOfPoints) {
                let run = 0;
                do {
                    ++run;
                    const data = (0, $33684afa3d8783a3$export$798b53621063651)(orgData, tolerance, timeRange.first.toMillis(), timeRange.second.toMillis(), true);
                    map.set(tolerance, data);
                    list.push(new $53eba6098f86b86c$export$d63d7cff08fe4dc9(tolerance, data.length));
                    lastTolerance = tolerance;
                    tolerance = $53eba6098f86b86c$export$f26fbefb245185e5(list, numberOfPoints);
                // console.log(tolerance + " -> " + data.length);
                }while (run < 10);
                data = (0, $33684afa3d8783a3$export$798b53621063651)(orgData, tolerance, timeRange.first.toMillis(), timeRange.second.toMillis(), true);
                if (data.length == 0 || data[0][0] > entireTimeRange.from.toMillis()) data.unshift([
                    entireTimeRange.from.toMillis(),
                    NaN
                ]);
                if (data[data.length - 1][0] < entireTimeRange.to.toMillis()) data.push([
                    entireTimeRange.to.toMillis(),
                    NaN
                ]);
                this._map.set(timeRange, data);
            } else data = orgData;
        }
        return data;
    }
    add(data) {
        const dataBlock = this._dataBlock[0];
        dataBlock.add(data);
    }
    getTimeRange() {
        const dataBlock = this._dataBlock[0];
        return dataBlock.getTimeRange();
    }
}
class $53eba6098f86b86c$export$804ce8cdc3ef0047 {
    constructor(){
        this._timeRange = new $53eba6098f86b86c$export$74e1c7e2f1829413((0, $c70e8820d152b235$exports.DateTime).now().minus({
            hours: 1
        }), (0, $c70e8820d152b235$exports.DateTime).now());
        this._entityData = [];
    }
    hasData() {
        const entityData = this._entityData[0];
        return entityData != null ? entityData.hasData() : false;
    }
    getData(entityIndex, entityQualityIndex) {
        const entityData = this._entityData[entityIndex];
        return entityData.getData(entityQualityIndex);
    }
    getDataByTimeRange(entityIndex, timeRange, entireTimeRange, numberOfPoints) {
        const entityData = this._entityData[entityIndex];
        return entityData.getDataByTimeRange(timeRange, entireTimeRange, numberOfPoints);
    }
    add(entityIndex, data) {
        if (data.length > 0) {
            this._timeRange.from = (0, $44e3098839051485$export$db030d70d2d24a2b).min(this._timeRange.from, (0, $c70e8820d152b235$exports.DateTime).fromMillis(data[0][0]));
            this._timeRange.to = (0, $44e3098839051485$export$db030d70d2d24a2b).max(this._timeRange.to, (0, $c70e8820d152b235$exports.DateTime).fromMillis(data[data.length - 1][0]));
        }
        while(this._entityData.length - 1 < entityIndex)this._entityData.push(new $53eba6098f86b86c$export$1402489b11e44f0c());
        const entityData = this._entityData[entityIndex];
        entityData.add(data);
    }
    /**
   * Returns the time range of the entire loaded data.
   *
   * @returns Time range {@link TimeRange}
   */ getMaxTimeRange() {
        return this._timeRange;
    }
}
function $53eba6098f86b86c$export$2a8ea63efc79099d(dataRange, viewport) {
    if (viewport.to.toMillis() <= viewport.from.toMillis()) throw new Error(`Invalid dataRange: [${viewport.from}, ${viewport.to}]`);
    const diff = (0, $c70e8820d152b235$exports.Duration).fromMillis(dataRange.to.diff(dataRange.from).toMillis() / 3.0);
    const p0 = dataRange.from;
    const p3 = dataRange.to;
    if (viewport.from >= p0 && viewport.to <= dataRange.to) {
        const p1 = p0.plus(diff);
        const p2 = p1.plus(diff);
        if (viewport.to <= p1) return $53eba6098f86b86c$export$2a8ea63efc79099d(new $53eba6098f86b86c$export$74e1c7e2f1829413(p0, p1), viewport);
        else if (viewport.from >= p1 && viewport.to <= p2) return $53eba6098f86b86c$export$2a8ea63efc79099d(new $53eba6098f86b86c$export$74e1c7e2f1829413(p1, p2), viewport);
        else if (viewport.from >= p2 && viewport.to <= p3) return $53eba6098f86b86c$export$2a8ea63efc79099d(new $53eba6098f86b86c$export$74e1c7e2f1829413(p2, p3), viewport);
        else return dataRange;
    } else if (viewport.from < p0 && viewport.to <= p3) {
        const diff = p3.diff(p0);
        return $53eba6098f86b86c$export$2a8ea63efc79099d(new $53eba6098f86b86c$export$74e1c7e2f1829413(p0.minus(diff).minus(diff), p3), viewport);
    } else if (viewport.to > p3 && viewport.from >= p0) {
        const diff = p3.diff(p0);
        return $53eba6098f86b86c$export$2a8ea63efc79099d(new $53eba6098f86b86c$export$74e1c7e2f1829413(p0, p3.plus(diff).plus(diff)), viewport);
    } else throw new Error("getTimeRange: Unexpected case!");
}
function $53eba6098f86b86c$export$f26fbefb245185e5(list, numberOfPoints) {
    if (list.length >= 1) {
        if (list.length >= 2) {
            let bestUnder = null;
            let bestOver = null;
            for (const item of list){
                const tolerance = item.first;
                if (item.second > numberOfPoints) {
                    if (bestOver == null || item.second < bestOver.second) bestOver = item;
                } else if (bestUnder == null || item.second > bestUnder.second) bestUnder = item;
            }
            if (bestOver != null && bestUnder != null) return (bestOver.first + bestUnder.first) / 2.0;
            else if (bestUnder == null) {
                if (bestOver.second > numberOfPoints) return bestOver.first * 2.0;
                else if (bestOver.second < numberOfPoints) return bestOver.first / 2.0;
                else return bestOver.first;
            } else if (bestOver == null) {
                if (bestUnder.second < numberOfPoints) return bestUnder.first / 2.0;
                else if (bestUnder.second > numberOfPoints) return bestUnder.first * 2.0;
                else return bestUnder.first;
            } else throw new Error("getNextTolerance: Unexpected case!");
        } else for (const item of list){
            if (item.second > numberOfPoints) return item.first * 2;
            else return item.first / 2.0;
        }
    } else return 0.5;
}



var $e866791a01b6c100$var$nextChartId = -1;
class $e866791a01b6c100$export$614db49f3febe941 {
    constructor(powerGraph, graphConfig){
        this._tid = null;
        this._series = [];
        this._ctrlPressed = false;
        this._scrollInProgress = false;
        this._id = ++$e866791a01b6c100$var$nextChartId;
        // console.log("ctor: " + this._id);
        this._powerGraph = powerGraph;
        this._globalConfig = powerGraph.getConfig();
        this._graphConfig = graphConfig;
        this._requestInProgress = false;
        this._data = new (0, $53eba6098f86b86c$export$804ce8cdc3ef0047)();
        this.clearRefreshInterval();
    }
    setHass(hass) {
        // console.log("Graph::setHass: " + hass + ", id: " + this._id);
        this._hass = hass;
    }
    createContent(mainContener) {
        // console.log("Graph::createContent");
        this._card = document.createElement("ha-card");
        this._card.setAttribute("class", "chart-container");
        this._card.style.height = this._graphConfig.getHeight() + "px";
        mainContener.append(this._card);
        const thisGraph = this;
        // window.onkeydown = function (event) { thisGraph.onKeyDown(event); }
        // window.onkeyup = function (event) { thisGraph.onKeyUp(event); }
        document.addEventListener("keydown", function(event) {
            thisGraph.onKeyDown(event);
        }, false);
        document.addEventListener("keyup", function(event) {
            thisGraph.onKeyUp(event);
        }, false);
    }
    isCreated() {
        return this._chart != null;
    }
    getChart() {
        return this._chart;
    }
    createChart() {
        // console.log("Graph::createChart: " + this._powerGraph.getTimeRange());
        const thisGraph = this;
        this._chart = $5f4351e0b7aaad84$export$2cd8252107eb640b(this._card, null, {
            renderer: this._globalConfig.renderer
        });
        this._chart.group = "ChartGroup";
        this._chart.on("dataZoom", function(evt) {
            thisGraph.onScroll(evt);
        });
        this._chart.on("dblclick", function(evt) {
            console.error("Graph::dbl");
            thisGraph.onDoubleClick(evt);
        });
        this._chart.on("pointerdown", function(evt) {
            console.error("Graph::pointerdown");
            thisGraph.onPointerDown(evt);
        });
        // console.log("chartC: " + this._chart);
        // console.log("thisC: " + this);
        //const startTime: number = toNumber(localStorage.getItem("dataZoom.startTime"), 75);
        //const endTime: number = toNumber(localStorage.getItem("dataZoom.endTime"), 100);
        //console.log(startTime, endTime);
        const clientArea = this._powerGraph.getClientArea();
        const smallDevice = clientArea.first * clientArea.second < 300000;
        const options = {
            animation: this._globalConfig.animation,
            grid: {
                left: "2%",
                top: "3%",
                right: "2%",
                bottom: "30%"
            },
            toolbox: {
                feature: {
                    dataZoom: {
                        yAxisIndex: "none"
                    }
                }
            },
            xAxis: {
                type: "time",
                boundaryGap: false,
                triggerEvent: true,
                splitLine: {
                    lineStyle: {
                        color: "#484753"
                    }
                }
            },
            yAxis: {
                type: "value",
                splitLine: {
                    lineStyle: {
                        color: "#333"
                    }
                }
            },
            legend: {
                formatter: function(name) {
                    const entityConfig = thisGraph._graphConfig.getEntityByName(name);
                    const entityIndex = thisGraph._graphConfig.getEntityConfigIndex(entityConfig);
                    const series = thisGraph._data.getDataByTimeRange(entityIndex, thisGraph._dataTimeRange, thisGraph._data.getMaxTimeRange(), thisGraph._globalConfig.numberOfPoints);
                    // console.error(`legend->formatter: ${thisGraph._dataTimeRange}`);
                    const value = series[series.length - 1][1];
                    return name + " (" + value + " " + thisGraph._powerGraph.getUnitOfMeasurement(entityConfig.entity) + ")";
                }
            },
            dataZoom: [
                {
                    type: "inside",
                    filterMode: "none",
                    zoomLock: !this._powerGraph.isMobile(),
                    throttle: 1,
                    start: 50,
                    end: 100
                }
            ]
        };
        if (this._globalConfig.showTooltip) (0, $44e3098839051485$export$dd702b3c8240390c)(options, {
            tooltip: {
                trigger: "axis",
                triggerOn: smallDevice ? "click" : "mousemove|click",
                axisPointer: {
                    type: "cross"
                },
                formatter: (params)=>{
                    var xTime = new Date(params[0].axisValue);
                    let tooltip = `<p>${xTime.toLocaleString()}</p><table>`;
                    const chart = this._chart;
                    const tooltipReducer = (prev, curr)=>{
                        return Math.abs(new Date(curr[0]).valueOf() - xTime.valueOf()) < Math.abs(new Date(prev[0]).valueOf() - xTime.valueOf()) ? curr : prev;
                    };
                    this._series.forEach((serie, index)=>{
                        const color = (0, $c684b498c6ee1332$export$8d80f9cac07cdb3)(chart.getVisual({
                            seriesIndex: index
                        }, "color"));
                        const style = (0, $c684b498c6ee1332$export$dbf350e5966cf602)`
                                display: inline-block;
                                margin-right: 5px;
                                border-radius: 10px;
                                width: 9px;
                                height: 9px;
                                background-color: ${color};
                            `;
                        // TODO: Use binary search to find the closest value
                        const value = serie.data.reduce(tooltipReducer)[1];
                        tooltip += `<tr><td><span style="${style}"></span></td>`;
                        tooltip += `<td>${serie.name}</td><td><b>${value}</b></td></tr>`;
                    });
                    tooltip += `</table>`;
                    return tooltip;
                },
                textStyle: {
                    fontSize: 12
                }
            }
        });
        if (this._globalConfig.showInfo) (0, $44e3098839051485$export$dd702b3c8240390c)(options, {
            graphic: {
                id: "info",
                type: "text",
                z: 0,
                left: 100,
                top: 100,
                draggable: true,
                style: {
                    fill: "#AAA",
                    width: 220
                }
            }
        });
        if (this._globalConfig.title) (0, $44e3098839051485$export$dd702b3c8240390c)(options, {
            title: {
                show: true,
                text: this._globalConfig.title
            }
        });
        this._lastOption = options;
        this._chart.setOption(options);
        if (this._globalConfig.logOptions) console.log("Graph::setOptions: " + JSON.stringify(options));
        const millisecondsDiff = this._powerGraph.getTimeRange().to.diff(this._powerGraph.getTimeRange().from).toMillis() * 3;
        const diff = (0, $c70e8820d152b235$exports.Duration).fromMillis(millisecondsDiff);
        const startTime = this._powerGraph.getTimeRange().to.minus(diff);
        const endTime = this._powerGraph.getTimeRange().to;
        this._powerGraph.setTimeRange(new (0, $53eba6098f86b86c$export$74e1c7e2f1829413)(startTime, endTime));
        this._powerGraph.onGraphCreated();
        this.requestData();
    // console.log("Graph::createChart <<");
    }
    requestData() {
        if (!this._hass) {
            console.error(`Graph(${this._id})::requestData() => Hass object is missing!`);
            return;
        }
        if (this._requestInProgress) {
            console.error("Request already in progress!");
            return;
        }
        const entities = [];
        for (const entity of this._graphConfig.entities)entities.push(entity.entity);
        //console.log(this._range);
        if (this._data.hasData()) {
            const option = this._chart.getOption();
            const dataZoom = option.dataZoom;
            const startInPercent = dataZoom[0].start;
            const range = this._data.getMaxTimeRange();
            console.error("fix me!!!");
            if (startInPercent == 0) {
                const endDate = range.from.minus({
                    millisecond: 1
                });
            // this._range = new TimeRange(endDate.minus({ hours: 24 }), endDate);
            }
        }
        // console.log(`requestData(entities: ${this._globalConfig.entities.length}, range: ${this._range} `);
        // console.log(`requestData(entities: ${this._globalConfig.entities.length}, start: ${this._range.start.toUnixInteger()}, end: ${this._range.end.toUnixInteger()} `);
        const request = {
            type: "history/history_during_period",
            start_time: this._powerGraph.getTimeRange().from.toISO(),
            end_time: this._powerGraph.getTimeRange().to.toISO(),
            minimal_response: true,
            no_attributes: true,
            entity_ids: entities
        };
        // console.log(request);
        // console.log("Graph::requestData() => hass: " + this._hass + ", id: " + this._id);
        this._requestInProgress = true;
        this._hass.callWS(request).then(this.responseData.bind(this), this.loaderFailed.bind(this));
    }
    responseData(result) {
        // console.log("responseData >>")
        // console.log("start: " + this._range.start.toUnixInteger())
        // console.log("end: " + this._range.end.toUnixInteger())
        // console.log(result)
        const option = this._chart.getOption();
        //console.log("startTime: " + dataZoom[0].startTime);
        const thisCard = this;
        const legends = [];
        let entityIndex = 0;
        for(const entityId in result){
            const entity = this._graphConfig.getEntityById(entityId);
            legends.push(entity.name || entity.entity);
            const arr = result[entityId];
            // console.log("arr.len: " + arr.length);
            if (arr.length > 0) {
                const data = [];
                for(let i = 1; i < arr.length; i++)data.push([
                    Math.round(arr[i].lu * 1000),
                    +arr[i].s
                ]);
                // console.log("ent: " + entityId + ", " + this._range);
                // if (this._range.from.toMillis() < data[0][0]) {
                //     // console.log("add from: " + this._range.from.toMillis());
                //     data.unshift([this._range.from.toMillis(), NaN]);
                // }
                // if (this._range.to.toMillis() > data[data.length - 1][0]) {
                //     // console.log("add to: " + this._range.to.toMillis());
                //     data.push([this._range.to.toMillis(), NaN]);
                // }
                this._data.add(entityIndex++, data);
            } else console.log("data is empty");
        }
        // console.log(this._data);
        const options = {
            // xAxis: {
            //     min: this._data.getTimeRange().from,
            //     max: this._data.getTimeRange().to
            // },
            legend: {
                data: legends
            }
        };
        this.updateOptions(options);
        (0, $44e3098839051485$export$7e4aa119212bc614)(this._globalConfig.autorefresh) && this._tid;
        this._requestInProgress = false;
    // console.log("responseData <<")
    }
    loaderFailed(error) {
        console.error("Database request failure");
        console.error(error);
    }
    updateOptions(options) {
        // console.info(`updateOptions: ${this._graphConfig.entities.length} >>`);
        const config = this._globalConfig;
        const maxTimeRange = this._data.getMaxTimeRange();
        const displayedTimeRange = this.getDisplayedTimeRange();
        const lastDataTimeRange = new (0, $53eba6098f86b86c$export$74e1c7e2f1829413)(this._dataTimeRange);
        // console.info(`updateOptions: maxTimeRange = ${maxTimeRange}, displayedTimeRange = ${displayedTimeRange}`);
        this._dataTimeRange = (0, $53eba6098f86b86c$export$2a8ea63efc79099d)(maxTimeRange, displayedTimeRange);
        const displayedTimeRangeInPercent = this.displayTimeRangeToPercent(this._dataTimeRange, displayedTimeRange);
        // console.log(`percent range: ${displayedTimeRangeInPercent}`);
        const dataChanged = !lastDataTimeRange.equals(this._dataTimeRange);
        let points = 0;
        let info = "";
        if (this._globalConfig.showInfo) {
            const clientArea = this._powerGraph.getClientArea();
            // info += `Current time: ${DateTime.local().toISO()}\n`;
            info += `IsMobile: ${this._powerGraph.isMobile()}\n`;
            info += `Size: ${clientArea.first} x ${clientArea.second} \n`;
            info += `Renderer: ${this._globalConfig.renderer} \n`;
            info += `Sampling: ${this._globalConfig.sampling} \n`;
            info += "\n";
            info += `maxTimeRange:           ${maxTimeRange}\n`;
            info += `displayedTimeRange: ${displayedTimeRange}\n`;
            info += `dataTimeRange:           ${this._dataTimeRange}\n`;
            info += `displayedTimeRangeInPercent: ${displayedTimeRangeInPercent}\n`;
            info += "\n";
            info += "Points:\n";
        }
        this._series = [];
        for (const entityConfig of this._graphConfig.entities){
            const entityIndex = this._graphConfig.getEntityConfigIndex(entityConfig);
            const series = this._data.getDataByTimeRange(entityIndex, this._dataTimeRange, this._data.getMaxTimeRange(), this._globalConfig.numberOfPoints);
            points += series.length;
            info += `   ${entityConfig.entity}: ${series.length} \n`;
            info += `   min-max: ${new (0, $53eba6098f86b86c$export$74e1c7e2f1829413)((0, $c70e8820d152b235$exports.DateTime).fromMillis(series[0][0]), (0, $c70e8820d152b235$exports.DateTime).fromMillis(series[series.length - 1][0]))} \n`;
            // let html = "count: " + series.length + "<br/>";
            // for (const point of series) {
            //     html += DateTimeUtils.toString(DateTime.fromMillis(point[0]), true) + ": " + point[1] + "<br/>";
            // }
            // this._infoBox.innerHTML = html;
            const line = {
                name: entityConfig.name || entityConfig.entity,
                type: "line",
                smooth: false,
                symbol: "none",
                silient: true,
                lineStyle: {
                    width: 1
                },
                step: "end",
                data: series
            };
            if (entityConfig.color) (0, $44e3098839051485$export$dd702b3c8240390c)(line, {
                lineStyle: {
                    color: entityConfig.color
                }
            });
            if (entityConfig.fillColor) (0, $44e3098839051485$export$dd702b3c8240390c)(line, {
                areaStyle: {
                    color: entityConfig.fillColor
                }
            });
            if (this._globalConfig.shadow || entityConfig.shadow) Object.assign(line, {
                lineStyle: {
                    width: 3,
                    shadowColor: "rgba(0,0,0,0.3)",
                    shadowBlur: 10,
                    shadowOffsetY: 8
                }
            });
            if (this._globalConfig.sampling) (0, $44e3098839051485$export$dd702b3c8240390c)(line, {
                sampling: "lttb"
            });
            if (this._globalConfig.fillAread) (0, $44e3098839051485$export$dd702b3c8240390c)(line, {
                areaStyle: {}
            });
            this._series.push(line);
        }
        if (dataChanged) (0, $44e3098839051485$export$dd702b3c8240390c)(options, {
            series: this._series
        });
        if (this._globalConfig.showInfo) {
            info += `   sum: ${points} `;
            (0, $44e3098839051485$export$dd702b3c8240390c)(options, {
                graphic: {
                    id: "info",
                    style: {
                        text: info
                    }
                }
            });
        }
        this._lastOption = options;
        this._chart.setOption(options);
        if (this._globalConfig.logOptions) console.log("setOptions: " + JSON.stringify(options));
    // console.info("updateOptions <<");
    }
    /**
     * Returns the time range of the visible area
     * @returns Time range {@TimeRange}
     */ getDisplayedTimeRange() {
        const range = this._data.getMaxTimeRange();
        const option = this._chart.getOption();
        const dataZoom = option.dataZoom;
        // console.log(`Graph::getDisplayedTimeRange() -> ${range}`);
        return new (0, $53eba6098f86b86c$export$74e1c7e2f1829413)((0, $c70e8820d152b235$exports.DateTime).fromMillis(Math.round(range.from.toMillis() + (range.to.toMillis() - range.from.toMillis()) * dataZoom[0].start / 100)), (0, $c70e8820d152b235$exports.DateTime).fromMillis(Math.round(range.from.toMillis() + (range.to.toMillis() - range.from.toMillis()) * dataZoom[0].end / 100)));
    }
    displayTimeRangeToPercent(maxTimeRange, displayedTimeRange) {
        const range = maxTimeRange.to.toMillis() - maxTimeRange.from.toMillis();
        return new (0, $53eba6098f86b86c$export$d63d7cff08fe4dc9)(100.0 * displayedTimeRange.from.diff(maxTimeRange.from).toMillis() / range, 100.0 * displayedTimeRange.to.diff(maxTimeRange.from).toMillis() / range);
    }
    resize() {
        // console.log("Graph::resize");
        // console.log("thisR: " + this);
        // console.log("chartR: " + this._chart);
        if (this._chart == null) // Create chart when the card size is known
        this.createChart();
        // console.log(`resize(${ this._card.clientWidth }, ${ this._card.clientHeight })`)
        this._chart.resize();
    }
    onScroll(event) {
        if (!this._scrollInProgress) {
            // console.log("onScroll");
            this._scrollInProgress = true;
            this.handleCtrl();
            const { start: start, end: end } = event;
            localStorage.setItem("dataZoom.startTime", start);
            //localStorage.setItem("dataZoom.endTime", endTime);
            //console.log(dataZoom);
            //console.log(event);
            // this._powerGraph.scrollGraph(this, new Pair<number, number>(start, end));
            if (start === 0) this.requestData();
            else this.updateOptions({});
            this._scrollInProgress = false;
        }
    }
    scrollGraph(startEnd) {
        console.log("scrollGraph");
        this._chart.dispatchAction({
            type: "dataZoom",
            dataZoomIndex: 0,
            startValue: startEnd.first,
            endValue: startEnd.second
        });
    }
    onDoubleClick(event) {
        console.log("onDoubleClick");
        this._chart.dispatchAction({
            type: "takeGlobalCursor",
            key: "dataZoomSelect",
            dataZoomSelectActive: true
        });
    }
    onPointerDown(event) {
        console.error("Graph::onPointerDown");
    }
    clearRefreshInterval() {
        if (this._tid != null) {
            // console.log("clearInterval");
            clearInterval(this._tid);
            this._tid = null;
        }
    }
    onKeyDown(event) {
        if (event.key === "Control") {
            if (!this._ctrlPressed) {
                this._ctrlPressed = true;
                this.handleCtrl();
            }
        }
    }
    onKeyUp(event) {
        if (event.key === "Control") {
            this._ctrlPressed = false;
            this.handleCtrl();
        }
    }
    handleCtrl() {
        // console.log("Graph::handleCtrl");
        // Toggle zoomLock
        const option = this._chart.getOption();
        const dataZoom = option.dataZoom;
        const inside = dataZoom[0];
        (0, $44e3098839051485$export$dd702b3c8240390c)(inside, {
            zoomLock: !this._ctrlPressed
        });
        this._chart.setOption(option);
        this._chart.dispatchAction({
            type: "takeGlobalCursor",
            key: "dataZoomSelect",
            dataZoomSelectActive: this._ctrlPressed
        });
    }
}


class $c646df2793882bac$export$566c11bd98e80427 {
    constructor(globalConfig){
        this._globalConfig = globalConfig;
    }
    validate() {
        if (!this.entities) throw new Error("Please define an entity!");
    }
    getEntities() {
        return this.entities;
    }
    getEntityById(entityId) {
        for (const entity of this.entities){
            if (entity.entity == entityId) return entity;
        }
        throw Error("EntityId not found: " + entityId);
    }
    getEntityByName(name) {
        for (const entity of this.entities){
            if (entity.name == name) return entity;
        }
        throw Error("Entity name not found: " + name);
    }
    getEntityConfigIndex(entityConfig) {
        let index = 0;
        for (const entity of this.entities){
            if (entity === entityConfig) return index;
            ++index;
        }
        throw Error("Entity config not found: " + entityConfig.entity);
    }
    getHeight() {
        return this.height != null ? this.height : this._globalConfig.height;
    }
}
class $c646df2793882bac$export$dc790a03cd43345e {
    constructor(obj){
        this.timRangeInHours = 2;
        this.animation = true;
        this.showTooltip = false;
        this.sampling = false;
        this.fillAread = false;
        this.renderer = "canvas";
        this.showInfo = false;
        this.logOptions = false;
        this.numberOfPoints = 1000;
        this.height = 500;
        // for (const key in obj) {
        //     if (!this.hasOwnProperty(key)) {
        //         throw new Error('Unsupported key: ' + key);
        //     }
        // }
        obj && Object.assign(this, obj);
        const newGraphConfigs = [];
        for (const graphConfig of this.graphs){
            const newGraphConfig = new $c646df2793882bac$export$566c11bd98e80427(this);
            Object.assign(newGraphConfig, graphConfig);
            newGraphConfigs.push(newGraphConfig);
        }
        this.graphs = newGraphConfigs;
    }
    validate() {
        //console.log("start: " + this.start.toString());
        for (const graphConfig of this.graphs)graphConfig.validate();
    }
}




/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /* global Int32Array */ 

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ function $72bedc7af0abc791$var$dataIndexMapValueLength(valNumOrArrLengthMoreThan2) {
    return valNumOrArrLengthMoreThan2 == null ? 0 : valNumOrArrLengthMoreThan2.length || 1;
}
function $72bedc7af0abc791$var$defaultKeyGetter(item) {
    return item;
}
var $72bedc7af0abc791$var$DataDiffer = /** @class */ function() {
    /**
   * @param context Can be visited by this.context in callback.
   */ function DataDiffer(oldArr, newArr, oldKeyGetter, newKeyGetter, context, // By default: 'oneToOne'.
    diffMode) {
        this._old = oldArr;
        this._new = newArr;
        this._oldKeyGetter = oldKeyGetter || $72bedc7af0abc791$var$defaultKeyGetter;
        this._newKeyGetter = newKeyGetter || $72bedc7af0abc791$var$defaultKeyGetter;
        // Visible in callback via `this.context`;
        this.context = context;
        this._diffModeMultiple = diffMode === "multiple";
    }
    /**
   * Callback function when add a data
   */ DataDiffer.prototype.add = function(func) {
        this._add = func;
        return this;
    };
    /**
   * Callback function when update a data
   */ DataDiffer.prototype.update = function(func) {
        this._update = func;
        return this;
    };
    /**
   * Callback function when update a data and only work in `cbMode: 'byKey'`.
   */ DataDiffer.prototype.updateManyToOne = function(func) {
        this._updateManyToOne = func;
        return this;
    };
    /**
   * Callback function when update a data and only work in `cbMode: 'byKey'`.
   */ DataDiffer.prototype.updateOneToMany = function(func) {
        this._updateOneToMany = func;
        return this;
    };
    /**
   * Callback function when update a data and only work in `cbMode: 'byKey'`.
   */ DataDiffer.prototype.updateManyToMany = function(func) {
        this._updateManyToMany = func;
        return this;
    };
    /**
   * Callback function when remove a data
   */ DataDiffer.prototype.remove = function(func) {
        this._remove = func;
        return this;
    };
    DataDiffer.prototype.execute = function() {
        this[this._diffModeMultiple ? "_executeMultiple" : "_executeOneToOne"]();
    };
    DataDiffer.prototype._executeOneToOne = function() {
        var oldArr = this._old;
        var newArr = this._new;
        var newDataIndexMap = {};
        var oldDataKeyArr = new Array(oldArr.length);
        var newDataKeyArr = new Array(newArr.length);
        this._initIndexMap(oldArr, null, oldDataKeyArr, "_oldKeyGetter");
        this._initIndexMap(newArr, newDataIndexMap, newDataKeyArr, "_newKeyGetter");
        for(var i = 0; i < oldArr.length; i++){
            var oldKey = oldDataKeyArr[i];
            var newIdxMapVal = newDataIndexMap[oldKey];
            var newIdxMapValLen = $72bedc7af0abc791$var$dataIndexMapValueLength(newIdxMapVal);
            // idx can never be empty array here. see 'set null' logic below.
            if (newIdxMapValLen > 1) {
                // Consider there is duplicate key (for example, use dataItem.name as key).
                // We should make sure every item in newArr and oldArr can be visited.
                var newIdx = newIdxMapVal.shift();
                if (newIdxMapVal.length === 1) newDataIndexMap[oldKey] = newIdxMapVal[0];
                this._update && this._update(newIdx, i);
            } else if (newIdxMapValLen === 1) {
                newDataIndexMap[oldKey] = null;
                this._update && this._update(newIdxMapVal, i);
            } else this._remove && this._remove(i);
        }
        this._performRestAdd(newDataKeyArr, newDataIndexMap);
    };
    /**
   * For example, consider the case:
   * oldData: [o0, o1, o2, o3, o4, o5, o6, o7],
   * newData: [n0, n1, n2, n3, n4, n5, n6, n7, n8],
   * Where:
   *     o0, o1, n0 has key 'a' (many to one)
   *     o5, n4, n5, n6 has key 'b' (one to many)
   *     o2, n1 has key 'c' (one to one)
   *     n2, n3 has key 'd' (add)
   *     o3, o4 has key 'e' (remove)
   *     o6, o7, n7, n8 has key 'f' (many to many, treated as add and remove)
   * Then:
   *     (The order of the following directives are not ensured.)
   *     this._updateManyToOne(n0, [o0, o1]);
   *     this._updateOneToMany([n4, n5, n6], o5);
   *     this._update(n1, o2);
   *     this._remove(o3);
   *     this._remove(o4);
   *     this._remove(o6);
   *     this._remove(o7);
   *     this._add(n2);
   *     this._add(n3);
   *     this._add(n7);
   *     this._add(n8);
   */ DataDiffer.prototype._executeMultiple = function() {
        var oldArr = this._old;
        var newArr = this._new;
        var oldDataIndexMap = {};
        var newDataIndexMap = {};
        var oldDataKeyArr = [];
        var newDataKeyArr = [];
        this._initIndexMap(oldArr, oldDataIndexMap, oldDataKeyArr, "_oldKeyGetter");
        this._initIndexMap(newArr, newDataIndexMap, newDataKeyArr, "_newKeyGetter");
        for(var i = 0; i < oldDataKeyArr.length; i++){
            var oldKey = oldDataKeyArr[i];
            var oldIdxMapVal = oldDataIndexMap[oldKey];
            var newIdxMapVal = newDataIndexMap[oldKey];
            var oldIdxMapValLen = $72bedc7af0abc791$var$dataIndexMapValueLength(oldIdxMapVal);
            var newIdxMapValLen = $72bedc7af0abc791$var$dataIndexMapValueLength(newIdxMapVal);
            if (oldIdxMapValLen > 1 && newIdxMapValLen === 1) {
                this._updateManyToOne && this._updateManyToOne(newIdxMapVal, oldIdxMapVal);
                newDataIndexMap[oldKey] = null;
            } else if (oldIdxMapValLen === 1 && newIdxMapValLen > 1) {
                this._updateOneToMany && this._updateOneToMany(newIdxMapVal, oldIdxMapVal);
                newDataIndexMap[oldKey] = null;
            } else if (oldIdxMapValLen === 1 && newIdxMapValLen === 1) {
                this._update && this._update(newIdxMapVal, oldIdxMapVal);
                newDataIndexMap[oldKey] = null;
            } else if (oldIdxMapValLen > 1 && newIdxMapValLen > 1) {
                this._updateManyToMany && this._updateManyToMany(newIdxMapVal, oldIdxMapVal);
                newDataIndexMap[oldKey] = null;
            } else if (oldIdxMapValLen > 1) for(var i_1 = 0; i_1 < oldIdxMapValLen; i_1++)this._remove && this._remove(oldIdxMapVal[i_1]);
            else this._remove && this._remove(oldIdxMapVal);
        }
        this._performRestAdd(newDataKeyArr, newDataIndexMap);
    };
    DataDiffer.prototype._performRestAdd = function(newDataKeyArr, newDataIndexMap) {
        for(var i = 0; i < newDataKeyArr.length; i++){
            var newKey = newDataKeyArr[i];
            var newIdxMapVal = newDataIndexMap[newKey];
            var idxMapValLen = $72bedc7af0abc791$var$dataIndexMapValueLength(newIdxMapVal);
            if (idxMapValLen > 1) for(var j = 0; j < idxMapValLen; j++)this._add && this._add(newIdxMapVal[j]);
            else if (idxMapValLen === 1) this._add && this._add(newIdxMapVal);
            // Support both `newDataKeyArr` are duplication removed or not removed.
            newDataIndexMap[newKey] = null;
        }
    };
    DataDiffer.prototype._initIndexMap = function(arr, // Can be null.
    map, // In 'byKey', the output `keyArr` is duplication removed.
    // In 'byIndex', the output `keyArr` is not duplication removed and
    //     its indices are accurately corresponding to `arr`.
    keyArr, keyGetterName) {
        var cbModeMultiple = this._diffModeMultiple;
        for(var i = 0; i < arr.length; i++){
            // Add prefix to avoid conflict with Object.prototype.
            var key = "_ec_" + this[keyGetterName](arr[i], i);
            if (!cbModeMultiple) keyArr[i] = key;
            if (!map) continue;
            var idxMapVal = map[key];
            var idxMapValLen = $72bedc7af0abc791$var$dataIndexMapValueLength(idxMapVal);
            if (idxMapValLen === 0) {
                // Simple optimize: in most cases, one index has one key,
                // do not need array.
                map[key] = i;
                if (cbModeMultiple) keyArr.push(key);
            } else if (idxMapValLen === 1) map[key] = [
                idxMapVal,
                i
            ];
            else idxMapVal.push(i);
        }
    };
    return DataDiffer;
}();
var $72bedc7af0abc791$export$2e2bcd8739ae039 = $72bedc7af0abc791$var$DataDiffer;



/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

var $9ff81a93befb1cc6$var$DimensionUserOuput = /** @class */ function() {
    function DimensionUserOuput(encode, dimRequest) {
        this._encode = encode;
        this._schema = dimRequest;
    }
    DimensionUserOuput.prototype.get = function() {
        return {
            // Do not generate full dimension name until fist used.
            fullDimensions: this._getFullDimensionNames(),
            encode: this._encode
        };
    };
    /**
   * Get all data store dimension names.
   * Theoretically a series data store is defined both by series and used dataset (if any).
   * If some dimensions are omitted for performance reason in `this.dimensions`,
   * the dimension name may not be auto-generated if user does not specify a dimension name.
   * In this case, the dimension name is `null`/`undefined`.
   */ DimensionUserOuput.prototype._getFullDimensionNames = function() {
        if (!this._cachedDimNames) this._cachedDimNames = this._schema ? this._schema.makeOutputDimensionNames() : [];
        return this._cachedDimNames;
    };
    return DimensionUserOuput;
}();
function $9ff81a93befb1cc6$export$505a22c3734846f1(data, schema) {
    var summary = {};
    var encode = summary.encode = {};
    var notExtraCoordDimMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
    var defaultedLabel = [];
    var defaultedTooltip = [];
    var userOutputEncode = {};
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(data.dimensions, function(dimName) {
        var dimItem = data.getDimensionInfo(dimName);
        var coordDim = dimItem.coordDim;
        if (coordDim) {
            (0, $e44eb14c4271d0f9$export$a7a9523472993e97)((0, $2b9c860c8cf83b68$export$cd51b5ca77f6f0e4).get(coordDim) == null);
            var coordDimIndex = dimItem.coordDimIndex;
            $9ff81a93befb1cc6$var$getOrCreateEncodeArr(encode, coordDim)[coordDimIndex] = dimName;
            if (!dimItem.isExtraCoord) {
                notExtraCoordDimMap.set(coordDim, 1);
                // Use the last coord dim (and label friendly) as default label,
                // because when dataset is used, it is hard to guess which dimension
                // can be value dimension. If both show x, y on label is not look good,
                // and conventionally y axis is focused more.
                if ($9ff81a93befb1cc6$var$mayLabelDimType(dimItem.type)) defaultedLabel[0] = dimName;
                // User output encode do not contain generated coords.
                // And it only has index. User can use index to retrieve value from the raw item array.
                $9ff81a93befb1cc6$var$getOrCreateEncodeArr(userOutputEncode, coordDim)[coordDimIndex] = data.getDimensionIndex(dimItem.name);
            }
            if (dimItem.defaultTooltip) defaultedTooltip.push(dimName);
        }
        (0, $2b9c860c8cf83b68$export$cd51b5ca77f6f0e4).each(function(v, otherDim) {
            var encodeArr = $9ff81a93befb1cc6$var$getOrCreateEncodeArr(encode, otherDim);
            var dimIndex = dimItem.otherDims[otherDim];
            if (dimIndex != null && dimIndex !== false) encodeArr[dimIndex] = dimItem.name;
        });
    });
    var dataDimsOnCoord = [];
    var encodeFirstDimNotExtra = {};
    notExtraCoordDimMap.each(function(v, coordDim) {
        var dimArr = encode[coordDim];
        encodeFirstDimNotExtra[coordDim] = dimArr[0];
        // Not necessary to remove duplicate, because a data
        // dim canot on more than one coordDim.
        dataDimsOnCoord = dataDimsOnCoord.concat(dimArr);
    });
    summary.dataDimsOnCoord = dataDimsOnCoord;
    summary.dataDimIndicesOnCoord = (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(dataDimsOnCoord, function(dimName) {
        return data.getDimensionInfo(dimName).storeDimIndex;
    });
    summary.encodeFirstDimNotExtra = encodeFirstDimNotExtra;
    var encodeLabel = encode.label;
    // FIXME `encode.label` is not recommended, because formatter cannot be set
    // in this way. Use label.formatter instead. Maybe remove this approach someday.
    if (encodeLabel && encodeLabel.length) defaultedLabel = encodeLabel.slice();
    var encodeTooltip = encode.tooltip;
    if (encodeTooltip && encodeTooltip.length) defaultedTooltip = encodeTooltip.slice();
    else if (!defaultedTooltip.length) defaultedTooltip = defaultedLabel.slice();
    encode.defaultedLabel = defaultedLabel;
    encode.defaultedTooltip = defaultedTooltip;
    summary.userOutput = new $9ff81a93befb1cc6$var$DimensionUserOuput(userOutputEncode, schema);
    return summary;
}
function $9ff81a93befb1cc6$var$getOrCreateEncodeArr(encode, dim) {
    if (!encode.hasOwnProperty(dim)) encode[dim] = [];
    return encode[dim];
}
function $9ff81a93befb1cc6$export$af1622903e71278e(axisType) {
    return axisType === "category" ? "ordinal" : axisType === "time" ? "time" : "float";
}
function $9ff81a93befb1cc6$var$mayLabelDimType(dimType) {
    // In most cases, ordinal and time do not suitable for label.
    // Ordinal info can be displayed on axis. Time is too long.
    return !(dimType === "ordinal" || dimType === "time");
} // function findTheLastDimMayLabel(data) {
 //     // Get last value dim
 //     let dimensions = data.dimensions.slice();
 //     let valueType;
 //     let valueDim;
 //     while (dimensions.length && (
 //         valueDim = dimensions.pop(),
 //         valueType = data.getDimensionInfo(valueDim).type,
 //         valueType === 'ordinal' || valueType === 'time'
 //     )) {} // jshint ignore:line
 //     return valueDim;
 // }


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
var $b5c373a4228aad66$var$SeriesDimensionDefine = /** @class */ function() {
    /**
   * @param opt All of the fields will be shallow copied.
   */ function SeriesDimensionDefine(opt) {
        /**
     * The format of `otherDims` is:
     * ```js
     * {
     *     tooltip?: number
     *     label?: number
     *     itemName?: number
     *     seriesName?: number
     * }
     * ```
     *
     * A `series.encode` can specified these fields:
     * ```js
     * encode: {
     *     // "3, 1, 5" is the index of data dimension.
     *     tooltip: [3, 1, 5],
     *     label: [0, 3],
     *     ...
     * }
     * ```
     * `otherDims` is the parse result of the `series.encode` above, like:
     * ```js
     * // Suppose the index of this data dimension is `3`.
     * this.otherDims = {
     *     // `3` is at the index `0` of the `encode.tooltip`
     *     tooltip: 0,
     *     // `3` is at the index `1` of the `encode.label`
     *     label: 1
     * };
     * ```
     *
     * This prop should never be `null`/`undefined` after initialized.
     */ this.otherDims = {};
        if (opt != null) $e44eb14c4271d0f9$export$8b58be045bf06082(this, opt);
    }
    return SeriesDimensionDefine;
}();
var $b5c373a4228aad66$export$2e2bcd8739ae039 = $b5c373a4228aad66$var$SeriesDimensionDefine;







/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 


var $1d7ef37cf336d833$var$inner = (0, $8917c02fd8256c67$export$64df9f8d92ae083f)();
var $1d7ef37cf336d833$var$dimTypeShort = {
    float: "f",
    int: "i",
    ordinal: "o",
    number: "n",
    time: "t"
};
/**
 * Represents the dimension requirement of a series.
 *
 * NOTICE:
 * When there are too many dimensions in dataset and many series, only the used dimensions
 * (i.e., used by coord sys and declared in `series.encode`) are add to `dimensionDefineList`.
 * But users may query data by other unused dimension names.
 * In this case, users can only query data if and only if they have defined dimension names
 * via ec option, so we provide `getDimensionIndexFromSource`, which only query them from
 * `source` dimensions.
 */ var $1d7ef37cf336d833$export$a1ef064685775f3e = /** @class */ function() {
    function SeriesDataSchema(opt) {
        this.dimensions = opt.dimensions;
        this._dimOmitted = opt.dimensionOmitted;
        this.source = opt.source;
        this._fullDimCount = opt.fullDimensionCount;
        this._updateDimOmitted(opt.dimensionOmitted);
    }
    SeriesDataSchema.prototype.isDimensionOmitted = function() {
        return this._dimOmitted;
    };
    SeriesDataSchema.prototype._updateDimOmitted = function(dimensionOmitted) {
        this._dimOmitted = dimensionOmitted;
        if (!dimensionOmitted) return;
        if (!this._dimNameMap) this._dimNameMap = $1d7ef37cf336d833$export$be39ae17310c33f7(this.source);
    };
    /**
   * @caution Can only be used when `dimensionOmitted: true`.
   *
   * Get index by user defined dimension name (i.e., not internal generate name).
   * That is, get index from `dimensionsDefine`.
   * If no `dimensionsDefine`, or no name get, return -1.
   */ SeriesDataSchema.prototype.getSourceDimensionIndex = function(dimName) {
        return (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(this._dimNameMap.get(dimName), -1);
    };
    /**
   * @caution Can only be used when `dimensionOmitted: true`.
   *
   * Notice: may return `null`/`undefined` if user not specify dimension names.
   */ SeriesDataSchema.prototype.getSourceDimension = function(dimIndex) {
        var dimensionsDefine = this.source.dimensionsDefine;
        if (dimensionsDefine) return dimensionsDefine[dimIndex];
    };
    SeriesDataSchema.prototype.makeStoreSchema = function() {
        var dimCount = this._fullDimCount;
        var willRetrieveDataByName = (0, $3790a8a1aeffac84$export$8911336b527f8517)(this.source);
        var makeHashStrict = !$1d7ef37cf336d833$export$238b87930d825d87(dimCount);
        // If source don't have dimensions or series don't omit unsed dimensions.
        // Generate from seriesDimList directly
        var dimHash = "";
        var dims = [];
        for(var fullDimIdx = 0, seriesDimIdx = 0; fullDimIdx < dimCount; fullDimIdx++){
            var property = void 0;
            var type = void 0;
            var ordinalMeta = void 0;
            var seriesDimDef = this.dimensions[seriesDimIdx];
            // The list has been sorted by `storeDimIndex` asc.
            if (seriesDimDef && seriesDimDef.storeDimIndex === fullDimIdx) {
                property = willRetrieveDataByName ? seriesDimDef.name : null;
                type = seriesDimDef.type;
                ordinalMeta = seriesDimDef.ordinalMeta;
                seriesDimIdx++;
            } else {
                var sourceDimDef = this.getSourceDimension(fullDimIdx);
                if (sourceDimDef) {
                    property = willRetrieveDataByName ? sourceDimDef.name : null;
                    type = sourceDimDef.type;
                }
            }
            dims.push({
                property: property,
                type: type,
                ordinalMeta: ordinalMeta
            });
            // If retrieving data by index,
            //   use <index, type, ordinalMeta> to determine whether data can be shared.
            //   (Because in this case there might be no dimension name defined in dataset, but indices always exists).
            //   (Indices are always 0, 1, 2, ..., so we can ignore them to shorten the hash).
            // Otherwise if retrieving data by property name (like `data: [{aa: 123, bb: 765}, ...]`),
            //   use <property, type, ordinalMeta> in hash.
            if (willRetrieveDataByName && property != null && (!seriesDimDef || !seriesDimDef.isCalculationCoord)) dimHash += makeHashStrict ? property.replace(/\`/g, "`1").replace(/\$/g, "`2") : property;
            dimHash += "$";
            dimHash += $1d7ef37cf336d833$var$dimTypeShort[type] || "f";
            if (ordinalMeta) dimHash += ordinalMeta.uid;
            dimHash += "$";
        }
        // Source from endpoint(usually series) will be read differently
        // when seriesLayoutBy or startIndex(which is affected by sourceHeader) are different.
        // So we use this three props as key.
        var source = this.source;
        var hash = [
            source.seriesLayoutBy,
            source.startIndex,
            dimHash
        ].join("$$");
        return {
            dimensions: dims,
            hash: hash
        };
    };
    SeriesDataSchema.prototype.makeOutputDimensionNames = function() {
        var result = [];
        for(var fullDimIdx = 0, seriesDimIdx = 0; fullDimIdx < this._fullDimCount; fullDimIdx++){
            var name_1 = void 0;
            var seriesDimDef = this.dimensions[seriesDimIdx];
            // The list has been sorted by `storeDimIndex` asc.
            if (seriesDimDef && seriesDimDef.storeDimIndex === fullDimIdx) {
                if (!seriesDimDef.isCalculationCoord) name_1 = seriesDimDef.name;
                seriesDimIdx++;
            } else {
                var sourceDimDef = this.getSourceDimension(fullDimIdx);
                if (sourceDimDef) name_1 = sourceDimDef.name;
            }
            result.push(name_1);
        }
        return result;
    };
    SeriesDataSchema.prototype.appendCalculationDimension = function(dimDef) {
        this.dimensions.push(dimDef);
        dimDef.isCalculationCoord = true;
        this._fullDimCount++;
        // If append dimension on a data store, consider the store
        // might be shared by different series, series dimensions not
        // really map to store dimensions.
        this._updateDimOmitted(true);
    };
    return SeriesDataSchema;
}();
function $1d7ef37cf336d833$export$fafbc856132a3a0e(schema) {
    return schema instanceof $1d7ef37cf336d833$export$a1ef064685775f3e;
}
function $1d7ef37cf336d833$export$a477f5bebfd07944(dimsDef) {
    var dataDimNameMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
    for(var i = 0; i < (dimsDef || []).length; i++){
        var dimDefItemRaw = dimsDef[i];
        var userDimName = (0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(dimDefItemRaw) ? dimDefItemRaw.name : dimDefItemRaw;
        if (userDimName != null && dataDimNameMap.get(userDimName) == null) dataDimNameMap.set(userDimName, i);
    }
    return dataDimNameMap;
}
function $1d7ef37cf336d833$export$be39ae17310c33f7(source) {
    var innerSource = $1d7ef37cf336d833$var$inner(source);
    return innerSource.dimNameMap || (innerSource.dimNameMap = $1d7ef37cf336d833$export$a477f5bebfd07944(source.dimensionsDefine));
}
function $1d7ef37cf336d833$export$238b87930d825d87(dimCount) {
    return dimCount > 30;
}


var $4e35bd54bdeb6444$var$isObject = $e44eb14c4271d0f9$export$a6cdc56e425d0d0a;
var $4e35bd54bdeb6444$var$map = $e44eb14c4271d0f9$export$871de8747c9eaa88;
var $4e35bd54bdeb6444$var$CtorInt32Array = typeof Int32Array === "undefined" ? Array : Int32Array;
// Use prefix to avoid index to be the same as otherIdList[idx],
// which will cause weird update animation.
var $4e35bd54bdeb6444$var$ID_PREFIX = "e\0\0";
var $4e35bd54bdeb6444$var$INDEX_NOT_FOUND = -1;
// type SeriesDimensionIndex = DimensionIndex;
var $4e35bd54bdeb6444$var$TRANSFERABLE_PROPERTIES = [
    "hasItemOption",
    "_nameList",
    "_idList",
    "_invertedIndicesMap",
    "_dimSummary",
    "userOutput",
    "_rawData",
    "_dimValueGetter",
    "_nameDimIdx",
    "_idDimIdx",
    "_nameRepeatCount"
];
var $4e35bd54bdeb6444$var$CLONE_PROPERTIES = [
    "_approximateExtent"
];
// -----------------------------
// Internal method declarations:
// -----------------------------
var $4e35bd54bdeb6444$var$prepareInvertedIndex;
var $4e35bd54bdeb6444$var$getId;
var $4e35bd54bdeb6444$var$getIdNameFromStore;
var $4e35bd54bdeb6444$var$normalizeDimensions;
var $4e35bd54bdeb6444$var$transferProperties;
var $4e35bd54bdeb6444$var$cloneListForMapAndSample;
var $4e35bd54bdeb6444$var$makeIdFromName;
var $4e35bd54bdeb6444$var$SeriesData = /** @class */ function() {
    /**
   * @param dimensionsInput.dimensions
   *        For example, ['someDimName', {name: 'someDimName', type: 'someDimType'}, ...].
   *        Dimensions should be concrete names like x, y, z, lng, lat, angle, radius
   */ function SeriesData(dimensionsInput, hostModel) {
        this.type = "list";
        this._dimOmitted = false;
        this._nameList = [];
        this._idList = [];
        // Models of data option is stored sparse for optimizing memory cost
        // Never used yet (not used yet).
        // private _optionModels: Model[] = [];
        // Global visual properties after visual coding
        this._visual = {};
        // Global layout properties.
        this._layout = {};
        // Item visual properties after visual coding
        this._itemVisuals = [];
        // Item layout properties after layout
        this._itemLayouts = [];
        // Graphic elements
        this._graphicEls = [];
        // key: dim, value: extent
        this._approximateExtent = {};
        this._calculationInfo = {};
        // Having detected that there is data item is non primitive type
        // (in type `OptionDataItemObject`).
        // Like `data: [ { value: xx, itemStyle: {...} }, ...]`
        // At present it only happen in `SOURCE_FORMAT_ORIGINAL`.
        this.hasItemOption = false;
        // Methods that create a new list based on this list should be listed here.
        // Notice that those method should `RETURN` the new list.
        this.TRANSFERABLE_METHODS = [
            "cloneShallow",
            "downSample",
            "lttbDownSample",
            "map"
        ];
        // Methods that change indices of this list should be listed here.
        this.CHANGABLE_METHODS = [
            "filterSelf",
            "selectRange"
        ];
        this.DOWNSAMPLE_METHODS = [
            "downSample",
            "lttbDownSample"
        ];
        var dimensions;
        var assignStoreDimIdx = false;
        if ((0, $1d7ef37cf336d833$export$fafbc856132a3a0e)(dimensionsInput)) {
            dimensions = dimensionsInput.dimensions;
            this._dimOmitted = dimensionsInput.isDimensionOmitted();
            this._schema = dimensionsInput;
        } else {
            assignStoreDimIdx = true;
            dimensions = dimensionsInput;
        }
        dimensions = dimensions || [
            "x",
            "y"
        ];
        var dimensionInfos = {};
        var dimensionNames = [];
        var invertedIndicesMap = {};
        var needsHasOwn = false;
        var emptyObj = {};
        for(var i = 0; i < dimensions.length; i++){
            // Use the original dimensions[i], where other flag props may exists.
            var dimInfoInput = dimensions[i];
            var dimensionInfo = $e44eb14c4271d0f9$export$844ec244b1367d54(dimInfoInput) ? new (0, $b5c373a4228aad66$export$2e2bcd8739ae039)({
                name: dimInfoInput
            }) : !(dimInfoInput instanceof (0, $b5c373a4228aad66$export$2e2bcd8739ae039)) ? new (0, $b5c373a4228aad66$export$2e2bcd8739ae039)(dimInfoInput) : dimInfoInput;
            var dimensionName = dimensionInfo.name;
            dimensionInfo.type = dimensionInfo.type || "float";
            if (!dimensionInfo.coordDim) {
                dimensionInfo.coordDim = dimensionName;
                dimensionInfo.coordDimIndex = 0;
            }
            var otherDims = dimensionInfo.otherDims = dimensionInfo.otherDims || {};
            dimensionNames.push(dimensionName);
            dimensionInfos[dimensionName] = dimensionInfo;
            if (emptyObj[dimensionName] != null) needsHasOwn = true;
            if (dimensionInfo.createInvertedIndices) invertedIndicesMap[dimensionName] = [];
            if (otherDims.itemName === 0) this._nameDimIdx = i;
            if (otherDims.itemId === 0) this._idDimIdx = i;
            $e44eb14c4271d0f9$export$a7a9523472993e97(assignStoreDimIdx || dimensionInfo.storeDimIndex >= 0);
            if (assignStoreDimIdx) dimensionInfo.storeDimIndex = i;
        }
        this.dimensions = dimensionNames;
        this._dimInfos = dimensionInfos;
        this._initGetDimensionInfo(needsHasOwn);
        this.hostModel = hostModel;
        this._invertedIndicesMap = invertedIndicesMap;
        if (this._dimOmitted) {
            var dimIdxToName_1 = this._dimIdxToName = $e44eb14c4271d0f9$export$55f8aa7ef875b0a4();
            $e44eb14c4271d0f9$export$79b2f7037acddd43(dimensionNames, function(dimName) {
                dimIdxToName_1.set(dimensionInfos[dimName].storeDimIndex, dimName);
            });
        }
    }
    /**
   *
   * Get concrete dimension name by dimension name or dimension index.
   * If input a dimension name, do not validate whether the dimension name exits.
   *
   * @caution
   * @param dim Must make sure the dimension is `SeriesDimensionLoose`.
   * Because only those dimensions will have auto-generated dimension names if not
   * have a user-specified name, and other dimensions will get a return of null/undefined.
   *
   * @notice Because of this reason, should better use `getDimensionIndex` instead, for examples:
   * ```js
   * const val = data.getStore().get(data.getDimensionIndex(dim), dataIdx);
   * ```
   *
   * @return Concrete dim name.
   */ SeriesData.prototype.getDimension = function(dim) {
        var dimIdx = this._recognizeDimIndex(dim);
        if (dimIdx == null) return dim;
        dimIdx = dim;
        if (!this._dimOmitted) return this.dimensions[dimIdx];
        // Retrieve from series dimension definition because it probably contains
        // generated dimension name (like 'x', 'y').
        var dimName = this._dimIdxToName.get(dimIdx);
        if (dimName != null) return dimName;
        var sourceDimDef = this._schema.getSourceDimension(dimIdx);
        if (sourceDimDef) return sourceDimDef.name;
    };
    /**
   * Get dimension index in data store. Return -1 if not found.
   * Can be used to index value from getRawValue.
   */ SeriesData.prototype.getDimensionIndex = function(dim) {
        var dimIdx = this._recognizeDimIndex(dim);
        if (dimIdx != null) return dimIdx;
        if (dim == null) return -1;
        var dimInfo = this._getDimInfo(dim);
        return dimInfo ? dimInfo.storeDimIndex : this._dimOmitted ? this._schema.getSourceDimensionIndex(dim) : -1;
    };
    /**
   * The meanings of the input parameter `dim`:
   *
   * + If dim is a number (e.g., `1`), it means the index of the dimension.
   *   For example, `getDimension(0)` will return 'x' or 'lng' or 'radius'.
   * + If dim is a number-like string (e.g., `"1"`):
   *     + If there is the same concrete dim name defined in `series.dimensions` or `dataset.dimensions`,
   *        it means that concrete name.
   *     + If not, it will be converted to a number, which means the index of the dimension.
   *        (why? because of the backward compatibility. We have been tolerating number-like string in
   *        dimension setting, although now it seems that it is not a good idea.)
   *     For example, `visualMap[i].dimension: "1"` is the same meaning as `visualMap[i].dimension: 1`,
   *     if no dimension name is defined as `"1"`.
   * + If dim is a not-number-like string, it means the concrete dim name.
   *   For example, it can be be default name `"x"`, `"y"`, `"z"`, `"lng"`, `"lat"`, `"angle"`, `"radius"`,
   *   or customized in `dimensions` property of option like `"age"`.
   *
   * @return recognized `DimensionIndex`. Otherwise return null/undefined (means that dim is `DimensionName`).
   */ SeriesData.prototype._recognizeDimIndex = function(dim) {
        if ($e44eb14c4271d0f9$export$7e4aa119212bc614(dim) || dim != null && !isNaN(dim) && !this._getDimInfo(dim) && (!this._dimOmitted || this._schema.getSourceDimensionIndex(dim) < 0)) return +dim;
    };
    SeriesData.prototype._getStoreDimIndex = function(dim) {
        var dimIdx = this.getDimensionIndex(dim);
        if (dimIdx == null) throw new Error("Unknown dimension " + dim);
        return dimIdx;
    };
    /**
   * Get type and calculation info of particular dimension
   * @param dim
   *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius
   *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'
   */ SeriesData.prototype.getDimensionInfo = function(dim) {
        // Do not clone, because there may be categories in dimInfo.
        return this._getDimInfo(this.getDimension(dim));
    };
    SeriesData.prototype._initGetDimensionInfo = function(needsHasOwn) {
        var dimensionInfos = this._dimInfos;
        this._getDimInfo = needsHasOwn ? function(dimName) {
            return dimensionInfos.hasOwnProperty(dimName) ? dimensionInfos[dimName] : undefined;
        } : function(dimName) {
            return dimensionInfos[dimName];
        };
    };
    /**
   * concrete dimension name list on coord.
   */ SeriesData.prototype.getDimensionsOnCoord = function() {
        return this._dimSummary.dataDimsOnCoord.slice();
    };
    SeriesData.prototype.mapDimension = function(coordDim, idx) {
        var dimensionsSummary = this._dimSummary;
        if (idx == null) return dimensionsSummary.encodeFirstDimNotExtra[coordDim];
        var dims = dimensionsSummary.encode[coordDim];
        return dims ? dims[idx] : null;
    };
    SeriesData.prototype.mapDimensionsAll = function(coordDim) {
        var dimensionsSummary = this._dimSummary;
        var dims = dimensionsSummary.encode[coordDim];
        return (dims || []).slice();
    };
    SeriesData.prototype.getStore = function() {
        return this._store;
    };
    /**
   * Initialize from data
   * @param data source or data or data store.
   * @param nameList The name of a datum is used on data diff and
   *        default label/tooltip.
   *        A name can be specified in encode.itemName,
   *        or dataItem.name (only for series option data),
   *        or provided in nameList from outside.
   */ SeriesData.prototype.initData = function(data, nameList, dimValueGetter) {
        var _this = this;
        var store;
        if (data instanceof (0, $ed6990ed945720aa$export$2e2bcd8739ae039)) store = data;
        if (!store) {
            var dimensions = this.dimensions;
            var provider = (0, $3790a8a1aeffac84$export$22b808bc02a60488)(data) || $e44eb14c4271d0f9$export$1e2f57719e155213(data) ? new (0, $b7a7be40e6489dbc$export$b900d7c4c3952a40)(data, dimensions.length) : data;
            store = new (0, $ed6990ed945720aa$export$2e2bcd8739ae039)();
            var dimensionInfos = $4e35bd54bdeb6444$var$map(dimensions, function(dimName) {
                return {
                    type: _this._dimInfos[dimName].type,
                    property: dimName
                };
            });
            store.initData(provider, dimensionInfos, dimValueGetter);
        }
        this._store = store;
        // Reset
        this._nameList = (nameList || []).slice();
        this._idList = [];
        this._nameRepeatCount = {};
        this._doInit(0, store.count());
        // Cache summary info for fast visit. See "dimensionHelper".
        // Needs to be initialized after store is prepared.
        this._dimSummary = (0, $9ff81a93befb1cc6$export$505a22c3734846f1)(this, this._schema);
        this.userOutput = this._dimSummary.userOutput;
    };
    /**
   * Caution: Can be only called on raw data (before `this._indices` created).
   */ SeriesData.prototype.appendData = function(data) {
        var range = this._store.appendData(data);
        this._doInit(range[0], range[1]);
    };
    /**
   * Caution: Can be only called on raw data (before `this._indices` created).
   * This method does not modify `rawData` (`dataProvider`), but only
   * add values to store.
   *
   * The final count will be increased by `Math.max(values.length, names.length)`.
   *
   * @param values That is the SourceType: 'arrayRows', like
   *        [
   *            [12, 33, 44],
   *            [NaN, 43, 1],
   *            ['-', 'asdf', 0]
   *        ]
   *        Each item is exactly corresponding to a dimension.
   */ SeriesData.prototype.appendValues = function(values, names) {
        var _a = this._store.appendValues(values, names.length), start = _a.start, end = _a.end;
        var shouldMakeIdFromName = this._shouldMakeIdFromName();
        this._updateOrdinalMeta();
        if (names) for(var idx = start; idx < end; idx++){
            var sourceIdx = idx - start;
            this._nameList[idx] = names[sourceIdx];
            if (shouldMakeIdFromName) $4e35bd54bdeb6444$var$makeIdFromName(this, idx);
        }
    };
    SeriesData.prototype._updateOrdinalMeta = function() {
        var store = this._store;
        var dimensions = this.dimensions;
        for(var i = 0; i < dimensions.length; i++){
            var dimInfo = this._dimInfos[dimensions[i]];
            if (dimInfo.ordinalMeta) store.collectOrdinalMeta(dimInfo.storeDimIndex, dimInfo.ordinalMeta);
        }
    };
    SeriesData.prototype._shouldMakeIdFromName = function() {
        var provider = this._store.getProvider();
        return this._idDimIdx == null && provider.getSource().sourceFormat !== (0, $2b9c860c8cf83b68$export$a918cb016a382d45) && !provider.fillStorage;
    };
    SeriesData.prototype._doInit = function(start, end) {
        if (start >= end) return;
        var store = this._store;
        var provider = store.getProvider();
        this._updateOrdinalMeta();
        var nameList = this._nameList;
        var idList = this._idList;
        var sourceFormat = provider.getSource().sourceFormat;
        var isFormatOriginal = sourceFormat === (0, $2b9c860c8cf83b68$export$2823037fb9d8f0c6);
        // Each data item is value
        // [1, 2]
        // 2
        // Bar chart, line chart which uses category axis
        // only gives the 'y' value. 'x' value is the indices of category
        // Use a tempValue to normalize the value to be a (x, y) value
        // If dataItem is {name: ...} or {id: ...}, it has highest priority.
        // This kind of ids and names are always stored `_nameList` and `_idList`.
        if (isFormatOriginal && !provider.pure) {
            var sharedDataItem = [];
            for(var idx = start; idx < end; idx++){
                // NOTICE: Try not to write things into dataItem
                var dataItem = provider.getItem(idx, sharedDataItem);
                if (!this.hasItemOption && (0, $8917c02fd8256c67$export$3e1a543f33ef6883)(dataItem)) this.hasItemOption = true;
                if (dataItem) {
                    var itemName = dataItem.name;
                    if (nameList[idx] == null && itemName != null) nameList[idx] = (0, $8917c02fd8256c67$export$fb1a222ba5dd6e51)(itemName, null);
                    var itemId = dataItem.id;
                    if (idList[idx] == null && itemId != null) idList[idx] = (0, $8917c02fd8256c67$export$fb1a222ba5dd6e51)(itemId, null);
                }
            }
        }
        if (this._shouldMakeIdFromName()) for(var idx = start; idx < end; idx++)$4e35bd54bdeb6444$var$makeIdFromName(this, idx);
        $4e35bd54bdeb6444$var$prepareInvertedIndex(this);
    };
    /**
   * PENDING: In fact currently this function is only used to short-circuit
   * the calling of `scale.unionExtentFromData` when data have been filtered by modules
   * like "dataZoom". `scale.unionExtentFromData` is used to calculate data extent for series on
   * an axis, but if a "axis related data filter module" is used, the extent of the axis have
   * been fixed and no need to calling `scale.unionExtentFromData` actually.
   * But if we add "custom data filter" in future, which is not "axis related", this method may
   * be still needed.
   *
   * Optimize for the scenario that data is filtered by a given extent.
   * Consider that if data amount is more than hundreds of thousand,
   * extent calculation will cost more than 10ms and the cache will
   * be erased because of the filtering.
   */ SeriesData.prototype.getApproximateExtent = function(dim) {
        return this._approximateExtent[dim] || this._store.getDataExtent(this._getStoreDimIndex(dim));
    };
    /**
   * Calculate extent on a filtered data might be time consuming.
   * Approximate extent is only used for: calculate extent of filtered data outside.
   */ SeriesData.prototype.setApproximateExtent = function(extent, dim) {
        dim = this.getDimension(dim);
        this._approximateExtent[dim] = extent.slice();
    };
    SeriesData.prototype.getCalculationInfo = function(key) {
        return this._calculationInfo[key];
    };
    SeriesData.prototype.setCalculationInfo = function(key, value) {
        $4e35bd54bdeb6444$var$isObject(key) ? $e44eb14c4271d0f9$export$8b58be045bf06082(this._calculationInfo, key) : this._calculationInfo[key] = value;
    };
    /**
   * @return Never be null/undefined. `number` will be converted to string. Because:
   * In most cases, name is used in display, where returning a string is more convenient.
   * In other cases, name is used in query (see `indexOfName`), where we can keep the
   * rule that name `2` equals to name `'2'`.
   */ SeriesData.prototype.getName = function(idx) {
        var rawIndex = this.getRawIndex(idx);
        var name = this._nameList[rawIndex];
        if (name == null && this._nameDimIdx != null) name = $4e35bd54bdeb6444$var$getIdNameFromStore(this, this._nameDimIdx, rawIndex);
        if (name == null) name = "";
        return name;
    };
    SeriesData.prototype._getCategory = function(dimIdx, idx) {
        var ordinal = this._store.get(dimIdx, idx);
        var ordinalMeta = this._store.getOrdinalMeta(dimIdx);
        if (ordinalMeta) return ordinalMeta.categories[ordinal];
        return ordinal;
    };
    /**
   * @return Never null/undefined. `number` will be converted to string. Because:
   * In all cases having encountered at present, id is used in making diff comparison, which
   * are usually based on hash map. We can keep the rule that the internal id are always string
   * (treat `2` is the same as `'2'`) to make the related logic simple.
   */ SeriesData.prototype.getId = function(idx) {
        return $4e35bd54bdeb6444$var$getId(this, this.getRawIndex(idx));
    };
    SeriesData.prototype.count = function() {
        return this._store.count();
    };
    /**
   * Get value. Return NaN if idx is out of range.
   *
   * @notice Should better to use `data.getStore().get(dimIndex, dataIdx)` instead.
   */ SeriesData.prototype.get = function(dim, idx) {
        var store = this._store;
        var dimInfo = this._dimInfos[dim];
        if (dimInfo) return store.get(dimInfo.storeDimIndex, idx);
    };
    /**
   * @notice Should better to use `data.getStore().getByRawIndex(dimIndex, dataIdx)` instead.
   */ SeriesData.prototype.getByRawIndex = function(dim, rawIdx) {
        var store = this._store;
        var dimInfo = this._dimInfos[dim];
        if (dimInfo) return store.getByRawIndex(dimInfo.storeDimIndex, rawIdx);
    };
    SeriesData.prototype.getIndices = function() {
        return this._store.getIndices();
    };
    SeriesData.prototype.getDataExtent = function(dim) {
        return this._store.getDataExtent(this._getStoreDimIndex(dim));
    };
    SeriesData.prototype.getSum = function(dim) {
        return this._store.getSum(this._getStoreDimIndex(dim));
    };
    SeriesData.prototype.getMedian = function(dim) {
        return this._store.getMedian(this._getStoreDimIndex(dim));
    };
    SeriesData.prototype.getValues = function(dimensions, idx) {
        var _this = this;
        var store = this._store;
        return $e44eb14c4271d0f9$export$43bee75e5e14138e(dimensions) ? store.getValues($4e35bd54bdeb6444$var$map(dimensions, function(dim) {
            return _this._getStoreDimIndex(dim);
        }), idx) : store.getValues(dimensions);
    };
    /**
   * If value is NaN. Including '-'
   * Only check the coord dimensions.
   */ SeriesData.prototype.hasValue = function(idx) {
        var dataDimIndicesOnCoord = this._dimSummary.dataDimIndicesOnCoord;
        for(var i = 0, len = dataDimIndicesOnCoord.length; i < len; i++){
            // Ordinal type originally can be string or number.
            // But when an ordinal type is used on coord, it can
            // not be string but only number. So we can also use isNaN.
            if (isNaN(this._store.get(dataDimIndicesOnCoord[i], idx))) return false;
        }
        return true;
    };
    /**
   * Retrieve the index with given name
   */ SeriesData.prototype.indexOfName = function(name) {
        for(var i = 0, len = this._store.count(); i < len; i++){
            if (this.getName(i) === name) return i;
        }
        return -1;
    };
    SeriesData.prototype.getRawIndex = function(idx) {
        return this._store.getRawIndex(idx);
    };
    SeriesData.prototype.indexOfRawIndex = function(rawIndex) {
        return this._store.indexOfRawIndex(rawIndex);
    };
    /**
   * Only support the dimension which inverted index created.
   * Do not support other cases until required.
   * @param dim concrete dim
   * @param value ordinal index
   * @return rawIndex
   */ SeriesData.prototype.rawIndexOf = function(dim, value) {
        var invertedIndices = dim && this._invertedIndicesMap[dim];
        if (!invertedIndices) throw new Error("Do not supported yet");
        var rawIndex = invertedIndices[value];
        if (rawIndex == null || isNaN(rawIndex)) return $4e35bd54bdeb6444$var$INDEX_NOT_FOUND;
        return rawIndex;
    };
    /**
   * Retrieve the index of nearest value
   * @param dim
   * @param value
   * @param [maxDistance=Infinity]
   * @return If and only if multiple indices has
   *         the same value, they are put to the result.
   */ SeriesData.prototype.indicesOfNearest = function(dim, value, maxDistance) {
        return this._store.indicesOfNearest(this._getStoreDimIndex(dim), value, maxDistance);
    };
    SeriesData.prototype.each = function(dims, cb, ctx) {
        "use strict";
        if ($e44eb14c4271d0f9$export$f6e2535fb5126e54(dims)) {
            ctx = cb;
            cb = dims;
            dims = [];
        }
        // ctxCompat just for compat echarts3
        var fCtx = ctx || this;
        var dimIndices = $4e35bd54bdeb6444$var$map($4e35bd54bdeb6444$var$normalizeDimensions(dims), this._getStoreDimIndex, this);
        this._store.each(dimIndices, fCtx ? $e44eb14c4271d0f9$export$2385a24977818dd0(cb, fCtx) : cb);
    };
    SeriesData.prototype.filterSelf = function(dims, cb, ctx) {
        "use strict";
        if ($e44eb14c4271d0f9$export$f6e2535fb5126e54(dims)) {
            ctx = cb;
            cb = dims;
            dims = [];
        }
        // ctxCompat just for compat echarts3
        var fCtx = ctx || this;
        var dimIndices = $4e35bd54bdeb6444$var$map($4e35bd54bdeb6444$var$normalizeDimensions(dims), this._getStoreDimIndex, this);
        this._store = this._store.filter(dimIndices, fCtx ? $e44eb14c4271d0f9$export$2385a24977818dd0(cb, fCtx) : cb);
        return this;
    };
    /**
   * Select data in range. (For optimization of filter)
   * (Manually inline code, support 5 million data filtering in data zoom.)
   */ SeriesData.prototype.selectRange = function(range) {
        "use strict";
        var _this = this;
        var innerRange = {};
        var dims = $e44eb14c4271d0f9$export$ed97f33186d4b816(range);
        var dimIndices = [];
        $e44eb14c4271d0f9$export$79b2f7037acddd43(dims, function(dim) {
            var dimIdx = _this._getStoreDimIndex(dim);
            innerRange[dimIdx] = range[dim];
            dimIndices.push(dimIdx);
        });
        this._store = this._store.selectRange(innerRange);
        return this;
    };
    /* eslint-enable max-len */ SeriesData.prototype.mapArray = function(dims, cb, ctx) {
        "use strict";
        if ($e44eb14c4271d0f9$export$f6e2535fb5126e54(dims)) {
            ctx = cb;
            cb = dims;
            dims = [];
        }
        // ctxCompat just for compat echarts3
        ctx = ctx || this;
        var result = [];
        this.each(dims, function() {
            result.push(cb && cb.apply(this, arguments));
        }, ctx);
        return result;
    };
    SeriesData.prototype.map = function(dims, cb, ctx, ctxCompat) {
        "use strict";
        // ctxCompat just for compat echarts3
        var fCtx = ctx || ctxCompat || this;
        var dimIndices = $4e35bd54bdeb6444$var$map($4e35bd54bdeb6444$var$normalizeDimensions(dims), this._getStoreDimIndex, this);
        var list = $4e35bd54bdeb6444$var$cloneListForMapAndSample(this);
        list._store = this._store.map(dimIndices, fCtx ? $e44eb14c4271d0f9$export$2385a24977818dd0(cb, fCtx) : cb);
        return list;
    };
    SeriesData.prototype.modify = function(dims, cb, ctx, ctxCompat) {
        var _this = this;
        // ctxCompat just for compat echarts3
        var fCtx = ctx || ctxCompat || this;
        $e44eb14c4271d0f9$export$79b2f7037acddd43($4e35bd54bdeb6444$var$normalizeDimensions(dims), function(dim) {
            var dimInfo = _this.getDimensionInfo(dim);
            if (!dimInfo.isCalculationCoord) console.error("Danger: only stack dimension can be modified");
        });
        var dimIndices = $4e35bd54bdeb6444$var$map($4e35bd54bdeb6444$var$normalizeDimensions(dims), this._getStoreDimIndex, this);
        // If do shallow clone here, if there are too many stacked series,
        // it still cost lots of memory, because `_store.dimensions` are not shared.
        // We should consider there probably be shallow clone happen in each series
        // in consequent filter/map.
        this._store.modify(dimIndices, fCtx ? $e44eb14c4271d0f9$export$2385a24977818dd0(cb, fCtx) : cb);
    };
    /**
   * Large data down sampling on given dimension
   * @param sampleIndex Sample index for name and id
   */ SeriesData.prototype.downSample = function(dimension, rate, sampleValue, sampleIndex) {
        var list = $4e35bd54bdeb6444$var$cloneListForMapAndSample(this);
        list._store = this._store.downSample(this._getStoreDimIndex(dimension), rate, sampleValue, sampleIndex);
        return list;
    };
    /**
   * Large data down sampling using largest-triangle-three-buckets
   * @param {string} valueDimension
   * @param {number} targetCount
   */ SeriesData.prototype.lttbDownSample = function(valueDimension, rate) {
        var list = $4e35bd54bdeb6444$var$cloneListForMapAndSample(this);
        list._store = this._store.lttbDownSample(this._getStoreDimIndex(valueDimension), rate);
        return list;
    };
    SeriesData.prototype.getRawDataItem = function(idx) {
        return this._store.getRawDataItem(idx);
    };
    /**
   * Get model of one data item.
   */ // TODO: Type of data item
    SeriesData.prototype.getItemModel = function(idx) {
        var hostModel = this.hostModel;
        var dataItem = this.getRawDataItem(idx);
        return new (0, $d92ec0eb853c4005$export$2e2bcd8739ae039)(dataItem, hostModel, hostModel && hostModel.ecModel);
    };
    /**
   * Create a data differ
   */ SeriesData.prototype.diff = function(otherList) {
        var thisList = this;
        return new (0, $72bedc7af0abc791$export$2e2bcd8739ae039)(otherList ? otherList.getStore().getIndices() : [], this.getStore().getIndices(), function(idx) {
            return $4e35bd54bdeb6444$var$getId(otherList, idx);
        }, function(idx) {
            return $4e35bd54bdeb6444$var$getId(thisList, idx);
        });
    };
    /**
   * Get visual property.
   */ SeriesData.prototype.getVisual = function(key) {
        var visual = this._visual;
        return visual && visual[key];
    };
    SeriesData.prototype.setVisual = function(kvObj, val) {
        this._visual = this._visual || {};
        if ($4e35bd54bdeb6444$var$isObject(kvObj)) $e44eb14c4271d0f9$export$8b58be045bf06082(this._visual, kvObj);
        else this._visual[kvObj] = val;
    };
    /**
   * Get visual property of single data item
   */ // eslint-disable-next-line
    SeriesData.prototype.getItemVisual = function(idx, key) {
        var itemVisual = this._itemVisuals[idx];
        var val = itemVisual && itemVisual[key];
        if (val == null) // Use global visual property
        return this.getVisual(key);
        return val;
    };
    /**
   * If exists visual property of single data item
   */ SeriesData.prototype.hasItemVisual = function() {
        return this._itemVisuals.length > 0;
    };
    /**
   * Make sure itemVisual property is unique
   */ // TODO: use key to save visual to reduce memory.
    SeriesData.prototype.ensureUniqueItemVisual = function(idx, key) {
        var itemVisuals = this._itemVisuals;
        var itemVisual = itemVisuals[idx];
        if (!itemVisual) itemVisual = itemVisuals[idx] = {};
        var val = itemVisual[key];
        if (val == null) {
            val = this.getVisual(key);
            // TODO Performance?
            if ($e44eb14c4271d0f9$export$43bee75e5e14138e(val)) val = val.slice();
            else if ($4e35bd54bdeb6444$var$isObject(val)) val = $e44eb14c4271d0f9$export$8b58be045bf06082({}, val);
            itemVisual[key] = val;
        }
        return val;
    };
    // eslint-disable-next-line
    SeriesData.prototype.setItemVisual = function(idx, key, value) {
        var itemVisual = this._itemVisuals[idx] || {};
        this._itemVisuals[idx] = itemVisual;
        if ($4e35bd54bdeb6444$var$isObject(key)) $e44eb14c4271d0f9$export$8b58be045bf06082(itemVisual, key);
        else itemVisual[key] = value;
    };
    /**
   * Clear itemVisuals and list visual.
   */ SeriesData.prototype.clearAllVisual = function() {
        this._visual = {};
        this._itemVisuals = [];
    };
    SeriesData.prototype.setLayout = function(key, val) {
        $4e35bd54bdeb6444$var$isObject(key) ? $e44eb14c4271d0f9$export$8b58be045bf06082(this._layout, key) : this._layout[key] = val;
    };
    /**
   * Get layout property.
   */ SeriesData.prototype.getLayout = function(key) {
        return this._layout[key];
    };
    /**
   * Get layout of single data item
   */ SeriesData.prototype.getItemLayout = function(idx) {
        return this._itemLayouts[idx];
    };
    /**
   * Set layout of single data item
   */ SeriesData.prototype.setItemLayout = function(idx, layout, merge) {
        this._itemLayouts[idx] = merge ? $e44eb14c4271d0f9$export$8b58be045bf06082(this._itemLayouts[idx] || {}, layout) : layout;
    };
    /**
   * Clear all layout of single data item
   */ SeriesData.prototype.clearItemLayouts = function() {
        this._itemLayouts.length = 0;
    };
    /**
   * Set graphic element relative to data. It can be set as null
   */ SeriesData.prototype.setItemGraphicEl = function(idx, el) {
        var seriesIndex = this.hostModel && this.hostModel.seriesIndex;
        (0, $85ade22ad4768945$export$30d6736ebb8e18d5)(seriesIndex, this.dataType, idx, el);
        this._graphicEls[idx] = el;
    };
    SeriesData.prototype.getItemGraphicEl = function(idx) {
        return this._graphicEls[idx];
    };
    SeriesData.prototype.eachItemGraphicEl = function(cb, context) {
        $e44eb14c4271d0f9$export$79b2f7037acddd43(this._graphicEls, function(el, idx) {
            if (el) cb && cb.call(context, el, idx);
        });
    };
    /**
   * Shallow clone a new list except visual and layout properties, and graph elements.
   * New list only change the indices.
   */ SeriesData.prototype.cloneShallow = function(list) {
        if (!list) list = new SeriesData(this._schema ? this._schema : $4e35bd54bdeb6444$var$map(this.dimensions, this._getDimInfo, this), this.hostModel);
        $4e35bd54bdeb6444$var$transferProperties(list, this);
        list._store = this._store;
        return list;
    };
    /**
   * Wrap some method to add more feature
   */ SeriesData.prototype.wrapMethod = function(methodName, injectFunction) {
        var originalMethod = this[methodName];
        if (!$e44eb14c4271d0f9$export$f6e2535fb5126e54(originalMethod)) return;
        this.__wrappedMethods = this.__wrappedMethods || [];
        this.__wrappedMethods.push(methodName);
        this[methodName] = function() {
            var res = originalMethod.apply(this, arguments);
            return injectFunction.apply(this, [
                res
            ].concat($e44eb14c4271d0f9$export$58adb3bec8346d0f(arguments)));
        };
    };
    // ----------------------------------------------------------
    // A work around for internal method visiting private member.
    // ----------------------------------------------------------
    SeriesData.internalField = function() {
        $4e35bd54bdeb6444$var$prepareInvertedIndex = function(data) {
            var invertedIndicesMap = data._invertedIndicesMap;
            $e44eb14c4271d0f9$export$79b2f7037acddd43(invertedIndicesMap, function(invertedIndices, dim) {
                var dimInfo = data._dimInfos[dim];
                // Currently, only dimensions that has ordinalMeta can create inverted indices.
                var ordinalMeta = dimInfo.ordinalMeta;
                var store = data._store;
                if (ordinalMeta) {
                    invertedIndices = invertedIndicesMap[dim] = new $4e35bd54bdeb6444$var$CtorInt32Array(ordinalMeta.categories.length);
                    // The default value of TypedArray is 0. To avoid miss
                    // mapping to 0, we should set it as INDEX_NOT_FOUND.
                    for(var i = 0; i < invertedIndices.length; i++)invertedIndices[i] = $4e35bd54bdeb6444$var$INDEX_NOT_FOUND;
                    for(var i = 0; i < store.count(); i++)// Only support the case that all values are distinct.
                    invertedIndices[store.get(dimInfo.storeDimIndex, i)] = i;
                }
            });
        };
        $4e35bd54bdeb6444$var$getIdNameFromStore = function(data, dimIdx, idx) {
            return (0, $8917c02fd8256c67$export$fb1a222ba5dd6e51)(data._getCategory(dimIdx, idx), null);
        };
        /**
     * @see the comment of `List['getId']`.
     */ $4e35bd54bdeb6444$var$getId = function(data, rawIndex) {
            var id = data._idList[rawIndex];
            if (id == null && data._idDimIdx != null) id = $4e35bd54bdeb6444$var$getIdNameFromStore(data, data._idDimIdx, rawIndex);
            if (id == null) id = $4e35bd54bdeb6444$var$ID_PREFIX + rawIndex;
            return id;
        };
        $4e35bd54bdeb6444$var$normalizeDimensions = function(dimensions) {
            if (!$e44eb14c4271d0f9$export$43bee75e5e14138e(dimensions)) dimensions = dimensions != null ? [
                dimensions
            ] : [];
            return dimensions;
        };
        /**
     * Data in excludeDimensions is copied, otherwise transferred.
     */ $4e35bd54bdeb6444$var$cloneListForMapAndSample = function(original) {
            var list = new SeriesData(original._schema ? original._schema : $4e35bd54bdeb6444$var$map(original.dimensions, original._getDimInfo, original), original.hostModel);
            // FIXME If needs stackedOn, value may already been stacked
            $4e35bd54bdeb6444$var$transferProperties(list, original);
            return list;
        };
        $4e35bd54bdeb6444$var$transferProperties = function(target, source) {
            $e44eb14c4271d0f9$export$79b2f7037acddd43($4e35bd54bdeb6444$var$TRANSFERABLE_PROPERTIES.concat(source.__wrappedMethods || []), function(propName) {
                if (source.hasOwnProperty(propName)) target[propName] = source[propName];
            });
            target.__wrappedMethods = source.__wrappedMethods;
            $e44eb14c4271d0f9$export$79b2f7037acddd43($4e35bd54bdeb6444$var$CLONE_PROPERTIES, function(propName) {
                target[propName] = $e44eb14c4271d0f9$export$9cd59f9826255e47(source[propName]);
            });
            target._calculationInfo = $e44eb14c4271d0f9$export$8b58be045bf06082({}, source._calculationInfo);
        };
        $4e35bd54bdeb6444$var$makeIdFromName = function(data, idx) {
            var nameList = data._nameList;
            var idList = data._idList;
            var nameDimIdx = data._nameDimIdx;
            var idDimIdx = data._idDimIdx;
            var name = nameList[idx];
            var id = idList[idx];
            if (name == null && nameDimIdx != null) nameList[idx] = name = $4e35bd54bdeb6444$var$getIdNameFromStore(data, nameDimIdx, idx);
            if (id == null && idDimIdx != null) idList[idx] = id = $4e35bd54bdeb6444$var$getIdNameFromStore(data, idDimIdx, idx);
            if (id == null && name != null) {
                var nameRepeatCount = data._nameRepeatCount;
                var nmCnt = nameRepeatCount[name] = (nameRepeatCount[name] || 0) + 1;
                id = name;
                if (nmCnt > 1) id += "__ec__" + nmCnt;
                idList[idx] = id;
            }
        };
    }();
    return SeriesData;
}();
var $4e35bd54bdeb6444$export$2e2bcd8739ae039 = $4e35bd54bdeb6444$var$SeriesData;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 







function $97747c0a5ec44630$export$8066c1b52b2e9504(source, opt) {
    return $97747c0a5ec44630$export$2e2bcd8739ae039(source, opt).dimensions;
}
function $97747c0a5ec44630$export$2e2bcd8739ae039(// TODO: TYPE completeDimensions type
source, opt) {
    if (!(0, $3790a8a1aeffac84$export$22b808bc02a60488)(source)) source = (0, $3790a8a1aeffac84$export$75aef3f97c0a5edf)(source);
    opt = opt || {};
    var sysDims = opt.coordDimensions || [];
    var dimsDef = opt.dimensionsDefine || source.dimensionsDefine || [];
    var coordDimNameMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
    var resultList = [];
    var dimCount = $97747c0a5ec44630$var$getDimCount(source, sysDims, dimsDef, opt.dimensionsCount);
    // Try to ignore unused dimensions if sharing a high dimension datastore
    // 30 is an experience value.
    var omitUnusedDimensions = opt.canOmitUnusedDimensions && (0, $1d7ef37cf336d833$export$238b87930d825d87)(dimCount);
    var isUsingSourceDimensionsDef = dimsDef === source.dimensionsDefine;
    var dataDimNameMap = isUsingSourceDimensionsDef ? (0, $1d7ef37cf336d833$export$be39ae17310c33f7)(source) : (0, $1d7ef37cf336d833$export$a477f5bebfd07944)(dimsDef);
    var encodeDef = opt.encodeDefine;
    if (!encodeDef && opt.encodeDefaulter) encodeDef = opt.encodeDefaulter(source, dimCount);
    var encodeDefMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)(encodeDef);
    var indicesMap = new (0, $ed6990ed945720aa$export$b60d945128546f53)(dimCount);
    for(var i = 0; i < indicesMap.length; i++)indicesMap[i] = -1;
    function getResultItem(dimIdx) {
        var idx = indicesMap[dimIdx];
        if (idx < 0) {
            var dimDefItemRaw = dimsDef[dimIdx];
            var dimDefItem = (0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(dimDefItemRaw) ? dimDefItemRaw : {
                name: dimDefItemRaw
            };
            var resultItem = new (0, $b5c373a4228aad66$export$2e2bcd8739ae039)();
            var userDimName = dimDefItem.name;
            if (userDimName != null && dataDimNameMap.get(userDimName) != null) // Only if `series.dimensions` is defined in option
            // displayName, will be set, and dimension will be displayed vertically in
            // tooltip by default.
            resultItem.name = resultItem.displayName = userDimName;
            dimDefItem.type != null && (resultItem.type = dimDefItem.type);
            dimDefItem.displayName != null && (resultItem.displayName = dimDefItem.displayName);
            var newIdx = resultList.length;
            indicesMap[dimIdx] = newIdx;
            resultItem.storeDimIndex = dimIdx;
            resultList.push(resultItem);
            return resultItem;
        }
        return resultList[idx];
    }
    if (!omitUnusedDimensions) for(var i = 0; i < dimCount; i++)getResultItem(i);
    // Set `coordDim` and `coordDimIndex` by `encodeDefMap` and normalize `encodeDefMap`.
    encodeDefMap.each(function(dataDimsRaw, coordDim) {
        var dataDims = (0, $8917c02fd8256c67$export$4f07b212a02c8051)(dataDimsRaw).slice();
        // Note: It is allowed that `dataDims.length` is `0`, e.g., options is
        // `{encode: {x: -1, y: 1}}`. Should not filter anything in
        // this case.
        if (dataDims.length === 1 && !(0, $e44eb14c4271d0f9$export$844ec244b1367d54)(dataDims[0]) && dataDims[0] < 0) {
            encodeDefMap.set(coordDim, false);
            return;
        }
        var validDataDims = encodeDefMap.set(coordDim, []);
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(dataDims, function(resultDimIdxOrName, idx) {
            // The input resultDimIdx can be dim name or index.
            var resultDimIdx = (0, $e44eb14c4271d0f9$export$844ec244b1367d54)(resultDimIdxOrName) ? dataDimNameMap.get(resultDimIdxOrName) : resultDimIdxOrName;
            if (resultDimIdx != null && resultDimIdx < dimCount) {
                validDataDims[idx] = resultDimIdx;
                applyDim(getResultItem(resultDimIdx), coordDim, idx);
            }
        });
    });
    // Apply templates and default order from `sysDims`.
    var availDimIdx = 0;
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(sysDims, function(sysDimItemRaw) {
        var coordDim;
        var sysDimItemDimsDef;
        var sysDimItemOtherDims;
        var sysDimItem;
        if ((0, $e44eb14c4271d0f9$export$844ec244b1367d54)(sysDimItemRaw)) {
            coordDim = sysDimItemRaw;
            sysDimItem = {};
        } else {
            sysDimItem = sysDimItemRaw;
            coordDim = sysDimItem.name;
            var ordinalMeta = sysDimItem.ordinalMeta;
            sysDimItem.ordinalMeta = null;
            sysDimItem = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, sysDimItem);
            sysDimItem.ordinalMeta = ordinalMeta;
            // `coordDimIndex` should not be set directly.
            sysDimItemDimsDef = sysDimItem.dimsDef;
            sysDimItemOtherDims = sysDimItem.otherDims;
            sysDimItem.name = sysDimItem.coordDim = sysDimItem.coordDimIndex = sysDimItem.dimsDef = sysDimItem.otherDims = null;
        }
        var dataDims = encodeDefMap.get(coordDim);
        // negative resultDimIdx means no need to mapping.
        if (dataDims === false) return;
        dataDims = (0, $8917c02fd8256c67$export$4f07b212a02c8051)(dataDims);
        // dimensions provides default dim sequences.
        if (!dataDims.length) for(var i = 0; i < (sysDimItemDimsDef && sysDimItemDimsDef.length || 1); i++){
            while(availDimIdx < dimCount && getResultItem(availDimIdx).coordDim != null)availDimIdx++;
            availDimIdx < dimCount && dataDims.push(availDimIdx++);
        }
        // Apply templates.
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(dataDims, function(resultDimIdx, coordDimIndex) {
            var resultItem = getResultItem(resultDimIdx);
            // Coordinate system has a higher priority on dim type than source.
            if (isUsingSourceDimensionsDef && sysDimItem.type != null) resultItem.type = sysDimItem.type;
            applyDim((0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)(resultItem, sysDimItem), coordDim, coordDimIndex);
            if (resultItem.name == null && sysDimItemDimsDef) {
                var sysDimItemDimsDefItem = sysDimItemDimsDef[coordDimIndex];
                !(0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(sysDimItemDimsDefItem) && (sysDimItemDimsDefItem = {
                    name: sysDimItemDimsDefItem
                });
                resultItem.name = resultItem.displayName = sysDimItemDimsDefItem.name;
                resultItem.defaultTooltip = sysDimItemDimsDefItem.defaultTooltip;
            }
            // FIXME refactor, currently only used in case: {otherDims: {tooltip: false}}
            sysDimItemOtherDims && (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)(resultItem.otherDims, sysDimItemOtherDims);
        });
    });
    function applyDim(resultItem, coordDim, coordDimIndex) {
        if ((0, $2b9c860c8cf83b68$export$cd51b5ca77f6f0e4).get(coordDim) != null) resultItem.otherDims[coordDim] = coordDimIndex;
        else {
            resultItem.coordDim = coordDim;
            resultItem.coordDimIndex = coordDimIndex;
            coordDimNameMap.set(coordDim, true);
        }
    }
    // Make sure the first extra dim is 'value'.
    var generateCoord = opt.generateCoord;
    var generateCoordCount = opt.generateCoordCount;
    var fromZero = generateCoordCount != null;
    generateCoordCount = generateCoord ? generateCoordCount || 1 : 0;
    var extra = generateCoord || "value";
    function ifNoNameFillWithCoordName(resultItem) {
        if (resultItem.name == null) // Duplication will be removed in the next step.
        resultItem.name = resultItem.coordDim;
    }
    // Set dim `name` and other `coordDim` and other props.
    if (!omitUnusedDimensions) for(var resultDimIdx = 0; resultDimIdx < dimCount; resultDimIdx++){
        var resultItem = getResultItem(resultDimIdx);
        var coordDim = resultItem.coordDim;
        if (coordDim == null) {
            // TODO no need to generate coordDim for isExtraCoord?
            resultItem.coordDim = $97747c0a5ec44630$var$genCoordDimName(extra, coordDimNameMap, fromZero);
            resultItem.coordDimIndex = 0;
            // Series specified generateCoord is using out.
            if (!generateCoord || generateCoordCount <= 0) resultItem.isExtraCoord = true;
            generateCoordCount--;
        }
        ifNoNameFillWithCoordName(resultItem);
        if (resultItem.type == null && ((0, $13c62ad003ac72f0$export$c51adf1a2be01b9c)(source, resultDimIdx) === (0, $13c62ad003ac72f0$export$328749e9c5b40760).Must || resultItem.isExtraCoord && (resultItem.otherDims.itemName != null || resultItem.otherDims.seriesName != null))) resultItem.type = "ordinal";
    }
    else {
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(resultList, function(resultItem) {
            // PENDING: guessOrdinal or let user specify type: 'ordinal' manually?
            ifNoNameFillWithCoordName(resultItem);
        });
        // Sort dimensions: there are some rule that use the last dim as label,
        // and for some latter travel process easier.
        resultList.sort(function(item0, item1) {
            return item0.storeDimIndex - item1.storeDimIndex;
        });
    }
    $97747c0a5ec44630$var$removeDuplication(resultList);
    return new (0, $1d7ef37cf336d833$export$a1ef064685775f3e)({
        source: source,
        dimensions: resultList,
        fullDimensionCount: dimCount,
        dimensionOmitted: omitUnusedDimensions
    });
}
function $97747c0a5ec44630$var$removeDuplication(result) {
    var duplicationMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
    for(var i = 0; i < result.length; i++){
        var dim = result[i];
        var dimOriginalName = dim.name;
        var count = duplicationMap.get(dimOriginalName) || 0;
        if (count > 0) // Starts from 0.
        dim.name = dimOriginalName + (count - 1);
        count++;
        duplicationMap.set(dimOriginalName, count);
    }
}
// ??? TODO
// Originally detect dimCount by data[0]. Should we
// optimize it to only by sysDims and dimensions and encode.
// So only necessary dims will be initialized.
// But
// (1) custom series should be considered. where other dims
// may be visited.
// (2) sometimes user need to calculate bubble size or use visualMap
// on other dimensions besides coordSys needed.
// So, dims that is not used by system, should be shared in data store?
function $97747c0a5ec44630$var$getDimCount(source, sysDims, dimsDef, optDimCount) {
    // Note that the result dimCount should not small than columns count
    // of data, otherwise `dataDimNameMap` checking will be incorrect.
    var dimCount = Math.max(source.dimensionsDetectedCount || 1, sysDims.length, dimsDef.length, optDimCount || 0);
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(sysDims, function(sysDimItem) {
        var sysDimItemDimsDef;
        if ((0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(sysDimItem) && (sysDimItemDimsDef = sysDimItem.dimsDef)) dimCount = Math.max(dimCount, sysDimItemDimsDef.length);
    });
    return dimCount;
}
function $97747c0a5ec44630$var$genCoordDimName(name, map, fromZero) {
    if (fromZero || map.hasKey(name)) {
        var i = 0;
        while(map.hasKey(name + i))i++;
        name += i;
    }
    map.set(name, true);
    return name;
}





/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * Helper for model references.
 * There are many manners to refer axis/coordSys.
 */ // TODO
// merge relevant logic to this file?
// check: "modelHelper" of tooltip and "BrushTargetManager".


/**
 * @class
 * For example:
 * {
 *     coordSysName: 'cartesian2d',
 *     coordSysDims: ['x', 'y', ...],
 *     axisMap: HashMap({
 *         x: xAxisModel,
 *         y: yAxisModel
 *     }),
 *     categoryAxisMap: HashMap({
 *         x: xAxisModel,
 *         y: undefined
 *     }),
 *     // The index of the first category axis in `coordSysDims`.
 *     // `null/undefined` means no category axis exists.
 *     firstCategoryDimIndex: 1,
 *     // To replace user specified encode.
 * }
 */ var $1975129d776a0fdb$var$CoordSysInfo = /** @class */ function() {
    function CoordSysInfo(coordSysName) {
        this.coordSysDims = [];
        this.axisMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
        this.categoryAxisMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
        this.coordSysName = coordSysName;
    }
    return CoordSysInfo;
}();
function $1975129d776a0fdb$export$f2befeb2f4933656(seriesModel) {
    var coordSysName = seriesModel.get("coordinateSystem");
    var result = new $1975129d776a0fdb$var$CoordSysInfo(coordSysName);
    var fetch = $1975129d776a0fdb$var$fetchers[coordSysName];
    if (fetch) {
        fetch(seriesModel, result, result.axisMap, result.categoryAxisMap);
        return result;
    }
}
var $1975129d776a0fdb$var$fetchers = {
    cartesian2d: function(seriesModel, result, axisMap, categoryAxisMap) {
        var xAxisModel = seriesModel.getReferringComponents("xAxis", (0, $8917c02fd8256c67$export$f076738ec84e693c)).models[0];
        var yAxisModel = seriesModel.getReferringComponents("yAxis", (0, $8917c02fd8256c67$export$f076738ec84e693c)).models[0];
        if (!xAxisModel) throw new Error('xAxis "' + (0, $e44eb14c4271d0f9$export$8a4d17b6e8486e66)(seriesModel.get("xAxisIndex"), seriesModel.get("xAxisId"), 0) + '" not found');
        if (!yAxisModel) throw new Error('yAxis "' + (0, $e44eb14c4271d0f9$export$8a4d17b6e8486e66)(seriesModel.get("xAxisIndex"), seriesModel.get("yAxisId"), 0) + '" not found');
        result.coordSysDims = [
            "x",
            "y"
        ];
        axisMap.set("x", xAxisModel);
        axisMap.set("y", yAxisModel);
        if ($1975129d776a0fdb$var$isCategory(xAxisModel)) {
            categoryAxisMap.set("x", xAxisModel);
            result.firstCategoryDimIndex = 0;
        }
        if ($1975129d776a0fdb$var$isCategory(yAxisModel)) {
            categoryAxisMap.set("y", yAxisModel);
            result.firstCategoryDimIndex == null && (result.firstCategoryDimIndex = 1);
        }
    },
    singleAxis: function(seriesModel, result, axisMap, categoryAxisMap) {
        var singleAxisModel = seriesModel.getReferringComponents("singleAxis", (0, $8917c02fd8256c67$export$f076738ec84e693c)).models[0];
        if (!singleAxisModel) throw new Error("singleAxis should be specified.");
        result.coordSysDims = [
            "single"
        ];
        axisMap.set("single", singleAxisModel);
        if ($1975129d776a0fdb$var$isCategory(singleAxisModel)) {
            categoryAxisMap.set("single", singleAxisModel);
            result.firstCategoryDimIndex = 0;
        }
    },
    polar: function(seriesModel, result, axisMap, categoryAxisMap) {
        var polarModel = seriesModel.getReferringComponents("polar", (0, $8917c02fd8256c67$export$f076738ec84e693c)).models[0];
        var radiusAxisModel = polarModel.findAxisModel("radiusAxis");
        var angleAxisModel = polarModel.findAxisModel("angleAxis");
        if (!angleAxisModel) throw new Error("angleAxis option not found");
        if (!radiusAxisModel) throw new Error("radiusAxis option not found");
        result.coordSysDims = [
            "radius",
            "angle"
        ];
        axisMap.set("radius", radiusAxisModel);
        axisMap.set("angle", angleAxisModel);
        if ($1975129d776a0fdb$var$isCategory(radiusAxisModel)) {
            categoryAxisMap.set("radius", radiusAxisModel);
            result.firstCategoryDimIndex = 0;
        }
        if ($1975129d776a0fdb$var$isCategory(angleAxisModel)) {
            categoryAxisMap.set("angle", angleAxisModel);
            result.firstCategoryDimIndex == null && (result.firstCategoryDimIndex = 1);
        }
    },
    geo: function(seriesModel, result, axisMap, categoryAxisMap) {
        result.coordSysDims = [
            "lng",
            "lat"
        ];
    },
    parallel: function(seriesModel, result, axisMap, categoryAxisMap) {
        var ecModel = seriesModel.ecModel;
        var parallelModel = ecModel.getComponent("parallel", seriesModel.get("parallelIndex"));
        var coordSysDims = result.coordSysDims = parallelModel.dimensions.slice();
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(parallelModel.parallelAxisIndex, function(axisIndex, index) {
            var axisModel = ecModel.getComponent("parallelAxis", axisIndex);
            var axisDim = coordSysDims[index];
            axisMap.set(axisDim, axisModel);
            if ($1975129d776a0fdb$var$isCategory(axisModel)) {
                categoryAxisMap.set(axisDim, axisModel);
                if (result.firstCategoryDimIndex == null) result.firstCategoryDimIndex = index;
            }
        });
    }
};
function $1975129d776a0fdb$var$isCategory(axisModel) {
    return axisModel.get("type") === "category";
}



/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

function $6ff1444fd0e27b15$export$f2165f9e8499b278(seriesModel, dimensionsInput, opt) {
    opt = opt || {};
    var byIndex = opt.byIndex;
    var stackedCoordDimension = opt.stackedCoordDimension;
    var dimensionDefineList;
    var schema;
    var store;
    if ($6ff1444fd0e27b15$var$isLegacyDimensionsInput(dimensionsInput)) dimensionDefineList = dimensionsInput;
    else {
        schema = dimensionsInput.schema;
        dimensionDefineList = schema.dimensions;
        store = dimensionsInput.store;
    }
    // Compatibal: when `stack` is set as '', do not stack.
    var mayStack = !!(seriesModel && seriesModel.get("stack"));
    var stackedByDimInfo;
    var stackedDimInfo;
    var stackResultDimension;
    var stackedOverDimension;
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(dimensionDefineList, function(dimensionInfo, index) {
        if ((0, $e44eb14c4271d0f9$export$844ec244b1367d54)(dimensionInfo)) dimensionDefineList[index] = dimensionInfo = {
            name: dimensionInfo
        };
        if (mayStack && !dimensionInfo.isExtraCoord) {
            // Find the first ordinal dimension as the stackedByDimInfo.
            if (!byIndex && !stackedByDimInfo && dimensionInfo.ordinalMeta) stackedByDimInfo = dimensionInfo;
            // Find the first stackable dimension as the stackedDimInfo.
            if (!stackedDimInfo && dimensionInfo.type !== "ordinal" && dimensionInfo.type !== "time" && (!stackedCoordDimension || stackedCoordDimension === dimensionInfo.coordDim)) stackedDimInfo = dimensionInfo;
        }
    });
    if (stackedDimInfo && !byIndex && !stackedByDimInfo) // Compatible with previous design, value axis (time axis) only stack by index.
    // It may make sense if the user provides elaborately constructed data.
    byIndex = true;
    // Add stack dimension, they can be both calculated by coordinate system in `unionExtent`.
    // That put stack logic in List is for using conveniently in echarts extensions, but it
    // might not be a good way.
    if (stackedDimInfo) {
        // Use a weird name that not duplicated with other names.
        // Also need to use seriesModel.id as postfix because different
        // series may share same data store. The stack dimension needs to be distinguished.
        stackResultDimension = "__\0ecstackresult_" + seriesModel.id;
        stackedOverDimension = "__\0ecstackedover_" + seriesModel.id;
        // Create inverted index to fast query index by value.
        if (stackedByDimInfo) stackedByDimInfo.createInvertedIndices = true;
        var stackedDimCoordDim_1 = stackedDimInfo.coordDim;
        var stackedDimType = stackedDimInfo.type;
        var stackedDimCoordIndex_1 = 0;
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(dimensionDefineList, function(dimensionInfo) {
            if (dimensionInfo.coordDim === stackedDimCoordDim_1) stackedDimCoordIndex_1++;
        });
        var stackedOverDimensionDefine = {
            name: stackResultDimension,
            coordDim: stackedDimCoordDim_1,
            coordDimIndex: stackedDimCoordIndex_1,
            type: stackedDimType,
            isExtraCoord: true,
            isCalculationCoord: true,
            storeDimIndex: dimensionDefineList.length
        };
        var stackResultDimensionDefine = {
            name: stackedOverDimension,
            // This dimension contains stack base (generally, 0), so do not set it as
            // `stackedDimCoordDim` to avoid extent calculation, consider log scale.
            coordDim: stackedOverDimension,
            coordDimIndex: stackedDimCoordIndex_1 + 1,
            type: stackedDimType,
            isExtraCoord: true,
            isCalculationCoord: true,
            storeDimIndex: dimensionDefineList.length + 1
        };
        if (schema) {
            if (store) {
                stackedOverDimensionDefine.storeDimIndex = store.ensureCalculationDimension(stackedOverDimension, stackedDimType);
                stackResultDimensionDefine.storeDimIndex = store.ensureCalculationDimension(stackResultDimension, stackedDimType);
            }
            schema.appendCalculationDimension(stackedOverDimensionDefine);
            schema.appendCalculationDimension(stackResultDimensionDefine);
        } else {
            dimensionDefineList.push(stackedOverDimensionDefine);
            dimensionDefineList.push(stackResultDimensionDefine);
        }
    }
    return {
        stackedDimension: stackedDimInfo && stackedDimInfo.name,
        stackedByDimension: stackedByDimInfo && stackedByDimInfo.name,
        isStackedByIndex: byIndex,
        stackedOverDimension: stackedOverDimension,
        stackResultDimension: stackResultDimension
    };
}
function $6ff1444fd0e27b15$var$isLegacyDimensionsInput(dimensionsInput) {
    return !(0, $1d7ef37cf336d833$export$fafbc856132a3a0e)(dimensionsInput.schema);
}
function $6ff1444fd0e27b15$export$1dedc39359ae35c(data, stackedDim) {
    // Each single series only maps to one pair of axis. So we do not need to
    // check stackByDim, whatever stacked by a dimension or stacked by index.
    return !!stackedDim && stackedDim === data.getCalculationInfo("stackedDimension");
}
function $6ff1444fd0e27b15$export$909db2be4938fbdf(data, targetDim) {
    return $6ff1444fd0e27b15$export$1dedc39359ae35c(data, targetDim) ? data.getCalculationInfo("stackResultDimension") : targetDim;
}




function $42034ebb6bcf5cdf$var$getCoordSysDimDefs(seriesModel, coordSysInfo) {
    var coordSysName = seriesModel.get("coordinateSystem");
    var registeredCoordSys = (0, $8ac678ded05cd5de$export$2e2bcd8739ae039).get(coordSysName);
    var coordSysDimDefs;
    if (coordSysInfo && coordSysInfo.coordSysDims) coordSysDimDefs = $e44eb14c4271d0f9$export$871de8747c9eaa88(coordSysInfo.coordSysDims, function(dim) {
        var dimInfo = {
            name: dim
        };
        var axisModel = coordSysInfo.axisMap.get(dim);
        if (axisModel) {
            var axisType = axisModel.get("type");
            dimInfo.type = (0, $9ff81a93befb1cc6$export$af1622903e71278e)(axisType);
        }
        return dimInfo;
    });
    if (!coordSysDimDefs) // Get dimensions from registered coordinate system
    coordSysDimDefs = registeredCoordSys && (registeredCoordSys.getDimensionsInfo ? registeredCoordSys.getDimensionsInfo() : registeredCoordSys.dimensions.slice()) || [
        "x",
        "y"
    ];
    return coordSysDimDefs;
}
function $42034ebb6bcf5cdf$var$injectOrdinalMeta(dimInfoList, createInvertedIndices, coordSysInfo) {
    var firstCategoryDimIndex;
    var hasNameEncode;
    coordSysInfo && $e44eb14c4271d0f9$export$79b2f7037acddd43(dimInfoList, function(dimInfo, dimIndex) {
        var coordDim = dimInfo.coordDim;
        var categoryAxisModel = coordSysInfo.categoryAxisMap.get(coordDim);
        if (categoryAxisModel) {
            if (firstCategoryDimIndex == null) firstCategoryDimIndex = dimIndex;
            dimInfo.ordinalMeta = categoryAxisModel.getOrdinalMeta();
            if (createInvertedIndices) dimInfo.createInvertedIndices = true;
        }
        if (dimInfo.otherDims.itemName != null) hasNameEncode = true;
    });
    if (!hasNameEncode && firstCategoryDimIndex != null) dimInfoList[firstCategoryDimIndex].otherDims.itemName = 0;
    return firstCategoryDimIndex;
}
/**
 * Caution: there are side effects to `sourceManager` in this method.
 * Should better only be called in `Series['getInitialData']`.
 */ function $42034ebb6bcf5cdf$var$createSeriesData(sourceRaw, seriesModel, opt) {
    opt = opt || {};
    var sourceManager = seriesModel.getSourceManager();
    var source;
    var isOriginalSource = false;
    if (sourceRaw) {
        isOriginalSource = true;
        source = (0, $3790a8a1aeffac84$export$75aef3f97c0a5edf)(sourceRaw);
    } else {
        source = sourceManager.getSource();
        // Is series.data. not dataset.
        isOriginalSource = source.sourceFormat === (0, $2b9c860c8cf83b68$export$2823037fb9d8f0c6);
    }
    var coordSysInfo = (0, $1975129d776a0fdb$export$f2befeb2f4933656)(seriesModel);
    var coordSysDimDefs = $42034ebb6bcf5cdf$var$getCoordSysDimDefs(seriesModel, coordSysInfo);
    var useEncodeDefaulter = opt.useEncodeDefaulter;
    var encodeDefaulter = $e44eb14c4271d0f9$export$f6e2535fb5126e54(useEncodeDefaulter) ? useEncodeDefaulter : useEncodeDefaulter ? $e44eb14c4271d0f9$export$c3095a23b368d1f2((0, $13c62ad003ac72f0$export$37682b8fdd2e83d), coordSysDimDefs, seriesModel) : null;
    var createDimensionOptions = {
        coordDimensions: coordSysDimDefs,
        generateCoord: opt.generateCoord,
        encodeDefine: seriesModel.getEncode(),
        encodeDefaulter: encodeDefaulter,
        canOmitUnusedDimensions: !isOriginalSource
    };
    var schema = (0, $97747c0a5ec44630$export$2e2bcd8739ae039)(source, createDimensionOptions);
    var firstCategoryDimIndex = $42034ebb6bcf5cdf$var$injectOrdinalMeta(schema.dimensions, opt.createInvertedIndices, coordSysInfo);
    var store = !isOriginalSource ? sourceManager.getSharedDataStore(schema) : null;
    var stackCalculationInfo = (0, $6ff1444fd0e27b15$export$f2165f9e8499b278)(seriesModel, {
        schema: schema,
        store: store
    });
    var data = new (0, $4e35bd54bdeb6444$export$2e2bcd8739ae039)(schema, seriesModel);
    data.setCalculationInfo(stackCalculationInfo);
    var dimValueGetter = firstCategoryDimIndex != null && $42034ebb6bcf5cdf$var$isNeedCompleteOrdinalData(source) ? function(itemOpt, dimName, dataIndex, dimIndex) {
        // Use dataIndex as ordinal value in categoryAxis
        return dimIndex === firstCategoryDimIndex ? dataIndex : this.defaultDimValueGetter(itemOpt, dimName, dataIndex, dimIndex);
    } : null;
    data.hasItemOption = false;
    data.initData(// Try to reuse the data store in sourceManager if using dataset.
    isOriginalSource ? source : store, null, dimValueGetter);
    return data;
}
function $42034ebb6bcf5cdf$var$isNeedCompleteOrdinalData(source) {
    if (source.sourceFormat === (0, $2b9c860c8cf83b68$export$2823037fb9d8f0c6)) {
        var sampleItem = $42034ebb6bcf5cdf$var$firstDataNotNull(source.data || []);
        return !$e44eb14c4271d0f9$export$43bee75e5e14138e((0, $8917c02fd8256c67$export$2c944e12edb48d4b)(sampleItem));
    }
}
function $42034ebb6bcf5cdf$var$firstDataNotNull(arr) {
    var i = 0;
    while(i < arr.length && arr[i] == null)i++;
    return arr[i];
}
var $42034ebb6bcf5cdf$export$2e2bcd8739ae039 = $42034ebb6bcf5cdf$var$createSeriesData;





var $b38fdbfb08237eb8$var$LineSeriesModel = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(LineSeriesModel, _super);
    function LineSeriesModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = LineSeriesModel.type;
        _this.hasSymbolVisual = true;
        return _this;
    }
    LineSeriesModel.prototype.getInitialData = function(option) {
        var coordSys = option.coordinateSystem;
        if (coordSys !== "polar" && coordSys !== "cartesian2d") throw new Error("Line not support coordinateSystem besides cartesian and polar");
        return (0, $42034ebb6bcf5cdf$export$2e2bcd8739ae039)(null, this, {
            useEncodeDefaulter: true
        });
    };
    LineSeriesModel.prototype.getLegendIcon = function(opt) {
        var group = new (0, $748aea24eee93173$export$2e2bcd8739ae039)();
        var line = (0, $f918b475beb849b6$export$af050e04da3a02e8)("line", 0, opt.itemHeight / 2, opt.itemWidth, 0, opt.lineStyle.stroke, false);
        group.add(line);
        line.setStyle(opt.lineStyle);
        var visualType = this.getData().getVisual("symbol");
        var visualRotate = this.getData().getVisual("symbolRotate");
        var symbolType = visualType === "none" ? "circle" : visualType;
        // Symbol size is 80% when there is a line
        var size = opt.itemHeight * 0.8;
        var symbol = (0, $f918b475beb849b6$export$af050e04da3a02e8)(symbolType, (opt.itemWidth - size) / 2, (opt.itemHeight - size) / 2, size, size, opt.itemStyle.fill);
        group.add(symbol);
        symbol.setStyle(opt.itemStyle);
        var symbolRotate = opt.iconRotate === "inherit" ? visualRotate : opt.iconRotate || 0;
        symbol.rotation = symbolRotate * Math.PI / 180;
        symbol.setOrigin([
            opt.itemWidth / 2,
            opt.itemHeight / 2
        ]);
        if (symbolType.indexOf("empty") > -1) {
            symbol.style.stroke = symbol.style.fill;
            symbol.style.fill = "#fff";
            symbol.style.lineWidth = 2;
        }
        return group;
    };
    LineSeriesModel.type = "series.line";
    LineSeriesModel.dependencies = [
        "grid",
        "polar"
    ];
    LineSeriesModel.defaultOption = {
        // zlevel: 0,
        z: 3,
        coordinateSystem: "cartesian2d",
        legendHoverLink: true,
        clip: true,
        label: {
            position: "top"
        },
        // itemStyle: {
        // },
        endLabel: {
            show: false,
            valueAnimation: true,
            distance: 8
        },
        lineStyle: {
            width: 2,
            type: "solid"
        },
        emphasis: {
            scale: true
        },
        // areaStyle: {
        // origin of areaStyle. Valid values:
        // `'auto'/null/undefined`: from axisLine to data
        // `'start'`: from min to data
        // `'end'`: from data to max
        // origin: 'auto'
        // },
        // false, 'start', 'end', 'middle'
        step: false,
        // Disabled if step is true
        smooth: false,
        smoothMonotone: null,
        symbol: "emptyCircle",
        symbolSize: 4,
        symbolRotate: null,
        showSymbol: true,
        // `false`: follow the label interval strategy.
        // `true`: show all symbols.
        // `'auto'`: If possible, show all symbols, otherwise
        //           follow the label interval strategy.
        showAllSymbol: "auto",
        // Whether to connect break point.
        connectNulls: false,
        // Sampling for large data. Can be: 'average', 'max', 'min', 'sum', 'lttb'.
        sampling: "none",
        animationEasing: "linear",
        // Disable progressive
        progressive: 0,
        hoverLayerThreshold: Infinity,
        universalTransition: {
            divideShape: "clone"
        },
        triggerLineEvent: false
    };
    return LineSeriesModel;
}((0, $3301f75840f3090f$export$2e2bcd8739ae039));
var $b38fdbfb08237eb8$export$2e2bcd8739ae039 = $b38fdbfb08237eb8$var$LineSeriesModel;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 




/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

function $2216e0c7945273bf$export$5ff20667590927ed(data, dataIndex) {
    var labelDims = data.mapDimensionsAll("defaultedLabel");
    var len = labelDims.length;
    // Simple optimization (in lots of cases, label dims length is 1)
    if (len === 1) {
        var rawVal = (0, $b7a7be40e6489dbc$export$cde9373da9aad801)(data, dataIndex, labelDims[0]);
        return rawVal != null ? rawVal + "" : null;
    } else if (len) {
        var vals = [];
        for(var i = 0; i < labelDims.length; i++)vals.push((0, $b7a7be40e6489dbc$export$cde9373da9aad801)(data, dataIndex, labelDims[i]));
        return vals.join(" ");
    }
}
function $2216e0c7945273bf$export$5f84815e91ca6775(data, interpolatedValue) {
    var labelDims = data.mapDimensionsAll("defaultedLabel");
    if (!(0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(interpolatedValue)) return interpolatedValue + "";
    var vals = [];
    for(var i = 0; i < labelDims.length; i++){
        var dimIndex = data.getDimensionIndex(labelDims[i]);
        if (dimIndex >= 0) vals.push(interpolatedValue[dimIndex]);
    }
    return vals.join(" ");
}






var $b51da2dba47aa3c0$var$Symbol = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(Symbol, _super);
    function Symbol(data, idx, seriesScope, opts) {
        var _this = _super.call(this) || this;
        _this.updateData(data, idx, seriesScope, opts);
        return _this;
    }
    Symbol.prototype._createSymbol = function(symbolType, data, idx, symbolSize, keepAspect) {
        // Remove paths created before
        this.removeAll();
        // let symbolPath = createSymbol(
        //     symbolType, -0.5, -0.5, 1, 1, color
        // );
        // If width/height are set too small (e.g., set to 1) on ios10
        // and macOS Sierra, a circle stroke become a rect, no matter what
        // the scale is set. So we set width/height as 2. See #4150.
        var symbolPath = (0, $f918b475beb849b6$export$af050e04da3a02e8)(symbolType, -1, -1, 2, 2, null, keepAspect);
        symbolPath.attr({
            z2: 100,
            culling: true,
            scaleX: symbolSize[0] / 2,
            scaleY: symbolSize[1] / 2
        });
        // Rewrite drift method
        symbolPath.drift = $b51da2dba47aa3c0$var$driftSymbol;
        this._symbolType = symbolType;
        this.add(symbolPath);
    };
    /**
   * Stop animation
   * @param {boolean} toLastFrame
   */ Symbol.prototype.stopSymbolAnimation = function(toLastFrame) {
        this.childAt(0).stopAnimation(null, toLastFrame);
    };
    Symbol.prototype.getSymbolType = function() {
        return this._symbolType;
    };
    /**
   * FIXME:
   * Caution: This method breaks the encapsulation of this module,
   * but it indeed brings convenience. So do not use the method
   * unless you detailedly know all the implements of `Symbol`,
   * especially animation.
   *
   * Get symbol path element.
   */ Symbol.prototype.getSymbolPath = function() {
        return this.childAt(0);
    };
    /**
   * Highlight symbol
   */ Symbol.prototype.highlight = function() {
        (0, $e3c0a36328c28ac4$export$b2d02638cc34c042)(this.childAt(0));
    };
    /**
   * Downplay symbol
   */ Symbol.prototype.downplay = function() {
        (0, $e3c0a36328c28ac4$export$11be6f716239ac55)(this.childAt(0));
    };
    /**
   * @param {number} zlevel
   * @param {number} z
   */ Symbol.prototype.setZ = function(zlevel, z) {
        var symbolPath = this.childAt(0);
        symbolPath.zlevel = zlevel;
        symbolPath.z = z;
    };
    Symbol.prototype.setDraggable = function(draggable, hasCursorOption) {
        var symbolPath = this.childAt(0);
        symbolPath.draggable = draggable;
        symbolPath.cursor = !hasCursorOption && draggable ? "move" : symbolPath.cursor;
    };
    /**
   * Update symbol properties
   */ Symbol.prototype.updateData = function(data, idx, seriesScope, opts) {
        this.silent = false;
        var symbolType = data.getItemVisual(idx, "symbol") || "circle";
        var seriesModel = data.hostModel;
        var symbolSize = Symbol.getSymbolSize(data, idx);
        var isInit = symbolType !== this._symbolType;
        var disableAnimation = opts && opts.disableAnimation;
        if (isInit) {
            var keepAspect = data.getItemVisual(idx, "symbolKeepAspect");
            this._createSymbol(symbolType, data, idx, symbolSize, keepAspect);
        } else {
            var symbolPath = this.childAt(0);
            symbolPath.silent = false;
            var target = {
                scaleX: symbolSize[0] / 2,
                scaleY: symbolSize[1] / 2
            };
            disableAnimation ? symbolPath.attr(target) : $f7e735722ff36e8c$export$c8dce3c08436e91e(symbolPath, target, seriesModel, idx);
            (0, $f7e735722ff36e8c$export$bca7290a9faf0ec9)(symbolPath);
        }
        this._updateCommon(data, idx, symbolSize, seriesScope, opts);
        if (isInit) {
            var symbolPath = this.childAt(0);
            if (!disableAnimation) {
                var target = {
                    scaleX: this._sizeX,
                    scaleY: this._sizeY,
                    style: {
                        // Always fadeIn. Because it has fadeOut animation when symbol is removed..
                        opacity: symbolPath.style.opacity
                    }
                };
                symbolPath.scaleX = symbolPath.scaleY = 0;
                symbolPath.style.opacity = 0;
                $f7e735722ff36e8c$export$a121566aadcfe021(symbolPath, target, seriesModel, idx);
            }
        }
        if (disableAnimation) // Must stop leave transition manually if don't call initProps or updateProps.
        this.childAt(0).stopAnimation("leave");
    };
    Symbol.prototype._updateCommon = function(data, idx, symbolSize, seriesScope, opts) {
        var symbolPath = this.childAt(0);
        var seriesModel = data.hostModel;
        var emphasisItemStyle;
        var blurItemStyle;
        var selectItemStyle;
        var focus;
        var blurScope;
        var emphasisDisabled;
        var labelStatesModels;
        var hoverScale;
        var cursorStyle;
        if (seriesScope) {
            emphasisItemStyle = seriesScope.emphasisItemStyle;
            blurItemStyle = seriesScope.blurItemStyle;
            selectItemStyle = seriesScope.selectItemStyle;
            focus = seriesScope.focus;
            blurScope = seriesScope.blurScope;
            labelStatesModels = seriesScope.labelStatesModels;
            hoverScale = seriesScope.hoverScale;
            cursorStyle = seriesScope.cursorStyle;
            emphasisDisabled = seriesScope.emphasisDisabled;
        }
        if (!seriesScope || data.hasItemOption) {
            var itemModel = seriesScope && seriesScope.itemModel ? seriesScope.itemModel : data.getItemModel(idx);
            var emphasisModel = itemModel.getModel("emphasis");
            emphasisItemStyle = emphasisModel.getModel("itemStyle").getItemStyle();
            selectItemStyle = itemModel.getModel([
                "select",
                "itemStyle"
            ]).getItemStyle();
            blurItemStyle = itemModel.getModel([
                "blur",
                "itemStyle"
            ]).getItemStyle();
            focus = emphasisModel.get("focus");
            blurScope = emphasisModel.get("blurScope");
            emphasisDisabled = emphasisModel.get("disabled");
            labelStatesModels = (0, $75926670b032879d$export$9739a32674be5893)(itemModel);
            hoverScale = emphasisModel.getShallow("scale");
            cursorStyle = itemModel.getShallow("cursor");
        }
        var symbolRotate = data.getItemVisual(idx, "symbolRotate");
        symbolPath.attr("rotation", (symbolRotate || 0) * Math.PI / 180 || 0);
        var symbolOffset = (0, $f918b475beb849b6$export$e3e292895c033f6d)(data.getItemVisual(idx, "symbolOffset"), symbolSize);
        if (symbolOffset) {
            symbolPath.x = symbolOffset[0];
            symbolPath.y = symbolOffset[1];
        }
        cursorStyle && symbolPath.attr("cursor", cursorStyle);
        var symbolStyle = data.getItemVisual(idx, "style");
        var visualColor = symbolStyle.fill;
        if (symbolPath instanceof (0, $7fb187ddd76ee1dc$export$2e2bcd8739ae039)) {
            var pathStyle = symbolPath.style;
            symbolPath.useStyle((0, $e44eb14c4271d0f9$export$8b58be045bf06082)({
                // TODO other properties like x, y ?
                image: pathStyle.image,
                x: pathStyle.x,
                y: pathStyle.y,
                width: pathStyle.width,
                height: pathStyle.height
            }, symbolStyle));
        } else {
            if (symbolPath.__isEmptyBrush) // fill and stroke will be swapped if it's empty.
            // So we cloned a new style to avoid it affecting the original style in visual storage.
            // TODO Better implementation. No empty logic!
            symbolPath.useStyle((0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, symbolStyle));
            else symbolPath.useStyle(symbolStyle);
            // Disable decal because symbol scale will been applied on the decal.
            symbolPath.style.decal = null;
            symbolPath.setColor(visualColor, opts && opts.symbolInnerColor);
            symbolPath.style.strokeNoScale = true;
        }
        var liftZ = data.getItemVisual(idx, "liftZ");
        var z2Origin = this._z2;
        if (liftZ != null) {
            if (z2Origin == null) {
                this._z2 = symbolPath.z2;
                symbolPath.z2 += liftZ;
            }
        } else if (z2Origin != null) {
            symbolPath.z2 = z2Origin;
            this._z2 = null;
        }
        var useNameLabel = opts && opts.useNameLabel;
        (0, $75926670b032879d$export$9a13992917966657)(symbolPath, labelStatesModels, {
            labelFetcher: seriesModel,
            labelDataIndex: idx,
            defaultText: getLabelDefaultText,
            inheritColor: visualColor,
            defaultOpacity: symbolStyle.opacity
        });
        // Do not execute util needed.
        function getLabelDefaultText(idx) {
            return useNameLabel ? data.getName(idx) : (0, $2216e0c7945273bf$export$5ff20667590927ed)(data, idx);
        }
        this._sizeX = symbolSize[0] / 2;
        this._sizeY = symbolSize[1] / 2;
        var emphasisState = symbolPath.ensureState("emphasis");
        emphasisState.style = emphasisItemStyle;
        symbolPath.ensureState("select").style = selectItemStyle;
        symbolPath.ensureState("blur").style = blurItemStyle;
        // null / undefined / true means to use default strategy.
        // 0 / false / negative number / NaN / Infinity means no scale.
        var scaleRatio = hoverScale == null || hoverScale === true ? Math.max(1.1, 3 / this._sizeY) : isFinite(hoverScale) && hoverScale > 0 ? +hoverScale : 1;
        // always set scale to allow resetting
        emphasisState.scaleX = this._sizeX * scaleRatio;
        emphasisState.scaleY = this._sizeY * scaleRatio;
        this.setSymbolScale(1);
        (0, $e3c0a36328c28ac4$export$e51187539ff11209)(this, focus, blurScope, emphasisDisabled);
    };
    Symbol.prototype.setSymbolScale = function(scale) {
        this.scaleX = this.scaleY = scale;
    };
    Symbol.prototype.fadeOut = function(cb, seriesModel, opt) {
        var symbolPath = this.childAt(0);
        var dataIndex = (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(this).dataIndex;
        var animationOpt = opt && opt.animation;
        // Avoid mistaken hover when fading out
        this.silent = symbolPath.silent = true;
        // Not show text when animating
        if (opt && opt.fadeLabel) {
            var textContent = symbolPath.getTextContent();
            if (textContent) $f7e735722ff36e8c$export$f883456a56996078(textContent, {
                style: {
                    opacity: 0
                }
            }, seriesModel, {
                dataIndex: dataIndex,
                removeOpt: animationOpt,
                cb: function() {
                    symbolPath.removeTextContent();
                }
            });
        } else symbolPath.removeTextContent();
        $f7e735722ff36e8c$export$f883456a56996078(symbolPath, {
            style: {
                opacity: 0
            },
            scaleX: 0,
            scaleY: 0
        }, seriesModel, {
            dataIndex: dataIndex,
            cb: cb,
            removeOpt: animationOpt
        });
    };
    Symbol.getSymbolSize = function(data, idx) {
        return (0, $f918b475beb849b6$export$a84524f03e8e8dfb)(data.getItemVisual(idx, "symbolSize"));
    };
    return Symbol;
}($748aea24eee93173$export$2e2bcd8739ae039);
function $b51da2dba47aa3c0$var$driftSymbol(dx, dy) {
    this.parent.drift(dx, dy);
}
var $b51da2dba47aa3c0$export$2e2bcd8739ae039 = $b51da2dba47aa3c0$var$Symbol;




function $e7127346a3ae1a88$var$symbolNeedsDraw(data, point, idx, opt) {
    return point && !isNaN(point[0]) && !isNaN(point[1]) && !(opt.isIgnore && opt.isIgnore(idx)) && !(opt.clipShape && !opt.clipShape.contain(point[0], point[1])) && data.getItemVisual(idx, "symbol") !== "none";
}
function $e7127346a3ae1a88$var$normalizeUpdateOpt(opt) {
    if (opt != null && !(0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(opt)) opt = {
        isIgnore: opt
    };
    return opt || {};
}
function $e7127346a3ae1a88$var$makeSeriesScope(data) {
    var seriesModel = data.hostModel;
    var emphasisModel = seriesModel.getModel("emphasis");
    return {
        emphasisItemStyle: emphasisModel.getModel("itemStyle").getItemStyle(),
        blurItemStyle: seriesModel.getModel([
            "blur",
            "itemStyle"
        ]).getItemStyle(),
        selectItemStyle: seriesModel.getModel([
            "select",
            "itemStyle"
        ]).getItemStyle(),
        focus: emphasisModel.get("focus"),
        blurScope: emphasisModel.get("blurScope"),
        emphasisDisabled: emphasisModel.get("disabled"),
        hoverScale: emphasisModel.get("scale"),
        labelStatesModels: (0, $75926670b032879d$export$9739a32674be5893)(seriesModel),
        cursorStyle: seriesModel.get("cursor")
    };
}
var $e7127346a3ae1a88$var$SymbolDraw = /** @class */ function() {
    function SymbolDraw(SymbolCtor) {
        this.group = new $748aea24eee93173$export$2e2bcd8739ae039();
        this._SymbolCtor = SymbolCtor || (0, $b51da2dba47aa3c0$export$2e2bcd8739ae039);
    }
    /**
   * Update symbols draw by new data
   */ SymbolDraw.prototype.updateData = function(data, opt) {
        // Remove progressive els.
        this._progressiveEls = null;
        opt = $e7127346a3ae1a88$var$normalizeUpdateOpt(opt);
        var group = this.group;
        var seriesModel = data.hostModel;
        var oldData = this._data;
        var SymbolCtor = this._SymbolCtor;
        var disableAnimation = opt.disableAnimation;
        var seriesScope = $e7127346a3ae1a88$var$makeSeriesScope(data);
        var symbolUpdateOpt = {
            disableAnimation: disableAnimation
        };
        var getSymbolPoint = opt.getSymbolPoint || function(idx) {
            return data.getItemLayout(idx);
        };
        // There is no oldLineData only when first rendering or switching from
        // stream mode to normal mode, where previous elements should be removed.
        if (!oldData) group.removeAll();
        data.diff(oldData).add(function(newIdx) {
            var point = getSymbolPoint(newIdx);
            if ($e7127346a3ae1a88$var$symbolNeedsDraw(data, point, newIdx, opt)) {
                var symbolEl = new SymbolCtor(data, newIdx, seriesScope, symbolUpdateOpt);
                symbolEl.setPosition(point);
                data.setItemGraphicEl(newIdx, symbolEl);
                group.add(symbolEl);
            }
        }).update(function(newIdx, oldIdx) {
            var symbolEl = oldData.getItemGraphicEl(oldIdx);
            var point = getSymbolPoint(newIdx);
            if (!$e7127346a3ae1a88$var$symbolNeedsDraw(data, point, newIdx, opt)) {
                group.remove(symbolEl);
                return;
            }
            var newSymbolType = data.getItemVisual(newIdx, "symbol") || "circle";
            var oldSymbolType = symbolEl && symbolEl.getSymbolType && symbolEl.getSymbolType();
            if (!symbolEl || oldSymbolType && oldSymbolType !== newSymbolType) {
                group.remove(symbolEl);
                symbolEl = new SymbolCtor(data, newIdx, seriesScope, symbolUpdateOpt);
                symbolEl.setPosition(point);
            } else {
                symbolEl.updateData(data, newIdx, seriesScope, symbolUpdateOpt);
                var target = {
                    x: point[0],
                    y: point[1]
                };
                disableAnimation ? symbolEl.attr(target) : $f7e735722ff36e8c$export$c8dce3c08436e91e(symbolEl, target, seriesModel);
            }
            // Add back
            group.add(symbolEl);
            data.setItemGraphicEl(newIdx, symbolEl);
        }).remove(function(oldIdx) {
            var el = oldData.getItemGraphicEl(oldIdx);
            el && el.fadeOut(function() {
                group.remove(el);
            }, seriesModel);
        }).execute();
        this._getSymbolPoint = getSymbolPoint;
        this._data = data;
    };
    SymbolDraw.prototype.updateLayout = function() {
        var _this = this;
        var data = this._data;
        if (data) // Not use animation
        data.eachItemGraphicEl(function(el, idx) {
            var point = _this._getSymbolPoint(idx);
            el.setPosition(point);
            el.markRedraw();
        });
    };
    SymbolDraw.prototype.incrementalPrepareUpdate = function(data) {
        this._seriesScope = $e7127346a3ae1a88$var$makeSeriesScope(data);
        this._data = null;
        this.group.removeAll();
    };
    /**
   * Update symbols draw by new data
   */ SymbolDraw.prototype.incrementalUpdate = function(taskParams, data, opt) {
        // Clear
        this._progressiveEls = [];
        opt = $e7127346a3ae1a88$var$normalizeUpdateOpt(opt);
        function updateIncrementalAndHover(el) {
            if (!el.isGroup) {
                el.incremental = true;
                el.ensureState("emphasis").hoverLayer = true;
            }
        }
        for(var idx = taskParams.start; idx < taskParams.end; idx++){
            var point = data.getItemLayout(idx);
            if ($e7127346a3ae1a88$var$symbolNeedsDraw(data, point, idx, opt)) {
                var el = new this._SymbolCtor(data, idx, this._seriesScope);
                el.traverse(updateIncrementalAndHover);
                el.setPosition(point);
                this.group.add(el);
                data.setItemGraphicEl(idx, el);
                this._progressiveEls.push(el);
            }
        }
    };
    SymbolDraw.prototype.eachRendered = function(cb) {
        $6aec2e68b45f8796$export$3e564442729bf048(this._progressiveEls || this.group, cb);
    };
    SymbolDraw.prototype.remove = function(enableAnimation) {
        var group = this.group;
        var data = this._data;
        // Incremental model do not have this._data.
        if (data && enableAnimation) data.eachItemGraphicEl(function(el) {
            el.fadeOut(function() {
                group.remove(el);
            }, data.hostModel);
        });
        else group.removeAll();
    };
    return SymbolDraw;
}();
var $e7127346a3ae1a88$export$2e2bcd8739ae039 = $e7127346a3ae1a88$var$SymbolDraw;



/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

function $f9639efe8c9a3fae$export$b488a529581b37e(coordSys, data, valueOrigin) {
    var baseAxis = coordSys.getBaseAxis();
    var valueAxis = coordSys.getOtherAxis(baseAxis);
    var valueStart = $f9639efe8c9a3fae$var$getValueStart(valueAxis, valueOrigin);
    var baseAxisDim = baseAxis.dim;
    var valueAxisDim = valueAxis.dim;
    var valueDim = data.mapDimension(valueAxisDim);
    var baseDim = data.mapDimension(baseAxisDim);
    var baseDataOffset = valueAxisDim === "x" || valueAxisDim === "radius" ? 1 : 0;
    var dims = (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(coordSys.dimensions, function(coordDim) {
        return data.mapDimension(coordDim);
    });
    var stacked = false;
    var stackResultDim = data.getCalculationInfo("stackResultDimension");
    if ((0, $6ff1444fd0e27b15$export$1dedc39359ae35c)(data, dims[0])) {
        // jshint ignore:line
        stacked = true;
        dims[0] = stackResultDim;
    }
    if ((0, $6ff1444fd0e27b15$export$1dedc39359ae35c)(data, dims[1])) {
        // jshint ignore:line
        stacked = true;
        dims[1] = stackResultDim;
    }
    return {
        dataDimsForPoint: dims,
        valueStart: valueStart,
        valueAxisDim: valueAxisDim,
        baseAxisDim: baseAxisDim,
        stacked: !!stacked,
        valueDim: valueDim,
        baseDim: baseDim,
        baseDataOffset: baseDataOffset,
        stackedOverDimension: data.getCalculationInfo("stackedOverDimension")
    };
}
function $f9639efe8c9a3fae$var$getValueStart(valueAxis, valueOrigin) {
    var valueStart = 0;
    var extent = valueAxis.scale.getExtent();
    if (valueOrigin === "start") valueStart = extent[0];
    else if (valueOrigin === "end") valueStart = extent[1];
    else if ((0, $e44eb14c4271d0f9$export$7e4aa119212bc614)(valueOrigin) && !isNaN(valueOrigin)) valueStart = valueOrigin;
    else {
        // Both positive
        if (extent[0] > 0) valueStart = extent[0];
        else if (extent[1] < 0) valueStart = extent[1];
    // If is one positive, and one negative, onZero shall be true
    }
    return valueStart;
}
function $f9639efe8c9a3fae$export$c1601aa630e7b5f8(dataCoordInfo, coordSys, data, idx) {
    var value = NaN;
    if (dataCoordInfo.stacked) value = data.get(data.getCalculationInfo("stackedOverDimension"), idx);
    if (isNaN(value)) value = dataCoordInfo.valueStart;
    var baseDataOffset = dataCoordInfo.baseDataOffset;
    var stackedData = [];
    stackedData[baseDataOffset] = data.get(dataCoordInfo.baseDim, idx);
    stackedData[1 - baseDataOffset] = value;
    return coordSys.dataToPoint(stackedData);
}


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
/* global Float32Array */ var $6df8d5354168e89b$var$supportFloat32Array = typeof Float32Array !== "undefined";
var $6df8d5354168e89b$var$Float32ArrayCtor = !$6df8d5354168e89b$var$supportFloat32Array ? Array : Float32Array;
function $6df8d5354168e89b$export$21d2298f3f56bbaf(arg) {
    if ((0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(arg)) // Return self directly if don't support TypedArray.
    return $6df8d5354168e89b$var$supportFloat32Array ? new Float32Array(arg) : arg;
    // Else is number
    return new $6df8d5354168e89b$var$Float32ArrayCtor(arg);
}


function $3934b43176285fa9$var$diffData(oldData, newData) {
    var diffResult = [];
    newData.diff(oldData).add(function(idx) {
        diffResult.push({
            cmd: "+",
            idx: idx
        });
    }).update(function(newIdx, oldIdx) {
        diffResult.push({
            cmd: "=",
            idx: oldIdx,
            idx1: newIdx
        });
    }).remove(function(idx) {
        diffResult.push({
            cmd: "-",
            idx: idx
        });
    }).execute();
    return diffResult;
}
function $3934b43176285fa9$export$2e2bcd8739ae039(oldData, newData, oldStackedOnPoints, newStackedOnPoints, oldCoordSys, newCoordSys, oldValueOrigin, newValueOrigin) {
    var diff = $3934b43176285fa9$var$diffData(oldData, newData);
    // let newIdList = newData.mapArray(newData.getId);
    // let oldIdList = oldData.mapArray(oldData.getId);
    // convertToIntId(newIdList, oldIdList);
    // // FIXME One data ?
    // diff = arrayDiff(oldIdList, newIdList);
    var currPoints = [];
    var nextPoints = [];
    // Points for stacking base line
    var currStackedPoints = [];
    var nextStackedPoints = [];
    var status = [];
    var sortedIndices = [];
    var rawIndices = [];
    var newDataOldCoordInfo = (0, $f9639efe8c9a3fae$export$b488a529581b37e)(oldCoordSys, newData, oldValueOrigin);
    // const oldDataNewCoordInfo = prepareDataCoordInfo(newCoordSys, oldData, newValueOrigin);
    var oldPoints = oldData.getLayout("points") || [];
    var newPoints = newData.getLayout("points") || [];
    for(var i = 0; i < diff.length; i++){
        var diffItem = diff[i];
        var pointAdded = true;
        var oldIdx2 = void 0;
        var newIdx2 = void 0;
        // FIXME, animation is not so perfect when dataZoom window moves fast
        // Which is in case remvoing or add more than one data in the tail or head
        switch(diffItem.cmd){
            case "=":
                oldIdx2 = diffItem.idx * 2;
                newIdx2 = diffItem.idx1 * 2;
                var currentX = oldPoints[oldIdx2];
                var currentY = oldPoints[oldIdx2 + 1];
                var nextX = newPoints[newIdx2];
                var nextY = newPoints[newIdx2 + 1];
                // If previous data is NaN, use next point directly
                if (isNaN(currentX) || isNaN(currentY)) {
                    currentX = nextX;
                    currentY = nextY;
                }
                currPoints.push(currentX, currentY);
                nextPoints.push(nextX, nextY);
                currStackedPoints.push(oldStackedOnPoints[oldIdx2], oldStackedOnPoints[oldIdx2 + 1]);
                nextStackedPoints.push(newStackedOnPoints[newIdx2], newStackedOnPoints[newIdx2 + 1]);
                rawIndices.push(newData.getRawIndex(diffItem.idx1));
                break;
            case "+":
                var newIdx = diffItem.idx;
                var newDataDimsForPoint = newDataOldCoordInfo.dataDimsForPoint;
                var oldPt = oldCoordSys.dataToPoint([
                    newData.get(newDataDimsForPoint[0], newIdx),
                    newData.get(newDataDimsForPoint[1], newIdx)
                ]);
                newIdx2 = newIdx * 2;
                currPoints.push(oldPt[0], oldPt[1]);
                nextPoints.push(newPoints[newIdx2], newPoints[newIdx2 + 1]);
                var stackedOnPoint = (0, $f9639efe8c9a3fae$export$c1601aa630e7b5f8)(newDataOldCoordInfo, oldCoordSys, newData, newIdx);
                currStackedPoints.push(stackedOnPoint[0], stackedOnPoint[1]);
                nextStackedPoints.push(newStackedOnPoints[newIdx2], newStackedOnPoints[newIdx2 + 1]);
                rawIndices.push(newData.getRawIndex(newIdx));
                break;
            case "-":
                pointAdded = false;
        }
        // Original indices
        if (pointAdded) {
            status.push(diffItem);
            sortedIndices.push(sortedIndices.length);
        }
    }
    // Diff result may be crossed if all items are changed
    // Sort by data index
    sortedIndices.sort(function(a, b) {
        return rawIndices[a] - rawIndices[b];
    });
    var len = currPoints.length;
    var sortedCurrPoints = (0, $6df8d5354168e89b$export$21d2298f3f56bbaf)(len);
    var sortedNextPoints = (0, $6df8d5354168e89b$export$21d2298f3f56bbaf)(len);
    var sortedCurrStackedPoints = (0, $6df8d5354168e89b$export$21d2298f3f56bbaf)(len);
    var sortedNextStackedPoints = (0, $6df8d5354168e89b$export$21d2298f3f56bbaf)(len);
    var sortedStatus = [];
    for(var i = 0; i < sortedIndices.length; i++){
        var idx = sortedIndices[i];
        var i2 = i * 2;
        var idx2 = idx * 2;
        sortedCurrPoints[i2] = currPoints[idx2];
        sortedCurrPoints[i2 + 1] = currPoints[idx2 + 1];
        sortedNextPoints[i2] = nextPoints[idx2];
        sortedNextPoints[i2 + 1] = nextPoints[idx2 + 1];
        sortedCurrStackedPoints[i2] = currStackedPoints[idx2];
        sortedCurrStackedPoints[i2 + 1] = currStackedPoints[idx2 + 1];
        sortedNextStackedPoints[i2] = nextStackedPoints[idx2];
        sortedNextStackedPoints[i2 + 1] = nextStackedPoints[idx2 + 1];
        sortedStatus[i] = status[idx];
    }
    return {
        current: sortedCurrPoints,
        next: sortedNextPoints,
        stackedOnCurrent: sortedCurrStackedPoints,
        stackedOnNext: sortedNextStackedPoints,
        status: sortedStatus
    };
}




/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 



var $a11e0c5088a756e2$var$mathMin = Math.min;
var $a11e0c5088a756e2$var$mathMax = Math.max;
function $a11e0c5088a756e2$var$isPointNull(x, y) {
    return isNaN(x) || isNaN(y);
}
/**
 * Draw smoothed line in non-monotone, in may cause undesired curve in extreme
 * situations. This should be used when points are non-monotone neither in x or
 * y dimension.
 */ function $a11e0c5088a756e2$var$drawSegment(ctx, points, start, segLen, allLen, dir, smooth, smoothMonotone, connectNulls) {
    var prevX;
    var prevY;
    var cpx0;
    var cpy0;
    var cpx1;
    var cpy1;
    var idx = start;
    var k = 0;
    for(; k < segLen; k++){
        var x = points[idx * 2];
        var y = points[idx * 2 + 1];
        if (idx >= allLen || idx < 0) break;
        if ($a11e0c5088a756e2$var$isPointNull(x, y)) {
            if (connectNulls) {
                idx += dir;
                continue;
            }
            break;
        }
        if (idx === start) {
            ctx[dir > 0 ? "moveTo" : "lineTo"](x, y);
            cpx0 = x;
            cpy0 = y;
        } else {
            var dx = x - prevX;
            var dy = y - prevY;
            // Ignore tiny segment.
            if (dx * dx + dy * dy < 0.5) {
                idx += dir;
                continue;
            }
            if (smooth > 0) {
                var nextIdx = idx + dir;
                var nextX = points[nextIdx * 2];
                var nextY = points[nextIdx * 2 + 1];
                // Ignore duplicate point
                while(nextX === x && nextY === y && k < segLen){
                    k++;
                    nextIdx += dir;
                    idx += dir;
                    nextX = points[nextIdx * 2];
                    nextY = points[nextIdx * 2 + 1];
                    x = points[idx * 2];
                    y = points[idx * 2 + 1];
                    dx = x - prevX;
                    dy = y - prevY;
                }
                var tmpK = k + 1;
                if (connectNulls) // Find next point not null
                while($a11e0c5088a756e2$var$isPointNull(nextX, nextY) && tmpK < segLen){
                    tmpK++;
                    nextIdx += dir;
                    nextX = points[nextIdx * 2];
                    nextY = points[nextIdx * 2 + 1];
                }
                var ratioNextSeg = 0.5;
                var vx = 0;
                var vy = 0;
                var nextCpx0 = void 0;
                var nextCpy0 = void 0;
                // Is last point
                if (tmpK >= segLen || $a11e0c5088a756e2$var$isPointNull(nextX, nextY)) {
                    cpx1 = x;
                    cpy1 = y;
                } else {
                    vx = nextX - prevX;
                    vy = nextY - prevY;
                    var dx0 = x - prevX;
                    var dx1 = nextX - x;
                    var dy0 = y - prevY;
                    var dy1 = nextY - y;
                    var lenPrevSeg = void 0;
                    var lenNextSeg = void 0;
                    if (smoothMonotone === "x") {
                        lenPrevSeg = Math.abs(dx0);
                        lenNextSeg = Math.abs(dx1);
                        var dir_1 = vx > 0 ? 1 : -1;
                        cpx1 = x - dir_1 * lenPrevSeg * smooth;
                        cpy1 = y;
                        nextCpx0 = x + dir_1 * lenNextSeg * smooth;
                        nextCpy0 = y;
                    } else if (smoothMonotone === "y") {
                        lenPrevSeg = Math.abs(dy0);
                        lenNextSeg = Math.abs(dy1);
                        var dir_2 = vy > 0 ? 1 : -1;
                        cpx1 = x;
                        cpy1 = y - dir_2 * lenPrevSeg * smooth;
                        nextCpx0 = x;
                        nextCpy0 = y + dir_2 * lenNextSeg * smooth;
                    } else {
                        lenPrevSeg = Math.sqrt(dx0 * dx0 + dy0 * dy0);
                        lenNextSeg = Math.sqrt(dx1 * dx1 + dy1 * dy1);
                        // Use ratio of seg length
                        ratioNextSeg = lenNextSeg / (lenNextSeg + lenPrevSeg);
                        cpx1 = x - vx * smooth * (1 - ratioNextSeg);
                        cpy1 = y - vy * smooth * (1 - ratioNextSeg);
                        // cp0 of next segment
                        nextCpx0 = x + vx * smooth * ratioNextSeg;
                        nextCpy0 = y + vy * smooth * ratioNextSeg;
                        // Smooth constraint between point and next point.
                        // Avoid exceeding extreme after smoothing.
                        nextCpx0 = $a11e0c5088a756e2$var$mathMin(nextCpx0, $a11e0c5088a756e2$var$mathMax(nextX, x));
                        nextCpy0 = $a11e0c5088a756e2$var$mathMin(nextCpy0, $a11e0c5088a756e2$var$mathMax(nextY, y));
                        nextCpx0 = $a11e0c5088a756e2$var$mathMax(nextCpx0, $a11e0c5088a756e2$var$mathMin(nextX, x));
                        nextCpy0 = $a11e0c5088a756e2$var$mathMax(nextCpy0, $a11e0c5088a756e2$var$mathMin(nextY, y));
                        // Reclaculate cp1 based on the adjusted cp0 of next seg.
                        vx = nextCpx0 - x;
                        vy = nextCpy0 - y;
                        cpx1 = x - vx * lenPrevSeg / lenNextSeg;
                        cpy1 = y - vy * lenPrevSeg / lenNextSeg;
                        // Smooth constraint between point and prev point.
                        // Avoid exceeding extreme after smoothing.
                        cpx1 = $a11e0c5088a756e2$var$mathMin(cpx1, $a11e0c5088a756e2$var$mathMax(prevX, x));
                        cpy1 = $a11e0c5088a756e2$var$mathMin(cpy1, $a11e0c5088a756e2$var$mathMax(prevY, y));
                        cpx1 = $a11e0c5088a756e2$var$mathMax(cpx1, $a11e0c5088a756e2$var$mathMin(prevX, x));
                        cpy1 = $a11e0c5088a756e2$var$mathMax(cpy1, $a11e0c5088a756e2$var$mathMin(prevY, y));
                        // Adjust next cp0 again.
                        vx = x - cpx1;
                        vy = y - cpy1;
                        nextCpx0 = x + vx * lenNextSeg / lenPrevSeg;
                        nextCpy0 = y + vy * lenNextSeg / lenPrevSeg;
                    }
                }
                ctx.bezierCurveTo(cpx0, cpy0, cpx1, cpy1, x, y);
                cpx0 = nextCpx0;
                cpy0 = nextCpy0;
            } else ctx.lineTo(x, y);
        }
        prevX = x;
        prevY = y;
        idx += dir;
    }
    return k;
}
var $a11e0c5088a756e2$var$ECPolylineShape = /** @class */ function() {
    function ECPolylineShape() {
        this.smooth = 0;
        this.smoothConstraint = true;
    }
    return ECPolylineShape;
}();
var $a11e0c5088a756e2$export$bf7c0585b8f7d00f = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(ECPolyline, _super);
    function ECPolyline(opts) {
        var _this = _super.call(this, opts) || this;
        _this.type = "ec-polyline";
        return _this;
    }
    ECPolyline.prototype.getDefaultStyle = function() {
        return {
            stroke: "#000",
            fill: null
        };
    };
    ECPolyline.prototype.getDefaultShape = function() {
        return new $a11e0c5088a756e2$var$ECPolylineShape();
    };
    ECPolyline.prototype.buildPath = function(ctx, shape) {
        var points = shape.points;
        var i = 0;
        var len = points.length / 2;
        // const result = getBoundingBox(points, shape.smoothConstraint);
        if (shape.connectNulls) {
            // Must remove first and last null values avoid draw error in polygon
            for(; len > 0; len--){
                if (!$a11e0c5088a756e2$var$isPointNull(points[len * 2 - 2], points[len * 2 - 1])) break;
            }
            for(; i < len; i++){
                if (!$a11e0c5088a756e2$var$isPointNull(points[i * 2], points[i * 2 + 1])) break;
            }
        }
        while(i < len)i += $a11e0c5088a756e2$var$drawSegment(ctx, points, i, len, len, 1, shape.smooth, shape.smoothMonotone, shape.connectNulls) + 1;
    };
    ECPolyline.prototype.getPointOn = function(xOrY, dim) {
        if (!this.path) {
            this.createPathProxy();
            this.buildPath(this.path, this.shape);
        }
        var path = this.path;
        var data = path.data;
        var CMD = (0, $9638c378ac086dea$export$2e2bcd8739ae039).CMD;
        var x0;
        var y0;
        var isDimX = dim === "x";
        var roots = [];
        for(var i = 0; i < data.length;){
            var cmd = data[i++];
            var x = void 0;
            var y = void 0;
            var x2 = void 0;
            var y2 = void 0;
            var x3 = void 0;
            var y3 = void 0;
            var t = void 0;
            switch(cmd){
                case CMD.M:
                    x0 = data[i++];
                    y0 = data[i++];
                    break;
                case CMD.L:
                    x = data[i++];
                    y = data[i++];
                    t = isDimX ? (xOrY - x0) / (x - x0) : (xOrY - y0) / (y - y0);
                    if (t <= 1 && t >= 0) {
                        var val = isDimX ? (y - y0) * t + y0 : (x - x0) * t + x0;
                        return isDimX ? [
                            xOrY,
                            val
                        ] : [
                            val,
                            xOrY
                        ];
                    }
                    x0 = x;
                    y0 = y;
                    break;
                case CMD.C:
                    x = data[i++];
                    y = data[i++];
                    x2 = data[i++];
                    y2 = data[i++];
                    x3 = data[i++];
                    y3 = data[i++];
                    var nRoot = isDimX ? (0, $b1facc0bcf653177$export$ca5d13faa10b167e)(x0, x, x2, x3, xOrY, roots) : (0, $b1facc0bcf653177$export$ca5d13faa10b167e)(y0, y, y2, y3, xOrY, roots);
                    if (nRoot > 0) for(var i_1 = 0; i_1 < nRoot; i_1++){
                        var t_1 = roots[i_1];
                        if (t_1 <= 1 && t_1 >= 0) {
                            var val = isDimX ? (0, $b1facc0bcf653177$export$547c21de482bbcb2)(y0, y, y2, y3, t_1) : (0, $b1facc0bcf653177$export$547c21de482bbcb2)(x0, x, x2, x3, t_1);
                            return isDimX ? [
                                xOrY,
                                val
                            ] : [
                                val,
                                xOrY
                            ];
                        }
                    }
                    x0 = x3;
                    y0 = y3;
                    break;
            }
        }
    };
    return ECPolyline;
}((0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039));
var $a11e0c5088a756e2$var$ECPolygonShape = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(ECPolygonShape, _super);
    function ECPolygonShape() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return ECPolygonShape;
}($a11e0c5088a756e2$var$ECPolylineShape);
var $a11e0c5088a756e2$export$6042a400d113f2bd = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(ECPolygon, _super);
    function ECPolygon(opts) {
        var _this = _super.call(this, opts) || this;
        _this.type = "ec-polygon";
        return _this;
    }
    ECPolygon.prototype.getDefaultShape = function() {
        return new $a11e0c5088a756e2$var$ECPolygonShape();
    };
    ECPolygon.prototype.buildPath = function(ctx, shape) {
        var points = shape.points;
        var stackedOnPoints = shape.stackedOnPoints;
        var i = 0;
        var len = points.length / 2;
        var smoothMonotone = shape.smoothMonotone;
        if (shape.connectNulls) {
            // Must remove first and last null values avoid draw error in polygon
            for(; len > 0; len--){
                if (!$a11e0c5088a756e2$var$isPointNull(points[len * 2 - 2], points[len * 2 - 1])) break;
            }
            for(; i < len; i++){
                if (!$a11e0c5088a756e2$var$isPointNull(points[i * 2], points[i * 2 + 1])) break;
            }
        }
        while(i < len){
            var k = $a11e0c5088a756e2$var$drawSegment(ctx, points, i, len, len, 1, shape.smooth, smoothMonotone, shape.connectNulls);
            $a11e0c5088a756e2$var$drawSegment(ctx, stackedOnPoints, i + k - 1, k, len, -1, shape.stackedOnSmooth, smoothMonotone, shape.connectNulls);
            i += k + 1;
            ctx.closePath();
        }
    };
    return ECPolygon;
}((0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039));




/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 


function $c5b5eca93899a66f$export$83958787eb658d14(cartesian, hasAnimation, seriesModel, done, during) {
    var rect = cartesian.getArea();
    var x = rect.x;
    var y = rect.y;
    var width = rect.width;
    var height = rect.height;
    var lineWidth = seriesModel.get([
        "lineStyle",
        "width"
    ]) || 2;
    // Expand the clip path a bit to avoid the border is clipped and looks thinner
    x -= lineWidth / 2;
    y -= lineWidth / 2;
    width += lineWidth;
    height += lineWidth;
    // fix: https://github.com/apache/incubator-echarts/issues/11369
    width = Math.ceil(width);
    if (x !== Math.floor(x)) {
        x = Math.floor(x);
        // if no extra 1px on `width`, it will still be clipped since `x` is floored
        width++;
    }
    var clipPath = new $538026eba361a92a$export$2e2bcd8739ae039({
        shape: {
            x: x,
            y: y,
            width: width,
            height: height
        }
    });
    if (hasAnimation) {
        var baseAxis = cartesian.getBaseAxis();
        var isHorizontal = baseAxis.isHorizontal();
        var isAxisInversed = baseAxis.inverse;
        if (isHorizontal) {
            if (isAxisInversed) clipPath.shape.x += width;
            clipPath.shape.width = 0;
        } else {
            if (!isAxisInversed) clipPath.shape.y += height;
            clipPath.shape.height = 0;
        }
        var duringCb = (0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(during) ? function(percent) {
            during(percent, clipPath);
        } : null;
        $f7e735722ff36e8c$export$a121566aadcfe021(clipPath, {
            shape: {
                width: width,
                height: height,
                x: x,
                y: y
            }
        }, seriesModel, null, done, duringCb);
    }
    return clipPath;
}
function $c5b5eca93899a66f$export$13dc2b2230df3cb5(polar, hasAnimation, seriesModel) {
    var sectorArea = polar.getArea();
    // Avoid float number rounding error for symbol on the edge of axis extent.
    var r0 = (0, $13e6a1a716300dd4$export$2077e0241d6afd3c)(sectorArea.r0, 1);
    var r = (0, $13e6a1a716300dd4$export$2077e0241d6afd3c)(sectorArea.r, 1);
    var clipPath = new $55ff835abc77a8e3$export$2e2bcd8739ae039({
        shape: {
            cx: (0, $13e6a1a716300dd4$export$2077e0241d6afd3c)(polar.cx, 1),
            cy: (0, $13e6a1a716300dd4$export$2077e0241d6afd3c)(polar.cy, 1),
            r0: r0,
            r: r,
            startAngle: sectorArea.startAngle,
            endAngle: sectorArea.endAngle,
            clockwise: sectorArea.clockwise
        }
    });
    if (hasAnimation) {
        var isRadial = polar.getBaseAxis().dim === "angle";
        if (isRadial) clipPath.shape.endAngle = sectorArea.startAngle;
        else clipPath.shape.r = r0;
        $f7e735722ff36e8c$export$a121566aadcfe021(clipPath, {
            shape: {
                endAngle: sectorArea.endAngle,
                r: r
            }
        }, seriesModel);
    }
    return clipPath;
}
function $c5b5eca93899a66f$export$e0fe5081209d01c9(coordSys, hasAnimation, seriesModel, done, during) {
    if (!coordSys) return null;
    else if (coordSys.type === "polar") return $c5b5eca93899a66f$export$13dc2b2230df3cb5(coordSys, hasAnimation, seriesModel);
    else if (coordSys.type === "cartesian2d") return $c5b5eca93899a66f$export$83958787eb658d14(coordSys, hasAnimation, seriesModel, done, during);
    return null;
}


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ function $6b8ccbda0efa7c7c$export$8567506e6336616(coordSys, type) {
    return coordSys.type === type;
}









function $75bd9078f07d63fc$var$isPointsSame(points1, points2) {
    if (points1.length !== points2.length) return;
    for(var i = 0; i < points1.length; i++){
        if (points1[i] !== points2[i]) return;
    }
    return true;
}
function $75bd9078f07d63fc$var$bboxFromPoints(points) {
    var minX = Infinity;
    var minY = Infinity;
    var maxX = -Infinity;
    var maxY = -Infinity;
    for(var i = 0; i < points.length;){
        var x = points[i++];
        var y = points[i++];
        if (!isNaN(x)) {
            minX = Math.min(x, minX);
            maxX = Math.max(x, maxX);
        }
        if (!isNaN(y)) {
            minY = Math.min(y, minY);
            maxY = Math.max(y, maxY);
        }
    }
    return [
        [
            minX,
            minY
        ],
        [
            maxX,
            maxY
        ]
    ];
}
function $75bd9078f07d63fc$var$getBoundingDiff(points1, points2) {
    var _a = $75bd9078f07d63fc$var$bboxFromPoints(points1), min1 = _a[0], max1 = _a[1];
    var _b = $75bd9078f07d63fc$var$bboxFromPoints(points2), min2 = _b[0], max2 = _b[1];
    // Get a max value from each corner of two boundings.
    return Math.max(Math.abs(min1[0] - min2[0]), Math.abs(min1[1] - min2[1]), Math.abs(max1[0] - max2[0]), Math.abs(max1[1] - max2[1]));
}
function $75bd9078f07d63fc$var$getSmooth(smooth) {
    return $e44eb14c4271d0f9$export$7e4aa119212bc614(smooth) ? smooth : smooth ? 0.5 : 0;
}
function $75bd9078f07d63fc$var$getStackedOnPoints(coordSys, data, dataCoordInfo) {
    if (!dataCoordInfo.valueDim) return [];
    var len = data.count();
    var points = (0, $6df8d5354168e89b$export$21d2298f3f56bbaf)(len * 2);
    for(var idx = 0; idx < len; idx++){
        var pt = (0, $f9639efe8c9a3fae$export$c1601aa630e7b5f8)(dataCoordInfo, coordSys, data, idx);
        points[idx * 2] = pt[0];
        points[idx * 2 + 1] = pt[1];
    }
    return points;
}
function $75bd9078f07d63fc$var$turnPointsIntoStep(points, coordSys, stepTurnAt, connectNulls) {
    var baseAxis = coordSys.getBaseAxis();
    var baseIndex = baseAxis.dim === "x" || baseAxis.dim === "radius" ? 0 : 1;
    var stepPoints = [];
    var i = 0;
    var stepPt = [];
    var pt = [];
    var nextPt = [];
    var filteredPoints = [];
    if (connectNulls) {
        for(i = 0; i < points.length; i += 2)if (!isNaN(points[i]) && !isNaN(points[i + 1])) filteredPoints.push(points[i], points[i + 1]);
        points = filteredPoints;
    }
    for(i = 0; i < points.length - 2; i += 2){
        nextPt[0] = points[i + 2];
        nextPt[1] = points[i + 3];
        pt[0] = points[i];
        pt[1] = points[i + 1];
        stepPoints.push(pt[0], pt[1]);
        switch(stepTurnAt){
            case "end":
                stepPt[baseIndex] = nextPt[baseIndex];
                stepPt[1 - baseIndex] = pt[1 - baseIndex];
                stepPoints.push(stepPt[0], stepPt[1]);
                break;
            case "middle":
                var middle = (pt[baseIndex] + nextPt[baseIndex]) / 2;
                var stepPt2 = [];
                stepPt[baseIndex] = stepPt2[baseIndex] = middle;
                stepPt[1 - baseIndex] = pt[1 - baseIndex];
                stepPt2[1 - baseIndex] = nextPt[1 - baseIndex];
                stepPoints.push(stepPt[0], stepPt[1]);
                stepPoints.push(stepPt2[0], stepPt2[1]);
                break;
            default:
                // default is start
                stepPt[baseIndex] = pt[baseIndex];
                stepPt[1 - baseIndex] = nextPt[1 - baseIndex];
                stepPoints.push(stepPt[0], stepPt[1]);
        }
    }
    // Last points
    stepPoints.push(points[i++], points[i++]);
    return stepPoints;
}
/**
 * Clip color stops to edge. Avoid creating too large gradients.
 * Which may lead to blurry when GPU acceleration is enabled. See #15680
 *
 * The stops has been sorted from small to large.
 */ function $75bd9078f07d63fc$var$clipColorStops(colorStops, maxSize) {
    var newColorStops = [];
    var len = colorStops.length;
    // coord will always < 0 in prevOutOfRangeColorStop.
    var prevOutOfRangeColorStop;
    var prevInRangeColorStop;
    function lerpStop(stop0, stop1, clippedCoord) {
        var coord0 = stop0.coord;
        var p = (clippedCoord - coord0) / (stop1.coord - coord0);
        var color = (0, $5373993605fe25d6$export$3a89f8d6f6bf6c9f)(p, [
            stop0.color,
            stop1.color
        ]);
        return {
            coord: clippedCoord,
            color: color
        };
    }
    for(var i = 0; i < len; i++){
        var stop_1 = colorStops[i];
        var coord = stop_1.coord;
        if (coord < 0) prevOutOfRangeColorStop = stop_1;
        else if (coord > maxSize) {
            if (prevInRangeColorStop) newColorStops.push(lerpStop(prevInRangeColorStop, stop_1, maxSize));
            else if (prevOutOfRangeColorStop) // If there are two stops and coord range is between these two stops
            newColorStops.push(lerpStop(prevOutOfRangeColorStop, stop_1, 0), lerpStop(prevOutOfRangeColorStop, stop_1, maxSize));
            break;
        } else {
            if (prevOutOfRangeColorStop) {
                newColorStops.push(lerpStop(prevOutOfRangeColorStop, stop_1, 0));
                // Reset
                prevOutOfRangeColorStop = null;
            }
            newColorStops.push(stop_1);
            prevInRangeColorStop = stop_1;
        }
    }
    return newColorStops;
}
function $75bd9078f07d63fc$var$getVisualGradient(data, coordSys, api) {
    var visualMetaList = data.getVisual("visualMeta");
    if (!visualMetaList || !visualMetaList.length || !data.count()) // When data.count() is 0, gradient range can not be calculated.
    return;
    if (coordSys.type !== "cartesian2d") {
        console.warn("Visual map on line style is only supported on cartesian2d.");
        return;
    }
    var coordDim;
    var visualMeta;
    for(var i = visualMetaList.length - 1; i >= 0; i--){
        var dimInfo = data.getDimensionInfo(visualMetaList[i].dimension);
        coordDim = dimInfo && dimInfo.coordDim;
        // Can only be x or y
        if (coordDim === "x" || coordDim === "y") {
            visualMeta = visualMetaList[i];
            break;
        }
    }
    if (!visualMeta) {
        console.warn("Visual map on line style only support x or y dimension.");
        return;
    }
    // If the area to be rendered is bigger than area defined by LinearGradient,
    // the canvas spec prescribes that the color of the first stop and the last
    // stop should be used. But if two stops are added at offset 0, in effect
    // browsers use the color of the second stop to render area outside
    // LinearGradient. So we can only infinitesimally extend area defined in
    // LinearGradient to render `outerColors`.
    var axis = coordSys.getAxis(coordDim);
    // dataToCoord mapping may not be linear, but must be monotonic.
    var colorStops = $e44eb14c4271d0f9$export$871de8747c9eaa88(visualMeta.stops, function(stop) {
        // offset will be calculated later.
        return {
            coord: axis.toGlobalCoord(axis.dataToCoord(stop.value)),
            color: stop.color
        };
    });
    var stopLen = colorStops.length;
    var outerColors = visualMeta.outerColors.slice();
    if (stopLen && colorStops[0].coord > colorStops[stopLen - 1].coord) {
        colorStops.reverse();
        outerColors.reverse();
    }
    var colorStopsInRange = $75bd9078f07d63fc$var$clipColorStops(colorStops, coordDim === "x" ? api.getWidth() : api.getHeight());
    var inRangeStopLen = colorStopsInRange.length;
    if (!inRangeStopLen && stopLen) // All stops are out of range. All will be the same color.
    return colorStops[0].coord < 0 ? outerColors[1] ? outerColors[1] : colorStops[stopLen - 1].color : outerColors[0] ? outerColors[0] : colorStops[0].color;
    var tinyExtent = 10; // Arbitrary value: 10px
    var minCoord = colorStopsInRange[0].coord - tinyExtent;
    var maxCoord = colorStopsInRange[inRangeStopLen - 1].coord + tinyExtent;
    var coordSpan = maxCoord - minCoord;
    if (coordSpan < 1e-3) return "transparent";
    $e44eb14c4271d0f9$export$79b2f7037acddd43(colorStopsInRange, function(stop) {
        stop.offset = (stop.coord - minCoord) / coordSpan;
    });
    colorStopsInRange.push({
        // NOTE: inRangeStopLen may still be 0 if stoplen is zero.
        offset: inRangeStopLen ? colorStopsInRange[inRangeStopLen - 1].offset : 0.5,
        color: outerColors[1] || "transparent"
    });
    colorStopsInRange.unshift({
        offset: inRangeStopLen ? colorStopsInRange[0].offset : 0.5,
        color: outerColors[0] || "transparent"
    });
    var gradient = new $8d46ddd232d9d12f$export$2e2bcd8739ae039(0, 0, 0, 0, colorStopsInRange, true);
    gradient[coordDim] = minCoord;
    gradient[coordDim + "2"] = maxCoord;
    return gradient;
}
function $75bd9078f07d63fc$var$getIsIgnoreFunc(seriesModel, data, coordSys) {
    var showAllSymbol = seriesModel.get("showAllSymbol");
    var isAuto = showAllSymbol === "auto";
    if (showAllSymbol && !isAuto) return;
    var categoryAxis = coordSys.getAxesByScale("ordinal")[0];
    if (!categoryAxis) return;
    // Note that category label interval strategy might bring some weird effect
    // in some scenario: users may wonder why some of the symbols are not
    // displayed. So we show all symbols as possible as we can.
    if (isAuto && $75bd9078f07d63fc$var$canShowAllSymbolForCategory(categoryAxis, data)) return;
    // Otherwise follow the label interval strategy on category axis.
    var categoryDataDim = data.mapDimension(categoryAxis.dim);
    var labelMap = {};
    $e44eb14c4271d0f9$export$79b2f7037acddd43(categoryAxis.getViewLabels(), function(labelItem) {
        var ordinalNumber = categoryAxis.scale.getRawOrdinalNumber(labelItem.tickValue);
        labelMap[ordinalNumber] = 1;
    });
    return function(dataIndex) {
        return !labelMap.hasOwnProperty(data.get(categoryDataDim, dataIndex));
    };
}
function $75bd9078f07d63fc$var$canShowAllSymbolForCategory(categoryAxis, data) {
    // In most cases, line is monotonous on category axis, and the label size
    // is close with each other. So we check the symbol size and some of the
    // label size alone with the category axis to estimate whether all symbol
    // can be shown without overlap.
    var axisExtent = categoryAxis.getExtent();
    var availSize = Math.abs(axisExtent[1] - axisExtent[0]) / categoryAxis.scale.count();
    isNaN(availSize) && (availSize = 0); // 0/0 is NaN.
    // Sampling some points, max 5.
    var dataLen = data.count();
    var step = Math.max(1, Math.round(dataLen / 5));
    for(var dataIndex = 0; dataIndex < dataLen; dataIndex += step){
        if ((0, $b51da2dba47aa3c0$export$2e2bcd8739ae039).getSymbolSize(data, dataIndex)[categoryAxis.isHorizontal() ? 1 : 0] * 1.5 > availSize) return false;
    }
    return true;
}
function $75bd9078f07d63fc$var$isPointNull(x, y) {
    return isNaN(x) || isNaN(y);
}
function $75bd9078f07d63fc$var$getLastIndexNotNull(points) {
    var len = points.length / 2;
    for(; len > 0; len--){
        if (!$75bd9078f07d63fc$var$isPointNull(points[len * 2 - 2], points[len * 2 - 1])) break;
    }
    return len - 1;
}
function $75bd9078f07d63fc$var$getPointAtIndex(points, idx) {
    return [
        points[idx * 2],
        points[idx * 2 + 1]
    ];
}
function $75bd9078f07d63fc$var$getIndexRange(points, xOrY, dim) {
    var len = points.length / 2;
    var dimIdx = dim === "x" ? 0 : 1;
    var a;
    var b;
    var prevIndex = 0;
    var nextIndex = -1;
    for(var i = 0; i < len; i++){
        b = points[i * 2 + dimIdx];
        if (isNaN(b) || isNaN(points[i * 2 + 1 - dimIdx])) continue;
        if (i === 0) {
            a = b;
            continue;
        }
        if (a <= xOrY && b >= xOrY || a >= xOrY && b <= xOrY) {
            nextIndex = i;
            break;
        }
        prevIndex = i;
        a = b;
    }
    return {
        range: [
            prevIndex,
            nextIndex
        ],
        t: (xOrY - a) / (b - a)
    };
}
function $75bd9078f07d63fc$var$anyStateShowEndLabel(seriesModel) {
    if (seriesModel.get([
        "endLabel",
        "show"
    ])) return true;
    for(var i = 0; i < (0, $e3c0a36328c28ac4$export$151308dceb52d5b).length; i++){
        if (seriesModel.get([
            (0, $e3c0a36328c28ac4$export$151308dceb52d5b)[i],
            "endLabel",
            "show"
        ])) return true;
    }
    return false;
}
function $75bd9078f07d63fc$var$createLineClipPath(lineView, coordSys, hasAnimation, seriesModel) {
    if ((0, $6b8ccbda0efa7c7c$export$8567506e6336616)(coordSys, "cartesian2d")) {
        var endLabelModel_1 = seriesModel.getModel("endLabel");
        var valueAnimation_1 = endLabelModel_1.get("valueAnimation");
        var data_1 = seriesModel.getData();
        var labelAnimationRecord_1 = {
            lastFrameIndex: 0
        };
        var during = $75bd9078f07d63fc$var$anyStateShowEndLabel(seriesModel) ? function(percent, clipRect) {
            lineView._endLabelOnDuring(percent, clipRect, data_1, labelAnimationRecord_1, valueAnimation_1, endLabelModel_1, coordSys);
        } : null;
        var isHorizontal = coordSys.getBaseAxis().isHorizontal();
        var clipPath = (0, $c5b5eca93899a66f$export$83958787eb658d14)(coordSys, hasAnimation, seriesModel, function() {
            var endLabel = lineView._endLabel;
            if (endLabel && hasAnimation) {
                if (labelAnimationRecord_1.originalX != null) endLabel.attr({
                    x: labelAnimationRecord_1.originalX,
                    y: labelAnimationRecord_1.originalY
                });
            }
        }, during);
        // Expand clip shape to avoid clipping when line value exceeds axis
        if (!seriesModel.get("clip", true)) {
            var rectShape = clipPath.shape;
            var expandSize = Math.max(rectShape.width, rectShape.height);
            if (isHorizontal) {
                rectShape.y -= expandSize;
                rectShape.height += expandSize * 2;
            } else {
                rectShape.x -= expandSize;
                rectShape.width += expandSize * 2;
            }
        }
        // Set to the final frame. To make sure label layout is right.
        if (during) during(1, clipPath);
        return clipPath;
    } else {
        if (seriesModel.get([
            "endLabel",
            "show"
        ])) console.warn("endLabel is not supported for lines in polar systems.");
        return (0, $c5b5eca93899a66f$export$13dc2b2230df3cb5)(coordSys, hasAnimation, seriesModel);
    }
}
function $75bd9078f07d63fc$var$getEndLabelStateSpecified(endLabelModel, coordSys) {
    var baseAxis = coordSys.getBaseAxis();
    var isHorizontal = baseAxis.isHorizontal();
    var isBaseInversed = baseAxis.inverse;
    var align = isHorizontal ? isBaseInversed ? "right" : "left" : "center";
    var verticalAlign = isHorizontal ? "middle" : isBaseInversed ? "top" : "bottom";
    return {
        normal: {
            align: endLabelModel.get("align") || align,
            verticalAlign: endLabelModel.get("verticalAlign") || verticalAlign
        }
    };
}
var $75bd9078f07d63fc$var$LineView = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(LineView, _super);
    function LineView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LineView.prototype.init = function() {
        var lineGroup = new $748aea24eee93173$export$2e2bcd8739ae039();
        var symbolDraw = new (0, $e7127346a3ae1a88$export$2e2bcd8739ae039)();
        this.group.add(symbolDraw.group);
        this._symbolDraw = symbolDraw;
        this._lineGroup = lineGroup;
    };
    LineView.prototype.render = function(seriesModel, ecModel, api) {
        var _this = this;
        var coordSys = seriesModel.coordinateSystem;
        var group = this.group;
        var data = seriesModel.getData();
        var lineStyleModel = seriesModel.getModel("lineStyle");
        var areaStyleModel = seriesModel.getModel("areaStyle");
        var points = data.getLayout("points") || [];
        var isCoordSysPolar = coordSys.type === "polar";
        var prevCoordSys = this._coordSys;
        var symbolDraw = this._symbolDraw;
        var polyline = this._polyline;
        var polygon = this._polygon;
        var lineGroup = this._lineGroup;
        var hasAnimation = !ecModel.ssr && seriesModel.get("animation");
        var isAreaChart = !areaStyleModel.isEmpty();
        var valueOrigin = areaStyleModel.get("origin");
        var dataCoordInfo = (0, $f9639efe8c9a3fae$export$b488a529581b37e)(coordSys, data, valueOrigin);
        var stackedOnPoints = isAreaChart && $75bd9078f07d63fc$var$getStackedOnPoints(coordSys, data, dataCoordInfo);
        var showSymbol = seriesModel.get("showSymbol");
        var connectNulls = seriesModel.get("connectNulls");
        var isIgnoreFunc = showSymbol && !isCoordSysPolar && $75bd9078f07d63fc$var$getIsIgnoreFunc(seriesModel, data, coordSys);
        // Remove temporary symbols
        var oldData = this._data;
        oldData && oldData.eachItemGraphicEl(function(el, idx) {
            if (el.__temp) {
                group.remove(el);
                oldData.setItemGraphicEl(idx, null);
            }
        });
        // Remove previous created symbols if showSymbol changed to false
        if (!showSymbol) symbolDraw.remove();
        group.add(lineGroup);
        // FIXME step not support polar
        var step = !isCoordSysPolar ? seriesModel.get("step") : false;
        var clipShapeForSymbol;
        if (coordSys && coordSys.getArea && seriesModel.get("clip", true)) {
            clipShapeForSymbol = coordSys.getArea();
            // Avoid float number rounding error for symbol on the edge of axis extent.
            // See #7913 and `test/dataZoom-clip.html`.
            if (clipShapeForSymbol.width != null) {
                clipShapeForSymbol.x -= 0.1;
                clipShapeForSymbol.y -= 0.1;
                clipShapeForSymbol.width += 0.2;
                clipShapeForSymbol.height += 0.2;
            } else if (clipShapeForSymbol.r0) {
                clipShapeForSymbol.r0 -= 0.5;
                clipShapeForSymbol.r += 0.5;
            }
        }
        this._clipShapeForSymbol = clipShapeForSymbol;
        var visualColor = $75bd9078f07d63fc$var$getVisualGradient(data, coordSys, api) || data.getVisual("style")[data.getVisual("drawType")];
        // Initialization animation or coordinate system changed
        if (!(polyline && prevCoordSys.type === coordSys.type && step === this._step)) {
            showSymbol && symbolDraw.updateData(data, {
                isIgnore: isIgnoreFunc,
                clipShape: clipShapeForSymbol,
                disableAnimation: true,
                getSymbolPoint: function(idx) {
                    return [
                        points[idx * 2],
                        points[idx * 2 + 1]
                    ];
                }
            });
            hasAnimation && this._initSymbolLabelAnimation(data, coordSys, clipShapeForSymbol);
            if (step) {
                // TODO If stacked series is not step
                points = $75bd9078f07d63fc$var$turnPointsIntoStep(points, coordSys, step, connectNulls);
                if (stackedOnPoints) stackedOnPoints = $75bd9078f07d63fc$var$turnPointsIntoStep(stackedOnPoints, coordSys, step, connectNulls);
            }
            polyline = this._newPolyline(points);
            if (isAreaChart) polygon = this._newPolygon(points, stackedOnPoints);
            else if (polygon) {
                lineGroup.remove(polygon);
                polygon = this._polygon = null;
            }
            // NOTE: Must update _endLabel before setClipPath.
            if (!isCoordSysPolar) this._initOrUpdateEndLabel(seriesModel, coordSys, (0, $1594f6dc0ce39685$export$cda04d03233e5555)(visualColor));
            lineGroup.setClipPath($75bd9078f07d63fc$var$createLineClipPath(this, coordSys, true, seriesModel));
        } else {
            if (isAreaChart && !polygon) // If areaStyle is added
            polygon = this._newPolygon(points, stackedOnPoints);
            else if (polygon && !isAreaChart) {
                // If areaStyle is removed
                lineGroup.remove(polygon);
                polygon = this._polygon = null;
            }
            // NOTE: Must update _endLabel before setClipPath.
            if (!isCoordSysPolar) this._initOrUpdateEndLabel(seriesModel, coordSys, (0, $1594f6dc0ce39685$export$cda04d03233e5555)(visualColor));
            // Update clipPath
            var oldClipPath = lineGroup.getClipPath();
            if (oldClipPath) {
                var newClipPath = $75bd9078f07d63fc$var$createLineClipPath(this, coordSys, false, seriesModel);
                $f7e735722ff36e8c$export$a121566aadcfe021(oldClipPath, {
                    shape: newClipPath.shape
                }, seriesModel);
            } else lineGroup.setClipPath($75bd9078f07d63fc$var$createLineClipPath(this, coordSys, true, seriesModel));
            // Always update, or it is wrong in the case turning on legend
            // because points are not changed.
            showSymbol && symbolDraw.updateData(data, {
                isIgnore: isIgnoreFunc,
                clipShape: clipShapeForSymbol,
                disableAnimation: true,
                getSymbolPoint: function(idx) {
                    return [
                        points[idx * 2],
                        points[idx * 2 + 1]
                    ];
                }
            });
            // In the case data zoom triggered refreshing frequently
            // Data may not change if line has a category axis. So it should animate nothing.
            if (!$75bd9078f07d63fc$var$isPointsSame(this._stackedOnPoints, stackedOnPoints) || !$75bd9078f07d63fc$var$isPointsSame(this._points, points)) {
                if (hasAnimation) this._doUpdateAnimation(data, stackedOnPoints, coordSys, api, step, valueOrigin, connectNulls);
                else {
                    // Not do it in update with animation
                    if (step) {
                        // TODO If stacked series is not step
                        points = $75bd9078f07d63fc$var$turnPointsIntoStep(points, coordSys, step, connectNulls);
                        if (stackedOnPoints) stackedOnPoints = $75bd9078f07d63fc$var$turnPointsIntoStep(stackedOnPoints, coordSys, step, connectNulls);
                    }
                    polyline.setShape({
                        points: points
                    });
                    polygon && polygon.setShape({
                        points: points,
                        stackedOnPoints: stackedOnPoints
                    });
                }
            }
        }
        var emphasisModel = seriesModel.getModel("emphasis");
        var focus = emphasisModel.get("focus");
        var blurScope = emphasisModel.get("blurScope");
        var emphasisDisabled = emphasisModel.get("disabled");
        polyline.useStyle($e44eb14c4271d0f9$export$ebe90cb607ad99e(// Use color in lineStyle first
        lineStyleModel.getLineStyle(), {
            fill: "none",
            stroke: visualColor,
            lineJoin: "bevel"
        }));
        (0, $e3c0a36328c28ac4$export$48b68047d330bbc9)(polyline, seriesModel, "lineStyle");
        if (polyline.style.lineWidth > 0 && seriesModel.get([
            "emphasis",
            "lineStyle",
            "width"
        ]) === "bolder") {
            var emphasisLineStyle = polyline.getState("emphasis").style;
            emphasisLineStyle.lineWidth = +polyline.style.lineWidth + 1;
        }
        // Needs seriesIndex for focus
        (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(polyline).seriesIndex = seriesModel.seriesIndex;
        (0, $e3c0a36328c28ac4$export$e51187539ff11209)(polyline, focus, blurScope, emphasisDisabled);
        var smooth = $75bd9078f07d63fc$var$getSmooth(seriesModel.get("smooth"));
        var smoothMonotone = seriesModel.get("smoothMonotone");
        polyline.setShape({
            smooth: smooth,
            smoothMonotone: smoothMonotone,
            connectNulls: connectNulls
        });
        if (polygon) {
            var stackedOnSeries = data.getCalculationInfo("stackedOnSeries");
            var stackedOnSmooth = 0;
            polygon.useStyle($e44eb14c4271d0f9$export$ebe90cb607ad99e(areaStyleModel.getAreaStyle(), {
                fill: visualColor,
                opacity: 0.7,
                lineJoin: "bevel",
                decal: data.getVisual("style").decal
            }));
            if (stackedOnSeries) stackedOnSmooth = $75bd9078f07d63fc$var$getSmooth(stackedOnSeries.get("smooth"));
            polygon.setShape({
                smooth: smooth,
                stackedOnSmooth: stackedOnSmooth,
                smoothMonotone: smoothMonotone,
                connectNulls: connectNulls
            });
            (0, $e3c0a36328c28ac4$export$48b68047d330bbc9)(polygon, seriesModel, "areaStyle");
            // Needs seriesIndex for focus
            (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(polygon).seriesIndex = seriesModel.seriesIndex;
            (0, $e3c0a36328c28ac4$export$e51187539ff11209)(polygon, focus, blurScope, emphasisDisabled);
        }
        var changePolyState = function(toState) {
            _this._changePolyState(toState);
        };
        data.eachItemGraphicEl(function(el) {
            // Switch polyline / polygon state if element changed its state.
            el && (el.onHoverStateChange = changePolyState);
        });
        this._polyline.onHoverStateChange = changePolyState;
        this._data = data;
        // Save the coordinate system for transition animation when data changed
        this._coordSys = coordSys;
        this._stackedOnPoints = stackedOnPoints;
        this._points = points;
        this._step = step;
        this._valueOrigin = valueOrigin;
        if (seriesModel.get("triggerLineEvent")) {
            this.packEventData(seriesModel, polyline);
            polygon && this.packEventData(seriesModel, polygon);
        }
    };
    LineView.prototype.packEventData = function(seriesModel, el) {
        (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(el).eventData = {
            componentType: "series",
            componentSubType: "line",
            componentIndex: seriesModel.componentIndex,
            seriesIndex: seriesModel.seriesIndex,
            seriesName: seriesModel.name,
            seriesType: "line"
        };
    };
    LineView.prototype.highlight = function(seriesModel, ecModel, api, payload) {
        var data = seriesModel.getData();
        var dataIndex = $8917c02fd8256c67$export$42b26cae8b8d10(data, payload);
        this._changePolyState("emphasis");
        if (!(dataIndex instanceof Array) && dataIndex != null && dataIndex >= 0) {
            var points = data.getLayout("points");
            var symbol = data.getItemGraphicEl(dataIndex);
            if (!symbol) {
                // Create a temporary symbol if it is not exists
                var x = points[dataIndex * 2];
                var y = points[dataIndex * 2 + 1];
                if (isNaN(x) || isNaN(y)) // Null data
                return;
                // fix #11360: shouldn't draw symbol outside clipShapeForSymbol
                if (this._clipShapeForSymbol && !this._clipShapeForSymbol.contain(x, y)) return;
                var zlevel = seriesModel.get("zlevel") || 0;
                var z = seriesModel.get("z") || 0;
                symbol = new (0, $b51da2dba47aa3c0$export$2e2bcd8739ae039)(data, dataIndex);
                symbol.x = x;
                symbol.y = y;
                symbol.setZ(zlevel, z);
                // ensure label text of the temporary symbol is in front of line and area polygon
                var symbolLabel = symbol.getSymbolPath().getTextContent();
                if (symbolLabel) {
                    symbolLabel.zlevel = zlevel;
                    symbolLabel.z = z;
                    symbolLabel.z2 = this._polyline.z2 + 1;
                }
                symbol.__temp = true;
                data.setItemGraphicEl(dataIndex, symbol);
                // Stop scale animation
                symbol.stopSymbolAnimation(true);
                this.group.add(symbol);
            }
            symbol.highlight();
        } else // Highlight whole series
        (0, $05e95ba2f0d93dbf$export$2e2bcd8739ae039).prototype.highlight.call(this, seriesModel, ecModel, api, payload);
    };
    LineView.prototype.downplay = function(seriesModel, ecModel, api, payload) {
        var data = seriesModel.getData();
        var dataIndex = $8917c02fd8256c67$export$42b26cae8b8d10(data, payload);
        this._changePolyState("normal");
        if (dataIndex != null && dataIndex >= 0) {
            var symbol = data.getItemGraphicEl(dataIndex);
            if (symbol) {
                if (symbol.__temp) {
                    data.setItemGraphicEl(dataIndex, null);
                    this.group.remove(symbol);
                } else symbol.downplay();
            }
        } else // FIXME
        // can not downplay completely.
        // Downplay whole series
        (0, $05e95ba2f0d93dbf$export$2e2bcd8739ae039).prototype.downplay.call(this, seriesModel, ecModel, api, payload);
    };
    LineView.prototype._changePolyState = function(toState) {
        var polygon = this._polygon;
        (0, $e3c0a36328c28ac4$export$868ba38adffa9e39)(this._polyline, toState);
        polygon && (0, $e3c0a36328c28ac4$export$868ba38adffa9e39)(polygon, toState);
    };
    LineView.prototype._newPolyline = function(points) {
        var polyline = this._polyline;
        // Remove previous created polyline
        if (polyline) this._lineGroup.remove(polyline);
        polyline = new (0, $a11e0c5088a756e2$export$bf7c0585b8f7d00f)({
            shape: {
                points: points
            },
            segmentIgnoreThreshold: 2,
            z2: 10
        });
        this._lineGroup.add(polyline);
        this._polyline = polyline;
        return polyline;
    };
    LineView.prototype._newPolygon = function(points, stackedOnPoints) {
        var polygon = this._polygon;
        // Remove previous created polygon
        if (polygon) this._lineGroup.remove(polygon);
        polygon = new (0, $a11e0c5088a756e2$export$6042a400d113f2bd)({
            shape: {
                points: points,
                stackedOnPoints: stackedOnPoints
            },
            segmentIgnoreThreshold: 2
        });
        this._lineGroup.add(polygon);
        this._polygon = polygon;
        return polygon;
    };
    LineView.prototype._initSymbolLabelAnimation = function(data, coordSys, clipShape) {
        var isHorizontalOrRadial;
        var isCoordSysPolar;
        var baseAxis = coordSys.getBaseAxis();
        var isAxisInverse = baseAxis.inverse;
        if (coordSys.type === "cartesian2d") {
            isHorizontalOrRadial = baseAxis.isHorizontal();
            isCoordSysPolar = false;
        } else if (coordSys.type === "polar") {
            isHorizontalOrRadial = baseAxis.dim === "angle";
            isCoordSysPolar = true;
        }
        var seriesModel = data.hostModel;
        var seriesDuration = seriesModel.get("animationDuration");
        if ($e44eb14c4271d0f9$export$f6e2535fb5126e54(seriesDuration)) seriesDuration = seriesDuration(null);
        var seriesDelay = seriesModel.get("animationDelay") || 0;
        var seriesDelayValue = $e44eb14c4271d0f9$export$f6e2535fb5126e54(seriesDelay) ? seriesDelay(null) : seriesDelay;
        data.eachItemGraphicEl(function(symbol, idx) {
            var el = symbol;
            if (el) {
                var point = [
                    symbol.x,
                    symbol.y
                ];
                var start = void 0;
                var end = void 0;
                var current = void 0;
                if (clipShape) {
                    if (isCoordSysPolar) {
                        var polarClip = clipShape;
                        var coord = coordSys.pointToCoord(point);
                        if (isHorizontalOrRadial) {
                            start = polarClip.startAngle;
                            end = polarClip.endAngle;
                            current = -coord[1] / 180 * Math.PI;
                        } else {
                            start = polarClip.r0;
                            end = polarClip.r;
                            current = coord[0];
                        }
                    } else {
                        var gridClip = clipShape;
                        if (isHorizontalOrRadial) {
                            start = gridClip.x;
                            end = gridClip.x + gridClip.width;
                            current = symbol.x;
                        } else {
                            start = gridClip.y + gridClip.height;
                            end = gridClip.y;
                            current = symbol.y;
                        }
                    }
                }
                var ratio = end === start ? 0 : (current - start) / (end - start);
                if (isAxisInverse) ratio = 1 - ratio;
                var delay = $e44eb14c4271d0f9$export$f6e2535fb5126e54(seriesDelay) ? seriesDelay(idx) : seriesDuration * ratio + seriesDelayValue;
                var symbolPath = el.getSymbolPath();
                var text = symbolPath.getTextContent();
                el.attr({
                    scaleX: 0,
                    scaleY: 0
                });
                el.animateTo({
                    scaleX: 1,
                    scaleY: 1
                }, {
                    duration: 200,
                    setToFinal: true,
                    delay: delay
                });
                if (text) text.animateFrom({
                    style: {
                        opacity: 0
                    }
                }, {
                    duration: 300,
                    delay: delay
                });
                symbolPath.disableLabelAnimation = true;
            }
        });
    };
    LineView.prototype._initOrUpdateEndLabel = function(seriesModel, coordSys, inheritColor) {
        var endLabelModel = seriesModel.getModel("endLabel");
        if ($75bd9078f07d63fc$var$anyStateShowEndLabel(seriesModel)) {
            var data_2 = seriesModel.getData();
            var polyline = this._polyline;
            // series may be filtered.
            var points = data_2.getLayout("points");
            if (!points) {
                polyline.removeTextContent();
                this._endLabel = null;
                return;
            }
            var endLabel = this._endLabel;
            if (!endLabel) {
                endLabel = this._endLabel = new $6d12d9a137e168c2$export$2e2bcd8739ae039({
                    z2: 200 // should be higher than item symbol
                });
                endLabel.ignoreClip = true;
                polyline.setTextContent(this._endLabel);
                polyline.disableLabelAnimation = true;
            }
            // Find last non-NaN data to display data
            var dataIndex = $75bd9078f07d63fc$var$getLastIndexNotNull(points);
            if (dataIndex >= 0) {
                (0, $75926670b032879d$export$9a13992917966657)(polyline, (0, $75926670b032879d$export$9739a32674be5893)(seriesModel, "endLabel"), {
                    inheritColor: inheritColor,
                    labelFetcher: seriesModel,
                    labelDataIndex: dataIndex,
                    defaultText: function(dataIndex, opt, interpolatedValue) {
                        return interpolatedValue != null ? (0, $2216e0c7945273bf$export$5f84815e91ca6775)(data_2, interpolatedValue) : (0, $2216e0c7945273bf$export$5ff20667590927ed)(data_2, dataIndex);
                    },
                    enableTextSetter: true
                }, $75bd9078f07d63fc$var$getEndLabelStateSpecified(endLabelModel, coordSys));
                polyline.textConfig.position = null;
            }
        } else if (this._endLabel) {
            this._polyline.removeTextContent();
            this._endLabel = null;
        }
    };
    LineView.prototype._endLabelOnDuring = function(percent, clipRect, data, animationRecord, valueAnimation, endLabelModel, coordSys) {
        var endLabel = this._endLabel;
        var polyline = this._polyline;
        if (endLabel) {
            // NOTE: Don't remove percent < 1. percent === 1 means the first frame during render.
            // The label is not prepared at this time.
            if (percent < 1 && animationRecord.originalX == null) {
                animationRecord.originalX = endLabel.x;
                animationRecord.originalY = endLabel.y;
            }
            var points = data.getLayout("points");
            var seriesModel = data.hostModel;
            var connectNulls = seriesModel.get("connectNulls");
            var precision = endLabelModel.get("precision");
            var distance = endLabelModel.get("distance") || 0;
            var baseAxis = coordSys.getBaseAxis();
            var isHorizontal = baseAxis.isHorizontal();
            var isBaseInversed = baseAxis.inverse;
            var clipShape = clipRect.shape;
            var xOrY = isBaseInversed ? isHorizontal ? clipShape.x : clipShape.y + clipShape.height : isHorizontal ? clipShape.x + clipShape.width : clipShape.y;
            var distanceX = (isHorizontal ? distance : 0) * (isBaseInversed ? -1 : 1);
            var distanceY = (isHorizontal ? 0 : -distance) * (isBaseInversed ? -1 : 1);
            var dim = isHorizontal ? "x" : "y";
            var dataIndexRange = $75bd9078f07d63fc$var$getIndexRange(points, xOrY, dim);
            var indices = dataIndexRange.range;
            var diff = indices[1] - indices[0];
            var value = void 0;
            if (diff >= 1) {
                // diff > 1 && connectNulls, which is on the null data.
                if (diff > 1 && !connectNulls) {
                    var pt = $75bd9078f07d63fc$var$getPointAtIndex(points, indices[0]);
                    endLabel.attr({
                        x: pt[0] + distanceX,
                        y: pt[1] + distanceY
                    });
                    valueAnimation && (value = seriesModel.getRawValue(indices[0]));
                } else {
                    var pt = polyline.getPointOn(xOrY, dim);
                    pt && endLabel.attr({
                        x: pt[0] + distanceX,
                        y: pt[1] + distanceY
                    });
                    var startValue = seriesModel.getRawValue(indices[0]);
                    var endValue = seriesModel.getRawValue(indices[1]);
                    valueAnimation && (value = $8917c02fd8256c67$export$bd0439821a1869f3(data, precision, startValue, endValue, dataIndexRange.t));
                }
                animationRecord.lastFrameIndex = indices[0];
            } else {
                // If diff <= 0, which is the range is not found(Include NaN)
                // Choose the first point or last point.
                var idx = percent === 1 || animationRecord.lastFrameIndex > 0 ? indices[0] : 0;
                var pt = $75bd9078f07d63fc$var$getPointAtIndex(points, idx);
                valueAnimation && (value = seriesModel.getRawValue(idx));
                endLabel.attr({
                    x: pt[0] + distanceX,
                    y: pt[1] + distanceY
                });
            }
            if (valueAnimation) {
                var inner = (0, $75926670b032879d$export$f62786d3261ab0f4)(endLabel);
                if (typeof inner.setLabelText === "function") inner.setLabelText(value);
            }
        }
    };
    /**
   * @private
   */ // FIXME Two value axis
    LineView.prototype._doUpdateAnimation = function(data, stackedOnPoints, coordSys, api, step, valueOrigin, connectNulls) {
        var polyline = this._polyline;
        var polygon = this._polygon;
        var seriesModel = data.hostModel;
        var diff = (0, $3934b43176285fa9$export$2e2bcd8739ae039)(this._data, data, this._stackedOnPoints, stackedOnPoints, this._coordSys, coordSys, this._valueOrigin, valueOrigin);
        var current = diff.current;
        var stackedOnCurrent = diff.stackedOnCurrent;
        var next = diff.next;
        var stackedOnNext = diff.stackedOnNext;
        if (step) {
            // TODO If stacked series is not step
            current = $75bd9078f07d63fc$var$turnPointsIntoStep(diff.current, coordSys, step, connectNulls);
            stackedOnCurrent = $75bd9078f07d63fc$var$turnPointsIntoStep(diff.stackedOnCurrent, coordSys, step, connectNulls);
            next = $75bd9078f07d63fc$var$turnPointsIntoStep(diff.next, coordSys, step, connectNulls);
            stackedOnNext = $75bd9078f07d63fc$var$turnPointsIntoStep(diff.stackedOnNext, coordSys, step, connectNulls);
        }
        // Don't apply animation if diff is large.
        // For better result and avoid memory explosion problems like
        // https://github.com/apache/incubator-echarts/issues/12229
        if ($75bd9078f07d63fc$var$getBoundingDiff(current, next) > 3000 || polygon && $75bd9078f07d63fc$var$getBoundingDiff(stackedOnCurrent, stackedOnNext) > 3000) {
            polyline.stopAnimation();
            polyline.setShape({
                points: next
            });
            if (polygon) {
                polygon.stopAnimation();
                polygon.setShape({
                    points: next,
                    stackedOnPoints: stackedOnNext
                });
            }
            return;
        }
        polyline.shape.__points = diff.current;
        polyline.shape.points = current;
        var target = {
            shape: {
                points: next
            }
        };
        // Also animate the original points.
        // If points reference is changed when turning into step line.
        if (diff.current !== current) target.shape.__points = diff.next;
        // Stop previous animation.
        polyline.stopAnimation();
        $f7e735722ff36e8c$export$c8dce3c08436e91e(polyline, target, seriesModel);
        if (polygon) {
            polygon.setShape({
                // Reuse the points with polyline.
                points: current,
                stackedOnPoints: stackedOnCurrent
            });
            polygon.stopAnimation();
            $f7e735722ff36e8c$export$c8dce3c08436e91e(polygon, {
                shape: {
                    stackedOnPoints: stackedOnNext
                }
            }, seriesModel);
            // If use attr directly in updateProps.
            if (polyline.shape.points !== polygon.shape.points) polygon.shape.points = polyline.shape.points;
        }
        var updatedDataInfo = [];
        var diffStatus = diff.status;
        for(var i = 0; i < diffStatus.length; i++){
            var cmd = diffStatus[i].cmd;
            if (cmd === "=") {
                var el = data.getItemGraphicEl(diffStatus[i].idx1);
                if (el) updatedDataInfo.push({
                    el: el,
                    ptIdx: i // Index of points
                });
            }
        }
        if (polyline.animators && polyline.animators.length) polyline.animators[0].during(function() {
            polygon && polygon.dirtyShape();
            var points = polyline.shape.__points;
            for(var i = 0; i < updatedDataInfo.length; i++){
                var el = updatedDataInfo[i].el;
                var offset = updatedDataInfo[i].ptIdx * 2;
                el.x = points[offset];
                el.y = points[offset + 1];
                el.markRedraw();
            }
        });
    };
    LineView.prototype.remove = function(ecModel) {
        var group = this.group;
        var oldData = this._data;
        this._lineGroup.removeAll();
        this._symbolDraw.remove(true);
        // Remove temporary created elements when highlighting
        oldData && oldData.eachItemGraphicEl(function(el, idx) {
            if (el.__temp) {
                group.remove(el);
                oldData.setItemGraphicEl(idx, null);
            }
        });
        this._polyline = this._polygon = this._coordSys = this._points = this._stackedOnPoints = this._endLabel = this._data = null;
    };
    LineView.type = "line";
    return LineView;
}((0, $05e95ba2f0d93dbf$export$2e2bcd8739ae039));
var $75bd9078f07d63fc$export$2e2bcd8739ae039 = $75bd9078f07d63fc$var$LineView;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 



function $dd3aefd7653e3a33$export$2e2bcd8739ae039(seriesType, forceStoreInTypedArray) {
    return {
        seriesType: seriesType,
        plan: (0, $eb114e8bb7242d9d$export$2e2bcd8739ae039)(),
        reset: function(seriesModel) {
            var data = seriesModel.getData();
            var coordSys = seriesModel.coordinateSystem;
            var pipelineContext = seriesModel.pipelineContext;
            var useTypedArray = forceStoreInTypedArray || pipelineContext.large;
            if (!coordSys) return;
            var dims = (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(coordSys.dimensions, function(dim) {
                return data.mapDimension(dim);
            }).slice(0, 2);
            var dimLen = dims.length;
            var stackResultDim = data.getCalculationInfo("stackResultDimension");
            if ((0, $6ff1444fd0e27b15$export$1dedc39359ae35c)(data, dims[0])) dims[0] = stackResultDim;
            if ((0, $6ff1444fd0e27b15$export$1dedc39359ae35c)(data, dims[1])) dims[1] = stackResultDim;
            var store = data.getStore();
            var dimIdx0 = data.getDimensionIndex(dims[0]);
            var dimIdx1 = data.getDimensionIndex(dims[1]);
            return dimLen && {
                progress: function(params, data) {
                    var segCount = params.end - params.start;
                    var points = useTypedArray && (0, $6df8d5354168e89b$export$21d2298f3f56bbaf)(segCount * dimLen);
                    var tmpIn = [];
                    var tmpOut = [];
                    for(var i = params.start, offset = 0; i < params.end; i++){
                        var point = void 0;
                        if (dimLen === 1) {
                            var x = store.get(dimIdx0, i);
                            // NOTE: Make sure the second parameter is null to use default strategy.
                            point = coordSys.dataToPoint(x, null, tmpOut);
                        } else {
                            tmpIn[0] = store.get(dimIdx0, i);
                            tmpIn[1] = store.get(dimIdx1, i);
                            // Let coordinate system to handle the NaN data.
                            point = coordSys.dataToPoint(tmpIn, null, tmpOut);
                        }
                        if (useTypedArray) {
                            points[offset++] = point[0];
                            points[offset++] = point[1];
                        } else data.setItemLayout(i, point.slice());
                    }
                    useTypedArray && data.setLayout("points", points);
                }
            };
        }
    };
}


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
var $5d11855679f656ff$var$samplers = {
    average: function(frame) {
        var sum = 0;
        var count = 0;
        for(var i = 0; i < frame.length; i++)if (!isNaN(frame[i])) {
            sum += frame[i];
            count++;
        }
        // Return NaN if count is 0
        return count === 0 ? NaN : sum / count;
    },
    sum: function(frame) {
        var sum = 0;
        for(var i = 0; i < frame.length; i++)// Ignore NaN
        sum += frame[i] || 0;
        return sum;
    },
    max: function(frame) {
        var max = -Infinity;
        for(var i = 0; i < frame.length; i++)frame[i] > max && (max = frame[i]);
        // NaN will cause illegal axis extent.
        return isFinite(max) ? max : NaN;
    },
    min: function(frame) {
        var min = Infinity;
        for(var i = 0; i < frame.length; i++)frame[i] < min && (min = frame[i]);
        // NaN will cause illegal axis extent.
        return isFinite(min) ? min : NaN;
    },
    minmax: function(frame) {
        var turningPointAbsoluteValue = -Infinity;
        var turningPointOriginalValue = -Infinity;
        for(var i = 0; i < frame.length; i++){
            var originalValue = frame[i];
            var absoluteValue = Math.abs(originalValue);
            if (absoluteValue > turningPointAbsoluteValue) {
                turningPointAbsoluteValue = absoluteValue;
                turningPointOriginalValue = originalValue;
            }
        }
        return isFinite(turningPointOriginalValue) ? turningPointOriginalValue : NaN;
    },
    // TODO
    // Median
    nearest: function(frame) {
        return frame[0];
    }
};
var $5d11855679f656ff$var$indexSampler = function(frame) {
    return Math.round(frame.length / 2);
};
function $5d11855679f656ff$export$2e2bcd8739ae039(seriesType) {
    return {
        seriesType: seriesType,
        // FIXME:TS never used, so comment it
        // modifyOutputEnd: true,
        reset: function(seriesModel, ecModel, api) {
            var data = seriesModel.getData();
            var sampling = seriesModel.get("sampling");
            var coordSys = seriesModel.coordinateSystem;
            var count = data.count();
            // Only cartesian2d support down sampling. Disable it when there is few data.
            if (count > 10 && coordSys.type === "cartesian2d" && sampling) {
                var baseAxis = coordSys.getBaseAxis();
                var valueAxis = coordSys.getOtherAxis(baseAxis);
                var extent = baseAxis.getExtent();
                var dpr = api.getDevicePixelRatio();
                // Coordinste system has been resized
                var size = Math.abs(extent[1] - extent[0]) * (dpr || 1);
                var rate = Math.round(count / size);
                if (isFinite(rate) && rate > 1) {
                    if (sampling === "lttb") seriesModel.setData(data.lttbDownSample(data.mapDimension(valueAxis.dim), 1 / rate));
                    var sampler = void 0;
                    if ((0, $e44eb14c4271d0f9$export$844ec244b1367d54)(sampling)) sampler = $5d11855679f656ff$var$samplers[sampling];
                    else if ((0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(sampling)) sampler = sampling;
                    if (sampler) // Only support sample the first dim mapped from value axis.
                    seriesModel.setData(data.downSample(data.mapDimension(valueAxis.dim), 1 / rate, sampler, $5d11855679f656ff$var$indexSampler));
                }
            }
        }
    };
}


function $e0a18a7fcd449e53$export$4b3e715f166fdd78(registers) {
    registers.registerChartView((0, $75bd9078f07d63fc$export$2e2bcd8739ae039));
    registers.registerSeriesModel((0, $b38fdbfb08237eb8$export$2e2bcd8739ae039));
    registers.registerLayout((0, $dd3aefd7653e3a33$export$2e2bcd8739ae039)("line", true));
    registers.registerVisual({
        seriesType: "line",
        reset: function(seriesModel) {
            var data = seriesModel.getData();
            // Visual coding for legend
            var lineStyle = seriesModel.getModel("lineStyle").getLineStyle();
            if (lineStyle && !lineStyle.stroke) // Fill in visual should be palette color if
            // has color callback
            lineStyle.stroke = data.getVisual("style").fill;
            data.setVisual("legendLineStyle", lineStyle);
        }
    });
    // Down sample after filter
    registers.registerProcessor(registers.PRIORITY.PROCESSOR.STATISTIC, (0, $5d11855679f656ff$export$2e2bcd8739ae039)("line"));
}

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 




var $41133a9d01fee524$var$STACK_PREFIX = "__ec_stack_";
function $41133a9d01fee524$var$getSeriesStackId(seriesModel) {
    return seriesModel.get("stack") || $41133a9d01fee524$var$STACK_PREFIX + seriesModel.seriesIndex;
}
function $41133a9d01fee524$var$getAxisKey(axis) {
    return axis.dim + axis.index;
}
function $41133a9d01fee524$export$658df087977b9e84(opt) {
    var params = [];
    var baseAxis = opt.axis;
    var axisKey = "axis0";
    if (baseAxis.type !== "category") return;
    var bandWidth = baseAxis.getBandWidth();
    for(var i = 0; i < opt.count || 0; i++)params.push((0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)({
        bandWidth: bandWidth,
        axisKey: axisKey,
        stackId: $41133a9d01fee524$var$STACK_PREFIX + i
    }, opt));
    var widthAndOffsets = $41133a9d01fee524$var$doCalBarWidthAndOffset(params);
    var result = [];
    for(var i = 0; i < opt.count; i++){
        var item = widthAndOffsets[axisKey][$41133a9d01fee524$var$STACK_PREFIX + i];
        item.offsetCenter = item.offset + item.width / 2;
        result.push(item);
    }
    return result;
}
function $41133a9d01fee524$export$efbd0c3f5ab0d5e4(seriesType, ecModel) {
    var seriesModels = [];
    ecModel.eachSeriesByType(seriesType, function(seriesModel) {
        // Check series coordinate, do layout for cartesian2d only
        if ($41133a9d01fee524$var$isOnCartesian(seriesModel)) seriesModels.push(seriesModel);
    });
    return seriesModels;
}
/**
 * Map from (baseAxis.dim + '_' + baseAxis.index) to min gap of two adjacent
 * values.
 * This works for time axes, value axes, and log axes.
 * For a single time axis, return value is in the form like
 * {'x_0': [1000000]}.
 * The value of 1000000 is in milliseconds.
 */ function $41133a9d01fee524$var$getValueAxesMinGaps(barSeries) {
    /**
   * Map from axis.index to values.
   * For a single time axis, axisValues is in the form like
   * {'x_0': [1495555200000, 1495641600000, 1495728000000]}.
   * Items in axisValues[x], e.g. 1495555200000, are time values of all
   * series.
   */ var axisValues = {};
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(barSeries, function(seriesModel) {
        var cartesian = seriesModel.coordinateSystem;
        var baseAxis = cartesian.getBaseAxis();
        if (baseAxis.type !== "time" && baseAxis.type !== "value") return;
        var data = seriesModel.getData();
        var key = baseAxis.dim + "_" + baseAxis.index;
        var dimIdx = data.getDimensionIndex(data.mapDimension(baseAxis.dim));
        var store = data.getStore();
        for(var i = 0, cnt = store.count(); i < cnt; ++i){
            var value = store.get(dimIdx, i);
            if (!axisValues[key]) // No previous data for the axis
            axisValues[key] = [
                value
            ];
            else // No value in previous series
            axisValues[key].push(value);
        // Ignore duplicated time values in the same axis
        }
    });
    var axisMinGaps = {};
    for(var key in axisValues)if (axisValues.hasOwnProperty(key)) {
        var valuesInAxis = axisValues[key];
        if (valuesInAxis) {
            // Sort axis values into ascending order to calculate gaps
            valuesInAxis.sort(function(a, b) {
                return a - b;
            });
            var min = null;
            for(var j = 1; j < valuesInAxis.length; ++j){
                var delta = valuesInAxis[j] - valuesInAxis[j - 1];
                if (delta > 0) // Ignore 0 delta because they are of the same axis value
                min = min === null ? delta : Math.min(min, delta);
            }
            // Set to null if only have one data
            axisMinGaps[key] = min;
        }
    }
    return axisMinGaps;
}
function $41133a9d01fee524$export$20769dafc84e0299(barSeries) {
    var axisMinGaps = $41133a9d01fee524$var$getValueAxesMinGaps(barSeries);
    var seriesInfoList = [];
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(barSeries, function(seriesModel) {
        var cartesian = seriesModel.coordinateSystem;
        var baseAxis = cartesian.getBaseAxis();
        var axisExtent = baseAxis.getExtent();
        var bandWidth;
        if (baseAxis.type === "category") bandWidth = baseAxis.getBandWidth();
        else if (baseAxis.type === "value" || baseAxis.type === "time") {
            var key = baseAxis.dim + "_" + baseAxis.index;
            var minGap = axisMinGaps[key];
            var extentSpan = Math.abs(axisExtent[1] - axisExtent[0]);
            var scale = baseAxis.scale.getExtent();
            var scaleSpan = Math.abs(scale[1] - scale[0]);
            bandWidth = minGap ? extentSpan / scaleSpan * minGap : extentSpan; // When there is only one data value
        } else {
            var data = seriesModel.getData();
            bandWidth = Math.abs(axisExtent[1] - axisExtent[0]) / data.count();
        }
        var barWidth = (0, $13e6a1a716300dd4$export$e8514cb5a5e2b40f)(seriesModel.get("barWidth"), bandWidth);
        var barMaxWidth = (0, $13e6a1a716300dd4$export$e8514cb5a5e2b40f)(seriesModel.get("barMaxWidth"), bandWidth);
        var barMinWidth = (0, $13e6a1a716300dd4$export$e8514cb5a5e2b40f)(// barMinWidth by default is 0.5 / 1 in cartesian. Because in value axis,
        // the auto-calculated bar width might be less than 0.5 / 1.
        seriesModel.get("barMinWidth") || ($41133a9d01fee524$var$isInLargeMode(seriesModel) ? 0.5 : 1), bandWidth);
        var barGap = seriesModel.get("barGap");
        var barCategoryGap = seriesModel.get("barCategoryGap");
        seriesInfoList.push({
            bandWidth: bandWidth,
            barWidth: barWidth,
            barMaxWidth: barMaxWidth,
            barMinWidth: barMinWidth,
            barGap: barGap,
            barCategoryGap: barCategoryGap,
            axisKey: $41133a9d01fee524$var$getAxisKey(baseAxis),
            stackId: $41133a9d01fee524$var$getSeriesStackId(seriesModel)
        });
    });
    return $41133a9d01fee524$var$doCalBarWidthAndOffset(seriesInfoList);
}
function $41133a9d01fee524$var$doCalBarWidthAndOffset(seriesInfoList) {
    // Columns info on each category axis. Key is cartesian name
    var columnsMap = {};
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(seriesInfoList, function(seriesInfo, idx) {
        var axisKey = seriesInfo.axisKey;
        var bandWidth = seriesInfo.bandWidth;
        var columnsOnAxis = columnsMap[axisKey] || {
            bandWidth: bandWidth,
            remainedWidth: bandWidth,
            autoWidthCount: 0,
            categoryGap: null,
            gap: "20%",
            stacks: {}
        };
        var stacks = columnsOnAxis.stacks;
        columnsMap[axisKey] = columnsOnAxis;
        var stackId = seriesInfo.stackId;
        if (!stacks[stackId]) columnsOnAxis.autoWidthCount++;
        stacks[stackId] = stacks[stackId] || {
            width: 0,
            maxWidth: 0
        };
        // Caution: In a single coordinate system, these barGrid attributes
        // will be shared by series. Consider that they have default values,
        // only the attributes set on the last series will work.
        // Do not change this fact unless there will be a break change.
        var barWidth = seriesInfo.barWidth;
        if (barWidth && !stacks[stackId].width) {
            // See #6312, do not restrict width.
            stacks[stackId].width = barWidth;
            barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);
            columnsOnAxis.remainedWidth -= barWidth;
        }
        var barMaxWidth = seriesInfo.barMaxWidth;
        barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);
        var barMinWidth = seriesInfo.barMinWidth;
        barMinWidth && (stacks[stackId].minWidth = barMinWidth);
        var barGap = seriesInfo.barGap;
        barGap != null && (columnsOnAxis.gap = barGap);
        var barCategoryGap = seriesInfo.barCategoryGap;
        barCategoryGap != null && (columnsOnAxis.categoryGap = barCategoryGap);
    });
    var result = {};
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(columnsMap, function(columnsOnAxis, coordSysName) {
        result[coordSysName] = {};
        var stacks = columnsOnAxis.stacks;
        var bandWidth = columnsOnAxis.bandWidth;
        var categoryGapPercent = columnsOnAxis.categoryGap;
        if (categoryGapPercent == null) {
            var columnCount = (0, $e44eb14c4271d0f9$export$ed97f33186d4b816)(stacks).length;
            // More columns in one group
            // the spaces between group is smaller. Or the column will be too thin.
            categoryGapPercent = Math.max(35 - columnCount * 4, 15) + "%";
        }
        var categoryGap = (0, $13e6a1a716300dd4$export$e8514cb5a5e2b40f)(categoryGapPercent, bandWidth);
        var barGapPercent = (0, $13e6a1a716300dd4$export$e8514cb5a5e2b40f)(columnsOnAxis.gap, 1);
        var remainedWidth = columnsOnAxis.remainedWidth;
        var autoWidthCount = columnsOnAxis.autoWidthCount;
        var autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
        autoWidth = Math.max(autoWidth, 0);
        // Find if any auto calculated bar exceeded maxBarWidth
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(stacks, function(column) {
            var maxWidth = column.maxWidth;
            var minWidth = column.minWidth;
            if (!column.width) {
                var finalWidth = autoWidth;
                if (maxWidth && maxWidth < finalWidth) finalWidth = Math.min(maxWidth, remainedWidth);
                // `minWidth` has higher priority. `minWidth` decide that whether the
                // bar is able to be visible. So `minWidth` should not be restricted
                // by `maxWidth` or `remainedWidth` (which is from `bandWidth`). In
                // the extreme cases for `value` axis, bars are allowed to overlap
                // with each other if `minWidth` specified.
                if (minWidth && minWidth > finalWidth) finalWidth = minWidth;
                if (finalWidth !== autoWidth) {
                    column.width = finalWidth;
                    remainedWidth -= finalWidth + barGapPercent * finalWidth;
                    autoWidthCount--;
                }
            } else {
                // `barMinWidth/barMaxWidth` has higher priority than `barWidth`, as
                // CSS does. Because barWidth can be a percent value, where
                // `barMaxWidth` can be used to restrict the final width.
                var finalWidth = column.width;
                if (maxWidth) finalWidth = Math.min(finalWidth, maxWidth);
                // `minWidth` has higher priority, as described above
                if (minWidth) finalWidth = Math.max(finalWidth, minWidth);
                column.width = finalWidth;
                remainedWidth -= finalWidth + barGapPercent * finalWidth;
                autoWidthCount--;
            }
        });
        // Recalculate width again
        autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
        autoWidth = Math.max(autoWidth, 0);
        var widthSum = 0;
        var lastColumn;
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(stacks, function(column, idx) {
            if (!column.width) column.width = autoWidth;
            lastColumn = column;
            widthSum += column.width * (1 + barGapPercent);
        });
        if (lastColumn) widthSum -= lastColumn.width * barGapPercent;
        var offset = -widthSum / 2;
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(stacks, function(column, stackId) {
            result[coordSysName][stackId] = result[coordSysName][stackId] || {
                bandWidth: bandWidth,
                offset: offset,
                width: column.width
            };
            offset += column.width * (1 + barGapPercent);
        });
    });
    return result;
}
function $41133a9d01fee524$export$35920bb6556da1c2(barWidthAndOffset, axis, seriesModel) {
    if (barWidthAndOffset && axis) {
        var result = barWidthAndOffset[$41133a9d01fee524$var$getAxisKey(axis)];
        if (result != null && seriesModel != null) return result[$41133a9d01fee524$var$getSeriesStackId(seriesModel)];
        return result;
    }
}
function $41133a9d01fee524$export$b3219800bda33a1f(seriesType, ecModel) {
    var seriesModels = $41133a9d01fee524$export$efbd0c3f5ab0d5e4(seriesType, ecModel);
    var barWidthAndOffset = $41133a9d01fee524$export$20769dafc84e0299(seriesModels);
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(seriesModels, function(seriesModel) {
        var data = seriesModel.getData();
        var cartesian = seriesModel.coordinateSystem;
        var baseAxis = cartesian.getBaseAxis();
        var stackId = $41133a9d01fee524$var$getSeriesStackId(seriesModel);
        var columnLayoutInfo = barWidthAndOffset[$41133a9d01fee524$var$getAxisKey(baseAxis)][stackId];
        var columnOffset = columnLayoutInfo.offset;
        var columnWidth = columnLayoutInfo.width;
        data.setLayout({
            bandWidth: columnLayoutInfo.bandWidth,
            offset: columnOffset,
            size: columnWidth
        });
    });
}
function $41133a9d01fee524$export$16e8685758531cb6(seriesType) {
    return {
        seriesType: seriesType,
        plan: (0, $eb114e8bb7242d9d$export$2e2bcd8739ae039)(),
        reset: function(seriesModel) {
            if (!$41133a9d01fee524$var$isOnCartesian(seriesModel)) return;
            var data = seriesModel.getData();
            var cartesian = seriesModel.coordinateSystem;
            var baseAxis = cartesian.getBaseAxis();
            var valueAxis = cartesian.getOtherAxis(baseAxis);
            var valueDimIdx = data.getDimensionIndex(data.mapDimension(valueAxis.dim));
            var baseDimIdx = data.getDimensionIndex(data.mapDimension(baseAxis.dim));
            var drawBackground = seriesModel.get("showBackground", true);
            var valueDim = data.mapDimension(valueAxis.dim);
            var stackResultDim = data.getCalculationInfo("stackResultDimension");
            var stacked = (0, $6ff1444fd0e27b15$export$1dedc39359ae35c)(data, valueDim) && !!data.getCalculationInfo("stackedOnSeries");
            var isValueAxisH = valueAxis.isHorizontal();
            var valueAxisStart = $41133a9d01fee524$var$getValueAxisStart(baseAxis, valueAxis);
            var isLarge = $41133a9d01fee524$var$isInLargeMode(seriesModel);
            var barMinHeight = seriesModel.get("barMinHeight") || 0;
            var stackedDimIdx = stackResultDim && data.getDimensionIndex(stackResultDim);
            // Layout info.
            var columnWidth = data.getLayout("size");
            var columnOffset = data.getLayout("offset");
            return {
                progress: function(params, data) {
                    var count = params.count;
                    var largePoints = isLarge && (0, $6df8d5354168e89b$export$21d2298f3f56bbaf)(count * 3);
                    var largeBackgroundPoints = isLarge && drawBackground && (0, $6df8d5354168e89b$export$21d2298f3f56bbaf)(count * 3);
                    var largeDataIndices = isLarge && (0, $6df8d5354168e89b$export$21d2298f3f56bbaf)(count);
                    var coordLayout = cartesian.master.getRect();
                    var bgSize = isValueAxisH ? coordLayout.width : coordLayout.height;
                    var dataIndex;
                    var store = data.getStore();
                    var idxOffset = 0;
                    while((dataIndex = params.next()) != null){
                        var value = store.get(stacked ? stackedDimIdx : valueDimIdx, dataIndex);
                        var baseValue = store.get(baseDimIdx, dataIndex);
                        var baseCoord = valueAxisStart;
                        var startValue = void 0;
                        // Because of the barMinHeight, we can not use the value in
                        // stackResultDimension directly.
                        if (stacked) startValue = +value - store.get(valueDimIdx, dataIndex);
                        var x = void 0;
                        var y = void 0;
                        var width = void 0;
                        var height = void 0;
                        if (isValueAxisH) {
                            var coord = cartesian.dataToPoint([
                                value,
                                baseValue
                            ]);
                            if (stacked) {
                                var startCoord = cartesian.dataToPoint([
                                    startValue,
                                    baseValue
                                ]);
                                baseCoord = startCoord[0];
                            }
                            x = baseCoord;
                            y = coord[1] + columnOffset;
                            width = coord[0] - baseCoord;
                            height = columnWidth;
                            if (Math.abs(width) < barMinHeight) width = (width < 0 ? -1 : 1) * barMinHeight;
                        } else {
                            var coord = cartesian.dataToPoint([
                                baseValue,
                                value
                            ]);
                            if (stacked) {
                                var startCoord = cartesian.dataToPoint([
                                    baseValue,
                                    startValue
                                ]);
                                baseCoord = startCoord[1];
                            }
                            x = coord[0] + columnOffset;
                            y = baseCoord;
                            width = columnWidth;
                            height = coord[1] - baseCoord;
                            if (Math.abs(height) < barMinHeight) // Include zero to has a positive bar
                            height = (height <= 0 ? -1 : 1) * barMinHeight;
                        }
                        if (!isLarge) data.setItemLayout(dataIndex, {
                            x: x,
                            y: y,
                            width: width,
                            height: height
                        });
                        else {
                            largePoints[idxOffset] = x;
                            largePoints[idxOffset + 1] = y;
                            largePoints[idxOffset + 2] = isValueAxisH ? width : height;
                            if (largeBackgroundPoints) {
                                largeBackgroundPoints[idxOffset] = isValueAxisH ? coordLayout.x : x;
                                largeBackgroundPoints[idxOffset + 1] = isValueAxisH ? y : coordLayout.y;
                                largeBackgroundPoints[idxOffset + 2] = bgSize;
                            }
                            largeDataIndices[dataIndex] = dataIndex;
                        }
                        idxOffset += 3;
                    }
                    if (isLarge) data.setLayout({
                        largePoints: largePoints,
                        largeDataIndices: largeDataIndices,
                        largeBackgroundPoints: largeBackgroundPoints,
                        valueAxisHorizontal: isValueAxisH
                    });
                }
            };
        }
    };
}
function $41133a9d01fee524$var$isOnCartesian(seriesModel) {
    return seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === "cartesian2d";
}
function $41133a9d01fee524$var$isInLargeMode(seriesModel) {
    return seriesModel.pipelineContext && seriesModel.pipelineContext.large;
}
// See cases in `test/bar-start.html` and `#7412`, `#8747`.
function $41133a9d01fee524$var$getValueAxisStart(baseAxis, valueAxis) {
    return valueAxis.toGlobalCoord(valueAxis.dataToCoord(valueAxis.type === "log" ? 1 : 0));
}



/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 



var $fa201efda9a0b64a$var$BaseBarSeriesModel = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(BaseBarSeriesModel, _super);
    function BaseBarSeriesModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = BaseBarSeriesModel.type;
        return _this;
    }
    BaseBarSeriesModel.prototype.getInitialData = function(option, ecModel) {
        return (0, $42034ebb6bcf5cdf$export$2e2bcd8739ae039)(null, this, {
            useEncodeDefaulter: true
        });
    };
    BaseBarSeriesModel.prototype.getMarkerPosition = function(value, dims, startingAtTick) {
        var coordSys = this.coordinateSystem;
        if (coordSys && coordSys.clampData) {
            // PENDING if clamp ?
            var clampData_1 = coordSys.clampData(value);
            var pt_1 = coordSys.dataToPoint(clampData_1);
            if (startingAtTick) (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(coordSys.getAxes(), function(axis, idx) {
                // If axis type is category, use tick coords instead
                if (axis.type === "category" && dims != null) {
                    var tickCoords = axis.getTicksCoords();
                    var alignTicksWithLabel = axis.getTickModel().get("alignWithLabel");
                    var targetTickId = clampData_1[idx];
                    // The index of rightmost tick of markArea is 1 larger than x1/y1 index
                    var isEnd = dims[idx] === "x1" || dims[idx] === "y1";
                    if (isEnd && !alignTicksWithLabel) targetTickId += 1;
                    // The only contains one tick, tickCoords is
                    // like [{coord: 0, tickValue: 0}, {coord: 0}]
                    // to the length should always be larger than 1
                    if (tickCoords.length < 2) return;
                    else if (tickCoords.length === 2) {
                        // The left value and right value of the axis are
                        // the same. coord is 0 in both items. Use the max
                        // value of the axis as the coord
                        pt_1[idx] = axis.toGlobalCoord(axis.getExtent()[isEnd ? 1 : 0]);
                        return;
                    }
                    var leftCoord = void 0;
                    var coord = void 0;
                    var stepTickValue = 1;
                    for(var i = 0; i < tickCoords.length; i++){
                        var tickCoord = tickCoords[i].coord;
                        // The last item of tickCoords doesn't contain
                        // tickValue
                        var tickValue = i === tickCoords.length - 1 ? tickCoords[i - 1].tickValue + stepTickValue : tickCoords[i].tickValue;
                        if (tickValue === targetTickId) {
                            coord = tickCoord;
                            break;
                        } else if (tickValue < targetTickId) leftCoord = tickCoord;
                        else if (leftCoord != null && tickValue > targetTickId) {
                            coord = (tickCoord + leftCoord) / 2;
                            break;
                        }
                        if (i === 1) // Here we assume the step of category axes is
                        // the same
                        stepTickValue = tickValue - tickCoords[0].tickValue;
                    }
                    if (coord == null) {
                        if (!leftCoord) // targetTickId is smaller than all tick ids in the
                        // visible area, use the leftmost tick coord
                        coord = tickCoords[0].coord;
                        else if (leftCoord) // targetTickId is larger than all tick ids in the
                        // visible area, use the rightmost tick coord
                        coord = tickCoords[tickCoords.length - 1].coord;
                    }
                    pt_1[idx] = axis.toGlobalCoord(coord);
                }
            });
            else {
                var data = this.getData();
                var offset = data.getLayout("offset");
                var size = data.getLayout("size");
                var offsetIndex = coordSys.getBaseAxis().isHorizontal() ? 0 : 1;
                pt_1[offsetIndex] += offset + size / 2;
            }
            return pt_1;
        }
        return [
            NaN,
            NaN
        ];
    };
    BaseBarSeriesModel.type = "series.__base_bar__";
    BaseBarSeriesModel.defaultOption = {
        // zlevel: 0,
        z: 2,
        coordinateSystem: "cartesian2d",
        legendHoverLink: true,
        // stack: null
        // Cartesian coordinate system
        // xAxisIndex: 0,
        // yAxisIndex: 0,
        barMinHeight: 0,
        barMinAngle: 0,
        // cursor: null,
        large: false,
        largeThreshold: 400,
        progressive: 3e3,
        progressiveChunkMode: "mod"
    };
    return BaseBarSeriesModel;
}((0, $3301f75840f3090f$export$2e2bcd8739ae039));
(0, $3301f75840f3090f$export$2e2bcd8739ae039).registerClass($fa201efda9a0b64a$var$BaseBarSeriesModel);
var $fa201efda9a0b64a$export$2e2bcd8739ae039 = $fa201efda9a0b64a$var$BaseBarSeriesModel;




var $c1c682a8ff823fdc$var$BarSeriesModel = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(BarSeriesModel, _super);
    function BarSeriesModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = BarSeriesModel.type;
        return _this;
    }
    BarSeriesModel.prototype.getInitialData = function() {
        return (0, $42034ebb6bcf5cdf$export$2e2bcd8739ae039)(null, this, {
            useEncodeDefaulter: true,
            createInvertedIndices: !!this.get("realtimeSort", true) || null
        });
    };
    /**
   * @override
   */ BarSeriesModel.prototype.getProgressive = function() {
        // Do not support progressive in normal mode.
        return this.get("large") ? this.get("progressive") : false;
    };
    /**
   * @override
   */ BarSeriesModel.prototype.getProgressiveThreshold = function() {
        // Do not support progressive in normal mode.
        var progressiveThreshold = this.get("progressiveThreshold");
        var largeThreshold = this.get("largeThreshold");
        if (largeThreshold > progressiveThreshold) progressiveThreshold = largeThreshold;
        return progressiveThreshold;
    };
    BarSeriesModel.prototype.brushSelector = function(dataIndex, data, selectors) {
        return selectors.rect(data.getItemLayout(dataIndex));
    };
    BarSeriesModel.type = "series.bar";
    BarSeriesModel.dependencies = [
        "grid",
        "polar"
    ];
    BarSeriesModel.defaultOption = (0, $5e939fc0112f61e7$export$68acc510e46fef2)((0, $fa201efda9a0b64a$export$2e2bcd8739ae039).defaultOption, {
        // If clipped
        // Only available on cartesian2d
        clip: true,
        roundCap: false,
        showBackground: false,
        backgroundStyle: {
            color: "rgba(180, 180, 180, 0.2)",
            borderColor: null,
            borderWidth: 0,
            borderType: "solid",
            borderRadius: 0,
            shadowBlur: 0,
            shadowColor: null,
            shadowOffsetX: 0,
            shadowOffsetY: 0,
            opacity: 1
        },
        select: {
            itemStyle: {
                borderColor: "#212121"
            }
        },
        realtimeSort: false
    });
    return BarSeriesModel;
}((0, $fa201efda9a0b64a$export$2e2bcd8739ae039));
var $c1c682a8ff823fdc$export$2e2bcd8739ae039 = $c1c682a8ff823fdc$var$BarSeriesModel;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 









/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

/**
 * Sausage: similar to sector, but have half circle on both sides
 */ var $6987fc88508fa44d$var$SausageShape = /** @class */ function() {
    function SausageShape() {
        this.cx = 0;
        this.cy = 0;
        this.r0 = 0;
        this.r = 0;
        this.startAngle = 0;
        this.endAngle = Math.PI * 2;
        this.clockwise = true;
    }
    return SausageShape;
}();
var $6987fc88508fa44d$var$SausagePath = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(SausagePath, _super);
    function SausagePath(opts) {
        var _this = _super.call(this, opts) || this;
        _this.type = "sausage";
        return _this;
    }
    SausagePath.prototype.getDefaultShape = function() {
        return new $6987fc88508fa44d$var$SausageShape();
    };
    SausagePath.prototype.buildPath = function(ctx, shape) {
        var cx = shape.cx;
        var cy = shape.cy;
        var r0 = Math.max(shape.r0 || 0, 0);
        var r = Math.max(shape.r, 0);
        var dr = (r - r0) * 0.5;
        var rCenter = r0 + dr;
        var startAngle = shape.startAngle;
        var endAngle = shape.endAngle;
        var clockwise = shape.clockwise;
        var PI2 = Math.PI * 2;
        var lessThanCircle = clockwise ? endAngle - startAngle < PI2 : startAngle - endAngle < PI2;
        if (!lessThanCircle) // Normalize angles
        startAngle = endAngle - (clockwise ? PI2 : -PI2);
        var unitStartX = Math.cos(startAngle);
        var unitStartY = Math.sin(startAngle);
        var unitEndX = Math.cos(endAngle);
        var unitEndY = Math.sin(endAngle);
        if (lessThanCircle) {
            ctx.moveTo(unitStartX * r0 + cx, unitStartY * r0 + cy);
            ctx.arc(unitStartX * rCenter + cx, unitStartY * rCenter + cy, dr, -Math.PI + startAngle, startAngle, !clockwise);
        } else ctx.moveTo(unitStartX * r + cx, unitStartY * r + cy);
        ctx.arc(cx, cy, r, startAngle, endAngle, !clockwise);
        ctx.arc(unitEndX * rCenter + cx, unitEndY * rCenter + cy, dr, endAngle - Math.PI * 2, endAngle - Math.PI, !clockwise);
        if (r0 !== 0) ctx.arc(cx, cy, r0, endAngle, startAngle, clockwise);
    // ctx.closePath();
    };
    return SausagePath;
}((0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039));
var $6987fc88508fa44d$export$2e2bcd8739ae039 = $6987fc88508fa44d$var$SausagePath;






/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

function $ca10fcdc57fbc7bc$export$359a1e2d210ed734(positionMapping, opts) {
    opts = opts || {};
    var isRoundCap = opts.isRoundCap;
    return function(out, opts, boundingRect) {
        var textPosition = opts.position;
        if (!textPosition || textPosition instanceof Array) return (0, $1a2563e7d7856dd8$export$eee3603b512feab7)(out, opts, boundingRect);
        var mappedSectorPosition = positionMapping(textPosition);
        var distance = opts.distance != null ? opts.distance : 5;
        var sector = this.shape;
        var cx = sector.cx;
        var cy = sector.cy;
        var r = sector.r;
        var r0 = sector.r0;
        var middleR = (r + r0) / 2;
        var startAngle = sector.startAngle;
        var endAngle = sector.endAngle;
        var middleAngle = (startAngle + endAngle) / 2;
        var extraDist = isRoundCap ? Math.abs(r - r0) / 2 : 0;
        var mathCos = Math.cos;
        var mathSin = Math.sin;
        // base position: top-left
        var x = cx + r * mathCos(startAngle);
        var y = cy + r * mathSin(startAngle);
        var textAlign = "left";
        var textVerticalAlign = "top";
        switch(mappedSectorPosition){
            case "startArc":
                x = cx + (r0 - distance) * mathCos(middleAngle);
                y = cy + (r0 - distance) * mathSin(middleAngle);
                textAlign = "center";
                textVerticalAlign = "top";
                break;
            case "insideStartArc":
                x = cx + (r0 + distance) * mathCos(middleAngle);
                y = cy + (r0 + distance) * mathSin(middleAngle);
                textAlign = "center";
                textVerticalAlign = "bottom";
                break;
            case "startAngle":
                x = cx + middleR * mathCos(startAngle) + $ca10fcdc57fbc7bc$var$adjustAngleDistanceX(startAngle, distance + extraDist, false);
                y = cy + middleR * mathSin(startAngle) + $ca10fcdc57fbc7bc$var$adjustAngleDistanceY(startAngle, distance + extraDist, false);
                textAlign = "right";
                textVerticalAlign = "middle";
                break;
            case "insideStartAngle":
                x = cx + middleR * mathCos(startAngle) + $ca10fcdc57fbc7bc$var$adjustAngleDistanceX(startAngle, -distance + extraDist, false);
                y = cy + middleR * mathSin(startAngle) + $ca10fcdc57fbc7bc$var$adjustAngleDistanceY(startAngle, -distance + extraDist, false);
                textAlign = "left";
                textVerticalAlign = "middle";
                break;
            case "middle":
                x = cx + middleR * mathCos(middleAngle);
                y = cy + middleR * mathSin(middleAngle);
                textAlign = "center";
                textVerticalAlign = "middle";
                break;
            case "endArc":
                x = cx + (r + distance) * mathCos(middleAngle);
                y = cy + (r + distance) * mathSin(middleAngle);
                textAlign = "center";
                textVerticalAlign = "bottom";
                break;
            case "insideEndArc":
                x = cx + (r - distance) * mathCos(middleAngle);
                y = cy + (r - distance) * mathSin(middleAngle);
                textAlign = "center";
                textVerticalAlign = "top";
                break;
            case "endAngle":
                x = cx + middleR * mathCos(endAngle) + $ca10fcdc57fbc7bc$var$adjustAngleDistanceX(endAngle, distance + extraDist, true);
                y = cy + middleR * mathSin(endAngle) + $ca10fcdc57fbc7bc$var$adjustAngleDistanceY(endAngle, distance + extraDist, true);
                textAlign = "left";
                textVerticalAlign = "middle";
                break;
            case "insideEndAngle":
                x = cx + middleR * mathCos(endAngle) + $ca10fcdc57fbc7bc$var$adjustAngleDistanceX(endAngle, -distance + extraDist, true);
                y = cy + middleR * mathSin(endAngle) + $ca10fcdc57fbc7bc$var$adjustAngleDistanceY(endAngle, -distance + extraDist, true);
                textAlign = "right";
                textVerticalAlign = "middle";
                break;
            default:
                return (0, $1a2563e7d7856dd8$export$eee3603b512feab7)(out, opts, boundingRect);
        }
        out = out || {};
        out.x = x;
        out.y = y;
        out.align = textAlign;
        out.verticalAlign = textVerticalAlign;
        return out;
    };
}
function $ca10fcdc57fbc7bc$export$672ce504c0db395a(sector, textPosition, positionMapping, rotateType) {
    if ((0, $e44eb14c4271d0f9$export$7e4aa119212bc614)(rotateType)) {
        // user-set rotation
        sector.setTextConfig({
            rotation: rotateType
        });
        return;
    } else if ((0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(textPosition)) {
        // user-set position, use 0 as auto rotation
        sector.setTextConfig({
            rotation: 0
        });
        return;
    }
    var shape = sector.shape;
    var startAngle = shape.clockwise ? shape.startAngle : shape.endAngle;
    var endAngle = shape.clockwise ? shape.endAngle : shape.startAngle;
    var middleAngle = (startAngle + endAngle) / 2;
    var anchorAngle;
    var mappedSectorPosition = positionMapping(textPosition);
    switch(mappedSectorPosition){
        case "startArc":
        case "insideStartArc":
        case "middle":
        case "insideEndArc":
        case "endArc":
            anchorAngle = middleAngle;
            break;
        case "startAngle":
        case "insideStartAngle":
            anchorAngle = startAngle;
            break;
        case "endAngle":
        case "insideEndAngle":
            anchorAngle = endAngle;
            break;
        default:
            sector.setTextConfig({
                rotation: 0
            });
            return;
    }
    var rotate = Math.PI * 1.5 - anchorAngle;
    /**
   * TODO: labels with rotate > Math.PI / 2 should be rotate another
   * half round flipped to increase readability. However, only middle
   * position supports this for now, because in other positions, the
   * anchor point is not at the center of the text, so the positions
   * after rotating is not as expected.
   */ if (mappedSectorPosition === "middle" && rotate > Math.PI / 2 && rotate < Math.PI * 1.5) rotate -= Math.PI;
    sector.setTextConfig({
        rotation: rotate
    });
}
function $ca10fcdc57fbc7bc$var$adjustAngleDistanceX(angle, distance, isEnd) {
    return distance * Math.sin(angle) * (isEnd ? -1 : 1);
}
function $ca10fcdc57fbc7bc$var$adjustAngleDistanceY(angle, distance, isEnd) {
    return distance * Math.cos(angle) * (isEnd ? 1 : -1);
}



/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

function $71f216120abe84ce$export$b395eeeb2ad7cce5(model, shape, zeroIfNull) {
    var cornerRadius = model.get("borderRadius");
    if (cornerRadius == null) return zeroIfNull ? {
        cornerRadius: 0
    } : null;
    if (!(0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(cornerRadius)) cornerRadius = [
        cornerRadius,
        cornerRadius,
        cornerRadius,
        cornerRadius
    ];
    var dr = Math.abs(shape.r || 0 - shape.r0 || 0);
    return {
        cornerRadius: (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(cornerRadius, function(cr) {
            return (0, $1a2563e7d7856dd8$export$e8514cb5a5e2b40f)(cr, dr);
        })
    };
}


var $4396fe9194f19a3a$var$mathMax = Math.max;
var $4396fe9194f19a3a$var$mathMin = Math.min;
function $4396fe9194f19a3a$var$getClipArea(coord, data) {
    var coordSysClipArea = coord.getArea && coord.getArea();
    if ((0, $6b8ccbda0efa7c7c$export$8567506e6336616)(coord, "cartesian2d")) {
        var baseAxis = coord.getBaseAxis();
        // When boundaryGap is false or using time axis. bar may exceed the grid.
        // We should not clip this part.
        // See test/bar2.html
        if (baseAxis.type !== "category" || !baseAxis.onBand) {
            var expandWidth = data.getLayout("bandWidth");
            if (baseAxis.isHorizontal()) {
                coordSysClipArea.x -= expandWidth;
                coordSysClipArea.width += expandWidth * 2;
            } else {
                coordSysClipArea.y -= expandWidth;
                coordSysClipArea.height += expandWidth * 2;
            }
        }
    }
    return coordSysClipArea;
}
var $4396fe9194f19a3a$var$BarView = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(BarView, _super);
    function BarView() {
        var _this = _super.call(this) || this;
        _this.type = BarView.type;
        _this._isFirstFrame = true;
        return _this;
    }
    BarView.prototype.render = function(seriesModel, ecModel, api, payload) {
        this._model = seriesModel;
        this._removeOnRenderedListener(api);
        this._updateDrawMode(seriesModel);
        var coordinateSystemType = seriesModel.get("coordinateSystem");
        if (coordinateSystemType === "cartesian2d" || coordinateSystemType === "polar") {
            // Clear previously rendered progressive elements.
            this._progressiveEls = null;
            this._isLargeDraw ? this._renderLarge(seriesModel, ecModel, api) : this._renderNormal(seriesModel, ecModel, api, payload);
        } else (0, $4796c55e8b767685$export$c106dd0671a0fc2d)("Only cartesian2d and polar supported for bar.");
    };
    BarView.prototype.incrementalPrepareRender = function(seriesModel) {
        this._clear();
        this._updateDrawMode(seriesModel);
        // incremental also need to clip, otherwise might be overlow.
        // But must not set clip in each frame, otherwise all of the children will be marked redraw.
        this._updateLargeClip(seriesModel);
    };
    BarView.prototype.incrementalRender = function(params, seriesModel) {
        // Reset
        this._progressiveEls = [];
        // Do not support progressive in normal mode.
        this._incrementalRenderLarge(params, seriesModel);
    };
    BarView.prototype.eachRendered = function(cb) {
        (0, $6aec2e68b45f8796$export$3e564442729bf048)(this._progressiveEls || this.group, cb);
    };
    BarView.prototype._updateDrawMode = function(seriesModel) {
        var isLargeDraw = seriesModel.pipelineContext.large;
        if (this._isLargeDraw == null || isLargeDraw !== this._isLargeDraw) {
            this._isLargeDraw = isLargeDraw;
            this._clear();
        }
    };
    BarView.prototype._renderNormal = function(seriesModel, ecModel, api, payload) {
        var group = this.group;
        var data = seriesModel.getData();
        var oldData = this._data;
        var coord = seriesModel.coordinateSystem;
        var baseAxis = coord.getBaseAxis();
        var isHorizontalOrRadial;
        if (coord.type === "cartesian2d") isHorizontalOrRadial = baseAxis.isHorizontal();
        else if (coord.type === "polar") isHorizontalOrRadial = baseAxis.dim === "angle";
        var animationModel = seriesModel.isAnimationEnabled() ? seriesModel : null;
        var realtimeSortCfg = $4396fe9194f19a3a$var$shouldRealtimeSort(seriesModel, coord);
        if (realtimeSortCfg) this._enableRealtimeSort(realtimeSortCfg, data, api);
        var needsClip = seriesModel.get("clip", true) || realtimeSortCfg;
        var coordSysClipArea = $4396fe9194f19a3a$var$getClipArea(coord, data);
        // If there is clipPath created in large mode. Remove it.
        group.removeClipPath();
        // We don't use clipPath in normal mode because we needs a perfect animation
        // And don't want the label are clipped.
        var roundCap = seriesModel.get("roundCap", true);
        var drawBackground = seriesModel.get("showBackground", true);
        var backgroundModel = seriesModel.getModel("backgroundStyle");
        var barBorderRadius = backgroundModel.get("borderRadius") || 0;
        var bgEls = [];
        var oldBgEls = this._backgroundEls;
        var isInitSort = payload && payload.isInitSort;
        var isChangeOrder = payload && payload.type === "changeAxisOrder";
        function createBackground(dataIndex) {
            var bgLayout = $4396fe9194f19a3a$var$getLayout[coord.type](data, dataIndex);
            var bgEl = $4396fe9194f19a3a$var$createBackgroundEl(coord, isHorizontalOrRadial, bgLayout);
            bgEl.useStyle(backgroundModel.getItemStyle());
            // Only cartesian2d support borderRadius.
            if (coord.type === "cartesian2d") bgEl.setShape("r", barBorderRadius);
            else bgEl.setShape("cornerRadius", barBorderRadius);
            bgEls[dataIndex] = bgEl;
            return bgEl;
        }
        data.diff(oldData).add(function(dataIndex) {
            var itemModel = data.getItemModel(dataIndex);
            var layout = $4396fe9194f19a3a$var$getLayout[coord.type](data, dataIndex, itemModel);
            if (drawBackground) createBackground(dataIndex);
            // If dataZoom in filteMode: 'empty', the baseValue can be set as NaN in "axisProxy".
            if (!data.hasValue(dataIndex) || !$4396fe9194f19a3a$var$isValidLayout[coord.type](layout)) return;
            var isClipped = false;
            if (needsClip) // Clip will modify the layout params.
            // And return a boolean to determine if the shape are fully clipped.
            isClipped = $4396fe9194f19a3a$var$clip[coord.type](coordSysClipArea, layout);
            var el = $4396fe9194f19a3a$var$elementCreator[coord.type](seriesModel, data, dataIndex, layout, isHorizontalOrRadial, animationModel, baseAxis.model, false, roundCap);
            if (realtimeSortCfg) /**
         * Force label animation because even if the element is
         * ignored because it's clipped, it may not be clipped after
         * changing order. Then, if not using forceLabelAnimation,
         * the label animation was never started, in which case,
         * the label will be the final value and doesn't have label
         * animation.
         */ el.forceLabelAnimation = true;
            $4396fe9194f19a3a$var$updateStyle(el, data, dataIndex, itemModel, layout, seriesModel, isHorizontalOrRadial, coord.type === "polar");
            if (isInitSort) el.attr({
                shape: layout
            });
            else if (realtimeSortCfg) $4396fe9194f19a3a$var$updateRealtimeAnimation(realtimeSortCfg, animationModel, el, layout, dataIndex, isHorizontalOrRadial, false, false);
            else (0, $f7e735722ff36e8c$export$a121566aadcfe021)(el, {
                shape: layout
            }, seriesModel, dataIndex);
            data.setItemGraphicEl(dataIndex, el);
            group.add(el);
            el.ignore = isClipped;
        }).update(function(newIndex, oldIndex) {
            var itemModel = data.getItemModel(newIndex);
            var layout = $4396fe9194f19a3a$var$getLayout[coord.type](data, newIndex, itemModel);
            if (drawBackground) {
                var bgEl = void 0;
                if (oldBgEls.length === 0) bgEl = createBackground(oldIndex);
                else {
                    bgEl = oldBgEls[oldIndex];
                    bgEl.useStyle(backgroundModel.getItemStyle());
                    // Only cartesian2d support borderRadius.
                    if (coord.type === "cartesian2d") bgEl.setShape("r", barBorderRadius);
                    else bgEl.setShape("cornerRadius", barBorderRadius);
                    bgEls[newIndex] = bgEl;
                }
                var bgLayout = $4396fe9194f19a3a$var$getLayout[coord.type](data, newIndex);
                var shape = $4396fe9194f19a3a$var$createBackgroundShape(isHorizontalOrRadial, bgLayout, coord);
                (0, $f7e735722ff36e8c$export$c8dce3c08436e91e)(bgEl, {
                    shape: shape
                }, animationModel, newIndex);
            }
            var el = oldData.getItemGraphicEl(oldIndex);
            if (!data.hasValue(newIndex) || !$4396fe9194f19a3a$var$isValidLayout[coord.type](layout)) {
                group.remove(el);
                return;
            }
            var isClipped = false;
            if (needsClip) {
                isClipped = $4396fe9194f19a3a$var$clip[coord.type](coordSysClipArea, layout);
                if (isClipped) group.remove(el);
            }
            if (!el) el = $4396fe9194f19a3a$var$elementCreator[coord.type](seriesModel, data, newIndex, layout, isHorizontalOrRadial, animationModel, baseAxis.model, !!el, roundCap);
            else (0, $f7e735722ff36e8c$export$bca7290a9faf0ec9)(el);
            if (realtimeSortCfg) el.forceLabelAnimation = true;
            if (isChangeOrder) {
                var textEl = el.getTextContent();
                if (textEl) {
                    var labelInnerStore = (0, $75926670b032879d$export$f62786d3261ab0f4)(textEl);
                    if (labelInnerStore.prevValue != null) /**
             * Set preValue to be value so that no new label
             * should be started, otherwise, it will take a full
             * `animationDurationUpdate` time to finish the
             * animation, which is not expected.
             */ labelInnerStore.prevValue = labelInnerStore.value;
                }
            } else $4396fe9194f19a3a$var$updateStyle(el, data, newIndex, itemModel, layout, seriesModel, isHorizontalOrRadial, coord.type === "polar");
            if (isInitSort) el.attr({
                shape: layout
            });
            else if (realtimeSortCfg) $4396fe9194f19a3a$var$updateRealtimeAnimation(realtimeSortCfg, animationModel, el, layout, newIndex, isHorizontalOrRadial, true, isChangeOrder);
            else (0, $f7e735722ff36e8c$export$c8dce3c08436e91e)(el, {
                shape: layout
            }, seriesModel, newIndex, null);
            data.setItemGraphicEl(newIndex, el);
            el.ignore = isClipped;
            group.add(el);
        }).remove(function(dataIndex) {
            var el = oldData.getItemGraphicEl(dataIndex);
            el && (0, $f7e735722ff36e8c$export$6d0fd725cb4aee8a)(el, seriesModel, dataIndex);
        }).execute();
        var bgGroup = this._backgroundGroup || (this._backgroundGroup = new (0, $748aea24eee93173$export$2e2bcd8739ae039)());
        bgGroup.removeAll();
        for(var i = 0; i < bgEls.length; ++i)bgGroup.add(bgEls[i]);
        group.add(bgGroup);
        this._backgroundEls = bgEls;
        this._data = data;
    };
    BarView.prototype._renderLarge = function(seriesModel, ecModel, api) {
        this._clear();
        $4396fe9194f19a3a$var$createLarge(seriesModel, this.group);
        this._updateLargeClip(seriesModel);
    };
    BarView.prototype._incrementalRenderLarge = function(params, seriesModel) {
        this._removeBackground();
        $4396fe9194f19a3a$var$createLarge(seriesModel, this.group, this._progressiveEls, true);
    };
    BarView.prototype._updateLargeClip = function(seriesModel) {
        // Use clipPath in large mode.
        var clipPath = seriesModel.get("clip", true) && (0, $c5b5eca93899a66f$export$e0fe5081209d01c9)(seriesModel.coordinateSystem, false, seriesModel);
        var group = this.group;
        if (clipPath) group.setClipPath(clipPath);
        else group.removeClipPath();
    };
    BarView.prototype._enableRealtimeSort = function(realtimeSortCfg, data, api) {
        var _this = this;
        // If no data in the first frame, wait for data to initSort
        if (!data.count()) return;
        var baseAxis = realtimeSortCfg.baseAxis;
        if (this._isFirstFrame) {
            this._dispatchInitSort(data, realtimeSortCfg, api);
            this._isFirstFrame = false;
        } else {
            var orderMapping_1 = function(idx) {
                var el = data.getItemGraphicEl(idx);
                var shape = el && el.shape;
                return shape && // The result should be consistent with the initial sort by data value.
                // Do not support the case that both positive and negative exist.
                Math.abs(baseAxis.isHorizontal() ? shape.height : shape.width) || 0;
            };
            this._onRendered = function() {
                _this._updateSortWithinSameData(data, orderMapping_1, baseAxis, api);
            };
            api.getZr().on("rendered", this._onRendered);
        }
    };
    BarView.prototype._dataSort = function(data, baseAxis, orderMapping) {
        var info = [];
        data.each(data.mapDimension(baseAxis.dim), function(ordinalNumber, dataIdx) {
            var mappedValue = orderMapping(dataIdx);
            mappedValue = mappedValue == null ? NaN : mappedValue;
            info.push({
                dataIndex: dataIdx,
                mappedValue: mappedValue,
                ordinalNumber: ordinalNumber
            });
        });
        info.sort(function(a, b) {
            // If NaN, it will be treated as min val.
            return b.mappedValue - a.mappedValue;
        });
        return {
            ordinalNumbers: (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(info, function(item) {
                return item.ordinalNumber;
            })
        };
    };
    BarView.prototype._isOrderChangedWithinSameData = function(data, orderMapping, baseAxis) {
        var scale = baseAxis.scale;
        var ordinalDataDim = data.mapDimension(baseAxis.dim);
        var lastValue = Number.MAX_VALUE;
        for(var tickNum = 0, len = scale.getOrdinalMeta().categories.length; tickNum < len; ++tickNum){
            var rawIdx = data.rawIndexOf(ordinalDataDim, scale.getRawOrdinalNumber(tickNum));
            var value = rawIdx < 0 ? Number.MIN_VALUE : orderMapping(data.indexOfRawIndex(rawIdx));
            if (value > lastValue) return true;
            lastValue = value;
        }
        return false;
    };
    /*
   * Consider the case when A and B changed order, whose representing
   * bars are both out of sight, we don't wish to trigger reorder action
   * as long as the order in the view doesn't change.
   */ BarView.prototype._isOrderDifferentInView = function(orderInfo, baseAxis) {
        var scale = baseAxis.scale;
        var extent = scale.getExtent();
        var tickNum = Math.max(0, extent[0]);
        var tickMax = Math.min(extent[1], scale.getOrdinalMeta().categories.length - 1);
        for(; tickNum <= tickMax; ++tickNum){
            if (orderInfo.ordinalNumbers[tickNum] !== scale.getRawOrdinalNumber(tickNum)) return true;
        }
    };
    BarView.prototype._updateSortWithinSameData = function(data, orderMapping, baseAxis, api) {
        if (!this._isOrderChangedWithinSameData(data, orderMapping, baseAxis)) return;
        var sortInfo = this._dataSort(data, baseAxis, orderMapping);
        if (this._isOrderDifferentInView(sortInfo, baseAxis)) {
            this._removeOnRenderedListener(api);
            api.dispatchAction({
                type: "changeAxisOrder",
                componentType: baseAxis.dim + "Axis",
                axisId: baseAxis.index,
                sortInfo: sortInfo
            });
        }
    };
    BarView.prototype._dispatchInitSort = function(data, realtimeSortCfg, api) {
        var baseAxis = realtimeSortCfg.baseAxis;
        var sortResult = this._dataSort(data, baseAxis, function(dataIdx) {
            return data.get(data.mapDimension(realtimeSortCfg.otherAxis.dim), dataIdx);
        });
        api.dispatchAction({
            type: "changeAxisOrder",
            componentType: baseAxis.dim + "Axis",
            isInitSort: true,
            axisId: baseAxis.index,
            sortInfo: sortResult
        });
    };
    BarView.prototype.remove = function(ecModel, api) {
        this._clear(this._model);
        this._removeOnRenderedListener(api);
    };
    BarView.prototype.dispose = function(ecModel, api) {
        this._removeOnRenderedListener(api);
    };
    BarView.prototype._removeOnRenderedListener = function(api) {
        if (this._onRendered) {
            api.getZr().off("rendered", this._onRendered);
            this._onRendered = null;
        }
    };
    BarView.prototype._clear = function(model) {
        var group = this.group;
        var data = this._data;
        if (model && model.isAnimationEnabled() && data && !this._isLargeDraw) {
            this._removeBackground();
            this._backgroundEls = [];
            data.eachItemGraphicEl(function(el) {
                (0, $f7e735722ff36e8c$export$6d0fd725cb4aee8a)(el, model, (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(el).dataIndex);
            });
        } else group.removeAll();
        this._data = null;
        this._isFirstFrame = true;
    };
    BarView.prototype._removeBackground = function() {
        this.group.remove(this._backgroundGroup);
        this._backgroundGroup = null;
    };
    BarView.type = "bar";
    return BarView;
}((0, $05e95ba2f0d93dbf$export$2e2bcd8739ae039));
var $4396fe9194f19a3a$var$clip = {
    cartesian2d: function(coordSysBoundingRect, layout) {
        var signWidth = layout.width < 0 ? -1 : 1;
        var signHeight = layout.height < 0 ? -1 : 1;
        // Needs positive width and height
        if (signWidth < 0) {
            layout.x += layout.width;
            layout.width = -layout.width;
        }
        if (signHeight < 0) {
            layout.y += layout.height;
            layout.height = -layout.height;
        }
        var coordSysX2 = coordSysBoundingRect.x + coordSysBoundingRect.width;
        var coordSysY2 = coordSysBoundingRect.y + coordSysBoundingRect.height;
        var x = $4396fe9194f19a3a$var$mathMax(layout.x, coordSysBoundingRect.x);
        var x2 = $4396fe9194f19a3a$var$mathMin(layout.x + layout.width, coordSysX2);
        var y = $4396fe9194f19a3a$var$mathMax(layout.y, coordSysBoundingRect.y);
        var y2 = $4396fe9194f19a3a$var$mathMin(layout.y + layout.height, coordSysY2);
        var xClipped = x2 < x;
        var yClipped = y2 < y;
        // When xClipped or yClipped, the element will be marked as `ignore`.
        // But we should also place the element at the edge of the coord sys bounding rect.
        // Because if data changed and the bar shows again, its transition animation
        // will begin at this place.
        layout.x = xClipped && x > coordSysX2 ? x2 : x;
        layout.y = yClipped && y > coordSysY2 ? y2 : y;
        layout.width = xClipped ? 0 : x2 - x;
        layout.height = yClipped ? 0 : y2 - y;
        // Reverse back
        if (signWidth < 0) {
            layout.x += layout.width;
            layout.width = -layout.width;
        }
        if (signHeight < 0) {
            layout.y += layout.height;
            layout.height = -layout.height;
        }
        return xClipped || yClipped;
    },
    polar: function(coordSysClipArea, layout) {
        var signR = layout.r0 <= layout.r ? 1 : -1;
        // Make sure r is larger than r0
        if (signR < 0) {
            var tmp = layout.r;
            layout.r = layout.r0;
            layout.r0 = tmp;
        }
        var r = $4396fe9194f19a3a$var$mathMin(layout.r, coordSysClipArea.r);
        var r0 = $4396fe9194f19a3a$var$mathMax(layout.r0, coordSysClipArea.r0);
        layout.r = r;
        layout.r0 = r0;
        var clipped = r - r0 < 0;
        // Reverse back
        if (signR < 0) {
            var tmp = layout.r;
            layout.r = layout.r0;
            layout.r0 = tmp;
        }
        return clipped;
    }
};
var $4396fe9194f19a3a$var$elementCreator = {
    cartesian2d: function(seriesModel, data, newIndex, layout, isHorizontal, animationModel, axisModel, isUpdate, roundCap) {
        var rect = new (0, $538026eba361a92a$export$2e2bcd8739ae039)({
            shape: (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, layout),
            z2: 1
        });
        rect.__dataIndex = newIndex;
        rect.name = "item";
        if (animationModel) {
            var rectShape = rect.shape;
            var animateProperty = isHorizontal ? "height" : "width";
            rectShape[animateProperty] = 0;
        }
        return rect;
    },
    polar: function(seriesModel, data, newIndex, layout, isRadial, animationModel, axisModel, isUpdate, roundCap) {
        var ShapeClass = !isRadial && roundCap ? (0, $6987fc88508fa44d$export$2e2bcd8739ae039) : (0, $55ff835abc77a8e3$export$2e2bcd8739ae039);
        var sector = new ShapeClass({
            shape: layout,
            z2: 1
        });
        sector.name = "item";
        var positionMap = $4396fe9194f19a3a$var$createPolarPositionMapping(isRadial);
        sector.calculateTextPosition = (0, $ca10fcdc57fbc7bc$export$359a1e2d210ed734)(positionMap, {
            isRoundCap: ShapeClass === (0, $6987fc88508fa44d$export$2e2bcd8739ae039)
        });
        // Animation
        if (animationModel) {
            var sectorShape = sector.shape;
            var animateProperty = isRadial ? "r" : "endAngle";
            var animateTarget = {};
            sectorShape[animateProperty] = isRadial ? layout.r0 : layout.startAngle;
            animateTarget[animateProperty] = layout[animateProperty];
            (isUpdate ? (0, $f7e735722ff36e8c$export$c8dce3c08436e91e) : (0, $f7e735722ff36e8c$export$a121566aadcfe021))(sector, {
                shape: animateTarget
            }, animationModel);
        }
        return sector;
    }
};
function $4396fe9194f19a3a$var$shouldRealtimeSort(seriesModel, coordSys) {
    var realtimeSortOption = seriesModel.get("realtimeSort", true);
    var baseAxis = coordSys.getBaseAxis();
    if (realtimeSortOption) {
        if (baseAxis.type !== "category") (0, $4796c55e8b767685$export$c106dd0671a0fc2d)("`realtimeSort` will not work because this bar series is not based on a category axis.");
        if (coordSys.type !== "cartesian2d") (0, $4796c55e8b767685$export$c106dd0671a0fc2d)("`realtimeSort` will not work because this bar series is not on cartesian2d.");
    }
    if (realtimeSortOption && baseAxis.type === "category" && coordSys.type === "cartesian2d") return {
        baseAxis: baseAxis,
        otherAxis: coordSys.getOtherAxis(baseAxis)
    };
}
function $4396fe9194f19a3a$var$updateRealtimeAnimation(realtimeSortCfg, seriesAnimationModel, el, layout, newIndex, isHorizontal, isUpdate, isChangeOrder) {
    var seriesTarget;
    var axisTarget;
    if (isHorizontal) {
        axisTarget = {
            x: layout.x,
            width: layout.width
        };
        seriesTarget = {
            y: layout.y,
            height: layout.height
        };
    } else {
        axisTarget = {
            y: layout.y,
            height: layout.height
        };
        seriesTarget = {
            x: layout.x,
            width: layout.width
        };
    }
    if (!isChangeOrder) // Keep the original growth animation if only axis order changed.
    // Not start a new animation.
    (isUpdate ? (0, $f7e735722ff36e8c$export$c8dce3c08436e91e) : (0, $f7e735722ff36e8c$export$a121566aadcfe021))(el, {
        shape: seriesTarget
    }, seriesAnimationModel, newIndex, null);
    var axisAnimationModel = seriesAnimationModel ? realtimeSortCfg.baseAxis.model : null;
    (isUpdate ? (0, $f7e735722ff36e8c$export$c8dce3c08436e91e) : (0, $f7e735722ff36e8c$export$a121566aadcfe021))(el, {
        shape: axisTarget
    }, axisAnimationModel, newIndex);
}
function $4396fe9194f19a3a$var$checkPropertiesNotValid(obj, props) {
    for(var i = 0; i < props.length; i++){
        if (!isFinite(obj[props[i]])) return true;
    }
    return false;
}
var $4396fe9194f19a3a$var$rectPropties = [
    "x",
    "y",
    "width",
    "height"
];
var $4396fe9194f19a3a$var$polarPropties = [
    "cx",
    "cy",
    "r",
    "startAngle",
    "endAngle"
];
var $4396fe9194f19a3a$var$isValidLayout = {
    cartesian2d: function(layout) {
        return !$4396fe9194f19a3a$var$checkPropertiesNotValid(layout, $4396fe9194f19a3a$var$rectPropties);
    },
    polar: function(layout) {
        return !$4396fe9194f19a3a$var$checkPropertiesNotValid(layout, $4396fe9194f19a3a$var$polarPropties);
    }
};
var $4396fe9194f19a3a$var$getLayout = {
    // itemModel is only used to get borderWidth, which is not needed
    // when calculating bar background layout.
    cartesian2d: function(data, dataIndex, itemModel) {
        var layout = data.getItemLayout(dataIndex);
        var fixedLineWidth = itemModel ? $4396fe9194f19a3a$var$getLineWidth(itemModel, layout) : 0;
        // fix layout with lineWidth
        var signX = layout.width > 0 ? 1 : -1;
        var signY = layout.height > 0 ? 1 : -1;
        return {
            x: layout.x + signX * fixedLineWidth / 2,
            y: layout.y + signY * fixedLineWidth / 2,
            width: layout.width - signX * fixedLineWidth,
            height: layout.height - signY * fixedLineWidth
        };
    },
    polar: function(data, dataIndex, itemModel) {
        var layout = data.getItemLayout(dataIndex);
        return {
            cx: layout.cx,
            cy: layout.cy,
            r0: layout.r0,
            r: layout.r,
            startAngle: layout.startAngle,
            endAngle: layout.endAngle,
            clockwise: layout.clockwise
        };
    }
};
function $4396fe9194f19a3a$var$isZeroOnPolar(layout) {
    return layout.startAngle != null && layout.endAngle != null && layout.startAngle === layout.endAngle;
}
function $4396fe9194f19a3a$var$createPolarPositionMapping(isRadial) {
    return function(isRadial) {
        var arcOrAngle = isRadial ? "Arc" : "Angle";
        return function(position) {
            switch(position){
                case "start":
                case "insideStart":
                case "end":
                case "insideEnd":
                    return position + arcOrAngle;
                default:
                    return position;
            }
        };
    }(isRadial);
}
function $4396fe9194f19a3a$var$updateStyle(el, data, dataIndex, itemModel, layout, seriesModel, isHorizontalOrRadial, isPolar) {
    var style = data.getItemVisual(dataIndex, "style");
    if (!isPolar) {
        var borderRadius = itemModel.get([
            "itemStyle",
            "borderRadius"
        ]) || 0;
        el.setShape("r", borderRadius);
    } else if (!seriesModel.get("roundCap")) {
        var sectorShape = el.shape;
        var cornerRadius = (0, $71f216120abe84ce$export$b395eeeb2ad7cce5)(itemModel.getModel("itemStyle"), sectorShape, true);
        (0, $e44eb14c4271d0f9$export$8b58be045bf06082)(sectorShape, cornerRadius);
        el.setShape(sectorShape);
    }
    el.useStyle(style);
    var cursorStyle = itemModel.getShallow("cursor");
    cursorStyle && el.attr("cursor", cursorStyle);
    var labelPositionOutside = isPolar ? isHorizontalOrRadial ? layout.r >= layout.r0 ? "endArc" : "startArc" : layout.endAngle >= layout.startAngle ? "endAngle" : "startAngle" : isHorizontalOrRadial ? layout.height >= 0 ? "bottom" : "top" : layout.width >= 0 ? "right" : "left";
    var labelStatesModels = (0, $75926670b032879d$export$9739a32674be5893)(itemModel);
    (0, $75926670b032879d$export$9a13992917966657)(el, labelStatesModels, {
        labelFetcher: seriesModel,
        labelDataIndex: dataIndex,
        defaultText: (0, $2216e0c7945273bf$export$5ff20667590927ed)(seriesModel.getData(), dataIndex),
        inheritColor: style.fill,
        defaultOpacity: style.opacity,
        defaultOutsidePosition: labelPositionOutside
    });
    var label = el.getTextContent();
    if (isPolar && label) {
        var position = itemModel.get([
            "label",
            "position"
        ]);
        el.textConfig.inside = position === "middle" ? true : null;
        (0, $ca10fcdc57fbc7bc$export$672ce504c0db395a)(el, position === "outside" ? labelPositionOutside : position, $4396fe9194f19a3a$var$createPolarPositionMapping(isHorizontalOrRadial), itemModel.get([
            "label",
            "rotate"
        ]));
    }
    (0, $75926670b032879d$export$7bdbceaf9ab378f2)(label, labelStatesModels, seriesModel.getRawValue(dataIndex), function(value) {
        return (0, $2216e0c7945273bf$export$5f84815e91ca6775)(data, value);
    });
    var emphasisModel = itemModel.getModel([
        "emphasis"
    ]);
    (0, $e3c0a36328c28ac4$export$e51187539ff11209)(el, emphasisModel.get("focus"), emphasisModel.get("blurScope"), emphasisModel.get("disabled"));
    (0, $e3c0a36328c28ac4$export$48b68047d330bbc9)(el, itemModel);
    if ($4396fe9194f19a3a$var$isZeroOnPolar(layout)) {
        el.style.fill = "none";
        el.style.stroke = "none";
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(el.states, function(state) {
            if (state.style) state.style.fill = state.style.stroke = "none";
        });
    }
}
// In case width or height are too small.
function $4396fe9194f19a3a$var$getLineWidth(itemModel, rawLayout) {
    // Has no border.
    var borderColor = itemModel.get([
        "itemStyle",
        "borderColor"
    ]);
    if (!borderColor || borderColor === "none") return 0;
    var lineWidth = itemModel.get([
        "itemStyle",
        "borderWidth"
    ]) || 0;
    // width or height may be NaN for empty data
    var width = isNaN(rawLayout.width) ? Number.MAX_VALUE : Math.abs(rawLayout.width);
    var height = isNaN(rawLayout.height) ? Number.MAX_VALUE : Math.abs(rawLayout.height);
    return Math.min(lineWidth, width, height);
}
var $4396fe9194f19a3a$var$LagePathShape = /** @class */ function() {
    function LagePathShape() {}
    return LagePathShape;
}();
var $4396fe9194f19a3a$var$LargePath = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(LargePath, _super);
    function LargePath(opts) {
        var _this = _super.call(this, opts) || this;
        _this.type = "largeBar";
        return _this;
    }
    LargePath.prototype.getDefaultShape = function() {
        return new $4396fe9194f19a3a$var$LagePathShape();
    };
    LargePath.prototype.buildPath = function(ctx, shape) {
        // Drawing lines is more efficient than drawing
        // a whole line or drawing rects.
        var points = shape.points;
        var baseDimIdx = this.baseDimIdx;
        var valueDimIdx = 1 - this.baseDimIdx;
        var startPoint = [];
        var size = [];
        var barWidth = this.barWidth;
        for(var i = 0; i < points.length; i += 3){
            size[baseDimIdx] = barWidth;
            size[valueDimIdx] = points[i + 2];
            startPoint[baseDimIdx] = points[i + baseDimIdx];
            startPoint[valueDimIdx] = points[i + valueDimIdx];
            ctx.rect(startPoint[0], startPoint[1], size[0], size[1]);
        }
    };
    return LargePath;
}((0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039));
function $4396fe9194f19a3a$var$createLarge(seriesModel, group, progressiveEls, incremental) {
    // TODO support polar
    var data = seriesModel.getData();
    var baseDimIdx = data.getLayout("valueAxisHorizontal") ? 1 : 0;
    var largeDataIndices = data.getLayout("largeDataIndices");
    var barWidth = data.getLayout("size");
    var backgroundModel = seriesModel.getModel("backgroundStyle");
    var bgPoints = data.getLayout("largeBackgroundPoints");
    if (bgPoints) {
        var bgEl = new $4396fe9194f19a3a$var$LargePath({
            shape: {
                points: bgPoints
            },
            incremental: !!incremental,
            silent: true,
            z2: 0
        });
        bgEl.baseDimIdx = baseDimIdx;
        bgEl.largeDataIndices = largeDataIndices;
        bgEl.barWidth = barWidth;
        bgEl.useStyle(backgroundModel.getItemStyle());
        group.add(bgEl);
        progressiveEls && progressiveEls.push(bgEl);
    }
    var el = new $4396fe9194f19a3a$var$LargePath({
        shape: {
            points: data.getLayout("largePoints")
        },
        incremental: !!incremental,
        ignoreCoarsePointer: true,
        z2: 1
    });
    el.baseDimIdx = baseDimIdx;
    el.largeDataIndices = largeDataIndices;
    el.barWidth = barWidth;
    group.add(el);
    el.useStyle(data.getVisual("style"));
    // Enable tooltip and user mouse/touch event handlers.
    (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(el).seriesIndex = seriesModel.seriesIndex;
    if (!seriesModel.get("silent")) {
        el.on("mousedown", $4396fe9194f19a3a$var$largePathUpdateDataIndex);
        el.on("mousemove", $4396fe9194f19a3a$var$largePathUpdateDataIndex);
    }
    progressiveEls && progressiveEls.push(el);
}
// Use throttle to avoid frequently traverse to find dataIndex.
var $4396fe9194f19a3a$var$largePathUpdateDataIndex = (0, $1eadeed02cc6d4a8$export$de363e709c412c8a)(function(event) {
    var largePath = this;
    var dataIndex = $4396fe9194f19a3a$var$largePathFindDataIndex(largePath, event.offsetX, event.offsetY);
    (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(largePath).dataIndex = dataIndex >= 0 ? dataIndex : null;
}, 30, false);
function $4396fe9194f19a3a$var$largePathFindDataIndex(largePath, x, y) {
    var baseDimIdx = largePath.baseDimIdx;
    var valueDimIdx = 1 - baseDimIdx;
    var points = largePath.shape.points;
    var largeDataIndices = largePath.largeDataIndices;
    var startPoint = [];
    var size = [];
    var barWidth = largePath.barWidth;
    for(var i = 0, len = points.length / 3; i < len; i++){
        var ii = i * 3;
        size[baseDimIdx] = barWidth;
        size[valueDimIdx] = points[ii + 2];
        startPoint[baseDimIdx] = points[ii + baseDimIdx];
        startPoint[valueDimIdx] = points[ii + valueDimIdx];
        if (size[valueDimIdx] < 0) {
            startPoint[valueDimIdx] += size[valueDimIdx];
            size[valueDimIdx] = -size[valueDimIdx];
        }
        if (x >= startPoint[0] && x <= startPoint[0] + size[0] && y >= startPoint[1] && y <= startPoint[1] + size[1]) return largeDataIndices[i];
    }
    return -1;
}
function $4396fe9194f19a3a$var$createBackgroundShape(isHorizontalOrRadial, layout, coord) {
    if ((0, $6b8ccbda0efa7c7c$export$8567506e6336616)(coord, "cartesian2d")) {
        var rectShape = layout;
        var coordLayout = coord.getArea();
        return {
            x: isHorizontalOrRadial ? rectShape.x : coordLayout.x,
            y: isHorizontalOrRadial ? coordLayout.y : rectShape.y,
            width: isHorizontalOrRadial ? rectShape.width : coordLayout.width,
            height: isHorizontalOrRadial ? coordLayout.height : rectShape.height
        };
    } else {
        var coordLayout = coord.getArea();
        var sectorShape = layout;
        return {
            cx: coordLayout.cx,
            cy: coordLayout.cy,
            r0: isHorizontalOrRadial ? coordLayout.r0 : sectorShape.r0,
            r: isHorizontalOrRadial ? coordLayout.r : sectorShape.r,
            startAngle: isHorizontalOrRadial ? sectorShape.startAngle : 0,
            endAngle: isHorizontalOrRadial ? sectorShape.endAngle : Math.PI * 2
        };
    }
}
function $4396fe9194f19a3a$var$createBackgroundEl(coord, isHorizontalOrRadial, layout) {
    var ElementClz = coord.type === "polar" ? (0, $55ff835abc77a8e3$export$2e2bcd8739ae039) : (0, $538026eba361a92a$export$2e2bcd8739ae039);
    return new ElementClz({
        shape: $4396fe9194f19a3a$var$createBackgroundShape(isHorizontalOrRadial, layout, coord),
        silent: true,
        z2: 0
    });
}
var $4396fe9194f19a3a$export$2e2bcd8739ae039 = $4396fe9194f19a3a$var$BarView;


function $7b688bb319000a8a$export$4b3e715f166fdd78(registers) {
    registers.registerChartView((0, $4396fe9194f19a3a$export$2e2bcd8739ae039));
    registers.registerSeriesModel((0, $c1c682a8ff823fdc$export$2e2bcd8739ae039));
    registers.registerLayout(registers.PRIORITY.VISUAL.LAYOUT, $e44eb14c4271d0f9$export$c3095a23b368d1f2((0, $41133a9d01fee524$export$b3219800bda33a1f), "bar"));
    // Do layout after other overall layout, which can prepare some information.
    registers.registerLayout(registers.PRIORITY.VISUAL.PROGRESSIVE_LAYOUT, (0, $41133a9d01fee524$export$16e8685758531cb6)("bar"));
    // Down sample after filter
    registers.registerProcessor(registers.PRIORITY.PROCESSOR.STATISTIC, (0, $5d11855679f656ff$export$2e2bcd8739ae039)("bar"));
    /**
   * @payload
   * @property {string} [componentType=series]
   * @property {number} [dx]
   * @property {number} [dy]
   * @property {number} [zoom]
   * @property {number} [originX]
   * @property {number} [originY]
   */ registers.registerAction({
        type: "changeAxisOrder",
        event: "changeAxisOrder",
        update: "update"
    }, function(payload, ecModel) {
        var componentType = payload.componentType || "series";
        ecModel.eachComponent({
            mainType: componentType,
            query: payload
        }, function(componentModel) {
            if (payload.sortInfo) componentModel.axis.setCategorySortInfo(payload.sortInfo);
        });
    });
}




/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

var $bfbbe02657a92ac8$var$GridModel = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(GridModel, _super);
    function GridModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GridModel.type = "grid";
    GridModel.dependencies = [
        "xAxis",
        "yAxis"
    ];
    GridModel.layoutMode = "box";
    GridModel.defaultOption = {
        show: false,
        // zlevel: 0,
        z: 0,
        left: "10%",
        top: 60,
        right: "10%",
        bottom: 70,
        // If grid size contain label
        containLabel: false,
        // width: {totalWidth} - left - right,
        // height: {totalHeight} - top - bottom,
        backgroundColor: "rgba(0,0,0,0)",
        borderWidth: 1,
        borderColor: "#ccc"
    };
    return GridModel;
}((0, $a756077528c07361$export$2e2bcd8739ae039));
var $bfbbe02657a92ac8$export$2e2bcd8739ae039 = $bfbbe02657a92ac8$var$GridModel;




/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ // eslint-disable-next-line @typescript-eslint/no-unused-vars
var $139572d250df95b7$export$5c54b224726edb5a = /** @class */ function() {
    function AxisModelCommonMixin() {}
    AxisModelCommonMixin.prototype.getNeedCrossZero = function() {
        var option = this.option;
        return !option.scale;
    };
    /**
   * Should be implemented by each axis model if necessary.
   * @return coordinate system model
   */ AxisModelCommonMixin.prototype.getCoordSysModel = function() {
        return;
    };
    return AxisModelCommonMixin;
}();



var $5089e207da388b1f$export$483dc37e6ad83a3c = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(CartesianAxisModel, _super);
    function CartesianAxisModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CartesianAxisModel.prototype.getCoordSysModel = function() {
        return this.getReferringComponents("grid", (0, $8917c02fd8256c67$export$f076738ec84e693c)).models[0];
    };
    CartesianAxisModel.type = "cartesian2dAxis";
    return CartesianAxisModel;
}((0, $a756077528c07361$export$2e2bcd8739ae039));
$e44eb14c4271d0f9$export$e36fc9d62a853069($5089e207da388b1f$export$483dc37e6ad83a3c, (0, $139572d250df95b7$export$5c54b224726edb5a));
var $5089e207da388b1f$export$2e2bcd8739ae039 = $5089e207da388b1f$export$483dc37e6ad83a3c;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
var $b429d0080a0dcdb0$var$defaultOption = {
    show: true,
    // zlevel: 0,
    z: 0,
    // Inverse the axis.
    inverse: false,
    // Axis name displayed.
    name: "",
    // 'start' | 'middle' | 'end'
    nameLocation: "end",
    // By degree. By default auto rotate by nameLocation.
    nameRotate: null,
    nameTruncate: {
        maxWidth: null,
        ellipsis: "...",
        placeholder: "."
    },
    // Use global text style by default.
    nameTextStyle: {},
    // The gap between axisName and axisLine.
    nameGap: 15,
    // Default `false` to support tooltip.
    silent: false,
    // Default `false` to avoid legacy user event listener fail.
    triggerEvent: false,
    tooltip: {
        show: false
    },
    axisPointer: {},
    axisLine: {
        show: true,
        onZero: true,
        onZeroAxisIndex: null,
        lineStyle: {
            color: "#6E7079",
            width: 1,
            type: "solid"
        },
        // The arrow at both ends the the axis.
        symbol: [
            "none",
            "none"
        ],
        symbolSize: [
            10,
            15
        ]
    },
    axisTick: {
        show: true,
        // Whether axisTick is inside the grid or outside the grid.
        inside: false,
        // The length of axisTick.
        length: 5,
        lineStyle: {
            width: 1
        }
    },
    axisLabel: {
        show: true,
        // Whether axisLabel is inside the grid or outside the grid.
        inside: false,
        rotate: 0,
        // true | false | null/undefined (auto)
        showMinLabel: null,
        // true | false | null/undefined (auto)
        showMaxLabel: null,
        margin: 8,
        // formatter: null,
        fontSize: 12
    },
    splitLine: {
        show: true,
        lineStyle: {
            color: [
                "#E0E6F1"
            ],
            width: 1,
            type: "solid"
        }
    },
    splitArea: {
        show: false,
        areaStyle: {
            color: [
                "rgba(250,250,250,0.2)",
                "rgba(210,219,238,0.2)"
            ]
        }
    }
};
var $b429d0080a0dcdb0$var$categoryAxis = $e44eb14c4271d0f9$export$4950aa0f605343fb({
    // The gap at both ends of the axis. For categoryAxis, boolean.
    boundaryGap: true,
    // Set false to faster category collection.
    deduplication: null,
    // splitArea: {
    // show: false
    // },
    splitLine: {
        show: false
    },
    axisTick: {
        // If tick is align with label when boundaryGap is true
        alignWithLabel: false,
        interval: "auto"
    },
    axisLabel: {
        interval: "auto"
    }
}, $b429d0080a0dcdb0$var$defaultOption);
var $b429d0080a0dcdb0$var$valueAxis = $e44eb14c4271d0f9$export$4950aa0f605343fb({
    boundaryGap: [
        0,
        0
    ],
    axisLine: {
        // Not shown when other axis is categoryAxis in cartesian
        show: "auto"
    },
    axisTick: {
        // Not shown when other axis is categoryAxis in cartesian
        show: "auto"
    },
    // TODO
    // min/max: [30, datamin, 60] or [20, datamin] or [datamin, 60]
    splitNumber: 5,
    minorTick: {
        // Minor tick, not available for cateogry axis.
        show: false,
        // Split number of minor ticks. The value should be in range of (0, 100)
        splitNumber: 5,
        // Length of minor tick
        length: 3,
        // Line style
        lineStyle: {
        }
    },
    minorSplitLine: {
        show: false,
        lineStyle: {
            color: "#F4F7FD",
            width: 1
        }
    }
}, $b429d0080a0dcdb0$var$defaultOption);
var $b429d0080a0dcdb0$var$timeAxis = $e44eb14c4271d0f9$export$4950aa0f605343fb({
    splitNumber: 6,
    axisLabel: {
        // To eliminate labels that are not nice
        showMinLabel: false,
        showMaxLabel: false,
        rich: {
            primary: {
                fontWeight: "bold"
            }
        }
    },
    splitLine: {
        show: false
    }
}, $b429d0080a0dcdb0$var$valueAxis);
var $b429d0080a0dcdb0$var$logAxis = $e44eb14c4271d0f9$export$ebe90cb607ad99e({
    logBase: 10
}, $b429d0080a0dcdb0$var$valueAxis);
var $b429d0080a0dcdb0$export$2e2bcd8739ae039 = {
    category: $b429d0080a0dcdb0$var$categoryAxis,
    value: $b429d0080a0dcdb0$var$valueAxis,
    time: $b429d0080a0dcdb0$var$timeAxis,
    log: $b429d0080a0dcdb0$var$logAxis
};



/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
var $d9fad079c626390b$var$uidBase = 0;
var $d9fad079c626390b$var$OrdinalMeta = /** @class */ function() {
    function OrdinalMeta(opt) {
        this.categories = opt.categories || [];
        this._needCollect = opt.needCollect;
        this._deduplication = opt.deduplication;
        this.uid = ++$d9fad079c626390b$var$uidBase;
    }
    OrdinalMeta.createByAxisModel = function(axisModel) {
        var option = axisModel.option;
        var data = option.data;
        var categories = data && (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(data, $d9fad079c626390b$var$getName);
        return new OrdinalMeta({
            categories: categories,
            needCollect: !categories,
            // deduplication is default in axis.
            deduplication: option.dedplication !== false
        });
    };
    OrdinalMeta.prototype.getOrdinal = function(category) {
        // @ts-ignore
        return this._getOrCreateMap().get(category);
    };
    /**
   * @return The ordinal. If not found, return NaN.
   */ OrdinalMeta.prototype.parseAndCollect = function(category) {
        var index;
        var needCollect = this._needCollect;
        // The value of category dim can be the index of the given category set.
        // This feature is only supported when !needCollect, because we should
        // consider a common case: a value is 2017, which is a number but is
        // expected to be tread as a category. This case usually happen in dataset,
        // where it happent to be no need of the index feature.
        if (!(0, $e44eb14c4271d0f9$export$844ec244b1367d54)(category) && !needCollect) return category;
        // Optimize for the scenario:
        // category is ['2012-01-01', '2012-01-02', ...], where the input
        // data has been ensured not duplicate and is large data.
        // Notice, if a dataset dimension provide categroies, usually echarts
        // should remove duplication except user tell echarts dont do that
        // (set axis.deduplication = false), because echarts do not know whether
        // the values in the category dimension has duplication (consider the
        // parallel-aqi example)
        if (needCollect && !this._deduplication) {
            index = this.categories.length;
            this.categories[index] = category;
            return index;
        }
        var map = this._getOrCreateMap();
        // @ts-ignore
        index = map.get(category);
        if (index == null) {
            if (needCollect) {
                index = this.categories.length;
                this.categories[index] = category;
                // @ts-ignore
                map.set(category, index);
            } else index = NaN;
        }
        return index;
    };
    // Consider big data, do not create map until needed.
    OrdinalMeta.prototype._getOrCreateMap = function() {
        return this._map || (this._map = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)(this.categories));
    };
    return OrdinalMeta;
}();
function $d9fad079c626390b$var$getName(obj) {
    if ((0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(obj) && obj.value != null) return obj.value;
    else return obj + "";
}
var $d9fad079c626390b$export$2e2bcd8739ae039 = $d9fad079c626390b$var$OrdinalMeta;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ var $23502b5d55a82769$export$2e0057d176d6f690 = {
    value: 1,
    category: 1,
    time: 1,
    log: 1
};



function $e31f65e0d2530417$export$2e2bcd8739ae039(registers, axisName, BaseAxisModelClass, extraDefaultOption) {
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)((0, $23502b5d55a82769$export$2e0057d176d6f690), function(v, axisType) {
        var defaultOption = (0, $e44eb14c4271d0f9$export$4950aa0f605343fb)((0, $e44eb14c4271d0f9$export$4950aa0f605343fb)({}, (0, $b429d0080a0dcdb0$export$2e2bcd8739ae039)[axisType], true), extraDefaultOption, true);
        var AxisModel = /** @class */ function(_super) {
            (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(AxisModel, _super);
            function AxisModel() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.type = axisName + "Axis." + axisType;
                return _this;
            }
            AxisModel.prototype.mergeDefaultAndTheme = function(option, ecModel) {
                var layoutMode = (0, $074356ab3d6b1cdb$export$3968a28a7cbd6063)(this);
                var inputPositionParams = layoutMode ? (0, $074356ab3d6b1cdb$export$4b0d20af19c9875e)(option) : {};
                var themeModel = ecModel.getTheme();
                (0, $e44eb14c4271d0f9$export$4950aa0f605343fb)(option, themeModel.get(axisType + "Axis"));
                (0, $e44eb14c4271d0f9$export$4950aa0f605343fb)(option, this.getDefaultOption());
                option.type = $e31f65e0d2530417$var$getAxisType(option);
                if (layoutMode) (0, $074356ab3d6b1cdb$export$1754cb91f16ca028)(option, inputPositionParams, layoutMode);
            };
            AxisModel.prototype.optionUpdated = function() {
                var thisOption = this.option;
                if (thisOption.type === "category") this.__ordinalMeta = (0, $d9fad079c626390b$export$2e2bcd8739ae039).createByAxisModel(this);
            };
            /**
       * Should not be called before all of 'getInitailData' finished.
       * Because categories are collected during initializing data.
       */ AxisModel.prototype.getCategories = function(rawData) {
                var option = this.option;
                // FIXME
                // warning if called before all of 'getInitailData' finished.
                if (option.type === "category") {
                    if (rawData) return option.data;
                    return this.__ordinalMeta.categories;
                }
            };
            AxisModel.prototype.getOrdinalMeta = function() {
                return this.__ordinalMeta;
            };
            AxisModel.type = axisName + "Axis." + axisType;
            AxisModel.defaultOption = defaultOption;
            return AxisModel;
        }(BaseAxisModelClass);
        registers.registerComponentModel(AxisModel);
    });
    registers.registerSubTypeDefaulter(axisName + "Axis", $e31f65e0d2530417$var$getAxisType);
}
function $e31f65e0d2530417$var$getAxisType(option) {
    // Default axis with data is category axis
    return option.type || (option.data ? "category" : "value");
}


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * Grid is a region which contains at most 4 cartesian systems
 *
 * TODO Default cartesian
 */ 

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
var $e214388b97be4ec9$var$Scale = /** @class */ function() {
    function Scale(setting) {
        this._setting = setting || {};
        this._extent = [
            Infinity,
            -Infinity
        ];
    }
    Scale.prototype.getSetting = function(name) {
        return this._setting[name];
    };
    /**
   * Set extent from data
   */ Scale.prototype.unionExtent = function(other) {
        var extent = this._extent;
        other[0] < extent[0] && (extent[0] = other[0]);
        other[1] > extent[1] && (extent[1] = other[1]);
    // not setExtent because in log axis it may transformed to power
    // this.setExtent(extent[0], extent[1]);
    };
    /**
   * Set extent from data
   */ Scale.prototype.unionExtentFromData = function(data, dim) {
        this.unionExtent(data.getApproximateExtent(dim));
    };
    /**
   * Get extent
   *
   * Extent is always in increase order.
   */ Scale.prototype.getExtent = function() {
        return this._extent.slice();
    };
    /**
   * Set extent
   */ Scale.prototype.setExtent = function(start, end) {
        var thisExtent = this._extent;
        if (!isNaN(start)) thisExtent[0] = start;
        if (!isNaN(end)) thisExtent[1] = end;
    };
    /**
   * If value is in extent range
   */ Scale.prototype.isInExtentRange = function(value) {
        return this._extent[0] <= value && this._extent[1] >= value;
    };
    /**
   * When axis extent depends on data and no data exists,
   * axis ticks should not be drawn, which is named 'blank'.
   */ Scale.prototype.isBlank = function() {
        return this._isBlank;
    };
    /**
   * When axis extent depends on data and no data exists,
   * axis ticks should not be drawn, which is named 'blank'.
   */ Scale.prototype.setBlank = function(isBlank) {
        this._isBlank = isBlank;
    };
    return Scale;
}();
$0a7732deba457ada$export$241315e45585454d($e214388b97be4ec9$var$Scale);
var $e214388b97be4ec9$export$2e2bcd8739ae039 = $e214388b97be4ec9$var$Scale;



/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
function $37de80c384edf4d3$export$a8a5b03ea14764df(val) {
    var exp10 = Math.pow(10, (0, $13e6a1a716300dd4$export$97256a17b20a0c24)(Math.abs(val)));
    var f = Math.abs(val / exp10);
    return f === 0 || f === 1 || f === 2 || f === 3 || f === 5;
}
function $37de80c384edf4d3$export$dfc8cd28ed7b22a0(scale) {
    return scale.type === "interval" || scale.type === "log";
}
function $37de80c384edf4d3$export$eeea879a611eb991(extent, splitNumber, minInterval, maxInterval) {
    var result = {};
    var span = extent[1] - extent[0];
    var interval = result.interval = (0, $13e6a1a716300dd4$export$7a695fe44258210b)(span / splitNumber, true);
    if (minInterval != null && interval < minInterval) interval = result.interval = minInterval;
    if (maxInterval != null && interval > maxInterval) interval = result.interval = maxInterval;
    // Tow more digital for tick.
    var precision = result.intervalPrecision = $37de80c384edf4d3$export$86a060b060d3d31a(interval);
    // Niced extent inside original extent
    var niceTickExtent = result.niceTickExtent = [
        (0, $13e6a1a716300dd4$export$2077e0241d6afd3c)(Math.ceil(extent[0] / interval) * interval, precision),
        (0, $13e6a1a716300dd4$export$2077e0241d6afd3c)(Math.floor(extent[1] / interval) * interval, precision)
    ];
    $37de80c384edf4d3$export$624b8c8c438031ad(niceTickExtent, extent);
    return result;
}
function $37de80c384edf4d3$export$f39031e8422f329d(interval) {
    var exp10 = Math.pow(10, (0, $13e6a1a716300dd4$export$97256a17b20a0c24)(interval));
    // Increase interval
    var f = interval / exp10;
    if (!f) f = 1;
    else if (f === 2) f = 3;
    else if (f === 3) f = 5;
    else // f is 1 or 5
    f *= 2;
    return (0, $13e6a1a716300dd4$export$2077e0241d6afd3c)(f * exp10);
}
function $37de80c384edf4d3$export$86a060b060d3d31a(interval) {
    // Tow more digital for tick.
    return (0, $13e6a1a716300dd4$export$e0c74b50bbd10f68)(interval) + 2;
}
function $37de80c384edf4d3$var$clamp(niceTickExtent, idx, extent) {
    niceTickExtent[idx] = Math.max(Math.min(niceTickExtent[idx], extent[1]), extent[0]);
}
function $37de80c384edf4d3$export$624b8c8c438031ad(niceTickExtent, extent) {
    !isFinite(niceTickExtent[0]) && (niceTickExtent[0] = extent[0]);
    !isFinite(niceTickExtent[1]) && (niceTickExtent[1] = extent[1]);
    $37de80c384edf4d3$var$clamp(niceTickExtent, 0, extent);
    $37de80c384edf4d3$var$clamp(niceTickExtent, 1, extent);
    if (niceTickExtent[0] > niceTickExtent[1]) niceTickExtent[0] = niceTickExtent[1];
}
function $37de80c384edf4d3$export$8893e2b90ba10d92(val, extent) {
    return val >= extent[0] && val <= extent[1];
}
function $37de80c384edf4d3$export$a3295358bff77e(val, extent) {
    if (extent[1] === extent[0]) return 0.5;
    return (val - extent[0]) / (extent[1] - extent[0]);
}
function $37de80c384edf4d3$export$dcdf75081b88279d(val, extent) {
    return val * (extent[1] - extent[0]) + extent[0];
}



var $c31e1322fcf2cffd$var$OrdinalScale = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(OrdinalScale, _super);
    function OrdinalScale(setting) {
        var _this = _super.call(this, setting) || this;
        _this.type = "ordinal";
        var ordinalMeta = _this.getSetting("ordinalMeta");
        // Caution: Should not use instanceof, consider ec-extensions using
        // import approach to get OrdinalMeta class.
        if (!ordinalMeta) ordinalMeta = new (0, $d9fad079c626390b$export$2e2bcd8739ae039)({});
        if ((0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(ordinalMeta)) ordinalMeta = new (0, $d9fad079c626390b$export$2e2bcd8739ae039)({
            categories: (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(ordinalMeta, function(item) {
                return (0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(item) ? item.value : item;
            })
        });
        _this._ordinalMeta = ordinalMeta;
        _this._extent = _this.getSetting("extent") || [
            0,
            ordinalMeta.categories.length - 1
        ];
        return _this;
    }
    OrdinalScale.prototype.parse = function(val) {
        // Caution: Math.round(null) will return `0` rather than `NaN`
        if (val == null) return NaN;
        return (0, $e44eb14c4271d0f9$export$844ec244b1367d54)(val) ? this._ordinalMeta.getOrdinal(val) : Math.round(val);
    };
    OrdinalScale.prototype.contain = function(rank) {
        rank = this.parse(rank);
        return $37de80c384edf4d3$export$8893e2b90ba10d92(rank, this._extent) && this._ordinalMeta.categories[rank] != null;
    };
    /**
   * Normalize given rank or name to linear [0, 1]
   * @param val raw ordinal number.
   * @return normalized value in [0, 1].
   */ OrdinalScale.prototype.normalize = function(val) {
        val = this._getTickNumber(this.parse(val));
        return $37de80c384edf4d3$export$a3295358bff77e(val, this._extent);
    };
    /**
   * @param val normalized value in [0, 1].
   * @return raw ordinal number.
   */ OrdinalScale.prototype.scale = function(val) {
        val = Math.round($37de80c384edf4d3$export$dcdf75081b88279d(val, this._extent));
        return this.getRawOrdinalNumber(val);
    };
    OrdinalScale.prototype.getTicks = function() {
        var ticks = [];
        var extent = this._extent;
        var rank = extent[0];
        while(rank <= extent[1]){
            ticks.push({
                value: rank
            });
            rank++;
        }
        return ticks;
    };
    OrdinalScale.prototype.getMinorTicks = function(splitNumber) {
        // Not support.
        return;
    };
    /**
   * @see `Ordinal['_ordinalNumbersByTick']`
   */ OrdinalScale.prototype.setSortInfo = function(info) {
        if (info == null) {
            this._ordinalNumbersByTick = this._ticksByOrdinalNumber = null;
            return;
        }
        var infoOrdinalNumbers = info.ordinalNumbers;
        var ordinalsByTick = this._ordinalNumbersByTick = [];
        var ticksByOrdinal = this._ticksByOrdinalNumber = [];
        // Unnecessary support negative tick in `realtimeSort`.
        var tickNum = 0;
        var allCategoryLen = this._ordinalMeta.categories.length;
        for(var len = Math.min(allCategoryLen, infoOrdinalNumbers.length); tickNum < len; ++tickNum){
            var ordinalNumber = infoOrdinalNumbers[tickNum];
            ordinalsByTick[tickNum] = ordinalNumber;
            ticksByOrdinal[ordinalNumber] = tickNum;
        }
        // Handle that `series.data` only covers part of the `axis.category.data`.
        var unusedOrdinal = 0;
        for(; tickNum < allCategoryLen; ++tickNum){
            while(ticksByOrdinal[unusedOrdinal] != null)unusedOrdinal++;
            ordinalsByTick.push(unusedOrdinal);
            ticksByOrdinal[unusedOrdinal] = tickNum;
        }
    };
    OrdinalScale.prototype._getTickNumber = function(ordinal) {
        var ticksByOrdinalNumber = this._ticksByOrdinalNumber;
        // also support ordinal out of range of `ordinalMeta.categories.length`,
        // where ordinal numbers are used as tick value directly.
        return ticksByOrdinalNumber && ordinal >= 0 && ordinal < ticksByOrdinalNumber.length ? ticksByOrdinalNumber[ordinal] : ordinal;
    };
    /**
   * @usage
   * ```js
   * const ordinalNumber = ordinalScale.getRawOrdinalNumber(tickVal);
   *
   * // case0
   * const rawOrdinalValue = axisModel.getCategories()[ordinalNumber];
   * // case1
   * const rawOrdinalValue = this._ordinalMeta.categories[ordinalNumber];
   * // case2
   * const coord = axis.dataToCoord(ordinalNumber);
   * ```
   *
   * @param {OrdinalNumber} tickNumber index of display
   */ OrdinalScale.prototype.getRawOrdinalNumber = function(tickNumber) {
        var ordinalNumbersByTick = this._ordinalNumbersByTick;
        // tickNumber may be out of range, e.g., when axis max is larger than `ordinalMeta.categories.length`.,
        // where ordinal numbers are used as tick value directly.
        return ordinalNumbersByTick && tickNumber >= 0 && tickNumber < ordinalNumbersByTick.length ? ordinalNumbersByTick[tickNumber] : tickNumber;
    };
    /**
   * Get item on tick
   */ OrdinalScale.prototype.getLabel = function(tick) {
        if (!this.isBlank()) {
            var ordinalNumber = this.getRawOrdinalNumber(tick.value);
            var cateogry = this._ordinalMeta.categories[ordinalNumber];
            // Note that if no data, ordinalMeta.categories is an empty array.
            // Return empty if it's not exist.
            return cateogry == null ? "" : cateogry + "";
        }
    };
    OrdinalScale.prototype.count = function() {
        return this._extent[1] - this._extent[0] + 1;
    };
    OrdinalScale.prototype.unionExtentFromData = function(data, dim) {
        this.unionExtent(data.getApproximateExtent(dim));
    };
    /**
   * @override
   * If value is in extent range
   */ OrdinalScale.prototype.isInExtentRange = function(value) {
        value = this._getTickNumber(value);
        return this._extent[0] <= value && this._extent[1] >= value;
    };
    OrdinalScale.prototype.getOrdinalMeta = function() {
        return this._ordinalMeta;
    };
    OrdinalScale.prototype.calcNiceTicks = function() {};
    OrdinalScale.prototype.calcNiceExtent = function() {};
    OrdinalScale.type = "ordinal";
    return OrdinalScale;
}((0, $e214388b97be4ec9$export$2e2bcd8739ae039));
(0, $e214388b97be4ec9$export$2e2bcd8739ae039).registerClass($c31e1322fcf2cffd$var$OrdinalScale);
var $c31e1322fcf2cffd$export$2e2bcd8739ae039 = $c31e1322fcf2cffd$var$OrdinalScale;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 




var $54db450da73fb995$var$roundNumber = $13e6a1a716300dd4$export$2077e0241d6afd3c;
var $54db450da73fb995$var$IntervalScale = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(IntervalScale, _super);
    function IntervalScale() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "interval";
        // Step is calculated in adjustExtent.
        _this._interval = 0;
        _this._intervalPrecision = 2;
        return _this;
    }
    IntervalScale.prototype.parse = function(val) {
        return val;
    };
    IntervalScale.prototype.contain = function(val) {
        return $37de80c384edf4d3$export$8893e2b90ba10d92(val, this._extent);
    };
    IntervalScale.prototype.normalize = function(val) {
        return $37de80c384edf4d3$export$a3295358bff77e(val, this._extent);
    };
    IntervalScale.prototype.scale = function(val) {
        return $37de80c384edf4d3$export$dcdf75081b88279d(val, this._extent);
    };
    IntervalScale.prototype.setExtent = function(start, end) {
        var thisExtent = this._extent;
        // start,end may be a Number like '25',so...
        if (!isNaN(start)) thisExtent[0] = parseFloat(start);
        if (!isNaN(end)) thisExtent[1] = parseFloat(end);
    };
    IntervalScale.prototype.unionExtent = function(other) {
        var extent = this._extent;
        other[0] < extent[0] && (extent[0] = other[0]);
        other[1] > extent[1] && (extent[1] = other[1]);
        // unionExtent may called by it's sub classes
        this.setExtent(extent[0], extent[1]);
    };
    IntervalScale.prototype.getInterval = function() {
        return this._interval;
    };
    IntervalScale.prototype.setInterval = function(interval) {
        this._interval = interval;
        // Dropped auto calculated niceExtent and use user-set extent.
        // We assume user wants to set both interval, min, max to get a better result.
        this._niceExtent = this._extent.slice();
        this._intervalPrecision = $37de80c384edf4d3$export$86a060b060d3d31a(interval);
    };
    /**
   * @param expandToNicedExtent Whether expand the ticks to niced extent.
   */ IntervalScale.prototype.getTicks = function(expandToNicedExtent) {
        var interval = this._interval;
        var extent = this._extent;
        var niceTickExtent = this._niceExtent;
        var intervalPrecision = this._intervalPrecision;
        var ticks = [];
        // If interval is 0, return [];
        if (!interval) return ticks;
        // Consider this case: using dataZoom toolbox, zoom and zoom.
        var safeLimit = 10000;
        if (extent[0] < niceTickExtent[0]) {
            if (expandToNicedExtent) ticks.push({
                value: $54db450da73fb995$var$roundNumber(niceTickExtent[0] - interval, intervalPrecision)
            });
            else ticks.push({
                value: extent[0]
            });
        }
        var tick = niceTickExtent[0];
        while(tick <= niceTickExtent[1]){
            ticks.push({
                value: tick
            });
            // Avoid rounding error
            tick = $54db450da73fb995$var$roundNumber(tick + interval, intervalPrecision);
            if (tick === ticks[ticks.length - 1].value) break;
            if (ticks.length > safeLimit) return [];
        }
        // Consider this case: the last item of ticks is smaller
        // than niceTickExtent[1] and niceTickExtent[1] === extent[1].
        var lastNiceTick = ticks.length ? ticks[ticks.length - 1].value : niceTickExtent[1];
        if (extent[1] > lastNiceTick) {
            if (expandToNicedExtent) ticks.push({
                value: $54db450da73fb995$var$roundNumber(lastNiceTick + interval, intervalPrecision)
            });
            else ticks.push({
                value: extent[1]
            });
        }
        return ticks;
    };
    IntervalScale.prototype.getMinorTicks = function(splitNumber) {
        var ticks = this.getTicks(true);
        var minorTicks = [];
        var extent = this.getExtent();
        for(var i = 1; i < ticks.length; i++){
            var nextTick = ticks[i];
            var prevTick = ticks[i - 1];
            var count = 0;
            var minorTicksGroup = [];
            var interval = nextTick.value - prevTick.value;
            var minorInterval = interval / splitNumber;
            while(count < splitNumber - 1){
                var minorTick = $54db450da73fb995$var$roundNumber(prevTick.value + (count + 1) * minorInterval);
                // For the first and last interval. The count may be less than splitNumber.
                if (minorTick > extent[0] && minorTick < extent[1]) minorTicksGroup.push(minorTick);
                count++;
            }
            minorTicks.push(minorTicksGroup);
        }
        return minorTicks;
    };
    /**
   * @param opt.precision If 'auto', use nice presision.
   * @param opt.pad returns 1.50 but not 1.5 if precision is 2.
   */ IntervalScale.prototype.getLabel = function(data, opt) {
        if (data == null) return "";
        var precision = opt && opt.precision;
        if (precision == null) precision = $13e6a1a716300dd4$export$e0c74b50bbd10f68(data.value) || 0;
        else if (precision === "auto") // Should be more precise then tick.
        precision = this._intervalPrecision;
        // (1) If `precision` is set, 12.005 should be display as '12.00500'.
        // (2) Use roundNumber (toFixed) to avoid scientific notation like '3.5e-7'.
        var dataNum = $54db450da73fb995$var$roundNumber(data.value, precision, true);
        return $1594f6dc0ce39685$export$b6fe44657ce35c42(dataNum);
    };
    /**
   * @param splitNumber By default `5`.
   */ IntervalScale.prototype.calcNiceTicks = function(splitNumber, minInterval, maxInterval) {
        splitNumber = splitNumber || 5;
        var extent = this._extent;
        var span = extent[1] - extent[0];
        if (!isFinite(span)) return;
        // User may set axis min 0 and data are all negative
        // FIXME If it needs to reverse ?
        if (span < 0) {
            span = -span;
            extent.reverse();
        }
        var result = $37de80c384edf4d3$export$eeea879a611eb991(extent, splitNumber, minInterval, maxInterval);
        this._intervalPrecision = result.intervalPrecision;
        this._interval = result.interval;
        this._niceExtent = result.niceTickExtent;
    };
    IntervalScale.prototype.calcNiceExtent = function(opt) {
        var extent = this._extent;
        // If extent start and end are same, expand them
        if (extent[0] === extent[1]) {
            if (extent[0] !== 0) {
                // Expand extent
                // Note that extents can be both negative. See #13154
                var expandSize = Math.abs(extent[0]);
                // In the fowllowing case
                //      Axis has been fixed max 100
                //      Plus data are all 100 and axis extent are [100, 100].
                // Extend to the both side will cause expanded max is larger than fixed max.
                // So only expand to the smaller side.
                if (!opt.fixMax) {
                    extent[1] += expandSize / 2;
                    extent[0] -= expandSize / 2;
                } else extent[0] -= expandSize / 2;
            } else extent[1] = 1;
        }
        var span = extent[1] - extent[0];
        // If there are no data and extent are [Infinity, -Infinity]
        if (!isFinite(span)) {
            extent[0] = 0;
            extent[1] = 1;
        }
        this.calcNiceTicks(opt.splitNumber, opt.minInterval, opt.maxInterval);
        // let extent = this._extent;
        var interval = this._interval;
        if (!opt.fixMin) extent[0] = $54db450da73fb995$var$roundNumber(Math.floor(extent[0] / interval) * interval);
        if (!opt.fixMax) extent[1] = $54db450da73fb995$var$roundNumber(Math.ceil(extent[1] / interval) * interval);
    };
    IntervalScale.prototype.setNiceExtent = function(min, max) {
        this._niceExtent = [
            min,
            max
        ];
    };
    IntervalScale.type = "interval";
    return IntervalScale;
}((0, $e214388b97be4ec9$export$2e2bcd8739ae039));
(0, $e214388b97be4ec9$export$2e2bcd8739ae039).registerClass($54db450da73fb995$var$IntervalScale);
var $54db450da73fb995$export$2e2bcd8739ae039 = $54db450da73fb995$var$IntervalScale;





/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 







// FIXME 公用？
var $37f28ea368cd29a8$var$bisect = function(a, x, lo, hi) {
    while(lo < hi){
        var mid = lo + hi >>> 1;
        if (a[mid][1] < x) lo = mid + 1;
        else hi = mid;
    }
    return lo;
};
var $37f28ea368cd29a8$var$TimeScale = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(TimeScale, _super);
    function TimeScale(settings) {
        var _this = _super.call(this, settings) || this;
        _this.type = "time";
        return _this;
    }
    /**
   * Get label is mainly for other components like dataZoom, tooltip.
   */ TimeScale.prototype.getLabel = function(tick) {
        var useUTC = this.getSetting("useUTC");
        return (0, $c5a9021cf573c334$export$d9468344d3651243)(tick.value, (0, $c5a9021cf573c334$export$445bdbd8d2334e40)[(0, $c5a9021cf573c334$export$124c820721c4f66b)((0, $c5a9021cf573c334$export$1da4b91a25d7e1c8)(this._minLevelUnit))] || (0, $c5a9021cf573c334$export$445bdbd8d2334e40).second, useUTC, this.getSetting("locale"));
    };
    TimeScale.prototype.getFormattedLabel = function(tick, idx, labelFormatter) {
        var isUTC = this.getSetting("useUTC");
        var lang = this.getSetting("locale");
        return (0, $c5a9021cf573c334$export$fe777b6293828b5d)(tick, idx, labelFormatter, lang, isUTC);
    };
    /**
   * @override
   */ TimeScale.prototype.getTicks = function() {
        var interval = this._interval;
        var extent = this._extent;
        var ticks = [];
        // If interval is 0, return [];
        if (!interval) return ticks;
        ticks.push({
            value: extent[0],
            level: 0
        });
        var useUTC = this.getSetting("useUTC");
        var innerTicks = $37f28ea368cd29a8$var$getIntervalTicks(this._minLevelUnit, this._approxInterval, useUTC, extent);
        ticks = ticks.concat(innerTicks);
        ticks.push({
            value: extent[1],
            level: 0
        });
        return ticks;
    };
    TimeScale.prototype.calcNiceExtent = function(opt) {
        var extent = this._extent;
        // If extent start and end are same, expand them
        if (extent[0] === extent[1]) {
            // Expand extent
            extent[0] -= (0, $c5a9021cf573c334$export$a97a1358cbb650ab);
            extent[1] += (0, $c5a9021cf573c334$export$a97a1358cbb650ab);
        }
        // If there are no data and extent are [Infinity, -Infinity]
        if (extent[1] === -Infinity && extent[0] === Infinity) {
            var d = new Date();
            extent[1] = +new Date(d.getFullYear(), d.getMonth(), d.getDate());
            extent[0] = extent[1] - (0, $c5a9021cf573c334$export$a97a1358cbb650ab);
        }
        this.calcNiceTicks(opt.splitNumber, opt.minInterval, opt.maxInterval);
    };
    TimeScale.prototype.calcNiceTicks = function(approxTickNum, minInterval, maxInterval) {
        approxTickNum = approxTickNum || 10;
        var extent = this._extent;
        var span = extent[1] - extent[0];
        this._approxInterval = span / approxTickNum;
        if (minInterval != null && this._approxInterval < minInterval) this._approxInterval = minInterval;
        if (maxInterval != null && this._approxInterval > maxInterval) this._approxInterval = maxInterval;
        var scaleIntervalsLen = $37f28ea368cd29a8$var$scaleIntervals.length;
        var idx = Math.min($37f28ea368cd29a8$var$bisect($37f28ea368cd29a8$var$scaleIntervals, this._approxInterval, 0, scaleIntervalsLen), scaleIntervalsLen - 1);
        // Interval that can be used to calculate ticks
        this._interval = $37f28ea368cd29a8$var$scaleIntervals[idx][1];
        // Min level used when picking ticks from top down.
        // We check one more level to avoid the ticks are to sparse in some case.
        this._minLevelUnit = $37f28ea368cd29a8$var$scaleIntervals[Math.max(idx - 1, 0)][0];
    };
    TimeScale.prototype.parse = function(val) {
        // val might be float.
        return (0, $e44eb14c4271d0f9$export$7e4aa119212bc614)(val) ? val : +$13e6a1a716300dd4$export$6b862160d295c8e(val);
    };
    TimeScale.prototype.contain = function(val) {
        return $37de80c384edf4d3$export$8893e2b90ba10d92(this.parse(val), this._extent);
    };
    TimeScale.prototype.normalize = function(val) {
        return $37de80c384edf4d3$export$a3295358bff77e(this.parse(val), this._extent);
    };
    TimeScale.prototype.scale = function(val) {
        return $37de80c384edf4d3$export$dcdf75081b88279d(val, this._extent);
    };
    TimeScale.type = "time";
    return TimeScale;
}((0, $54db450da73fb995$export$2e2bcd8739ae039));
/**
 * This implementation was originally copied from "d3.js"
 * <https://github.com/d3/d3/blob/b516d77fb8566b576088e73410437494717ada26/src/time/scale.js>
 * with some modifications made for this program.
 * See the license statement at the head of this file.
 */ var $37f28ea368cd29a8$var$scaleIntervals = [
    // Format                           interval
    [
        "second",
        (0, $c5a9021cf573c334$export$32c0454ceff7f92d)
    ],
    [
        "minute",
        (0, $c5a9021cf573c334$export$35acaebf644db34e)
    ],
    [
        "hour",
        (0, $c5a9021cf573c334$export$82541edf19e5e3b0)
    ],
    [
        "quarter-day",
        (0, $c5a9021cf573c334$export$82541edf19e5e3b0) * 6
    ],
    [
        "half-day",
        (0, $c5a9021cf573c334$export$82541edf19e5e3b0) * 12
    ],
    [
        "day",
        (0, $c5a9021cf573c334$export$a97a1358cbb650ab) * 1.2
    ],
    [
        "half-week",
        (0, $c5a9021cf573c334$export$a97a1358cbb650ab) * 3.5
    ],
    [
        "week",
        (0, $c5a9021cf573c334$export$a97a1358cbb650ab) * 7
    ],
    [
        "month",
        (0, $c5a9021cf573c334$export$a97a1358cbb650ab) * 31
    ],
    [
        "quarter",
        (0, $c5a9021cf573c334$export$a97a1358cbb650ab) * 95
    ],
    [
        "half-year",
        (0, $c5a9021cf573c334$export$99cafda57477293d) / 2
    ],
    [
        "year",
        (0, $c5a9021cf573c334$export$99cafda57477293d)
    ] // 1Y
];
function $37f28ea368cd29a8$var$isUnitValueSame(unit, valueA, valueB, isUTC) {
    var dateA = $13e6a1a716300dd4$export$6b862160d295c8e(valueA);
    var dateB = $13e6a1a716300dd4$export$6b862160d295c8e(valueB);
    var isSame = function(unit) {
        return (0, $c5a9021cf573c334$export$e04e41a1e24ffd3f)(dateA, unit, isUTC) === (0, $c5a9021cf573c334$export$e04e41a1e24ffd3f)(dateB, unit, isUTC);
    };
    var isSameYear = function() {
        return isSame("year");
    };
    // const isSameHalfYear = () => isSameYear() && isSame('half-year');
    // const isSameQuater = () => isSameYear() && isSame('quarter');
    var isSameMonth = function() {
        return isSameYear() && isSame("month");
    };
    var isSameDay = function() {
        return isSameMonth() && isSame("day");
    };
    // const isSameHalfDay = () => isSameDay() && isSame('half-day');
    var isSameHour = function() {
        return isSameDay() && isSame("hour");
    };
    var isSameMinute = function() {
        return isSameHour() && isSame("minute");
    };
    var isSameSecond = function() {
        return isSameMinute() && isSame("second");
    };
    var isSameMilliSecond = function() {
        return isSameSecond() && isSame("millisecond");
    };
    switch(unit){
        case "year":
            return isSameYear();
        case "month":
            return isSameMonth();
        case "day":
            return isSameDay();
        case "hour":
            return isSameHour();
        case "minute":
            return isSameMinute();
        case "second":
            return isSameSecond();
        case "millisecond":
            return isSameMilliSecond();
    }
}
// const primaryUnitGetters = {
//     year: fullYearGetterName(),
//     month: monthGetterName(),
//     day: dateGetterName(),
//     hour: hoursGetterName(),
//     minute: minutesGetterName(),
//     second: secondsGetterName(),
//     millisecond: millisecondsGetterName()
// };
// const primaryUnitUTCGetters = {
//     year: fullYearGetterName(true),
//     month: monthGetterName(true),
//     day: dateGetterName(true),
//     hour: hoursGetterName(true),
//     minute: minutesGetterName(true),
//     second: secondsGetterName(true),
//     millisecond: millisecondsGetterName(true)
// };
// function moveTick(date: Date, unitName: TimeUnit, step: number, isUTC: boolean) {
//     step = step || 1;
//     switch (getPrimaryTimeUnit(unitName)) {
//         case 'year':
//             date[fullYearSetterName(isUTC)](date[fullYearGetterName(isUTC)]() + step);
//             break;
//         case 'month':
//             date[monthSetterName(isUTC)](date[monthGetterName(isUTC)]() + step);
//             break;
//         case 'day':
//             date[dateSetterName(isUTC)](date[dateGetterName(isUTC)]() + step);
//             break;
//         case 'hour':
//             date[hoursSetterName(isUTC)](date[hoursGetterName(isUTC)]() + step);
//             break;
//         case 'minute':
//             date[minutesSetterName(isUTC)](date[minutesGetterName(isUTC)]() + step);
//             break;
//         case 'second':
//             date[secondsSetterName(isUTC)](date[secondsGetterName(isUTC)]() + step);
//             break;
//         case 'millisecond':
//             date[millisecondsSetterName(isUTC)](date[millisecondsGetterName(isUTC)]() + step);
//             break;
//     }
//     return date.getTime();
// }
// const DATE_INTERVALS = [[8, 7.5], [4, 3.5], [2, 1.5]];
// const MONTH_INTERVALS = [[6, 5.5], [3, 2.5], [2, 1.5]];
// const MINUTES_SECONDS_INTERVALS = [[30, 30], [20, 20], [15, 15], [10, 10], [5, 5], [2, 2]];
function $37f28ea368cd29a8$var$getDateInterval(approxInterval, daysInMonth) {
    approxInterval /= (0, $c5a9021cf573c334$export$a97a1358cbb650ab);
    return approxInterval > 16 ? 16 : approxInterval > 7.5 ? 7 // TODO week 7 or day 8?
     : approxInterval > 3.5 ? 4 : approxInterval > 1.5 ? 2 : 1;
}
function $37f28ea368cd29a8$var$getMonthInterval(approxInterval) {
    var APPROX_ONE_MONTH = 30 * (0, $c5a9021cf573c334$export$a97a1358cbb650ab);
    approxInterval /= APPROX_ONE_MONTH;
    return approxInterval > 6 ? 6 : approxInterval > 3 ? 3 : approxInterval > 2 ? 2 : 1;
}
function $37f28ea368cd29a8$var$getHourInterval(approxInterval) {
    approxInterval /= (0, $c5a9021cf573c334$export$82541edf19e5e3b0);
    return approxInterval > 12 ? 12 : approxInterval > 6 ? 6 : approxInterval > 3.5 ? 4 : approxInterval > 2 ? 2 : 1;
}
function $37f28ea368cd29a8$var$getMinutesAndSecondsInterval(approxInterval, isMinutes) {
    approxInterval /= isMinutes ? (0, $c5a9021cf573c334$export$35acaebf644db34e) : (0, $c5a9021cf573c334$export$32c0454ceff7f92d);
    return approxInterval > 30 ? 30 : approxInterval > 20 ? 20 : approxInterval > 15 ? 15 : approxInterval > 10 ? 10 : approxInterval > 5 ? 5 : approxInterval > 2 ? 2 : 1;
}
function $37f28ea368cd29a8$var$getMillisecondsInterval(approxInterval) {
    return $13e6a1a716300dd4$export$7a695fe44258210b(approxInterval, true);
}
function $37f28ea368cd29a8$var$getFirstTimestampOfUnit(date, unitName, isUTC) {
    var outDate = new Date(date);
    switch((0, $c5a9021cf573c334$export$1da4b91a25d7e1c8)(unitName)){
        case "year":
        case "month":
            outDate[(0, $c5a9021cf573c334$export$233f59998ed71c09)(isUTC)](0);
        case "day":
            outDate[(0, $c5a9021cf573c334$export$82fd379a67f37fa0)(isUTC)](1);
        case "hour":
            outDate[(0, $c5a9021cf573c334$export$b6f943e8d23c15bb)(isUTC)](0);
        case "minute":
            outDate[(0, $c5a9021cf573c334$export$50303078793fc7d)(isUTC)](0);
        case "second":
            outDate[(0, $c5a9021cf573c334$export$a4a908acda9c3118)(isUTC)](0);
            outDate[(0, $c5a9021cf573c334$export$c047afab75f6d84)(isUTC)](0);
    }
    return outDate.getTime();
}
function $37f28ea368cd29a8$var$getIntervalTicks(bottomUnitName, approxInterval, isUTC, extent) {
    var safeLimit = 10000;
    var unitNames = (0, $c5a9021cf573c334$export$833c398a55654bb7);
    var iter = 0;
    function addTicksInSpan(interval, minTimestamp, maxTimestamp, getMethodName, setMethodName, isDate, out) {
        var date = new Date(minTimestamp);
        var dateTime = minTimestamp;
        var d = date[getMethodName]();
        // if (isDate) {
        //     d -= 1; // Starts with 0;   PENDING
        // }
        while(dateTime < maxTimestamp && dateTime <= extent[1]){
            out.push({
                value: dateTime
            });
            d += interval;
            date[setMethodName](d);
            dateTime = date.getTime();
        }
        // This extra tick is for calcuating ticks of next level. Will not been added to the final result
        out.push({
            value: dateTime,
            notAdd: true
        });
    }
    function addLevelTicks(unitName, lastLevelTicks, levelTicks) {
        var newAddedTicks = [];
        var isFirstLevel = !lastLevelTicks.length;
        if ($37f28ea368cd29a8$var$isUnitValueSame((0, $c5a9021cf573c334$export$1da4b91a25d7e1c8)(unitName), extent[0], extent[1], isUTC)) return;
        if (isFirstLevel) lastLevelTicks = [
            {
                // TODO Optimize. Not include so may ticks.
                value: $37f28ea368cd29a8$var$getFirstTimestampOfUnit(new Date(extent[0]), unitName, isUTC)
            },
            {
                value: extent[1]
            }
        ];
        for(var i = 0; i < lastLevelTicks.length - 1; i++){
            var startTick = lastLevelTicks[i].value;
            var endTick = lastLevelTicks[i + 1].value;
            if (startTick === endTick) continue;
            var interval = void 0;
            var getterName = void 0;
            var setterName = void 0;
            var isDate = false;
            switch(unitName){
                case "year":
                    interval = Math.max(1, Math.round(approxInterval / (0, $c5a9021cf573c334$export$a97a1358cbb650ab) / 365));
                    getterName = (0, $c5a9021cf573c334$export$8d046fefed9a548e)(isUTC);
                    setterName = (0, $c5a9021cf573c334$export$43fbeac90913b151)(isUTC);
                    break;
                case "half-year":
                case "quarter":
                case "month":
                    interval = $37f28ea368cd29a8$var$getMonthInterval(approxInterval);
                    getterName = (0, $c5a9021cf573c334$export$5c242a801a23eec7)(isUTC);
                    setterName = (0, $c5a9021cf573c334$export$233f59998ed71c09)(isUTC);
                    break;
                case "week":
                case "half-week":
                case "day":
                    interval = $37f28ea368cd29a8$var$getDateInterval(approxInterval, 31); // Use 32 days and let interval been 16
                    getterName = (0, $c5a9021cf573c334$export$4189e6cbc9753260)(isUTC);
                    setterName = (0, $c5a9021cf573c334$export$82fd379a67f37fa0)(isUTC);
                    isDate = true;
                    break;
                case "half-day":
                case "quarter-day":
                case "hour":
                    interval = $37f28ea368cd29a8$var$getHourInterval(approxInterval);
                    getterName = (0, $c5a9021cf573c334$export$8b40b55b3c06cbe2)(isUTC);
                    setterName = (0, $c5a9021cf573c334$export$b6f943e8d23c15bb)(isUTC);
                    break;
                case "minute":
                    interval = $37f28ea368cd29a8$var$getMinutesAndSecondsInterval(approxInterval, true);
                    getterName = (0, $c5a9021cf573c334$export$8807847c5c71eded)(isUTC);
                    setterName = (0, $c5a9021cf573c334$export$50303078793fc7d)(isUTC);
                    break;
                case "second":
                    interval = $37f28ea368cd29a8$var$getMinutesAndSecondsInterval(approxInterval, false);
                    getterName = (0, $c5a9021cf573c334$export$8f49e73e2eebd168)(isUTC);
                    setterName = (0, $c5a9021cf573c334$export$a4a908acda9c3118)(isUTC);
                    break;
                case "millisecond":
                    interval = $37f28ea368cd29a8$var$getMillisecondsInterval(approxInterval);
                    getterName = (0, $c5a9021cf573c334$export$312207a92d041116)(isUTC);
                    setterName = (0, $c5a9021cf573c334$export$c047afab75f6d84)(isUTC);
                    break;
            }
            addTicksInSpan(interval, startTick, endTick, getterName, setterName, isDate, newAddedTicks);
            if (unitName === "year" && levelTicks.length > 1 && i === 0) // Add nearest years to the left extent.
            levelTicks.unshift({
                value: levelTicks[0].value - interval
            });
        }
        for(var i = 0; i < newAddedTicks.length; i++)levelTicks.push(newAddedTicks[i]);
        // newAddedTicks.length && console.log(unitName, newAddedTicks);
        return newAddedTicks;
    }
    var levelsTicks = [];
    var currentLevelTicks = [];
    var tickCount = 0;
    var lastLevelTickCount = 0;
    for(var i = 0; i < unitNames.length && iter++ < safeLimit; ++i){
        var primaryTimeUnit = (0, $c5a9021cf573c334$export$1da4b91a25d7e1c8)(unitNames[i]);
        if (!(0, $c5a9021cf573c334$export$beb5920b69c13da)(unitNames[i])) continue;
        addLevelTicks(unitNames[i], levelsTicks[levelsTicks.length - 1] || [], currentLevelTicks);
        var nextPrimaryTimeUnit = unitNames[i + 1] ? (0, $c5a9021cf573c334$export$1da4b91a25d7e1c8)(unitNames[i + 1]) : null;
        if (primaryTimeUnit !== nextPrimaryTimeUnit) {
            if (currentLevelTicks.length) {
                lastLevelTickCount = tickCount;
                // Remove the duplicate so the tick count can be precisely.
                currentLevelTicks.sort(function(a, b) {
                    return a.value - b.value;
                });
                var levelTicksRemoveDuplicated = [];
                for(var i_1 = 0; i_1 < currentLevelTicks.length; ++i_1){
                    var tickValue = currentLevelTicks[i_1].value;
                    if (i_1 === 0 || currentLevelTicks[i_1 - 1].value !== tickValue) {
                        levelTicksRemoveDuplicated.push(currentLevelTicks[i_1]);
                        if (tickValue >= extent[0] && tickValue <= extent[1]) tickCount++;
                    }
                }
                var targetTickNum = (extent[1] - extent[0]) / approxInterval;
                // Added too much in this level and not too less in last level
                if (tickCount > targetTickNum * 1.5 && lastLevelTickCount > targetTickNum / 1.5) break;
                // Only treat primary time unit as one level.
                levelsTicks.push(levelTicksRemoveDuplicated);
                if (tickCount > targetTickNum || bottomUnitName === unitNames[i]) break;
            }
            // Reset if next unitName is primary
            currentLevelTicks = [];
        }
    }
    if (iter >= safeLimit) (0, $4796c55e8b767685$export$c106dd0671a0fc2d)("Exceed safe limit.");
    var levelsTicksInExtent = (0, $e44eb14c4271d0f9$export$3dea766d36a8935f)((0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(levelsTicks, function(levelTicks) {
        return (0, $e44eb14c4271d0f9$export$3dea766d36a8935f)(levelTicks, function(tick) {
            return tick.value >= extent[0] && tick.value <= extent[1] && !tick.notAdd;
        });
    }), function(levelTicks) {
        return levelTicks.length > 0;
    });
    var ticks = [];
    var maxLevel = levelsTicksInExtent.length - 1;
    for(var i = 0; i < levelsTicksInExtent.length; ++i){
        var levelTicks = levelsTicksInExtent[i];
        for(var k = 0; k < levelTicks.length; ++k)ticks.push({
            value: levelTicks[k].value,
            level: maxLevel - i
        });
    }
    ticks.sort(function(a, b) {
        return a.value - b.value;
    });
    // Remove duplicates
    var result = [];
    for(var i = 0; i < ticks.length; ++i)if (i === 0 || ticks[i].value !== ticks[i - 1].value) result.push(ticks[i]);
    return result;
}
(0, $e214388b97be4ec9$export$2e2bcd8739ae039).registerClass($37f28ea368cd29a8$var$TimeScale);
var $37f28ea368cd29a8$export$2e2bcd8739ae039 = $37f28ea368cd29a8$var$TimeScale;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 





var $d5fd47a59128ef9a$var$scaleProto = (0, $e214388b97be4ec9$export$2e2bcd8739ae039).prototype;
// FIXME:TS refactor: not good to call it directly with `this`?
var $d5fd47a59128ef9a$var$intervalScaleProto = (0, $54db450da73fb995$export$2e2bcd8739ae039).prototype;
var $d5fd47a59128ef9a$var$roundingErrorFix = $13e6a1a716300dd4$export$2077e0241d6afd3c;
var $d5fd47a59128ef9a$var$mathFloor = Math.floor;
var $d5fd47a59128ef9a$var$mathCeil = Math.ceil;
var $d5fd47a59128ef9a$var$mathPow = Math.pow;
var $d5fd47a59128ef9a$var$mathLog = Math.log;
var $d5fd47a59128ef9a$var$LogScale = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(LogScale, _super);
    function LogScale() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "log";
        _this.base = 10;
        _this._originalScale = new (0, $54db450da73fb995$export$2e2bcd8739ae039)();
        // FIXME:TS actually used by `IntervalScale`
        _this._interval = 0;
        return _this;
    }
    /**
   * @param Whether expand the ticks to niced extent.
   */ LogScale.prototype.getTicks = function(expandToNicedExtent) {
        var originalScale = this._originalScale;
        var extent = this._extent;
        var originalExtent = originalScale.getExtent();
        var ticks = $d5fd47a59128ef9a$var$intervalScaleProto.getTicks.call(this, expandToNicedExtent);
        return $e44eb14c4271d0f9$export$871de8747c9eaa88(ticks, function(tick) {
            var val = tick.value;
            var powVal = $13e6a1a716300dd4$export$2077e0241d6afd3c($d5fd47a59128ef9a$var$mathPow(this.base, val));
            // Fix #4158
            powVal = val === extent[0] && this._fixMin ? $d5fd47a59128ef9a$var$fixRoundingError(powVal, originalExtent[0]) : powVal;
            powVal = val === extent[1] && this._fixMax ? $d5fd47a59128ef9a$var$fixRoundingError(powVal, originalExtent[1]) : powVal;
            return {
                value: powVal
            };
        }, this);
    };
    LogScale.prototype.setExtent = function(start, end) {
        var base = $d5fd47a59128ef9a$var$mathLog(this.base);
        // log(-Infinity) is NaN, so safe guard here
        start = $d5fd47a59128ef9a$var$mathLog(Math.max(0, start)) / base;
        end = $d5fd47a59128ef9a$var$mathLog(Math.max(0, end)) / base;
        $d5fd47a59128ef9a$var$intervalScaleProto.setExtent.call(this, start, end);
    };
    /**
   * @return {number} end
   */ LogScale.prototype.getExtent = function() {
        var base = this.base;
        var extent = $d5fd47a59128ef9a$var$scaleProto.getExtent.call(this);
        extent[0] = $d5fd47a59128ef9a$var$mathPow(base, extent[0]);
        extent[1] = $d5fd47a59128ef9a$var$mathPow(base, extent[1]);
        // Fix #4158
        var originalScale = this._originalScale;
        var originalExtent = originalScale.getExtent();
        this._fixMin && (extent[0] = $d5fd47a59128ef9a$var$fixRoundingError(extent[0], originalExtent[0]));
        this._fixMax && (extent[1] = $d5fd47a59128ef9a$var$fixRoundingError(extent[1], originalExtent[1]));
        return extent;
    };
    LogScale.prototype.unionExtent = function(extent) {
        this._originalScale.unionExtent(extent);
        var base = this.base;
        extent[0] = $d5fd47a59128ef9a$var$mathLog(extent[0]) / $d5fd47a59128ef9a$var$mathLog(base);
        extent[1] = $d5fd47a59128ef9a$var$mathLog(extent[1]) / $d5fd47a59128ef9a$var$mathLog(base);
        $d5fd47a59128ef9a$var$scaleProto.unionExtent.call(this, extent);
    };
    LogScale.prototype.unionExtentFromData = function(data, dim) {
        // TODO
        // filter value that <= 0
        this.unionExtent(data.getApproximateExtent(dim));
    };
    /**
   * Update interval and extent of intervals for nice ticks
   * @param approxTickNum default 10 Given approx tick number
   */ LogScale.prototype.calcNiceTicks = function(approxTickNum) {
        approxTickNum = approxTickNum || 10;
        var extent = this._extent;
        var span = extent[1] - extent[0];
        if (span === Infinity || span <= 0) return;
        var interval = $13e6a1a716300dd4$export$82dd68b83a44b253(span);
        var err = approxTickNum / span * interval;
        // Filter ticks to get closer to the desired count.
        if (err <= 0.5) interval *= 10;
        // Interval should be integer
        while(!isNaN(interval) && Math.abs(interval) < 1 && Math.abs(interval) > 0)interval *= 10;
        var niceExtent = [
            $13e6a1a716300dd4$export$2077e0241d6afd3c($d5fd47a59128ef9a$var$mathCeil(extent[0] / interval) * interval),
            $13e6a1a716300dd4$export$2077e0241d6afd3c($d5fd47a59128ef9a$var$mathFloor(extent[1] / interval) * interval)
        ];
        this._interval = interval;
        this._niceExtent = niceExtent;
    };
    LogScale.prototype.calcNiceExtent = function(opt) {
        $d5fd47a59128ef9a$var$intervalScaleProto.calcNiceExtent.call(this, opt);
        this._fixMin = opt.fixMin;
        this._fixMax = opt.fixMax;
    };
    LogScale.prototype.parse = function(val) {
        return val;
    };
    LogScale.prototype.contain = function(val) {
        val = $d5fd47a59128ef9a$var$mathLog(val) / $d5fd47a59128ef9a$var$mathLog(this.base);
        return $37de80c384edf4d3$export$8893e2b90ba10d92(val, this._extent);
    };
    LogScale.prototype.normalize = function(val) {
        val = $d5fd47a59128ef9a$var$mathLog(val) / $d5fd47a59128ef9a$var$mathLog(this.base);
        return $37de80c384edf4d3$export$a3295358bff77e(val, this._extent);
    };
    LogScale.prototype.scale = function(val) {
        val = $37de80c384edf4d3$export$dcdf75081b88279d(val, this._extent);
        return $d5fd47a59128ef9a$var$mathPow(this.base, val);
    };
    LogScale.type = "log";
    return LogScale;
}((0, $e214388b97be4ec9$export$2e2bcd8739ae039));
var $d5fd47a59128ef9a$var$proto = $d5fd47a59128ef9a$var$LogScale.prototype;
$d5fd47a59128ef9a$var$proto.getMinorTicks = $d5fd47a59128ef9a$var$intervalScaleProto.getMinorTicks;
$d5fd47a59128ef9a$var$proto.getLabel = $d5fd47a59128ef9a$var$intervalScaleProto.getLabel;
function $d5fd47a59128ef9a$var$fixRoundingError(val, originalVal) {
    return $d5fd47a59128ef9a$var$roundingErrorFix(val, $13e6a1a716300dd4$export$e0c74b50bbd10f68(originalVal));
}
(0, $e214388b97be4ec9$export$2e2bcd8739ae039).registerClass($d5fd47a59128ef9a$var$LogScale);
var $d5fd47a59128ef9a$export$2e2bcd8739ae039 = $d5fd47a59128ef9a$var$LogScale;



/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

var $e43c851a9774a8ec$export$c35454f678e99c82 = /** @class */ function() {
    function ScaleRawExtentInfo(scale, model, // Usually: data extent from all series on this axis.
    originalExtent) {
        this._prepareParams(scale, model, originalExtent);
    }
    /**
   * Parameters depending on outside (like model, user callback)
   * are prepared and fixed here.
   */ ScaleRawExtentInfo.prototype._prepareParams = function(scale, model, // Usually: data extent from all series on this axis.
    dataExtent) {
        if (dataExtent[1] < dataExtent[0]) dataExtent = [
            NaN,
            NaN
        ];
        this._dataMin = dataExtent[0];
        this._dataMax = dataExtent[1];
        var isOrdinal = this._isOrdinal = scale.type === "ordinal";
        this._needCrossZero = scale.type === "interval" && model.getNeedCrossZero && model.getNeedCrossZero();
        var modelMinRaw = this._modelMinRaw = model.get("min", true);
        if ((0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(modelMinRaw)) // This callback always provides users the full data extent (before data is filtered).
        this._modelMinNum = $e43c851a9774a8ec$export$d02f2e65dfc3c2b(scale, modelMinRaw({
            min: dataExtent[0],
            max: dataExtent[1]
        }));
        else if (modelMinRaw !== "dataMin") this._modelMinNum = $e43c851a9774a8ec$export$d02f2e65dfc3c2b(scale, modelMinRaw);
        var modelMaxRaw = this._modelMaxRaw = model.get("max", true);
        if ((0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(modelMaxRaw)) // This callback always provides users the full data extent (before data is filtered).
        this._modelMaxNum = $e43c851a9774a8ec$export$d02f2e65dfc3c2b(scale, modelMaxRaw({
            min: dataExtent[0],
            max: dataExtent[1]
        }));
        else if (modelMaxRaw !== "dataMax") this._modelMaxNum = $e43c851a9774a8ec$export$d02f2e65dfc3c2b(scale, modelMaxRaw);
        if (isOrdinal) // FIXME: there is a flaw here: if there is no "block" data processor like `dataZoom`,
        // and progressive rendering is using, here the category result might just only contain
        // the processed chunk rather than the entire result.
        this._axisDataLen = model.getCategories().length;
        else {
            var boundaryGap = model.get("boundaryGap");
            var boundaryGapArr = (0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(boundaryGap) ? boundaryGap : [
                boundaryGap || 0,
                boundaryGap || 0
            ];
            if (typeof boundaryGapArr[0] === "boolean" || typeof boundaryGapArr[1] === "boolean") {
                console.warn('Boolean type for boundaryGap is only allowed for ordinal axis. Please use string in percentage instead, e.g., "20%". Currently, boundaryGap is set to be 0.');
                this._boundaryGapInner = [
                    0,
                    0
                ];
            } else this._boundaryGapInner = [
                (0, $1a2563e7d7856dd8$export$e8514cb5a5e2b40f)(boundaryGapArr[0], 1),
                (0, $1a2563e7d7856dd8$export$e8514cb5a5e2b40f)(boundaryGapArr[1], 1)
            ];
        }
    };
    /**
   * Calculate extent by prepared parameters.
   * This method has no external dependency and can be called duplicatedly,
   * getting the same result.
   * If parameters changed, should call this method to recalcuate.
   */ ScaleRawExtentInfo.prototype.calculate = function() {
        // Notice: When min/max is not set (that is, when there are null/undefined,
        // which is the most common case), these cases should be ensured:
        // (1) For 'ordinal', show all axis.data.
        // (2) For others:
        //      + `boundaryGap` is applied (if min/max set, boundaryGap is
        //      disabled).
        //      + If `needCrossZero`, min/max should be zero, otherwise, min/max should
        //      be the result that originalExtent enlarged by boundaryGap.
        // (3) If no data, it should be ensured that `scale.setBlank` is set.
        var isOrdinal = this._isOrdinal;
        var dataMin = this._dataMin;
        var dataMax = this._dataMax;
        var axisDataLen = this._axisDataLen;
        var boundaryGapInner = this._boundaryGapInner;
        var span = !isOrdinal ? dataMax - dataMin || Math.abs(dataMin) : null;
        // Currently if a `'value'` axis model min is specified as 'dataMin'/'dataMax',
        // `boundaryGap` will not be used. It's the different from specifying as `null`/`undefined`.
        var min = this._modelMinRaw === "dataMin" ? dataMin : this._modelMinNum;
        var max = this._modelMaxRaw === "dataMax" ? dataMax : this._modelMaxNum;
        // If `_modelMinNum`/`_modelMaxNum` is `null`/`undefined`, should not be fixed.
        var minFixed = min != null;
        var maxFixed = max != null;
        if (min == null) min = isOrdinal ? axisDataLen ? 0 : NaN : dataMin - boundaryGapInner[0] * span;
        if (max == null) max = isOrdinal ? axisDataLen ? axisDataLen - 1 : NaN : dataMax + boundaryGapInner[1] * span;
        (min == null || !isFinite(min)) && (min = NaN);
        (max == null || !isFinite(max)) && (max = NaN);
        var isBlank = (0, $e44eb14c4271d0f9$export$7d667b9a0c48c975)(min) || (0, $e44eb14c4271d0f9$export$7d667b9a0c48c975)(max) || isOrdinal && !axisDataLen;
        // If data extent modified, need to recalculated to ensure cross zero.
        if (this._needCrossZero) {
            // Axis is over zero and min is not set
            if (min > 0 && max > 0 && !minFixed) min = 0;
            // Axis is under zero and max is not set
            if (min < 0 && max < 0 && !maxFixed) max = 0;
        // PENDING:
        // When `needCrossZero` and all data is positive/negative, should it be ensured
        // that the results processed by boundaryGap are positive/negative?
        // If so, here `minFixed`/`maxFixed` need to be set.
        }
        var determinedMin = this._determinedMin;
        var determinedMax = this._determinedMax;
        if (determinedMin != null) {
            min = determinedMin;
            minFixed = true;
        }
        if (determinedMax != null) {
            max = determinedMax;
            maxFixed = true;
        }
        // Ensure min/max be finite number or NaN here. (not to be null/undefined)
        // `NaN` means min/max axis is blank.
        return {
            min: min,
            max: max,
            minFixed: minFixed,
            maxFixed: maxFixed,
            isBlank: isBlank
        };
    };
    ScaleRawExtentInfo.prototype.modifyDataMinMax = function(minMaxName, val) {
        (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(!this.frozen);
        this[$e43c851a9774a8ec$var$DATA_MIN_MAX_ATTR[minMaxName]] = val;
    };
    ScaleRawExtentInfo.prototype.setDeterminedMinMax = function(minMaxName, val) {
        var attr = $e43c851a9774a8ec$var$DETERMINED_MIN_MAX_ATTR[minMaxName];
        (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(!this.frozen && this[attr] == null);
        this[attr] = val;
    };
    ScaleRawExtentInfo.prototype.freeze = function() {
        // @ts-ignore
        this.frozen = true;
    };
    return ScaleRawExtentInfo;
}();
var $e43c851a9774a8ec$var$DETERMINED_MIN_MAX_ATTR = {
    min: "_determinedMin",
    max: "_determinedMax"
};
var $e43c851a9774a8ec$var$DATA_MIN_MAX_ATTR = {
    min: "_dataMin",
    max: "_dataMax"
};
function $e43c851a9774a8ec$export$5c3dbcbeb9ce7f5a(scale, model, // Usually: data extent from all series on this axis.
originalExtent) {
    // Do not permit to recreate.
    var rawExtentInfo = scale.rawExtentInfo;
    if (rawExtentInfo) return rawExtentInfo;
    rawExtentInfo = new $e43c851a9774a8ec$export$c35454f678e99c82(scale, model, originalExtent);
    // @ts-ignore
    scale.rawExtentInfo = rawExtentInfo;
    return rawExtentInfo;
}
function $e43c851a9774a8ec$export$d02f2e65dfc3c2b(scale, minMax) {
    return minMax == null ? null : (0, $e44eb14c4271d0f9$export$7d667b9a0c48c975)(minMax) ? NaN : scale.parse(minMax);
}


function $de26deaeb9c20c8b$export$9c0ba8df7eb7b328(scale, model) {
    var scaleType = scale.type;
    var rawExtentResult = (0, $e43c851a9774a8ec$export$5c3dbcbeb9ce7f5a)(scale, model, scale.getExtent()).calculate();
    scale.setBlank(rawExtentResult.isBlank);
    var min = rawExtentResult.min;
    var max = rawExtentResult.max;
    // If bars are placed on a base axis of type time or interval account for axis boundary overflow and current axis
    // is base axis
    // FIXME
    // (1) Consider support value axis, where below zero and axis `onZero` should be handled properly.
    // (2) Refactor the logic with `barGrid`. Is it not need to `makeBarWidthAndOffsetInfo` twice with different extent?
    //     Should not depend on series type `bar`?
    // (3) Fix that might overlap when using dataZoom.
    // (4) Consider other chart types using `barGrid`?
    // See #6728, #4862, `test/bar-overflow-time-plot.html`
    var ecModel = model.ecModel;
    if (ecModel && scaleType === "time" /* || scaleType === 'interval' */ ) {
        var barSeriesModels = (0, $41133a9d01fee524$export$efbd0c3f5ab0d5e4)("bar", ecModel);
        var isBaseAxisAndHasBarSeries_1 = false;
        $e44eb14c4271d0f9$export$79b2f7037acddd43(barSeriesModels, function(seriesModel) {
            isBaseAxisAndHasBarSeries_1 = isBaseAxisAndHasBarSeries_1 || seriesModel.getBaseAxis() === model.axis;
        });
        if (isBaseAxisAndHasBarSeries_1) {
            // Calculate placement of bars on axis. TODO should be decoupled
            // with barLayout
            var barWidthAndOffset = (0, $41133a9d01fee524$export$20769dafc84e0299)(barSeriesModels);
            // Adjust axis min and max to account for overflow
            var adjustedScale = $de26deaeb9c20c8b$var$adjustScaleForOverflow(min, max, model, barWidthAndOffset);
            min = adjustedScale.min;
            max = adjustedScale.max;
        }
    }
    return {
        extent: [
            min,
            max
        ],
        // "fix" means "fixed", the value should not be
        // changed in the subsequent steps.
        fixMin: rawExtentResult.minFixed,
        fixMax: rawExtentResult.maxFixed
    };
}
function $de26deaeb9c20c8b$var$adjustScaleForOverflow(min, max, model, // Only support cartesian coord yet.
barWidthAndOffset) {
    // Get Axis Length
    var axisExtent = model.axis.getExtent();
    var axisLength = axisExtent[1] - axisExtent[0];
    // Get bars on current base axis and calculate min and max overflow
    var barsOnCurrentAxis = (0, $41133a9d01fee524$export$35920bb6556da1c2)(barWidthAndOffset, model.axis);
    if (barsOnCurrentAxis === undefined) return {
        min: min,
        max: max
    };
    var minOverflow = Infinity;
    $e44eb14c4271d0f9$export$79b2f7037acddd43(barsOnCurrentAxis, function(item) {
        minOverflow = Math.min(item.offset, minOverflow);
    });
    var maxOverflow = -Infinity;
    $e44eb14c4271d0f9$export$79b2f7037acddd43(barsOnCurrentAxis, function(item) {
        maxOverflow = Math.max(item.offset + item.width, maxOverflow);
    });
    minOverflow = Math.abs(minOverflow);
    maxOverflow = Math.abs(maxOverflow);
    var totalOverFlow = minOverflow + maxOverflow;
    // Calculate required buffer based on old range and overflow
    var oldRange = max - min;
    var oldRangePercentOfNew = 1 - (minOverflow + maxOverflow) / axisLength;
    var overflowBuffer = oldRange / oldRangePercentOfNew - oldRange;
    max += overflowBuffer * (maxOverflow / totalOverFlow);
    min -= overflowBuffer * (minOverflow / totalOverFlow);
    return {
        min: min,
        max: max
    };
}
function $de26deaeb9c20c8b$export$51f3e70a54405d5a(scale, inModel) {
    var model = inModel;
    var extentInfo = $de26deaeb9c20c8b$export$9c0ba8df7eb7b328(scale, model);
    var extent = extentInfo.extent;
    var splitNumber = model.get("splitNumber");
    if (scale instanceof (0, $d5fd47a59128ef9a$export$2e2bcd8739ae039)) scale.base = model.get("logBase");
    var scaleType = scale.type;
    var interval = model.get("interval");
    var isIntervalOrTime = scaleType === "interval" || scaleType === "time";
    scale.setExtent(extent[0], extent[1]);
    scale.calcNiceExtent({
        splitNumber: splitNumber,
        fixMin: extentInfo.fixMin,
        fixMax: extentInfo.fixMax,
        minInterval: isIntervalOrTime ? model.get("minInterval") : null,
        maxInterval: isIntervalOrTime ? model.get("maxInterval") : null
    });
    // If some one specified the min, max. And the default calculated interval
    // is not good enough. He can specify the interval. It is often appeared
    // in angle axis with angle 0 - 360. Interval calculated in interval scale is hard
    // to be 60.
    // FIXME
    if (interval != null) scale.setInterval && scale.setInterval(interval);
}
function $de26deaeb9c20c8b$export$8941c4cacdc8f5a5(model, axisType) {
    axisType = axisType || model.get("type");
    if (axisType) switch(axisType){
        // Buildin scale
        case "category":
            return new (0, $c31e1322fcf2cffd$export$2e2bcd8739ae039)({
                ordinalMeta: model.getOrdinalMeta ? model.getOrdinalMeta() : model.getCategories(),
                extent: [
                    Infinity,
                    -Infinity
                ]
            });
        case "time":
            return new (0, $37f28ea368cd29a8$export$2e2bcd8739ae039)({
                locale: model.ecModel.getLocaleModel(),
                useUTC: model.ecModel.get("useUTC")
            });
        default:
            // case 'value'/'interval', 'log', or others.
            return new ((0, $e214388b97be4ec9$export$2e2bcd8739ae039).getClass(axisType) || (0, $54db450da73fb995$export$2e2bcd8739ae039))();
    }
}
function $de26deaeb9c20c8b$export$3eac36a69f37d52(axis) {
    var dataExtent = axis.scale.getExtent();
    var min = dataExtent[0];
    var max = dataExtent[1];
    return !(min > 0 && max > 0 || min < 0 && max < 0);
}
function $de26deaeb9c20c8b$export$742f19a75415b2ae(axis) {
    var labelFormatter = axis.getLabelModel().get("formatter");
    var categoryTickStart = axis.type === "category" ? axis.scale.getExtent()[0] : null;
    if (axis.scale.type === "time") return function(tpl) {
        return function(tick, idx) {
            return axis.scale.getFormattedLabel(tick, idx, tpl);
        };
    }(labelFormatter);
    else if ($e44eb14c4271d0f9$export$844ec244b1367d54(labelFormatter)) return function(tpl) {
        return function(tick) {
            // For category axis, get raw value; for numeric axis,
            // get formatted label like '1,333,444'.
            var label = axis.scale.getLabel(tick);
            var text = tpl.replace("{value}", label != null ? label : "");
            return text;
        };
    }(labelFormatter);
    else if ($e44eb14c4271d0f9$export$f6e2535fb5126e54(labelFormatter)) return function(cb) {
        return function(tick, idx) {
            // The original intention of `idx` is "the index of the tick in all ticks".
            // But the previous implementation of category axis do not consider the
            // `axisLabel.interval`, which cause that, for example, the `interval` is
            // `1`, then the ticks "name5", "name7", "name9" are displayed, where the
            // corresponding `idx` are `0`, `2`, `4`, but not `0`, `1`, `2`. So we keep
            // the definition here for back compatibility.
            if (categoryTickStart != null) idx = tick.value - categoryTickStart;
            return cb($de26deaeb9c20c8b$export$a5a32f324c1fa457(axis, tick), idx, tick.level != null ? {
                level: tick.level
            } : null);
        };
    }(labelFormatter);
    else return function(tick) {
        return axis.scale.getLabel(tick);
    };
}
function $de26deaeb9c20c8b$export$a5a32f324c1fa457(axis, tick) {
    // In category axis with data zoom, tick is not the original
    // index of axis.data. So tick should not be exposed to user
    // in category axis.
    return axis.type === "category" ? axis.scale.getLabel(tick) : tick.value;
}
function $de26deaeb9c20c8b$export$fef1c7f0af0b48d(axis) {
    var axisModel = axis.model;
    var scale = axis.scale;
    if (!axisModel.get([
        "axisLabel",
        "show"
    ]) || scale.isBlank()) return;
    var realNumberScaleTicks;
    var tickCount;
    var categoryScaleExtent = scale.getExtent();
    // Optimize for large category data, avoid call `getTicks()`.
    if (scale instanceof (0, $c31e1322fcf2cffd$export$2e2bcd8739ae039)) tickCount = scale.count();
    else {
        realNumberScaleTicks = scale.getTicks();
        tickCount = realNumberScaleTicks.length;
    }
    var axisLabelModel = axis.getLabelModel();
    var labelFormatter = $de26deaeb9c20c8b$export$742f19a75415b2ae(axis);
    var rect;
    var step = 1;
    // Simple optimization for large amount of labels
    if (tickCount > 40) step = Math.ceil(tickCount / 40);
    for(var i = 0; i < tickCount; i += step){
        var tick = realNumberScaleTicks ? realNumberScaleTicks[i] : {
            value: categoryScaleExtent[0] + i
        };
        var label = labelFormatter(tick, i);
        var unrotatedSingleRect = axisLabelModel.getTextRect(label);
        var singleRect = $de26deaeb9c20c8b$var$rotateTextRect(unrotatedSingleRect, axisLabelModel.get("rotate") || 0);
        rect ? rect.union(singleRect) : rect = singleRect;
    }
    return rect;
}
function $de26deaeb9c20c8b$var$rotateTextRect(textRect, rotate) {
    var rotateRadians = rotate * Math.PI / 180;
    var beforeWidth = textRect.width;
    var beforeHeight = textRect.height;
    var afterWidth = beforeWidth * Math.abs(Math.cos(rotateRadians)) + Math.abs(beforeHeight * Math.sin(rotateRadians));
    var afterHeight = beforeWidth * Math.abs(Math.sin(rotateRadians)) + Math.abs(beforeHeight * Math.cos(rotateRadians));
    var rotatedRect = new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)(textRect.x, textRect.y, afterWidth, afterHeight);
    return rotatedRect;
}
function $de26deaeb9c20c8b$export$6d0bc2429155c088(model) {
    var interval = model.get("interval");
    return interval == null ? "auto" : interval;
}
function $de26deaeb9c20c8b$export$c2911c025243d6a6(axis) {
    return axis.type === "category" && $de26deaeb9c20c8b$export$6d0bc2429155c088(axis.getLabelModel()) === 0;
}
function $de26deaeb9c20c8b$export$e4cf30b1e74cd69d(data, axisDim) {
    // Remove duplicated dat dimensions caused by `getStackedDimension`.
    var dataDimMap = {};
    // Currently `mapDimensionsAll` will contain stack result dimension ('__\0ecstackresult').
    // PENDING: is it reasonable? Do we need to remove the original dim from "coord dim" since
    // there has been stacked result dim?
    $e44eb14c4271d0f9$export$79b2f7037acddd43(data.mapDimensionsAll(axisDim), function(dataDim) {
        // For example, the extent of the original dimension
        // is [0.1, 0.5], the extent of the `stackResultDimension`
        // is [7, 9], the final extent should NOT include [0.1, 0.5],
        // because there is no graphic corresponding to [0.1, 0.5].
        // See the case in `test/area-stack.html` `main1`, where area line
        // stack needs `yAxis` not start from 0.
        dataDimMap[(0, $6ff1444fd0e27b15$export$909db2be4938fbdf)(data, dataDim)] = true;
    });
    return $e44eb14c4271d0f9$export$ed97f33186d4b816(dataDimMap);
}
function $de26deaeb9c20c8b$export$635fe7f20d0f4c70(dataExtent, data, axisDim) {
    if (data) $e44eb14c4271d0f9$export$79b2f7037acddd43($de26deaeb9c20c8b$export$e4cf30b1e74cd69d(data, axisDim), function(dim) {
        var seriesExtent = data.getApproximateExtent(dim);
        seriesExtent[0] < dataExtent[0] && (dataExtent[0] = seriesExtent[0]);
        seriesExtent[1] > dataExtent[1] && (dataExtent[1] = seriesExtent[1]);
    });
}


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
var $f0cae83c6a65259b$var$Cartesian = /** @class */ function() {
    function Cartesian(name) {
        this.type = "cartesian";
        this._dimList = [];
        this._axes = {};
        this.name = name || "";
    }
    Cartesian.prototype.getAxis = function(dim) {
        return this._axes[dim];
    };
    Cartesian.prototype.getAxes = function() {
        return $e44eb14c4271d0f9$export$871de8747c9eaa88(this._dimList, function(dim) {
            return this._axes[dim];
        }, this);
    };
    Cartesian.prototype.getAxesByScale = function(scaleType) {
        scaleType = scaleType.toLowerCase();
        return $e44eb14c4271d0f9$export$3dea766d36a8935f(this.getAxes(), function(axis) {
            return axis.scale.type === scaleType;
        });
    };
    Cartesian.prototype.addAxis = function(axis) {
        var dim = axis.dim;
        this._axes[dim] = axis;
        this._dimList.push(dim);
    };
    return Cartesian;
}();
var $f0cae83c6a65259b$export$2e2bcd8739ae039 = $f0cae83c6a65259b$var$Cartesian;




var $7e2c5f86f325e8ba$export$988a008d2b9120f4 = [
    "x",
    "y"
];
function $7e2c5f86f325e8ba$var$canCalculateAffineTransform(scale) {
    return scale.type === "interval" || scale.type === "time";
}
var $7e2c5f86f325e8ba$var$Cartesian2D = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(Cartesian2D, _super);
    function Cartesian2D() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "cartesian2d";
        _this.dimensions = $7e2c5f86f325e8ba$export$988a008d2b9120f4;
        return _this;
    }
    /**
   * Calculate an affine transform matrix if two axes are time or value.
   * It's mainly for accelartion on the large time series data.
   */ Cartesian2D.prototype.calcAffineTransform = function() {
        this._transform = this._invTransform = null;
        var xAxisScale = this.getAxis("x").scale;
        var yAxisScale = this.getAxis("y").scale;
        if (!$7e2c5f86f325e8ba$var$canCalculateAffineTransform(xAxisScale) || !$7e2c5f86f325e8ba$var$canCalculateAffineTransform(yAxisScale)) return;
        var xScaleExtent = xAxisScale.getExtent();
        var yScaleExtent = yAxisScale.getExtent();
        var start = this.dataToPoint([
            xScaleExtent[0],
            yScaleExtent[0]
        ]);
        var end = this.dataToPoint([
            xScaleExtent[1],
            yScaleExtent[1]
        ]);
        var xScaleSpan = xScaleExtent[1] - xScaleExtent[0];
        var yScaleSpan = yScaleExtent[1] - yScaleExtent[0];
        if (!xScaleSpan || !yScaleSpan) return;
        // Accelerate data to point calculation on the special large time series data.
        var scaleX = (end[0] - start[0]) / xScaleSpan;
        var scaleY = (end[1] - start[1]) / yScaleSpan;
        var translateX = start[0] - xScaleExtent[0] * scaleX;
        var translateY = start[1] - yScaleExtent[0] * scaleY;
        var m = this._transform = [
            scaleX,
            0,
            0,
            scaleY,
            translateX,
            translateY
        ];
        this._invTransform = (0, $27fca49e20b3ee21$export$6897c284b6f9f4dc)([], m);
    };
    /**
   * Base axis will be used on stacking.
   */ Cartesian2D.prototype.getBaseAxis = function() {
        return this.getAxesByScale("ordinal")[0] || this.getAxesByScale("time")[0] || this.getAxis("x");
    };
    Cartesian2D.prototype.containPoint = function(point) {
        var axisX = this.getAxis("x");
        var axisY = this.getAxis("y");
        return axisX.contain(axisX.toLocalCoord(point[0])) && axisY.contain(axisY.toLocalCoord(point[1]));
    };
    Cartesian2D.prototype.containData = function(data) {
        return this.getAxis("x").containData(data[0]) && this.getAxis("y").containData(data[1]);
    };
    Cartesian2D.prototype.containZone = function(data1, data2) {
        var zoneDiag1 = this.dataToPoint(data1);
        var zoneDiag2 = this.dataToPoint(data2);
        var area = this.getArea();
        var zone = new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)(zoneDiag1[0], zoneDiag1[1], zoneDiag2[0] - zoneDiag1[0], zoneDiag2[1] - zoneDiag1[1]);
        return area.intersect(zone);
    };
    Cartesian2D.prototype.dataToPoint = function(data, clamp, out) {
        out = out || [];
        var xVal = data[0];
        var yVal = data[1];
        // Fast path
        if (this._transform && xVal != null && isFinite(xVal) && yVal != null && isFinite(yVal)) return (0, $187eb1bf1a49fd34$export$9f9dcb98c894b623)(out, data, this._transform);
        var xAxis = this.getAxis("x");
        var yAxis = this.getAxis("y");
        out[0] = xAxis.toGlobalCoord(xAxis.dataToCoord(xVal, clamp));
        out[1] = yAxis.toGlobalCoord(yAxis.dataToCoord(yVal, clamp));
        return out;
    };
    Cartesian2D.prototype.clampData = function(data, out) {
        var xScale = this.getAxis("x").scale;
        var yScale = this.getAxis("y").scale;
        var xAxisExtent = xScale.getExtent();
        var yAxisExtent = yScale.getExtent();
        var x = xScale.parse(data[0]);
        var y = yScale.parse(data[1]);
        out = out || [];
        out[0] = Math.min(Math.max(Math.min(xAxisExtent[0], xAxisExtent[1]), x), Math.max(xAxisExtent[0], xAxisExtent[1]));
        out[1] = Math.min(Math.max(Math.min(yAxisExtent[0], yAxisExtent[1]), y), Math.max(yAxisExtent[0], yAxisExtent[1]));
        return out;
    };
    Cartesian2D.prototype.pointToData = function(point, clamp) {
        var out = [];
        if (this._invTransform) return (0, $187eb1bf1a49fd34$export$9f9dcb98c894b623)(out, point, this._invTransform);
        var xAxis = this.getAxis("x");
        var yAxis = this.getAxis("y");
        out[0] = xAxis.coordToData(xAxis.toLocalCoord(point[0]), clamp);
        out[1] = yAxis.coordToData(yAxis.toLocalCoord(point[1]), clamp);
        return out;
    };
    Cartesian2D.prototype.getOtherAxis = function(axis) {
        return this.getAxis(axis.dim === "x" ? "y" : "x");
    };
    /**
   * Get rect area of cartesian.
   * Area will have a contain function to determine if a point is in the coordinate system.
   */ Cartesian2D.prototype.getArea = function(tolerance) {
        tolerance = tolerance || 0;
        var xExtent = this.getAxis("x").getGlobalExtent();
        var yExtent = this.getAxis("y").getGlobalExtent();
        var x = Math.min(xExtent[0], xExtent[1]) - tolerance;
        var y = Math.min(yExtent[0], yExtent[1]) - tolerance;
        var width = Math.max(xExtent[0], xExtent[1]) - x + tolerance;
        var height = Math.max(yExtent[0], yExtent[1]) - y + tolerance;
        return new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)(x, y, width, height);
    };
    return Cartesian2D;
}((0, $f0cae83c6a65259b$export$2e2bcd8739ae039));
var $7e2c5f86f325e8ba$export$2e2bcd8739ae039 = $7e2c5f86f325e8ba$var$Cartesian2D;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 



var $00c717733071d681$var$inner = (0, $8917c02fd8256c67$export$64df9f8d92ae083f)();
function $00c717733071d681$export$10216ebd3e3e485e(axis) {
    // Only ordinal scale support tick interval
    return axis.type === "category" ? $00c717733071d681$var$makeCategoryLabels(axis) : $00c717733071d681$var$makeRealNumberLabels(axis);
}
function $00c717733071d681$export$7cccf6836ae8323c(axis, tickModel) {
    // Only ordinal scale support tick interval
    return axis.type === "category" ? $00c717733071d681$var$makeCategoryTicks(axis, tickModel) : {
        ticks: $e44eb14c4271d0f9$export$871de8747c9eaa88(axis.scale.getTicks(), function(tick) {
            return tick.value;
        })
    };
}
function $00c717733071d681$var$makeCategoryLabels(axis) {
    var labelModel = axis.getLabelModel();
    var result = $00c717733071d681$var$makeCategoryLabelsActually(axis, labelModel);
    return !labelModel.get("show") || axis.scale.isBlank() ? {
        labels: [],
        labelCategoryInterval: result.labelCategoryInterval
    } : result;
}
function $00c717733071d681$var$makeCategoryLabelsActually(axis, labelModel) {
    var labelsCache = $00c717733071d681$var$getListCache(axis, "labels");
    var optionLabelInterval = (0, $de26deaeb9c20c8b$export$6d0bc2429155c088)(labelModel);
    var result = $00c717733071d681$var$listCacheGet(labelsCache, optionLabelInterval);
    if (result) return result;
    var labels;
    var numericLabelInterval;
    if ($e44eb14c4271d0f9$export$f6e2535fb5126e54(optionLabelInterval)) labels = $00c717733071d681$var$makeLabelsByCustomizedCategoryInterval(axis, optionLabelInterval);
    else {
        numericLabelInterval = optionLabelInterval === "auto" ? $00c717733071d681$var$makeAutoCategoryInterval(axis) : optionLabelInterval;
        labels = $00c717733071d681$var$makeLabelsByNumericCategoryInterval(axis, numericLabelInterval);
    }
    // Cache to avoid calling interval function repeatedly.
    return $00c717733071d681$var$listCacheSet(labelsCache, optionLabelInterval, {
        labels: labels,
        labelCategoryInterval: numericLabelInterval
    });
}
function $00c717733071d681$var$makeCategoryTicks(axis, tickModel) {
    var ticksCache = $00c717733071d681$var$getListCache(axis, "ticks");
    var optionTickInterval = (0, $de26deaeb9c20c8b$export$6d0bc2429155c088)(tickModel);
    var result = $00c717733071d681$var$listCacheGet(ticksCache, optionTickInterval);
    if (result) return result;
    var ticks;
    var tickCategoryInterval;
    // Optimize for the case that large category data and no label displayed,
    // we should not return all ticks.
    if (!tickModel.get("show") || axis.scale.isBlank()) ticks = [];
    if ($e44eb14c4271d0f9$export$f6e2535fb5126e54(optionTickInterval)) ticks = $00c717733071d681$var$makeLabelsByCustomizedCategoryInterval(axis, optionTickInterval, true);
    else if (optionTickInterval === "auto") {
        var labelsResult = $00c717733071d681$var$makeCategoryLabelsActually(axis, axis.getLabelModel());
        tickCategoryInterval = labelsResult.labelCategoryInterval;
        ticks = $e44eb14c4271d0f9$export$871de8747c9eaa88(labelsResult.labels, function(labelItem) {
            return labelItem.tickValue;
        });
    } else {
        tickCategoryInterval = optionTickInterval;
        ticks = $00c717733071d681$var$makeLabelsByNumericCategoryInterval(axis, tickCategoryInterval, true);
    }
    // Cache to avoid calling interval function repeatedly.
    return $00c717733071d681$var$listCacheSet(ticksCache, optionTickInterval, {
        ticks: ticks,
        tickCategoryInterval: tickCategoryInterval
    });
}
function $00c717733071d681$var$makeRealNumberLabels(axis) {
    var ticks = axis.scale.getTicks();
    var labelFormatter = (0, $de26deaeb9c20c8b$export$742f19a75415b2ae)(axis);
    return {
        labels: $e44eb14c4271d0f9$export$871de8747c9eaa88(ticks, function(tick, idx) {
            return {
                level: tick.level,
                formattedLabel: labelFormatter(tick, idx),
                rawLabel: axis.scale.getLabel(tick),
                tickValue: tick.value
            };
        })
    };
}
function $00c717733071d681$var$getListCache(axis, prop) {
    // Because key can be a function, and cache size always is small, we use array cache.
    return $00c717733071d681$var$inner(axis)[prop] || ($00c717733071d681$var$inner(axis)[prop] = []);
}
function $00c717733071d681$var$listCacheGet(cache, key) {
    for(var i = 0; i < cache.length; i++){
        if (cache[i].key === key) return cache[i].value;
    }
}
function $00c717733071d681$var$listCacheSet(cache, key, value) {
    cache.push({
        key: key,
        value: value
    });
    return value;
}
function $00c717733071d681$var$makeAutoCategoryInterval(axis) {
    var result = $00c717733071d681$var$inner(axis).autoInterval;
    return result != null ? result : $00c717733071d681$var$inner(axis).autoInterval = axis.calculateCategoryInterval();
}
function $00c717733071d681$export$9ea1d3f146a5a65f(axis) {
    var params = $00c717733071d681$var$fetchAutoCategoryIntervalCalculationParams(axis);
    var labelFormatter = (0, $de26deaeb9c20c8b$export$742f19a75415b2ae)(axis);
    var rotation = (params.axisRotate - params.labelRotate) / 180 * Math.PI;
    var ordinalScale = axis.scale;
    var ordinalExtent = ordinalScale.getExtent();
    // Providing this method is for optimization:
    // avoid generating a long array by `getTicks`
    // in large category data case.
    var tickCount = ordinalScale.count();
    if (ordinalExtent[1] - ordinalExtent[0] < 1) return 0;
    var step = 1;
    // Simple optimization. Empirical value: tick count should less than 40.
    if (tickCount > 40) step = Math.max(1, Math.floor(tickCount / 40));
    var tickValue = ordinalExtent[0];
    var unitSpan = axis.dataToCoord(tickValue + 1) - axis.dataToCoord(tickValue);
    var unitW = Math.abs(unitSpan * Math.cos(rotation));
    var unitH = Math.abs(unitSpan * Math.sin(rotation));
    var maxW = 0;
    var maxH = 0;
    // Caution: Performance sensitive for large category data.
    // Consider dataZoom, we should make appropriate step to avoid O(n) loop.
    for(; tickValue <= ordinalExtent[1]; tickValue += step){
        var width = 0;
        var height = 0;
        // Not precise, do not consider align and vertical align
        // and each distance from axis line yet.
        var rect = $1a2563e7d7856dd8$export$c381147bfed79d9f(labelFormatter({
            value: tickValue
        }), params.font, "center", "top");
        // Magic number
        width = rect.width * 1.3;
        height = rect.height * 1.3;
        // Min size, void long loop.
        maxW = Math.max(maxW, width, 7);
        maxH = Math.max(maxH, height, 7);
    }
    var dw = maxW / unitW;
    var dh = maxH / unitH;
    // 0/0 is NaN, 1/0 is Infinity.
    isNaN(dw) && (dw = Infinity);
    isNaN(dh) && (dh = Infinity);
    var interval = Math.max(0, Math.floor(Math.min(dw, dh)));
    var cache = $00c717733071d681$var$inner(axis.model);
    var axisExtent = axis.getExtent();
    var lastAutoInterval = cache.lastAutoInterval;
    var lastTickCount = cache.lastTickCount;
    // Use cache to keep interval stable while moving zoom window,
    // otherwise the calculated interval might jitter when the zoom
    // window size is close to the interval-changing size.
    // For example, if all of the axis labels are `a, b, c, d, e, f, g`.
    // The jitter will cause that sometimes the displayed labels are
    // `a, d, g` (interval: 2) sometimes `a, c, e`(interval: 1).
    if (lastAutoInterval != null && lastTickCount != null && Math.abs(lastAutoInterval - interval) <= 1 && Math.abs(lastTickCount - tickCount) <= 1 && lastAutoInterval > interval && cache.axisExtent0 === axisExtent[0] && cache.axisExtent1 === axisExtent[1]) interval = lastAutoInterval;
    else {
        cache.lastTickCount = tickCount;
        cache.lastAutoInterval = interval;
        cache.axisExtent0 = axisExtent[0];
        cache.axisExtent1 = axisExtent[1];
    }
    return interval;
}
function $00c717733071d681$var$fetchAutoCategoryIntervalCalculationParams(axis) {
    var labelModel = axis.getLabelModel();
    return {
        axisRotate: axis.getRotate ? axis.getRotate() : axis.isHorizontal && !axis.isHorizontal() ? 90 : 0,
        labelRotate: labelModel.get("rotate") || 0,
        font: labelModel.getFont()
    };
}
function $00c717733071d681$var$makeLabelsByNumericCategoryInterval(axis, categoryInterval, onlyTick) {
    var labelFormatter = (0, $de26deaeb9c20c8b$export$742f19a75415b2ae)(axis);
    var ordinalScale = axis.scale;
    var ordinalExtent = ordinalScale.getExtent();
    var labelModel = axis.getLabelModel();
    var result = [];
    // TODO: axisType: ordinalTime, pick the tick from each month/day/year/...
    var step = Math.max((categoryInterval || 0) + 1, 1);
    var startTick = ordinalExtent[0];
    var tickCount = ordinalScale.count();
    // Calculate start tick based on zero if possible to keep label consistent
    // while zooming and moving while interval > 0. Otherwise the selection
    // of displayable ticks and symbols probably keep changing.
    // 3 is empirical value.
    if (startTick !== 0 && step > 1 && tickCount / step > 2) startTick = Math.round(Math.ceil(startTick / step) * step);
    // (1) Only add min max label here but leave overlap checking
    // to render stage, which also ensure the returned list
    // suitable for splitLine and splitArea rendering.
    // (2) Scales except category always contain min max label so
    // do not need to perform this process.
    var showAllLabel = (0, $de26deaeb9c20c8b$export$c2911c025243d6a6)(axis);
    var includeMinLabel = labelModel.get("showMinLabel") || showAllLabel;
    var includeMaxLabel = labelModel.get("showMaxLabel") || showAllLabel;
    if (includeMinLabel && startTick !== ordinalExtent[0]) addItem(ordinalExtent[0]);
    // Optimize: avoid generating large array by `ordinalScale.getTicks()`.
    var tickValue = startTick;
    for(; tickValue <= ordinalExtent[1]; tickValue += step)addItem(tickValue);
    if (includeMaxLabel && tickValue - step !== ordinalExtent[1]) addItem(ordinalExtent[1]);
    function addItem(tickValue) {
        var tickObj = {
            value: tickValue
        };
        result.push(onlyTick ? tickValue : {
            formattedLabel: labelFormatter(tickObj),
            rawLabel: ordinalScale.getLabel(tickObj),
            tickValue: tickValue
        });
    }
    return result;
}
function $00c717733071d681$var$makeLabelsByCustomizedCategoryInterval(axis, categoryInterval, onlyTick) {
    var ordinalScale = axis.scale;
    var labelFormatter = (0, $de26deaeb9c20c8b$export$742f19a75415b2ae)(axis);
    var result = [];
    $e44eb14c4271d0f9$export$79b2f7037acddd43(ordinalScale.getTicks(), function(tick) {
        var rawLabel = ordinalScale.getLabel(tick);
        var tickValue = tick.value;
        if (categoryInterval(tick.value, rawLabel)) result.push(onlyTick ? tickValue : {
            formattedLabel: labelFormatter(tick),
            rawLabel: rawLabel,
            tickValue: tickValue
        });
    });
    return result;
}


var $f11edebb1fce3ed1$var$NORMALIZED_EXTENT = [
    0,
    1
];
/**
 * Base class of Axis.
 */ var $f11edebb1fce3ed1$var$Axis = /** @class */ function() {
    function Axis(dim, scale, extent) {
        this.onBand = false;
        this.inverse = false;
        this.dim = dim;
        this.scale = scale;
        this._extent = extent || [
            0,
            0
        ];
    }
    /**
   * If axis extent contain given coord
   */ Axis.prototype.contain = function(coord) {
        var extent = this._extent;
        var min = Math.min(extent[0], extent[1]);
        var max = Math.max(extent[0], extent[1]);
        return coord >= min && coord <= max;
    };
    /**
   * If axis extent contain given data
   */ Axis.prototype.containData = function(data) {
        return this.scale.contain(data);
    };
    /**
   * Get coord extent.
   */ Axis.prototype.getExtent = function() {
        return this._extent.slice();
    };
    /**
   * Get precision used for formatting
   */ Axis.prototype.getPixelPrecision = function(dataExtent) {
        return (0, $13e6a1a716300dd4$export$666260d9a2dda8a7)(dataExtent || this.scale.getExtent(), this._extent);
    };
    /**
   * Set coord extent
   */ Axis.prototype.setExtent = function(start, end) {
        var extent = this._extent;
        extent[0] = start;
        extent[1] = end;
    };
    /**
   * Convert data to coord. Data is the rank if it has an ordinal scale
   */ Axis.prototype.dataToCoord = function(data, clamp) {
        var extent = this._extent;
        var scale = this.scale;
        data = scale.normalize(data);
        if (this.onBand && scale.type === "ordinal") {
            extent = extent.slice();
            $f11edebb1fce3ed1$var$fixExtentWithBands(extent, scale.count());
        }
        return (0, $13e6a1a716300dd4$export$d3f68fbaa670562)(data, $f11edebb1fce3ed1$var$NORMALIZED_EXTENT, extent, clamp);
    };
    /**
   * Convert coord to data. Data is the rank if it has an ordinal scale
   */ Axis.prototype.coordToData = function(coord, clamp) {
        var extent = this._extent;
        var scale = this.scale;
        if (this.onBand && scale.type === "ordinal") {
            extent = extent.slice();
            $f11edebb1fce3ed1$var$fixExtentWithBands(extent, scale.count());
        }
        var t = (0, $13e6a1a716300dd4$export$d3f68fbaa670562)(coord, extent, $f11edebb1fce3ed1$var$NORMALIZED_EXTENT, clamp);
        return this.scale.scale(t);
    };
    /**
   * Convert pixel point to data in axis
   */ Axis.prototype.pointToData = function(point, clamp) {
        // Should be implemented in derived class if necessary.
        return;
    };
    /**
   * Different from `zrUtil.map(axis.getTicks(), axis.dataToCoord, axis)`,
   * `axis.getTicksCoords` considers `onBand`, which is used by
   * `boundaryGap:true` of category axis and splitLine and splitArea.
   * @param opt.tickModel default: axis.model.getModel('axisTick')
   * @param opt.clamp If `true`, the first and the last
   *        tick must be at the axis end points. Otherwise, clip ticks
   *        that outside the axis extent.
   */ Axis.prototype.getTicksCoords = function(opt) {
        opt = opt || {};
        var tickModel = opt.tickModel || this.getTickModel();
        var result = (0, $00c717733071d681$export$7cccf6836ae8323c)(this, tickModel);
        var ticks = result.ticks;
        var ticksCoords = (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(ticks, function(tickVal) {
            return {
                coord: this.dataToCoord(this.scale.type === "ordinal" ? this.scale.getRawOrdinalNumber(tickVal) : tickVal),
                tickValue: tickVal
            };
        }, this);
        var alignWithLabel = tickModel.get("alignWithLabel");
        $f11edebb1fce3ed1$var$fixOnBandTicksCoords(this, ticksCoords, alignWithLabel, opt.clamp);
        return ticksCoords;
    };
    Axis.prototype.getMinorTicksCoords = function() {
        if (this.scale.type === "ordinal") // Category axis doesn't support minor ticks
        return [];
        var minorTickModel = this.model.getModel("minorTick");
        var splitNumber = minorTickModel.get("splitNumber");
        // Protection.
        if (!(splitNumber > 0 && splitNumber < 100)) splitNumber = 5;
        var minorTicks = this.scale.getMinorTicks(splitNumber);
        var minorTicksCoords = (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(minorTicks, function(minorTicksGroup) {
            return (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(minorTicksGroup, function(minorTick) {
                return {
                    coord: this.dataToCoord(minorTick),
                    tickValue: minorTick
                };
            }, this);
        }, this);
        return minorTicksCoords;
    };
    Axis.prototype.getViewLabels = function() {
        return (0, $00c717733071d681$export$10216ebd3e3e485e)(this).labels;
    };
    Axis.prototype.getLabelModel = function() {
        return this.model.getModel("axisLabel");
    };
    /**
   * Notice here we only get the default tick model. For splitLine
   * or splitArea, we should pass the splitLineModel or splitAreaModel
   * manually when calling `getTicksCoords`.
   * In GL, this method may be overridden to:
   * `axisModel.getModel('axisTick', grid3DModel.getModel('axisTick'));`
   */ Axis.prototype.getTickModel = function() {
        return this.model.getModel("axisTick");
    };
    /**
   * Get width of band
   */ Axis.prototype.getBandWidth = function() {
        var axisExtent = this._extent;
        var dataExtent = this.scale.getExtent();
        var len = dataExtent[1] - dataExtent[0] + (this.onBand ? 1 : 0);
        // Fix #2728, avoid NaN when only one data.
        len === 0 && (len = 1);
        var size = Math.abs(axisExtent[1] - axisExtent[0]);
        return Math.abs(size) / len;
    };
    /**
   * Only be called in category axis.
   * Can be overridden, consider other axes like in 3D.
   * @return Auto interval for cateogry axis tick and label
   */ Axis.prototype.calculateCategoryInterval = function() {
        return (0, $00c717733071d681$export$9ea1d3f146a5a65f)(this);
    };
    return Axis;
}();
function $f11edebb1fce3ed1$var$fixExtentWithBands(extent, nTick) {
    var size = extent[1] - extent[0];
    var len = nTick;
    var margin = size / len / 2;
    extent[0] += margin;
    extent[1] -= margin;
}
// If axis has labels [1, 2, 3, 4]. Bands on the axis are
// |---1---|---2---|---3---|---4---|.
// So the displayed ticks and splitLine/splitArea should between
// each data item, otherwise cause misleading (e.g., split tow bars
// of a single data item when there are two bar series).
// Also consider if tickCategoryInterval > 0 and onBand, ticks and
// splitLine/spliteArea should layout appropriately corresponding
// to displayed labels. (So we should not use `getBandWidth` in this
// case).
function $f11edebb1fce3ed1$var$fixOnBandTicksCoords(axis, ticksCoords, alignWithLabel, clamp) {
    var ticksLen = ticksCoords.length;
    if (!axis.onBand || alignWithLabel || !ticksLen) return;
    var axisExtent = axis.getExtent();
    var last;
    var diffSize;
    if (ticksLen === 1) {
        ticksCoords[0].coord = axisExtent[0];
        last = ticksCoords[1] = {
            coord: axisExtent[1]
        };
    } else {
        var crossLen = ticksCoords[ticksLen - 1].tickValue - ticksCoords[0].tickValue;
        var shift_1 = (ticksCoords[ticksLen - 1].coord - ticksCoords[0].coord) / crossLen;
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(ticksCoords, function(ticksItem) {
            ticksItem.coord -= shift_1 / 2;
        });
        var dataExtent = axis.scale.getExtent();
        diffSize = 1 + dataExtent[1] - ticksCoords[ticksLen - 1].tickValue;
        last = {
            coord: ticksCoords[ticksLen - 1].coord + shift_1 * diffSize
        };
        ticksCoords.push(last);
    }
    var inverse = axisExtent[0] > axisExtent[1];
    // Handling clamp.
    if (littleThan(ticksCoords[0].coord, axisExtent[0])) clamp ? ticksCoords[0].coord = axisExtent[0] : ticksCoords.shift();
    if (clamp && littleThan(axisExtent[0], ticksCoords[0].coord)) ticksCoords.unshift({
        coord: axisExtent[0]
    });
    if (littleThan(axisExtent[1], last.coord)) clamp ? last.coord = axisExtent[1] : ticksCoords.pop();
    if (clamp && littleThan(last.coord, axisExtent[1])) ticksCoords.push({
        coord: axisExtent[1]
    });
    function littleThan(a, b) {
        // Avoid rounding error cause calculated tick coord different with extent.
        // It may cause an extra unnecessary tick added.
        a = (0, $13e6a1a716300dd4$export$2077e0241d6afd3c)(a);
        b = (0, $13e6a1a716300dd4$export$2077e0241d6afd3c)(b);
        return inverse ? a > b : a < b;
    }
}
var $f11edebb1fce3ed1$export$2e2bcd8739ae039 = $f11edebb1fce3ed1$var$Axis;


var $2ed5eb638707fd65$var$Axis2D = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(Axis2D, _super);
    function Axis2D(dim, scale, coordExtent, axisType, position) {
        var _this = _super.call(this, dim, scale, coordExtent) || this;
        /**
     * Index of axis, can be used as key
     * Injected outside.
     */ _this.index = 0;
        _this.type = axisType || "value";
        _this.position = position || "bottom";
        return _this;
    }
    Axis2D.prototype.isHorizontal = function() {
        var position = this.position;
        return position === "top" || position === "bottom";
    };
    /**
   * Each item cooresponds to this.getExtent(), which
   * means globalExtent[0] may greater than globalExtent[1],
   * unless `asc` is input.
   *
   * @param {boolean} [asc]
   * @return {Array.<number>}
   */ Axis2D.prototype.getGlobalExtent = function(asc) {
        var ret = this.getExtent();
        ret[0] = this.toGlobalCoord(ret[0]);
        ret[1] = this.toGlobalCoord(ret[1]);
        asc && ret[0] > ret[1] && ret.reverse();
        return ret;
    };
    Axis2D.prototype.pointToData = function(point, clamp) {
        return this.coordToData(this.toLocalCoord(point[this.dim === "x" ? 0 : 1]), clamp);
    };
    /**
   * Set ordinalSortInfo
   * @param info new OrdinalSortInfo
   */ Axis2D.prototype.setCategorySortInfo = function(info) {
        if (this.type !== "category") return false;
        this.model.option.categorySortInfo = info;
        this.scale.setSortInfo(info);
    };
    return Axis2D;
}((0, $f11edebb1fce3ed1$export$2e2bcd8739ae039));
var $2ed5eb638707fd65$export$2e2bcd8739ae039 = $2ed5eb638707fd65$var$Axis2D;



/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

function $d21751c4b3ef4831$export$b3219800bda33a1f(gridModel, axisModel, opt) {
    opt = opt || {};
    var grid = gridModel.coordinateSystem;
    var axis = axisModel.axis;
    var layout = {};
    var otherAxisOnZeroOf = axis.getAxesOnZeroOf()[0];
    var rawAxisPosition = axis.position;
    var axisPosition = otherAxisOnZeroOf ? "onZero" : rawAxisPosition;
    var axisDim = axis.dim;
    var rect = grid.getRect();
    var rectBound = [
        rect.x,
        rect.x + rect.width,
        rect.y,
        rect.y + rect.height
    ];
    var idx = {
        left: 0,
        right: 1,
        top: 0,
        bottom: 1,
        onZero: 2
    };
    var axisOffset = axisModel.get("offset") || 0;
    var posBound = axisDim === "x" ? [
        rectBound[2] - axisOffset,
        rectBound[3] + axisOffset
    ] : [
        rectBound[0] - axisOffset,
        rectBound[1] + axisOffset
    ];
    if (otherAxisOnZeroOf) {
        var onZeroCoord = otherAxisOnZeroOf.toGlobalCoord(otherAxisOnZeroOf.dataToCoord(0));
        posBound[idx.onZero] = Math.max(Math.min(onZeroCoord, posBound[1]), posBound[0]);
    }
    // Axis position
    layout.position = [
        axisDim === "y" ? posBound[idx[axisPosition]] : rectBound[0],
        axisDim === "x" ? posBound[idx[axisPosition]] : rectBound[3]
    ];
    // Axis rotation
    layout.rotation = Math.PI / 2 * (axisDim === "x" ? 0 : 1);
    // Tick and label direction, x y is axisDim
    var dirMap = {
        top: -1,
        bottom: 1,
        left: -1,
        right: 1
    };
    layout.labelDirection = layout.tickDirection = layout.nameDirection = dirMap[rawAxisPosition];
    layout.labelOffset = otherAxisOnZeroOf ? posBound[idx[rawAxisPosition]] - posBound[idx.onZero] : 0;
    if (axisModel.get([
        "axisTick",
        "inside"
    ])) layout.tickDirection = -layout.tickDirection;
    if ($e44eb14c4271d0f9$export$8a4d17b6e8486e66(opt.labelInside, axisModel.get([
        "axisLabel",
        "inside"
    ]))) layout.labelDirection = -layout.labelDirection;
    // Special label rotation
    var labelRotate = axisModel.get([
        "axisLabel",
        "rotate"
    ]);
    layout.labelRotate = axisPosition === "top" ? -labelRotate : labelRotate;
    // Over splitLine and splitArea
    layout.z2 = 1;
    return layout;
}
function $d21751c4b3ef4831$export$c2a0b77974c5e35d(seriesModel) {
    return seriesModel.get("coordinateSystem") === "cartesian2d";
}
function $d21751c4b3ef4831$export$8220131ac1d61d28(seriesModel) {
    var axisModelMap = {
        xAxisModel: null,
        yAxisModel: null
    };
    $e44eb14c4271d0f9$export$79b2f7037acddd43(axisModelMap, function(v, key) {
        var axisType = key.replace(/Model$/, "");
        var axisModel = seriesModel.getReferringComponents(axisType, (0, $8917c02fd8256c67$export$f076738ec84e693c)).models[0];
        if (!axisModel) throw new Error(axisType + ' "' + $e44eb14c4271d0f9$export$2e94551289abb95b(seriesModel.get(axisType + "Index"), seriesModel.get(axisType + "Id"), 0) + '" not found');
        axisModelMap[key] = axisModel;
    });
    return axisModelMap;
}



/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 




var $056ad57f4819e3cb$var$mathLog = Math.log;
function $056ad57f4819e3cb$export$c0b3be0e9eb0c2d9(scale, axisModel, alignToScale) {
    var intervalScaleProto = (0, $54db450da73fb995$export$2e2bcd8739ae039).prototype;
    // NOTE: There is a precondition for log scale  here:
    // In log scale we store _interval and _extent of exponent value.
    // So if we use the method of InternalScale to set/get these data.
    // It process the exponent value, which is linear and what we want here.
    var alignToTicks = intervalScaleProto.getTicks.call(alignToScale);
    var alignToNicedTicks = intervalScaleProto.getTicks.call(alignToScale, true);
    var alignToSplitNumber = alignToTicks.length - 1;
    var alignToInterval = intervalScaleProto.getInterval.call(alignToScale);
    var scaleExtent = (0, $de26deaeb9c20c8b$export$9c0ba8df7eb7b328)(scale, axisModel);
    var rawExtent = scaleExtent.extent;
    var isMinFixed = scaleExtent.fixMin;
    var isMaxFixed = scaleExtent.fixMax;
    if (scale.type === "log") {
        var logBase = $056ad57f4819e3cb$var$mathLog(scale.base);
        rawExtent = [
            $056ad57f4819e3cb$var$mathLog(rawExtent[0]) / logBase,
            $056ad57f4819e3cb$var$mathLog(rawExtent[1]) / logBase
        ];
    }
    scale.setExtent(rawExtent[0], rawExtent[1]);
    scale.calcNiceExtent({
        splitNumber: alignToSplitNumber,
        fixMin: isMinFixed,
        fixMax: isMaxFixed
    });
    var extent = intervalScaleProto.getExtent.call(scale);
    // Need to update the rawExtent.
    // Because value in rawExtent may be not parsed. e.g. 'dataMin', 'dataMax'
    if (isMinFixed) rawExtent[0] = extent[0];
    if (isMaxFixed) rawExtent[1] = extent[1];
    var interval = intervalScaleProto.getInterval.call(scale);
    var min = rawExtent[0];
    var max = rawExtent[1];
    if (isMinFixed && isMaxFixed) // User set min, max, divide to get new interval
    interval = (max - min) / alignToSplitNumber;
    else if (isMinFixed) {
        max = rawExtent[0] + interval * alignToSplitNumber;
        // User set min, expand extent on the other side
        while(max < rawExtent[1] && isFinite(max) && isFinite(rawExtent[1])){
            interval = (0, $37de80c384edf4d3$export$f39031e8422f329d)(interval);
            max = rawExtent[0] + interval * alignToSplitNumber;
        }
    } else if (isMaxFixed) {
        // User set max, expand extent on the other side
        min = rawExtent[1] - interval * alignToSplitNumber;
        while(min > rawExtent[0] && isFinite(min) && isFinite(rawExtent[0])){
            interval = (0, $37de80c384edf4d3$export$f39031e8422f329d)(interval);
            min = rawExtent[1] - interval * alignToSplitNumber;
        }
    } else {
        var nicedSplitNumber = scale.getTicks().length - 1;
        if (nicedSplitNumber > alignToSplitNumber) interval = (0, $37de80c384edf4d3$export$f39031e8422f329d)(interval);
        var range = interval * alignToSplitNumber;
        max = Math.ceil(rawExtent[1] / interval) * interval;
        min = (0, $13e6a1a716300dd4$export$2077e0241d6afd3c)(max - range);
        // Not change the result that crossing zero.
        if (min < 0 && rawExtent[0] >= 0) {
            min = 0;
            max = (0, $13e6a1a716300dd4$export$2077e0241d6afd3c)(range);
        } else if (max > 0 && rawExtent[1] <= 0) {
            max = 0;
            min = -(0, $13e6a1a716300dd4$export$2077e0241d6afd3c)(range);
        }
    }
    // Adjust min, max based on the extent of alignTo. When min or max is set in alignTo scale
    var t0 = (alignToTicks[0].value - alignToNicedTicks[0].value) / alignToInterval;
    var t1 = (alignToTicks[alignToSplitNumber].value - alignToNicedTicks[alignToSplitNumber].value) / alignToInterval;
    // NOTE: Must in setExtent -> setInterval -> setNiceExtent order.
    intervalScaleProto.setExtent.call(scale, min + interval * t0, max + interval * t1);
    intervalScaleProto.setInterval.call(scale, interval);
    if (t0 || t1) intervalScaleProto.setNiceExtent.call(scale, min + interval, max - interval);
    var ticks = intervalScaleProto.getTicks.call(scale);
    if (ticks[1] && (!(0, $37de80c384edf4d3$export$a8a5b03ea14764df)(interval) || (0, $13e6a1a716300dd4$export$6d86ba4ca4984d31)(ticks[1].value) > (0, $13e6a1a716300dd4$export$6d86ba4ca4984d31)(interval))) (0, $4796c55e8b767685$export$c106dd0671a0fc2d)(// eslint-disable-next-line
    "The ticks may be not readable when set min: " + axisModel.get("min") + ", max: " + axisModel.get("max") + " and alignTicks: true");
}


var $6e18b404f1500a02$var$Grid = /** @class */ function() {
    function Grid(gridModel, ecModel, api) {
        // FIXME:TS where used (different from registered type 'cartesian2d')?
        this.type = "grid";
        this._coordsMap = {};
        this._coordsList = [];
        this._axesMap = {};
        this._axesList = [];
        this.axisPointerEnabled = true;
        this.dimensions = (0, $7e2c5f86f325e8ba$export$988a008d2b9120f4);
        this._initCartesian(gridModel, ecModel, api);
        this.model = gridModel;
    }
    Grid.prototype.getRect = function() {
        return this._rect;
    };
    Grid.prototype.update = function(ecModel, api) {
        var axesMap = this._axesMap;
        this._updateScale(ecModel, this.model);
        function updateAxisTicks(axes) {
            var alignTo;
            // Axis is added in order of axisIndex.
            var axesIndices = (0, $e44eb14c4271d0f9$export$ed97f33186d4b816)(axes);
            var len = axesIndices.length;
            if (!len) return;
            var axisNeedsAlign = [];
            // Process once and calculate the ticks for those don't use alignTicks.
            for(var i = len - 1; i >= 0; i--){
                var idx = +axesIndices[i]; // Convert to number.
                var axis = axes[idx];
                var model = axis.model;
                var scale = axis.scale;
                if (// Only value and log axis without interval support alignTicks.
                (0, $37de80c384edf4d3$export$dfc8cd28ed7b22a0)(scale) && model.get("alignTicks") && model.get("interval") == null) axisNeedsAlign.push(axis);
                else {
                    (0, $de26deaeb9c20c8b$export$51f3e70a54405d5a)(scale, model);
                    if ((0, $37de80c384edf4d3$export$dfc8cd28ed7b22a0)(scale)) // Can only align to interval or log axis.
                    alignTo = axis;
                }
            }
            // All axes has set alignTicks. Pick the first one.
            // PENDING. Should we find the axis that both set interval, min, max and align to this one?
            if (axisNeedsAlign.length) {
                if (!alignTo) {
                    alignTo = axisNeedsAlign.pop();
                    (0, $de26deaeb9c20c8b$export$51f3e70a54405d5a)(alignTo.scale, alignTo.model);
                }
                (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(axisNeedsAlign, function(axis) {
                    (0, $056ad57f4819e3cb$export$c0b3be0e9eb0c2d9)(axis.scale, axis.model, alignTo.scale);
                });
            }
        }
        updateAxisTicks(axesMap.x);
        updateAxisTicks(axesMap.y);
        // Key: axisDim_axisIndex, value: boolean, whether onZero target.
        var onZeroRecords = {};
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(axesMap.x, function(xAxis) {
            $6e18b404f1500a02$var$fixAxisOnZero(axesMap, "y", xAxis, onZeroRecords);
        });
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(axesMap.y, function(yAxis) {
            $6e18b404f1500a02$var$fixAxisOnZero(axesMap, "x", yAxis, onZeroRecords);
        });
        // Resize again if containLabel is enabled
        // FIXME It may cause getting wrong grid size in data processing stage
        this.resize(this.model, api);
    };
    /**
   * Resize the grid
   */ Grid.prototype.resize = function(gridModel, api, ignoreContainLabel) {
        var boxLayoutParams = gridModel.getBoxLayoutParams();
        var isContainLabel = !ignoreContainLabel && gridModel.get("containLabel");
        var gridRect = (0, $074356ab3d6b1cdb$export$4517a5ca639a7293)(boxLayoutParams, {
            width: api.getWidth(),
            height: api.getHeight()
        });
        this._rect = gridRect;
        var axesList = this._axesList;
        adjustAxes();
        // Minus label size
        if (isContainLabel) {
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(axesList, function(axis) {
                if (!axis.model.get([
                    "axisLabel",
                    "inside"
                ])) {
                    var labelUnionRect = (0, $de26deaeb9c20c8b$export$fef1c7f0af0b48d)(axis);
                    if (labelUnionRect) {
                        var dim = axis.isHorizontal() ? "height" : "width";
                        var margin = axis.model.get([
                            "axisLabel",
                            "margin"
                        ]);
                        gridRect[dim] -= labelUnionRect[dim] + margin;
                        if (axis.position === "top") gridRect.y += labelUnionRect.height + margin;
                        else if (axis.position === "left") gridRect.x += labelUnionRect.width + margin;
                    }
                }
            });
            adjustAxes();
        }
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(this._coordsList, function(coord) {
            // Calculate affine matrix to accelerate the data to point transform.
            // If all the axes scales are time or value.
            coord.calcAffineTransform();
        });
        function adjustAxes() {
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(axesList, function(axis) {
                var isHorizontal = axis.isHorizontal();
                var extent = isHorizontal ? [
                    0,
                    gridRect.width
                ] : [
                    0,
                    gridRect.height
                ];
                var idx = axis.inverse ? 1 : 0;
                axis.setExtent(extent[idx], extent[1 - idx]);
                $6e18b404f1500a02$var$updateAxisTransform(axis, isHorizontal ? gridRect.x : gridRect.y);
            });
        }
    };
    Grid.prototype.getAxis = function(dim, axisIndex) {
        var axesMapOnDim = this._axesMap[dim];
        if (axesMapOnDim != null) return axesMapOnDim[axisIndex || 0];
    };
    Grid.prototype.getAxes = function() {
        return this._axesList.slice();
    };
    Grid.prototype.getCartesian = function(xAxisIndex, yAxisIndex) {
        if (xAxisIndex != null && yAxisIndex != null) {
            var key = "x" + xAxisIndex + "y" + yAxisIndex;
            return this._coordsMap[key];
        }
        if ((0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(xAxisIndex)) {
            yAxisIndex = xAxisIndex.yAxisIndex;
            xAxisIndex = xAxisIndex.xAxisIndex;
        }
        for(var i = 0, coordList = this._coordsList; i < coordList.length; i++){
            if (coordList[i].getAxis("x").index === xAxisIndex || coordList[i].getAxis("y").index === yAxisIndex) return coordList[i];
        }
    };
    Grid.prototype.getCartesians = function() {
        return this._coordsList.slice();
    };
    /**
   * @implements
   */ Grid.prototype.convertToPixel = function(ecModel, finder, value) {
        var target = this._findConvertTarget(finder);
        return target.cartesian ? target.cartesian.dataToPoint(value) : target.axis ? target.axis.toGlobalCoord(target.axis.dataToCoord(value)) : null;
    };
    /**
   * @implements
   */ Grid.prototype.convertFromPixel = function(ecModel, finder, value) {
        var target = this._findConvertTarget(finder);
        return target.cartesian ? target.cartesian.pointToData(value) : target.axis ? target.axis.coordToData(target.axis.toLocalCoord(value)) : null;
    };
    Grid.prototype._findConvertTarget = function(finder) {
        var seriesModel = finder.seriesModel;
        var xAxisModel = finder.xAxisModel || seriesModel && seriesModel.getReferringComponents("xAxis", (0, $8917c02fd8256c67$export$f076738ec84e693c)).models[0];
        var yAxisModel = finder.yAxisModel || seriesModel && seriesModel.getReferringComponents("yAxis", (0, $8917c02fd8256c67$export$f076738ec84e693c)).models[0];
        var gridModel = finder.gridModel;
        var coordsList = this._coordsList;
        var cartesian;
        var axis;
        if (seriesModel) {
            cartesian = seriesModel.coordinateSystem;
            (0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)(coordsList, cartesian) < 0 && (cartesian = null);
        } else if (xAxisModel && yAxisModel) cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);
        else if (xAxisModel) axis = this.getAxis("x", xAxisModel.componentIndex);
        else if (yAxisModel) axis = this.getAxis("y", yAxisModel.componentIndex);
        else if (gridModel) {
            var grid = gridModel.coordinateSystem;
            if (grid === this) cartesian = this._coordsList[0];
        }
        return {
            cartesian: cartesian,
            axis: axis
        };
    };
    /**
   * @implements
   */ Grid.prototype.containPoint = function(point) {
        var coord = this._coordsList[0];
        if (coord) return coord.containPoint(point);
    };
    /**
   * Initialize cartesian coordinate systems
   */ Grid.prototype._initCartesian = function(gridModel, ecModel, api) {
        var _this = this;
        var grid = this;
        var axisPositionUsed = {
            left: false,
            right: false,
            top: false,
            bottom: false
        };
        var axesMap = {
            x: {},
            y: {}
        };
        var axesCount = {
            x: 0,
            y: 0
        };
        // Create axis
        ecModel.eachComponent("xAxis", createAxisCreator("x"), this);
        ecModel.eachComponent("yAxis", createAxisCreator("y"), this);
        if (!axesCount.x || !axesCount.y) {
            // Roll back when there no either x or y axis
            this._axesMap = {};
            this._axesList = [];
            return;
        }
        this._axesMap = axesMap;
        // Create cartesian2d
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(axesMap.x, function(xAxis, xAxisIndex) {
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(axesMap.y, function(yAxis, yAxisIndex) {
                var key = "x" + xAxisIndex + "y" + yAxisIndex;
                var cartesian = new (0, $7e2c5f86f325e8ba$export$2e2bcd8739ae039)(key);
                cartesian.master = _this;
                cartesian.model = gridModel;
                _this._coordsMap[key] = cartesian;
                _this._coordsList.push(cartesian);
                cartesian.addAxis(xAxis);
                cartesian.addAxis(yAxis);
            });
        });
        function createAxisCreator(dimName) {
            return function(axisModel, idx) {
                if (!$6e18b404f1500a02$var$isAxisUsedInTheGrid(axisModel, gridModel)) return;
                var axisPosition = axisModel.get("position");
                if (dimName === "x") // Fix position
                {
                    if (axisPosition !== "top" && axisPosition !== "bottom") // Default bottom of X
                    axisPosition = axisPositionUsed.bottom ? "top" : "bottom";
                } else // Fix position
                if (axisPosition !== "left" && axisPosition !== "right") // Default left of Y
                axisPosition = axisPositionUsed.left ? "right" : "left";
                axisPositionUsed[axisPosition] = true;
                var axis = new (0, $2ed5eb638707fd65$export$2e2bcd8739ae039)(dimName, (0, $de26deaeb9c20c8b$export$8941c4cacdc8f5a5)(axisModel), [
                    0,
                    0
                ], axisModel.get("type"), axisPosition);
                var isCategory = axis.type === "category";
                axis.onBand = isCategory && axisModel.get("boundaryGap");
                axis.inverse = axisModel.get("inverse");
                // Inject axis into axisModel
                axisModel.axis = axis;
                // Inject axisModel into axis
                axis.model = axisModel;
                // Inject grid info axis
                axis.grid = grid;
                // Index of axis, can be used as key
                axis.index = idx;
                grid._axesList.push(axis);
                axesMap[dimName][idx] = axis;
                axesCount[dimName]++;
            };
        }
    };
    /**
   * Update cartesian properties from series.
   */ Grid.prototype._updateScale = function(ecModel, gridModel) {
        // Reset scale
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(this._axesList, function(axis) {
            axis.scale.setExtent(Infinity, -Infinity);
            if (axis.type === "category") {
                var categorySortInfo = axis.model.get("categorySortInfo");
                axis.scale.setSortInfo(categorySortInfo);
            }
        });
        ecModel.eachSeries(function(seriesModel) {
            if ((0, $d21751c4b3ef4831$export$c2a0b77974c5e35d)(seriesModel)) {
                var axesModelMap = (0, $d21751c4b3ef4831$export$8220131ac1d61d28)(seriesModel);
                var xAxisModel = axesModelMap.xAxisModel;
                var yAxisModel = axesModelMap.yAxisModel;
                if (!$6e18b404f1500a02$var$isAxisUsedInTheGrid(xAxisModel, gridModel) || !$6e18b404f1500a02$var$isAxisUsedInTheGrid(yAxisModel, gridModel)) return;
                var cartesian = this.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);
                var data = seriesModel.getData();
                var xAxis = cartesian.getAxis("x");
                var yAxis = cartesian.getAxis("y");
                unionExtent(data, xAxis);
                unionExtent(data, yAxis);
            }
        }, this);
        function unionExtent(data, axis) {
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)((0, $de26deaeb9c20c8b$export$e4cf30b1e74cd69d)(data, axis.dim), function(dim) {
                axis.scale.unionExtentFromData(data, dim);
            });
        }
    };
    /**
   * @param dim 'x' or 'y' or 'auto' or null/undefined
   */ Grid.prototype.getTooltipAxes = function(dim) {
        var baseAxes = [];
        var otherAxes = [];
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(this.getCartesians(), function(cartesian) {
            var baseAxis = dim != null && dim !== "auto" ? cartesian.getAxis(dim) : cartesian.getBaseAxis();
            var otherAxis = cartesian.getOtherAxis(baseAxis);
            (0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)(baseAxes, baseAxis) < 0 && baseAxes.push(baseAxis);
            (0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)(otherAxes, otherAxis) < 0 && otherAxes.push(otherAxis);
        });
        return {
            baseAxes: baseAxes,
            otherAxes: otherAxes
        };
    };
    Grid.create = function(ecModel, api) {
        var grids = [];
        ecModel.eachComponent("grid", function(gridModel, idx) {
            var grid = new Grid(gridModel, ecModel, api);
            grid.name = "grid_" + idx;
            // dataSampling requires axis extent, so resize
            // should be performed in create stage.
            grid.resize(gridModel, api, true);
            gridModel.coordinateSystem = grid;
            grids.push(grid);
        });
        // Inject the coordinateSystems into seriesModel
        ecModel.eachSeries(function(seriesModel) {
            if (!(0, $d21751c4b3ef4831$export$c2a0b77974c5e35d)(seriesModel)) return;
            var axesModelMap = (0, $d21751c4b3ef4831$export$8220131ac1d61d28)(seriesModel);
            var xAxisModel = axesModelMap.xAxisModel;
            var yAxisModel = axesModelMap.yAxisModel;
            var gridModel = xAxisModel.getCoordSysModel();
            if (!gridModel) throw new Error('Grid "' + (0, $e44eb14c4271d0f9$export$2e94551289abb95b)(xAxisModel.get("gridIndex"), xAxisModel.get("gridId"), 0) + '" not found');
            if (xAxisModel.getCoordSysModel() !== yAxisModel.getCoordSysModel()) throw new Error("xAxis and yAxis must use the same grid");
            var grid = gridModel.coordinateSystem;
            seriesModel.coordinateSystem = grid.getCartesian(xAxisModel.componentIndex, yAxisModel.componentIndex);
        });
        return grids;
    };
    // For deciding which dimensions to use when creating list data
    Grid.dimensions = (0, $7e2c5f86f325e8ba$export$988a008d2b9120f4);
    return Grid;
}();
/**
 * Check if the axis is used in the specified grid.
 */ function $6e18b404f1500a02$var$isAxisUsedInTheGrid(axisModel, gridModel) {
    return axisModel.getCoordSysModel() === gridModel;
}
function $6e18b404f1500a02$var$fixAxisOnZero(axesMap, otherAxisDim, axis, // Key: see `getOnZeroRecordKey`
onZeroRecords) {
    axis.getAxesOnZeroOf = function() {
        // TODO: onZero of multiple axes.
        return otherAxisOnZeroOf ? [
            otherAxisOnZeroOf
        ] : [];
    };
    // onZero can not be enabled in these two situations:
    // 1. When any other axis is a category axis.
    // 2. When no axis is cross 0 point.
    var otherAxes = axesMap[otherAxisDim];
    var otherAxisOnZeroOf;
    var axisModel = axis.model;
    var onZero = axisModel.get([
        "axisLine",
        "onZero"
    ]);
    var onZeroAxisIndex = axisModel.get([
        "axisLine",
        "onZeroAxisIndex"
    ]);
    if (!onZero) return;
    // If target axis is specified.
    if (onZeroAxisIndex != null) {
        if ($6e18b404f1500a02$var$canOnZeroToAxis(otherAxes[onZeroAxisIndex])) otherAxisOnZeroOf = otherAxes[onZeroAxisIndex];
    } else {
        // Find the first available other axis.
        for(var idx in otherAxes)if (otherAxes.hasOwnProperty(idx) && $6e18b404f1500a02$var$canOnZeroToAxis(otherAxes[idx]) && !onZeroRecords[getOnZeroRecordKey(otherAxes[idx])]) {
            otherAxisOnZeroOf = otherAxes[idx];
            break;
        }
    }
    if (otherAxisOnZeroOf) onZeroRecords[getOnZeroRecordKey(otherAxisOnZeroOf)] = true;
    function getOnZeroRecordKey(axis) {
        return axis.dim + "_" + axis.index;
    }
}
function $6e18b404f1500a02$var$canOnZeroToAxis(axis) {
    return axis && axis.type !== "category" && axis.type !== "time" && (0, $de26deaeb9c20c8b$export$3eac36a69f37d52)(axis);
}
function $6e18b404f1500a02$var$updateAxisTransform(axis, coordBase) {
    var axisExtent = axis.getExtent();
    var axisExtentSum = axisExtent[0] + axisExtent[1];
    // Fast transform
    axis.toGlobalCoord = axis.dim === "x" ? function(coord) {
        return coord + coordBase;
    } : function(coord) {
        return axisExtentSum - coord + coordBase;
    };
    axis.toLocalCoord = axis.dim === "x" ? function(coord) {
        return coord - coordBase;
    } : function(coord) {
        return axisExtentSum - coord + coordBase;
    };
}
var $6e18b404f1500a02$export$2e2bcd8739ae039 = $6e18b404f1500a02$var$Grid;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 










var $c3aa696b981feb10$var$PI = Math.PI;
/**
 * A final axis is translated and rotated from a "standard axis".
 * So opt.position and opt.rotation is required.
 *
 * A standard axis is and axis from [0, 0] to [0, axisExtent[1]],
 * for example: (0, 0) ------------> (0, 50)
 *
 * nameDirection or tickDirection or labelDirection is 1 means tick
 * or label is below the standard axis, whereas is -1 means above
 * the standard axis. labelOffset means offset between label and axis,
 * which is useful when 'onZero', where axisLabel is in the grid and
 * label in outside grid.
 *
 * Tips: like always,
 * positive rotation represents anticlockwise, and negative rotation
 * represents clockwise.
 * The direction of position coordinate is the same as the direction
 * of screen coordinate.
 *
 * Do not need to consider axis 'inverse', which is auto processed by
 * axis extent.
 */ var $c3aa696b981feb10$var$AxisBuilder = /** @class */ function() {
    function AxisBuilder(axisModel, opt) {
        this.group = new $748aea24eee93173$export$2e2bcd8739ae039();
        this.opt = opt;
        this.axisModel = axisModel;
        // Default value
        (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)(opt, {
            labelOffset: 0,
            nameDirection: 1,
            tickDirection: 1,
            labelDirection: 1,
            silent: true,
            handleAutoShown: function() {
                return true;
            }
        });
        // FIXME Not use a separate text group?
        var transformGroup = new $748aea24eee93173$export$2e2bcd8739ae039({
            x: opt.position[0],
            y: opt.position[1],
            rotation: opt.rotation
        });
        // this.group.add(transformGroup);
        // this._transformGroup = transformGroup;
        transformGroup.updateTransform();
        this._transformGroup = transformGroup;
    }
    AxisBuilder.prototype.hasBuilder = function(name) {
        return !!$c3aa696b981feb10$var$builders[name];
    };
    AxisBuilder.prototype.add = function(name) {
        $c3aa696b981feb10$var$builders[name](this.opt, this.axisModel, this.group, this._transformGroup);
    };
    AxisBuilder.prototype.getGroup = function() {
        return this.group;
    };
    AxisBuilder.innerTextLayout = function(axisRotation, textRotation, direction) {
        var rotationDiff = (0, $13e6a1a716300dd4$export$2ca6dd70a288b1c3)(textRotation - axisRotation);
        var textAlign;
        var textVerticalAlign;
        if ((0, $13e6a1a716300dd4$export$d1df570aea2868f)(rotationDiff)) {
            // Label is parallel with axis line.
            textVerticalAlign = direction > 0 ? "top" : "bottom";
            textAlign = "center";
        } else if ((0, $13e6a1a716300dd4$export$d1df570aea2868f)(rotationDiff - $c3aa696b981feb10$var$PI)) {
            // Label is inverse parallel with axis line.
            textVerticalAlign = direction > 0 ? "bottom" : "top";
            textAlign = "center";
        } else {
            textVerticalAlign = "middle";
            if (rotationDiff > 0 && rotationDiff < $c3aa696b981feb10$var$PI) textAlign = direction > 0 ? "right" : "left";
            else textAlign = direction > 0 ? "left" : "right";
        }
        return {
            rotation: rotationDiff,
            textAlign: textAlign,
            textVerticalAlign: textVerticalAlign
        };
    };
    AxisBuilder.makeAxisEventDataBase = function(axisModel) {
        var eventData = {
            componentType: axisModel.mainType,
            componentIndex: axisModel.componentIndex
        };
        eventData[axisModel.mainType + "Index"] = axisModel.componentIndex;
        return eventData;
    };
    AxisBuilder.isLabelSilent = function(axisModel) {
        var tooltipOpt = axisModel.get("tooltip");
        return axisModel.get("silent") || !(axisModel.get("triggerEvent") || tooltipOpt && tooltipOpt.show);
    };
    return AxisBuilder;
}();
var $c3aa696b981feb10$var$builders = {
    axisLine: function(opt, axisModel, group, transformGroup) {
        var shown = axisModel.get([
            "axisLine",
            "show"
        ]);
        if (shown === "auto" && opt.handleAutoShown) shown = opt.handleAutoShown("axisLine");
        if (!shown) return;
        var extent = axisModel.axis.getExtent();
        var matrix = transformGroup.transform;
        var pt1 = [
            extent[0],
            0
        ];
        var pt2 = [
            extent[1],
            0
        ];
        var inverse = pt1[0] > pt2[0];
        if (matrix) {
            (0, $187eb1bf1a49fd34$export$9f9dcb98c894b623)(pt1, pt1, matrix);
            (0, $187eb1bf1a49fd34$export$9f9dcb98c894b623)(pt2, pt2, matrix);
        }
        var lineStyle = (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({
            lineCap: "round"
        }, axisModel.getModel([
            "axisLine",
            "lineStyle"
        ]).getLineStyle());
        var line = new $bb4cc8f9efee5de5$export$2e2bcd8739ae039({
            shape: {
                x1: pt1[0],
                y1: pt1[1],
                x2: pt2[0],
                y2: pt2[1]
            },
            style: lineStyle,
            strokeContainThreshold: opt.strokeContainThreshold || 5,
            silent: true,
            z2: 1
        });
        $6aec2e68b45f8796$export$8b4b620d7f4aad1b(line.shape, line.style.lineWidth);
        line.anid = "line";
        group.add(line);
        var arrows = axisModel.get([
            "axisLine",
            "symbol"
        ]);
        if (arrows != null) {
            var arrowSize = axisModel.get([
                "axisLine",
                "symbolSize"
            ]);
            if ((0, $e44eb14c4271d0f9$export$844ec244b1367d54)(arrows)) // Use the same arrow for start and end point
            arrows = [
                arrows,
                arrows
            ];
            if ((0, $e44eb14c4271d0f9$export$844ec244b1367d54)(arrowSize) || (0, $e44eb14c4271d0f9$export$7e4aa119212bc614)(arrowSize)) // Use the same size for width and height
            arrowSize = [
                arrowSize,
                arrowSize
            ];
            var arrowOffset = (0, $f918b475beb849b6$export$e3e292895c033f6d)(axisModel.get([
                "axisLine",
                "symbolOffset"
            ]) || 0, arrowSize);
            var symbolWidth_1 = arrowSize[0];
            var symbolHeight_1 = arrowSize[1];
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)([
                {
                    rotate: opt.rotation + Math.PI / 2,
                    offset: arrowOffset[0],
                    r: 0
                },
                {
                    rotate: opt.rotation - Math.PI / 2,
                    offset: arrowOffset[1],
                    r: Math.sqrt((pt1[0] - pt2[0]) * (pt1[0] - pt2[0]) + (pt1[1] - pt2[1]) * (pt1[1] - pt2[1]))
                }
            ], function(point, index) {
                if (arrows[index] !== "none" && arrows[index] != null) {
                    var symbol = (0, $f918b475beb849b6$export$af050e04da3a02e8)(arrows[index], -symbolWidth_1 / 2, -symbolHeight_1 / 2, symbolWidth_1, symbolHeight_1, lineStyle.stroke, true);
                    // Calculate arrow position with offset
                    var r = point.r + point.offset;
                    var pt = inverse ? pt2 : pt1;
                    symbol.attr({
                        rotation: point.rotate,
                        x: pt[0] + r * Math.cos(opt.rotation),
                        y: pt[1] - r * Math.sin(opt.rotation),
                        silent: true,
                        z2: 11
                    });
                    group.add(symbol);
                }
            });
        }
    },
    axisTickLabel: function(opt, axisModel, group, transformGroup) {
        var ticksEls = $c3aa696b981feb10$var$buildAxisMajorTicks(group, transformGroup, axisModel, opt);
        var labelEls = $c3aa696b981feb10$var$buildAxisLabel(group, transformGroup, axisModel, opt);
        $c3aa696b981feb10$var$fixMinMaxLabelShow(axisModel, labelEls, ticksEls);
        $c3aa696b981feb10$var$buildAxisMinorTicks(group, transformGroup, axisModel, opt.tickDirection);
        // This bit fixes the label overlap issue for the time chart.
        // See https://github.com/apache/echarts/issues/14266 for more.
        if (axisModel.get([
            "axisLabel",
            "hideOverlap"
        ])) {
            var labelList = (0, $345e515c98a3cbaf$export$6c403cad1ae3e239)((0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(labelEls, function(label) {
                return {
                    label: label,
                    priority: label.z2,
                    defaultAttr: {
                        ignore: label.ignore
                    }
                };
            }));
            (0, $345e515c98a3cbaf$export$8ce774e164a49410)(labelList);
        }
    },
    axisName: function(opt, axisModel, group, transformGroup) {
        var name = (0, $e44eb14c4271d0f9$export$8a4d17b6e8486e66)(opt.axisName, axisModel.get("name"));
        if (!name) return;
        var nameLocation = axisModel.get("nameLocation");
        var nameDirection = opt.nameDirection;
        var textStyleModel = axisModel.getModel("nameTextStyle");
        var gap = axisModel.get("nameGap") || 0;
        var extent = axisModel.axis.getExtent();
        var gapSignal = extent[0] > extent[1] ? -1 : 1;
        var pos = [
            nameLocation === "start" ? extent[0] - gapSignal * gap : nameLocation === "end" ? extent[1] + gapSignal * gap : (extent[0] + extent[1]) / 2,
            // Reuse labelOffset.
            $c3aa696b981feb10$var$isNameLocationCenter(nameLocation) ? opt.labelOffset + nameDirection * gap : 0
        ];
        var labelLayout;
        var nameRotation = axisModel.get("nameRotate");
        if (nameRotation != null) nameRotation = nameRotation * $c3aa696b981feb10$var$PI / 180; // To radian.
        var axisNameAvailableWidth;
        if ($c3aa696b981feb10$var$isNameLocationCenter(nameLocation)) labelLayout = $c3aa696b981feb10$var$AxisBuilder.innerTextLayout(opt.rotation, nameRotation != null ? nameRotation : opt.rotation, // Adapt to axis.
        nameDirection);
        else {
            labelLayout = $c3aa696b981feb10$var$endTextLayout(opt.rotation, nameLocation, nameRotation || 0, extent);
            axisNameAvailableWidth = opt.axisNameAvailableWidth;
            if (axisNameAvailableWidth != null) {
                axisNameAvailableWidth = Math.abs(axisNameAvailableWidth / Math.sin(labelLayout.rotation));
                !isFinite(axisNameAvailableWidth) && (axisNameAvailableWidth = null);
            }
        }
        var textFont = textStyleModel.getFont();
        var truncateOpt = axisModel.get("nameTruncate", true) || {};
        var ellipsis = truncateOpt.ellipsis;
        var maxWidth = (0, $e44eb14c4271d0f9$export$8a4d17b6e8486e66)(opt.nameTruncateMaxWidth, truncateOpt.maxWidth, axisNameAvailableWidth);
        var textEl = new $6d12d9a137e168c2$export$2e2bcd8739ae039({
            x: pos[0],
            y: pos[1],
            rotation: labelLayout.rotation,
            silent: $c3aa696b981feb10$var$AxisBuilder.isLabelSilent(axisModel),
            style: (0, $75926670b032879d$export$f8998c3d0a13de59)(textStyleModel, {
                text: name,
                font: textFont,
                overflow: "truncate",
                width: maxWidth,
                ellipsis: ellipsis,
                fill: textStyleModel.getTextColor() || axisModel.get([
                    "axisLine",
                    "lineStyle",
                    "color"
                ]),
                align: textStyleModel.get("align") || labelLayout.textAlign,
                verticalAlign: textStyleModel.get("verticalAlign") || labelLayout.textVerticalAlign
            }),
            z2: 1
        });
        $6aec2e68b45f8796$export$fc6410d97fab306c({
            el: textEl,
            componentModel: axisModel,
            itemName: name
        });
        textEl.__fullText = name;
        // Id for animation
        textEl.anid = "name";
        if (axisModel.get("triggerEvent")) {
            var eventData = $c3aa696b981feb10$var$AxisBuilder.makeAxisEventDataBase(axisModel);
            eventData.targetType = "axisName";
            eventData.name = name;
            (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(textEl).eventData = eventData;
        }
        // FIXME
        transformGroup.add(textEl);
        textEl.updateTransform();
        group.add(textEl);
        textEl.decomposeTransform();
    }
};
function $c3aa696b981feb10$var$endTextLayout(rotation, textPosition, textRotate, extent) {
    var rotationDiff = (0, $13e6a1a716300dd4$export$2ca6dd70a288b1c3)(textRotate - rotation);
    var textAlign;
    var textVerticalAlign;
    var inverse = extent[0] > extent[1];
    var onLeft = textPosition === "start" && !inverse || textPosition !== "start" && inverse;
    if ((0, $13e6a1a716300dd4$export$d1df570aea2868f)(rotationDiff - $c3aa696b981feb10$var$PI / 2)) {
        textVerticalAlign = onLeft ? "bottom" : "top";
        textAlign = "center";
    } else if ((0, $13e6a1a716300dd4$export$d1df570aea2868f)(rotationDiff - $c3aa696b981feb10$var$PI * 1.5)) {
        textVerticalAlign = onLeft ? "top" : "bottom";
        textAlign = "center";
    } else {
        textVerticalAlign = "middle";
        if (rotationDiff < $c3aa696b981feb10$var$PI * 1.5 && rotationDiff > $c3aa696b981feb10$var$PI / 2) textAlign = onLeft ? "left" : "right";
        else textAlign = onLeft ? "right" : "left";
    }
    return {
        rotation: rotationDiff,
        textAlign: textAlign,
        textVerticalAlign: textVerticalAlign
    };
}
function $c3aa696b981feb10$var$fixMinMaxLabelShow(axisModel, labelEls, tickEls) {
    if ((0, $de26deaeb9c20c8b$export$c2911c025243d6a6)(axisModel.axis)) return;
    // If min or max are user set, we need to check
    // If the tick on min(max) are overlap on their neighbour tick
    // If they are overlapped, we need to hide the min(max) tick label
    var showMinLabel = axisModel.get([
        "axisLabel",
        "showMinLabel"
    ]);
    var showMaxLabel = axisModel.get([
        "axisLabel",
        "showMaxLabel"
    ]);
    // FIXME
    // Have not consider onBand yet, where tick els is more than label els.
    labelEls = labelEls || [];
    tickEls = tickEls || [];
    var firstLabel = labelEls[0];
    var nextLabel = labelEls[1];
    var lastLabel = labelEls[labelEls.length - 1];
    var prevLabel = labelEls[labelEls.length - 2];
    var firstTick = tickEls[0];
    var nextTick = tickEls[1];
    var lastTick = tickEls[tickEls.length - 1];
    var prevTick = tickEls[tickEls.length - 2];
    if (showMinLabel === false) {
        $c3aa696b981feb10$var$ignoreEl(firstLabel);
        $c3aa696b981feb10$var$ignoreEl(firstTick);
    } else if ($c3aa696b981feb10$var$isTwoLabelOverlapped(firstLabel, nextLabel)) {
        if (showMinLabel) {
            $c3aa696b981feb10$var$ignoreEl(nextLabel);
            $c3aa696b981feb10$var$ignoreEl(nextTick);
        } else {
            $c3aa696b981feb10$var$ignoreEl(firstLabel);
            $c3aa696b981feb10$var$ignoreEl(firstTick);
        }
    }
    if (showMaxLabel === false) {
        $c3aa696b981feb10$var$ignoreEl(lastLabel);
        $c3aa696b981feb10$var$ignoreEl(lastTick);
    } else if ($c3aa696b981feb10$var$isTwoLabelOverlapped(prevLabel, lastLabel)) {
        if (showMaxLabel) {
            $c3aa696b981feb10$var$ignoreEl(prevLabel);
            $c3aa696b981feb10$var$ignoreEl(prevTick);
        } else {
            $c3aa696b981feb10$var$ignoreEl(lastLabel);
            $c3aa696b981feb10$var$ignoreEl(lastTick);
        }
    }
}
function $c3aa696b981feb10$var$ignoreEl(el) {
    el && (el.ignore = true);
}
function $c3aa696b981feb10$var$isTwoLabelOverlapped(current, next) {
    // current and next has the same rotation.
    var firstRect = current && current.getBoundingRect().clone();
    var nextRect = next && next.getBoundingRect().clone();
    if (!firstRect || !nextRect) return;
    // When checking intersect of two rotated labels, we use mRotationBack
    // to avoid that boundingRect is enlarge when using `boundingRect.applyTransform`.
    var mRotationBack = $27fca49e20b3ee21$export$f0954fd7d5368655([]);
    $27fca49e20b3ee21$export$bb628a54ab399bc9(mRotationBack, mRotationBack, -current.rotation);
    firstRect.applyTransform($27fca49e20b3ee21$export$6e3a27864ab166fe([], mRotationBack, current.getLocalTransform()));
    nextRect.applyTransform($27fca49e20b3ee21$export$6e3a27864ab166fe([], mRotationBack, next.getLocalTransform()));
    return firstRect.intersect(nextRect);
}
function $c3aa696b981feb10$var$isNameLocationCenter(nameLocation) {
    return nameLocation === "middle" || nameLocation === "center";
}
function $c3aa696b981feb10$var$createTicks(ticksCoords, tickTransform, tickEndCoord, tickLineStyle, anidPrefix) {
    var tickEls = [];
    var pt1 = [];
    var pt2 = [];
    for(var i = 0; i < ticksCoords.length; i++){
        var tickCoord = ticksCoords[i].coord;
        pt1[0] = tickCoord;
        pt1[1] = 0;
        pt2[0] = tickCoord;
        pt2[1] = tickEndCoord;
        if (tickTransform) {
            (0, $187eb1bf1a49fd34$export$9f9dcb98c894b623)(pt1, pt1, tickTransform);
            (0, $187eb1bf1a49fd34$export$9f9dcb98c894b623)(pt2, pt2, tickTransform);
        }
        // Tick line, Not use group transform to have better line draw
        var tickEl = new $bb4cc8f9efee5de5$export$2e2bcd8739ae039({
            shape: {
                x1: pt1[0],
                y1: pt1[1],
                x2: pt2[0],
                y2: pt2[1]
            },
            style: tickLineStyle,
            z2: 2,
            autoBatch: true,
            silent: true
        });
        $6aec2e68b45f8796$export$8b4b620d7f4aad1b(tickEl.shape, tickEl.style.lineWidth);
        tickEl.anid = anidPrefix + "_" + ticksCoords[i].tickValue;
        tickEls.push(tickEl);
    }
    return tickEls;
}
function $c3aa696b981feb10$var$buildAxisMajorTicks(group, transformGroup, axisModel, opt) {
    var axis = axisModel.axis;
    var tickModel = axisModel.getModel("axisTick");
    var shown = tickModel.get("show");
    if (shown === "auto" && opt.handleAutoShown) shown = opt.handleAutoShown("axisTick");
    if (!shown || axis.scale.isBlank()) return;
    var lineStyleModel = tickModel.getModel("lineStyle");
    var tickEndCoord = opt.tickDirection * tickModel.get("length");
    var ticksCoords = axis.getTicksCoords();
    var ticksEls = $c3aa696b981feb10$var$createTicks(ticksCoords, transformGroup.transform, tickEndCoord, (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)(lineStyleModel.getLineStyle(), {
        stroke: axisModel.get([
            "axisLine",
            "lineStyle",
            "color"
        ])
    }), "ticks");
    for(var i = 0; i < ticksEls.length; i++)group.add(ticksEls[i]);
    return ticksEls;
}
function $c3aa696b981feb10$var$buildAxisMinorTicks(group, transformGroup, axisModel, tickDirection) {
    var axis = axisModel.axis;
    var minorTickModel = axisModel.getModel("minorTick");
    if (!minorTickModel.get("show") || axis.scale.isBlank()) return;
    var minorTicksCoords = axis.getMinorTicksCoords();
    if (!minorTicksCoords.length) return;
    var lineStyleModel = minorTickModel.getModel("lineStyle");
    var tickEndCoord = tickDirection * minorTickModel.get("length");
    var minorTickLineStyle = (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)(lineStyleModel.getLineStyle(), (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)(axisModel.getModel("axisTick").getLineStyle(), {
        stroke: axisModel.get([
            "axisLine",
            "lineStyle",
            "color"
        ])
    }));
    for(var i = 0; i < minorTicksCoords.length; i++){
        var minorTicksEls = $c3aa696b981feb10$var$createTicks(minorTicksCoords[i], transformGroup.transform, tickEndCoord, minorTickLineStyle, "minorticks_" + i);
        for(var k = 0; k < minorTicksEls.length; k++)group.add(minorTicksEls[k]);
    }
}
function $c3aa696b981feb10$var$buildAxisLabel(group, transformGroup, axisModel, opt) {
    var axis = axisModel.axis;
    var show = (0, $e44eb14c4271d0f9$export$8a4d17b6e8486e66)(opt.axisLabelShow, axisModel.get([
        "axisLabel",
        "show"
    ]));
    if (!show || axis.scale.isBlank()) return;
    var labelModel = axisModel.getModel("axisLabel");
    var labelMargin = labelModel.get("margin");
    var labels = axis.getViewLabels();
    // Special label rotate.
    var labelRotation = ((0, $e44eb14c4271d0f9$export$8a4d17b6e8486e66)(opt.labelRotate, labelModel.get("rotate")) || 0) * $c3aa696b981feb10$var$PI / 180;
    var labelLayout = $c3aa696b981feb10$var$AxisBuilder.innerTextLayout(opt.rotation, labelRotation, opt.labelDirection);
    var rawCategoryData = axisModel.getCategories && axisModel.getCategories(true);
    var labelEls = [];
    var silent = $c3aa696b981feb10$var$AxisBuilder.isLabelSilent(axisModel);
    var triggerEvent = axisModel.get("triggerEvent");
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(labels, function(labelItem, index) {
        var tickValue = axis.scale.type === "ordinal" ? axis.scale.getRawOrdinalNumber(labelItem.tickValue) : labelItem.tickValue;
        var formattedLabel = labelItem.formattedLabel;
        var rawLabel = labelItem.rawLabel;
        var itemLabelModel = labelModel;
        if (rawCategoryData && rawCategoryData[tickValue]) {
            var rawCategoryItem = rawCategoryData[tickValue];
            if ((0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(rawCategoryItem) && rawCategoryItem.textStyle) itemLabelModel = new (0, $d92ec0eb853c4005$export$2e2bcd8739ae039)(rawCategoryItem.textStyle, labelModel, axisModel.ecModel);
        }
        var textColor = itemLabelModel.getTextColor() || axisModel.get([
            "axisLine",
            "lineStyle",
            "color"
        ]);
        var tickCoord = axis.dataToCoord(tickValue);
        var align = itemLabelModel.getShallow("align", true) || labelLayout.textAlign;
        var alignMin = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(itemLabelModel.getShallow("alignMinLabel", true), align);
        var alignMax = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(itemLabelModel.getShallow("alignMaxLabel", true), align);
        var verticalAlign = itemLabelModel.getShallow("verticalAlign", true) || itemLabelModel.getShallow("baseline", true) || labelLayout.textVerticalAlign;
        var verticalAlignMin = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(itemLabelModel.getShallow("verticalAlignMinLabel", true), verticalAlign);
        var verticalAlignMax = (0, $e44eb14c4271d0f9$export$995e01f2f5c9d030)(itemLabelModel.getShallow("verticalAlignMaxLabel", true), verticalAlign);
        var textEl = new $6d12d9a137e168c2$export$2e2bcd8739ae039({
            x: tickCoord,
            y: opt.labelOffset + opt.labelDirection * labelMargin,
            rotation: labelLayout.rotation,
            silent: silent,
            z2: 10 + (labelItem.level || 0),
            style: (0, $75926670b032879d$export$f8998c3d0a13de59)(itemLabelModel, {
                text: formattedLabel,
                align: index === 0 ? alignMin : index === labels.length - 1 ? alignMax : align,
                verticalAlign: index === 0 ? verticalAlignMin : index === labels.length - 1 ? verticalAlignMax : verticalAlign,
                fill: (0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(textColor) ? textColor(// (1) In category axis with data zoom, tick is not the original
                // index of axis.data. So tick should not be exposed to user
                // in category axis.
                // (2) Compatible with previous version, which always use formatted label as
                // input. But in interval scale the formatted label is like '223,445', which
                // maked user replace ','. So we modify it to return original val but remain
                // it as 'string' to avoid error in replacing.
                axis.type === "category" ? rawLabel : axis.type === "value" ? tickValue + "" : tickValue, index) : textColor
            })
        });
        textEl.anid = "label_" + tickValue;
        // Pack data for mouse event
        if (triggerEvent) {
            var eventData = $c3aa696b981feb10$var$AxisBuilder.makeAxisEventDataBase(axisModel);
            eventData.targetType = "axisLabel";
            eventData.value = rawLabel;
            eventData.tickIndex = index;
            if (axis.type === "category") eventData.dataIndex = tickValue;
            (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(textEl).eventData = eventData;
        }
        // FIXME
        transformGroup.add(textEl);
        textEl.updateTransform();
        labelEls.push(textEl);
        group.add(textEl);
        textEl.decomposeTransform();
    });
    return labelEls;
}
var $c3aa696b981feb10$export$2e2bcd8739ae039 = $c3aa696b981feb10$var$AxisBuilder;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

function $eb59b5306dc411bd$export$bb44f104e3c54dae(ecModel, api) {
    var result = {
        /**
     * key: makeKey(axis.model)
     * value: {
     *      axis,
     *      coordSys,
     *      axisPointerModel,
     *      triggerTooltip,
     *      triggerEmphasis,
     *      involveSeries,
     *      snap,
     *      seriesModels,
     *      seriesDataCount
     * }
     */ axesInfo: {},
        seriesInvolved: false,
        /**
     * key: makeKey(coordSys.model)
     * value: Object: key makeKey(axis.model), value: axisInfo
     */ coordSysAxesInfo: {},
        coordSysMap: {}
    };
    $eb59b5306dc411bd$var$collectAxesInfo(result, ecModel, api);
    // Check seriesInvolved for performance, in case too many series in some chart.
    result.seriesInvolved && $eb59b5306dc411bd$var$collectSeriesInfo(result, ecModel);
    return result;
}
function $eb59b5306dc411bd$var$collectAxesInfo(result, ecModel, api) {
    var globalTooltipModel = ecModel.getComponent("tooltip");
    var globalAxisPointerModel = ecModel.getComponent("axisPointer");
    // links can only be set on global.
    var linksOption = globalAxisPointerModel.get("link", true) || [];
    var linkGroups = [];
    // Collect axes info.
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(api.getCoordinateSystems(), function(coordSys) {
        // Some coordinate system do not support axes, like geo.
        if (!coordSys.axisPointerEnabled) return;
        var coordSysKey = $eb59b5306dc411bd$export$d01b444bafb1a792(coordSys.model);
        var axesInfoInCoordSys = result.coordSysAxesInfo[coordSysKey] = {};
        result.coordSysMap[coordSysKey] = coordSys;
        // Set tooltip (like 'cross') is a convenient way to show axisPointer
        // for user. So we enable setting tooltip on coordSys model.
        var coordSysModel = coordSys.model;
        var baseTooltipModel = coordSysModel.getModel("tooltip", globalTooltipModel);
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(coordSys.getAxes(), (0, $e44eb14c4271d0f9$export$c3095a23b368d1f2)(saveTooltipAxisInfo, false, null));
        // If axis tooltip used, choose tooltip axis for each coordSys.
        // Notice this case: coordSys is `grid` but not `cartesian2D` here.
        if (coordSys.getTooltipAxes && globalTooltipModel && baseTooltipModel.get("show")) {
            // Compatible with previous logic. But series.tooltip.trigger: 'axis'
            // or series.data[n].tooltip.trigger: 'axis' are not support any more.
            var triggerAxis = baseTooltipModel.get("trigger") === "axis";
            var cross = baseTooltipModel.get([
                "axisPointer",
                "type"
            ]) === "cross";
            var tooltipAxes = coordSys.getTooltipAxes(baseTooltipModel.get([
                "axisPointer",
                "axis"
            ]));
            if (triggerAxis || cross) (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(tooltipAxes.baseAxes, (0, $e44eb14c4271d0f9$export$c3095a23b368d1f2)(saveTooltipAxisInfo, cross ? "cross" : true, triggerAxis));
            if (cross) (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(tooltipAxes.otherAxes, (0, $e44eb14c4271d0f9$export$c3095a23b368d1f2)(saveTooltipAxisInfo, "cross", false));
        }
        // fromTooltip: true | false | 'cross'
        // triggerTooltip: true | false | null
        function saveTooltipAxisInfo(fromTooltip, triggerTooltip, axis) {
            var axisPointerModel = axis.model.getModel("axisPointer", globalAxisPointerModel);
            var axisPointerShow = axisPointerModel.get("show");
            if (!axisPointerShow || axisPointerShow === "auto" && !fromTooltip && !$eb59b5306dc411bd$var$isHandleTrigger(axisPointerModel)) return;
            if (triggerTooltip == null) triggerTooltip = axisPointerModel.get("triggerTooltip");
            axisPointerModel = fromTooltip ? $eb59b5306dc411bd$var$makeAxisPointerModel(axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) : axisPointerModel;
            var snap = axisPointerModel.get("snap");
            var triggerEmphasis = axisPointerModel.get("triggerEmphasis");
            var axisKey = $eb59b5306dc411bd$export$d01b444bafb1a792(axis.model);
            var involveSeries = triggerTooltip || snap || axis.type === "category";
            // If result.axesInfo[key] exist, override it (tooltip has higher priority).
            var axisInfo = result.axesInfo[axisKey] = {
                key: axisKey,
                axis: axis,
                coordSys: coordSys,
                axisPointerModel: axisPointerModel,
                triggerTooltip: triggerTooltip,
                triggerEmphasis: triggerEmphasis,
                involveSeries: involveSeries,
                snap: snap,
                useHandle: $eb59b5306dc411bd$var$isHandleTrigger(axisPointerModel),
                seriesModels: [],
                linkGroup: null
            };
            axesInfoInCoordSys[axisKey] = axisInfo;
            result.seriesInvolved = result.seriesInvolved || involveSeries;
            var groupIndex = $eb59b5306dc411bd$var$getLinkGroupIndex(linksOption, axis);
            if (groupIndex != null) {
                var linkGroup = linkGroups[groupIndex] || (linkGroups[groupIndex] = {
                    axesInfo: {}
                });
                linkGroup.axesInfo[axisKey] = axisInfo;
                linkGroup.mapper = linksOption[groupIndex].mapper;
                axisInfo.linkGroup = linkGroup;
            }
        }
    });
}
function $eb59b5306dc411bd$var$makeAxisPointerModel(axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) {
    var tooltipAxisPointerModel = baseTooltipModel.getModel("axisPointer");
    var fields = [
        "type",
        "snap",
        "lineStyle",
        "shadowStyle",
        "label",
        "animation",
        "animationDurationUpdate",
        "animationEasingUpdate",
        "z"
    ];
    var volatileOption = {};
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(fields, function(field) {
        volatileOption[field] = (0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(tooltipAxisPointerModel.get(field));
    });
    // category axis do not auto snap, otherwise some tick that do not
    // has value can not be hovered. value/time/log axis default snap if
    // triggered from tooltip and trigger tooltip.
    volatileOption.snap = axis.type !== "category" && !!triggerTooltip;
    // Compatible with previous behavior, tooltip axis does not show label by default.
    // Only these properties can be overridden from tooltip to axisPointer.
    if (tooltipAxisPointerModel.get("type") === "cross") volatileOption.type = "line";
    var labelOption = volatileOption.label || (volatileOption.label = {});
    // Follow the convention, do not show label when triggered by tooltip by default.
    labelOption.show == null && (labelOption.show = false);
    if (fromTooltip === "cross") {
        // When 'cross', both axes show labels.
        var tooltipAxisPointerLabelShow = tooltipAxisPointerModel.get([
            "label",
            "show"
        ]);
        labelOption.show = tooltipAxisPointerLabelShow != null ? tooltipAxisPointerLabelShow : true;
        // If triggerTooltip, this is a base axis, which should better not use cross style
        // (cross style is dashed by default)
        if (!triggerTooltip) {
            var crossStyle = volatileOption.lineStyle = tooltipAxisPointerModel.get("crossStyle");
            crossStyle && (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)(labelOption, crossStyle.textStyle);
        }
    }
    return axis.model.getModel("axisPointer", new (0, $d92ec0eb853c4005$export$2e2bcd8739ae039)(volatileOption, globalAxisPointerModel, ecModel));
}
function $eb59b5306dc411bd$var$collectSeriesInfo(result, ecModel) {
    // Prepare data for axis trigger
    ecModel.eachSeries(function(seriesModel) {
        // Notice this case: this coordSys is `cartesian2D` but not `grid`.
        var coordSys = seriesModel.coordinateSystem;
        var seriesTooltipTrigger = seriesModel.get([
            "tooltip",
            "trigger"
        ], true);
        var seriesTooltipShow = seriesModel.get([
            "tooltip",
            "show"
        ], true);
        if (!coordSys || seriesTooltipTrigger === "none" || seriesTooltipTrigger === false || seriesTooltipTrigger === "item" || seriesTooltipShow === false || seriesModel.get([
            "axisPointer",
            "show"
        ], true) === false) return;
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(result.coordSysAxesInfo[$eb59b5306dc411bd$export$d01b444bafb1a792(coordSys.model)], function(axisInfo) {
            var axis = axisInfo.axis;
            if (coordSys.getAxis(axis.dim) === axis) {
                axisInfo.seriesModels.push(seriesModel);
                axisInfo.seriesDataCount == null && (axisInfo.seriesDataCount = 0);
                axisInfo.seriesDataCount += seriesModel.getData().count();
            }
        });
    });
}
/**
 * For example:
 * {
 *     axisPointer: {
 *         links: [{
 *             xAxisIndex: [2, 4],
 *             yAxisIndex: 'all'
 *         }, {
 *             xAxisId: ['a5', 'a7'],
 *             xAxisName: 'xxx'
 *         }]
 *     }
 * }
 */ function $eb59b5306dc411bd$var$getLinkGroupIndex(linksOption, axis) {
    var axisModel = axis.model;
    var dim = axis.dim;
    for(var i = 0; i < linksOption.length; i++){
        var linkOption = linksOption[i] || {};
        if ($eb59b5306dc411bd$var$checkPropInLink(linkOption[dim + "AxisId"], axisModel.id) || $eb59b5306dc411bd$var$checkPropInLink(linkOption[dim + "AxisIndex"], axisModel.componentIndex) || $eb59b5306dc411bd$var$checkPropInLink(linkOption[dim + "AxisName"], axisModel.name)) return i;
    }
}
function $eb59b5306dc411bd$var$checkPropInLink(linkPropValue, axisPropValue) {
    return linkPropValue === "all" || (0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(linkPropValue) && (0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)(linkPropValue, axisPropValue) >= 0 || linkPropValue === axisPropValue;
}
function $eb59b5306dc411bd$export$f5ea32e3629d8043(axisModel) {
    var axisInfo = $eb59b5306dc411bd$export$bd39458db76002ab(axisModel);
    if (!axisInfo) return;
    var axisPointerModel = axisInfo.axisPointerModel;
    var scale = axisInfo.axis.scale;
    var option = axisPointerModel.option;
    var status = axisPointerModel.get("status");
    var value = axisPointerModel.get("value");
    // Parse init value for category and time axis.
    if (value != null) value = scale.parse(value);
    var useHandle = $eb59b5306dc411bd$var$isHandleTrigger(axisPointerModel);
    // If `handle` used, `axisPointer` will always be displayed, so value
    // and status should be initialized.
    if (status == null) option.status = useHandle ? "show" : "hide";
    var extent = scale.getExtent().slice();
    extent[0] > extent[1] && extent.reverse();
    if (// Pick a value on axis when initializing.
    value == null || value > extent[1]) // Make handle displayed on the end of the axis when init, which looks better.
    value = extent[1];
    if (value < extent[0]) value = extent[0];
    option.value = value;
    if (useHandle) option.status = axisInfo.axis.scale.isBlank() ? "hide" : "show";
}
function $eb59b5306dc411bd$export$bd39458db76002ab(axisModel) {
    var coordSysAxesInfo = (axisModel.ecModel.getComponent("axisPointer") || {}).coordSysAxesInfo;
    return coordSysAxesInfo && coordSysAxesInfo.axesInfo[$eb59b5306dc411bd$export$d01b444bafb1a792(axisModel)];
}
function $eb59b5306dc411bd$export$3b06fce3f68b734(axisModel) {
    var axisInfo = $eb59b5306dc411bd$export$bd39458db76002ab(axisModel);
    return axisInfo && axisInfo.axisPointerModel;
}
function $eb59b5306dc411bd$var$isHandleTrigger(axisPointerModel) {
    return !!axisPointerModel.get([
        "handle",
        "show"
    ]);
}
function $eb59b5306dc411bd$export$d01b444bafb1a792(model) {
    return model.type + "||" + model.id;
}



var $a773ac8b7f6b4266$var$axisPointerClazz = {};
/**
 * Base class of AxisView.
 */ var $a773ac8b7f6b4266$var$AxisView = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(AxisView, _super);
    function AxisView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = AxisView.type;
        return _this;
    }
    /**
   * @override
   */ AxisView.prototype.render = function(axisModel, ecModel, api, payload) {
        // FIXME
        // This process should proformed after coordinate systems updated
        // (axis scale updated), and should be performed each time update.
        // So put it here temporarily, although it is not appropriate to
        // put a model-writing procedure in `view`.
        this.axisPointerClass && $eb59b5306dc411bd$export$f5ea32e3629d8043(axisModel);
        _super.prototype.render.apply(this, arguments);
        this._doUpdateAxisPointerClass(axisModel, api, true);
    };
    /**
   * Action handler.
   */ AxisView.prototype.updateAxisPointer = function(axisModel, ecModel, api, payload) {
        this._doUpdateAxisPointerClass(axisModel, api, false);
    };
    /**
   * @override
   */ AxisView.prototype.remove = function(ecModel, api) {
        var axisPointer = this._axisPointer;
        axisPointer && axisPointer.remove(api);
    };
    /**
   * @override
   */ AxisView.prototype.dispose = function(ecModel, api) {
        this._disposeAxisPointer(api);
        _super.prototype.dispose.apply(this, arguments);
    };
    AxisView.prototype._doUpdateAxisPointerClass = function(axisModel, api, forceRender) {
        var Clazz = AxisView.getAxisPointerClass(this.axisPointerClass);
        if (!Clazz) return;
        var axisPointerModel = $eb59b5306dc411bd$export$3b06fce3f68b734(axisModel);
        axisPointerModel ? (this._axisPointer || (this._axisPointer = new Clazz())).render(axisModel, axisPointerModel, api, forceRender) : this._disposeAxisPointer(api);
    };
    AxisView.prototype._disposeAxisPointer = function(api) {
        this._axisPointer && this._axisPointer.dispose(api);
        this._axisPointer = null;
    };
    AxisView.registerAxisPointerClass = function(type, clazz) {
        if ($a773ac8b7f6b4266$var$axisPointerClazz[type]) throw new Error("axisPointer " + type + " exists");
        $a773ac8b7f6b4266$var$axisPointerClazz[type] = clazz;
    };
    AxisView.getAxisPointerClass = function(type) {
        return type && $a773ac8b7f6b4266$var$axisPointerClazz[type];
    };
    AxisView.type = "axis";
    return AxisView;
}((0, $ced42ef9869a1e4c$export$2e2bcd8739ae039));
var $a773ac8b7f6b4266$export$2e2bcd8739ae039 = $a773ac8b7f6b4266$var$AxisView;



/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 


var $491ad46d0ead70be$var$inner = (0, $8917c02fd8256c67$export$64df9f8d92ae083f)();
function $491ad46d0ead70be$export$c80b7ef1527ec8c9(axisView, axisGroup, axisModel, gridModel) {
    var axis = axisModel.axis;
    if (axis.scale.isBlank()) return;
    // TODO: TYPE
    var splitAreaModel = axisModel.getModel("splitArea");
    var areaStyleModel = splitAreaModel.getModel("areaStyle");
    var areaColors = areaStyleModel.get("color");
    var gridRect = gridModel.coordinateSystem.getRect();
    var ticksCoords = axis.getTicksCoords({
        tickModel: splitAreaModel,
        clamp: true
    });
    if (!ticksCoords.length) return;
    // For Making appropriate splitArea animation, the color and anid
    // should be corresponding to previous one if possible.
    var areaColorsLen = areaColors.length;
    var lastSplitAreaColors = $491ad46d0ead70be$var$inner(axisView).splitAreaColors;
    var newSplitAreaColors = $e44eb14c4271d0f9$export$55f8aa7ef875b0a4();
    var colorIndex = 0;
    if (lastSplitAreaColors) for(var i = 0; i < ticksCoords.length; i++){
        var cIndex = lastSplitAreaColors.get(ticksCoords[i].tickValue);
        if (cIndex != null) {
            colorIndex = (cIndex + (areaColorsLen - 1) * i) % areaColorsLen;
            break;
        }
    }
    var prev = axis.toGlobalCoord(ticksCoords[0].coord);
    var areaStyle = areaStyleModel.getAreaStyle();
    areaColors = $e44eb14c4271d0f9$export$43bee75e5e14138e(areaColors) ? areaColors : [
        areaColors
    ];
    for(var i = 1; i < ticksCoords.length; i++){
        var tickCoord = axis.toGlobalCoord(ticksCoords[i].coord);
        var x = void 0;
        var y = void 0;
        var width = void 0;
        var height = void 0;
        if (axis.isHorizontal()) {
            x = prev;
            y = gridRect.y;
            width = tickCoord - x;
            height = gridRect.height;
            prev = x + width;
        } else {
            x = gridRect.x;
            y = prev;
            width = gridRect.width;
            height = tickCoord - y;
            prev = y + height;
        }
        var tickValue = ticksCoords[i - 1].tickValue;
        tickValue != null && newSplitAreaColors.set(tickValue, colorIndex);
        axisGroup.add(new $538026eba361a92a$export$2e2bcd8739ae039({
            anid: tickValue != null ? "area_" + tickValue : null,
            shape: {
                x: x,
                y: y,
                width: width,
                height: height
            },
            style: $e44eb14c4271d0f9$export$ebe90cb607ad99e({
                fill: areaColors[colorIndex]
            }, areaStyle),
            autoBatch: true,
            silent: true
        }));
        colorIndex = (colorIndex + 1) % areaColorsLen;
    }
    $491ad46d0ead70be$var$inner(axisView).splitAreaColors = newSplitAreaColors;
}
function $491ad46d0ead70be$export$48ebf2d6ce8ad076(axisView) {
    $491ad46d0ead70be$var$inner(axisView).splitAreaColors = null;
}



var $70872da0a46f4002$var$axisBuilderAttrs = [
    "axisLine",
    "axisTickLabel",
    "axisName"
];
var $70872da0a46f4002$var$selfBuilderAttrs = [
    "splitArea",
    "splitLine",
    "minorSplitLine"
];
var $70872da0a46f4002$var$CartesianAxisView = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(CartesianAxisView, _super);
    function CartesianAxisView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = CartesianAxisView.type;
        _this.axisPointerClass = "CartesianAxisPointer";
        return _this;
    }
    /**
   * @override
   */ CartesianAxisView.prototype.render = function(axisModel, ecModel, api, payload) {
        this.group.removeAll();
        var oldAxisGroup = this._axisGroup;
        this._axisGroup = new $748aea24eee93173$export$2e2bcd8739ae039();
        this.group.add(this._axisGroup);
        if (!axisModel.get("show")) return;
        var gridModel = axisModel.getCoordSysModel();
        var layout = $d21751c4b3ef4831$export$b3219800bda33a1f(gridModel, axisModel);
        var axisBuilder = new (0, $c3aa696b981feb10$export$2e2bcd8739ae039)(axisModel, $e44eb14c4271d0f9$export$8b58be045bf06082({
            handleAutoShown: function(elementType) {
                var cartesians = gridModel.coordinateSystem.getCartesians();
                for(var i = 0; i < cartesians.length; i++){
                    if ((0, $37de80c384edf4d3$export$dfc8cd28ed7b22a0)(cartesians[i].getOtherAxis(axisModel.axis).scale)) // Still show axis tick or axisLine if other axis is value / log
                    return true;
                }
                // Not show axisTick or axisLine if other axis is category / time
                return false;
            }
        }, layout));
        $e44eb14c4271d0f9$export$79b2f7037acddd43($70872da0a46f4002$var$axisBuilderAttrs, axisBuilder.add, axisBuilder);
        this._axisGroup.add(axisBuilder.getGroup());
        $e44eb14c4271d0f9$export$79b2f7037acddd43($70872da0a46f4002$var$selfBuilderAttrs, function(name) {
            if (axisModel.get([
                name,
                "show"
            ])) $70872da0a46f4002$var$axisElementBuilders[name](this, this._axisGroup, axisModel, gridModel);
        }, this);
        // THIS is a special case for bar racing chart.
        // Update the axis label from the natural initial layout to
        // sorted layout should has no animation.
        var isInitialSortFromBarRacing = payload && payload.type === "changeAxisOrder" && payload.isInitSort;
        if (!isInitialSortFromBarRacing) $6aec2e68b45f8796$export$64fcab7860c216ae(oldAxisGroup, this._axisGroup, axisModel);
        _super.prototype.render.call(this, axisModel, ecModel, api, payload);
    };
    CartesianAxisView.prototype.remove = function() {
        (0, $491ad46d0ead70be$export$48ebf2d6ce8ad076)(this);
    };
    CartesianAxisView.type = "cartesianAxis";
    return CartesianAxisView;
}((0, $a773ac8b7f6b4266$export$2e2bcd8739ae039));
var $70872da0a46f4002$var$axisElementBuilders = {
    splitLine: function(axisView, axisGroup, axisModel, gridModel) {
        var axis = axisModel.axis;
        if (axis.scale.isBlank()) return;
        var splitLineModel = axisModel.getModel("splitLine");
        var lineStyleModel = splitLineModel.getModel("lineStyle");
        var lineColors = lineStyleModel.get("color");
        lineColors = $e44eb14c4271d0f9$export$43bee75e5e14138e(lineColors) ? lineColors : [
            lineColors
        ];
        var gridRect = gridModel.coordinateSystem.getRect();
        var isHorizontal = axis.isHorizontal();
        var lineCount = 0;
        var ticksCoords = axis.getTicksCoords({
            tickModel: splitLineModel
        });
        var p1 = [];
        var p2 = [];
        var lineStyle = lineStyleModel.getLineStyle();
        for(var i = 0; i < ticksCoords.length; i++){
            var tickCoord = axis.toGlobalCoord(ticksCoords[i].coord);
            if (isHorizontal) {
                p1[0] = tickCoord;
                p1[1] = gridRect.y;
                p2[0] = tickCoord;
                p2[1] = gridRect.y + gridRect.height;
            } else {
                p1[0] = gridRect.x;
                p1[1] = tickCoord;
                p2[0] = gridRect.x + gridRect.width;
                p2[1] = tickCoord;
            }
            var colorIndex = lineCount++ % lineColors.length;
            var tickValue = ticksCoords[i].tickValue;
            var line = new $bb4cc8f9efee5de5$export$2e2bcd8739ae039({
                anid: tickValue != null ? "line_" + ticksCoords[i].tickValue : null,
                autoBatch: true,
                shape: {
                    x1: p1[0],
                    y1: p1[1],
                    x2: p2[0],
                    y2: p2[1]
                },
                style: $e44eb14c4271d0f9$export$ebe90cb607ad99e({
                    stroke: lineColors[colorIndex]
                }, lineStyle),
                silent: true
            });
            $6aec2e68b45f8796$export$8b4b620d7f4aad1b(line.shape, lineStyle.lineWidth);
            axisGroup.add(line);
        }
    },
    minorSplitLine: function(axisView, axisGroup, axisModel, gridModel) {
        var axis = axisModel.axis;
        var minorSplitLineModel = axisModel.getModel("minorSplitLine");
        var lineStyleModel = minorSplitLineModel.getModel("lineStyle");
        var gridRect = gridModel.coordinateSystem.getRect();
        var isHorizontal = axis.isHorizontal();
        var minorTicksCoords = axis.getMinorTicksCoords();
        if (!minorTicksCoords.length) return;
        var p1 = [];
        var p2 = [];
        var lineStyle = lineStyleModel.getLineStyle();
        for(var i = 0; i < minorTicksCoords.length; i++)for(var k = 0; k < minorTicksCoords[i].length; k++){
            var tickCoord = axis.toGlobalCoord(minorTicksCoords[i][k].coord);
            if (isHorizontal) {
                p1[0] = tickCoord;
                p1[1] = gridRect.y;
                p2[0] = tickCoord;
                p2[1] = gridRect.y + gridRect.height;
            } else {
                p1[0] = gridRect.x;
                p1[1] = tickCoord;
                p2[0] = gridRect.x + gridRect.width;
                p2[1] = tickCoord;
            }
            var line = new $bb4cc8f9efee5de5$export$2e2bcd8739ae039({
                anid: "minor_line_" + minorTicksCoords[i][k].tickValue,
                autoBatch: true,
                shape: {
                    x1: p1[0],
                    y1: p1[1],
                    x2: p2[0],
                    y2: p2[1]
                },
                style: lineStyle,
                silent: true
            });
            $6aec2e68b45f8796$export$8b4b620d7f4aad1b(line.shape, lineStyle.lineWidth);
            axisGroup.add(line);
        }
    },
    splitArea: function(axisView, axisGroup, axisModel, gridModel) {
        (0, $491ad46d0ead70be$export$c80b7ef1527ec8c9)(axisView, axisGroup, axisModel, gridModel);
    }
};
var $70872da0a46f4002$export$b6d40cd875b8a1c8 = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(CartesianXAxisView, _super);
    function CartesianXAxisView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = CartesianXAxisView.type;
        return _this;
    }
    CartesianXAxisView.type = "xAxis";
    return CartesianXAxisView;
}($70872da0a46f4002$var$CartesianAxisView);
var $70872da0a46f4002$export$417e1bdd0616e0dc = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(CartesianYAxisView, _super);
    function CartesianYAxisView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = $70872da0a46f4002$export$b6d40cd875b8a1c8.type;
        return _this;
    }
    CartesianYAxisView.type = "yAxis";
    return CartesianYAxisView;
}($70872da0a46f4002$var$CartesianAxisView);
var $70872da0a46f4002$export$2e2bcd8739ae039 = $70872da0a46f4002$var$CartesianAxisView;


// Grid view
var $2f40d995090d05b4$var$GridView = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(GridView, _super);
    function GridView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "grid";
        return _this;
    }
    GridView.prototype.render = function(gridModel, ecModel) {
        this.group.removeAll();
        if (gridModel.get("show")) this.group.add(new (0, $538026eba361a92a$export$2e2bcd8739ae039)({
            shape: gridModel.coordinateSystem.getRect(),
            style: (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)({
                fill: gridModel.get("backgroundColor")
            }, gridModel.getItemStyle()),
            silent: true,
            z2: -1
        }));
    };
    GridView.type = "grid";
    return GridView;
}((0, $ced42ef9869a1e4c$export$2e2bcd8739ae039));
var $2f40d995090d05b4$var$extraOption = {
    // gridIndex: 0,
    // gridId: '',
    offset: 0
};
function $2f40d995090d05b4$export$4b3e715f166fdd78(registers) {
    registers.registerComponentView($2f40d995090d05b4$var$GridView);
    registers.registerComponentModel((0, $bfbbe02657a92ac8$export$2e2bcd8739ae039));
    registers.registerCoordinateSystem("cartesian2d", (0, $6e18b404f1500a02$export$2e2bcd8739ae039));
    (0, $e31f65e0d2530417$export$2e2bcd8739ae039)(registers, "x", (0, $5089e207da388b1f$export$483dc37e6ad83a3c), $2f40d995090d05b4$var$extraOption);
    (0, $e31f65e0d2530417$export$2e2bcd8739ae039)(registers, "y", (0, $5089e207da388b1f$export$483dc37e6ad83a3c), $2f40d995090d05b4$var$extraOption);
    registers.registerComponentView((0, $70872da0a46f4002$export$b6d40cd875b8a1c8));
    registers.registerComponentView((0, $70872da0a46f4002$export$417e1bdd0616e0dc));
    registers.registerPreprocessor(function(option) {
        // Only create grid when need
        if (option.xAxis && option.yAxis && !option.grid) option.grid = {};
    });
}


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 





var $719d7e3d648d22b6$var$inner = (0, $8917c02fd8256c67$export$64df9f8d92ae083f)();
var $719d7e3d648d22b6$var$clone = $e44eb14c4271d0f9$export$9cd59f9826255e47;
var $719d7e3d648d22b6$var$bind = $e44eb14c4271d0f9$export$2385a24977818dd0;
/**
 * Base axis pointer class in 2D.
 */ var $719d7e3d648d22b6$var$BaseAxisPointer = /** @class */ function() {
    function BaseAxisPointer() {
        this._dragging = false;
        /**
     * In px, arbitrary value. Do not set too small,
     * no animation is ok for most cases.
     */ this.animationThreshold = 15;
    }
    /**
   * @implement
   */ BaseAxisPointer.prototype.render = function(axisModel, axisPointerModel, api, forceRender) {
        var value = axisPointerModel.get("value");
        var status = axisPointerModel.get("status");
        // Bind them to `this`, not in closure, otherwise they will not
        // be replaced when user calling setOption in not merge mode.
        this._axisModel = axisModel;
        this._axisPointerModel = axisPointerModel;
        this._api = api;
        // Optimize: `render` will be called repeatedly during mouse move.
        // So it is power consuming if performing `render` each time,
        // especially on mobile device.
        if (!forceRender && this._lastValue === value && this._lastStatus === status) return;
        this._lastValue = value;
        this._lastStatus = status;
        var group = this._group;
        var handle = this._handle;
        if (!status || status === "hide") {
            // Do not clear here, for animation better.
            group && group.hide();
            handle && handle.hide();
            return;
        }
        group && group.show();
        handle && handle.show();
        // Otherwise status is 'show'
        var elOption = {};
        this.makeElOption(elOption, value, axisModel, axisPointerModel, api);
        // Enable change axis pointer type.
        var graphicKey = elOption.graphicKey;
        if (graphicKey !== this._lastGraphicKey) this.clear(api);
        this._lastGraphicKey = graphicKey;
        var moveAnimation = this._moveAnimation = this.determineAnimation(axisModel, axisPointerModel);
        if (!group) {
            group = this._group = new $6aec2e68b45f8796$exports.Group();
            this.createPointerEl(group, elOption, axisModel, axisPointerModel);
            this.createLabelEl(group, elOption, axisModel, axisPointerModel);
            api.getZr().add(group);
        } else {
            var doUpdateProps = $e44eb14c4271d0f9$export$c3095a23b368d1f2($719d7e3d648d22b6$var$updateProps, axisPointerModel, moveAnimation);
            this.updatePointerEl(group, elOption, doUpdateProps);
            this.updateLabelEl(group, elOption, doUpdateProps, axisPointerModel);
        }
        $719d7e3d648d22b6$var$updateMandatoryProps(group, axisPointerModel, true);
        this._renderHandle(value);
    };
    /**
   * @implement
   */ BaseAxisPointer.prototype.remove = function(api) {
        this.clear(api);
    };
    /**
   * @implement
   */ BaseAxisPointer.prototype.dispose = function(api) {
        this.clear(api);
    };
    /**
   * @protected
   */ BaseAxisPointer.prototype.determineAnimation = function(axisModel, axisPointerModel) {
        var animation = axisPointerModel.get("animation");
        var axis = axisModel.axis;
        var isCategoryAxis = axis.type === "category";
        var useSnap = axisPointerModel.get("snap");
        // Value axis without snap always do not snap.
        if (!useSnap && !isCategoryAxis) return false;
        if (animation === "auto" || animation == null) {
            var animationThreshold = this.animationThreshold;
            if (isCategoryAxis && axis.getBandWidth() > animationThreshold) return true;
            // It is important to auto animation when snap used. Consider if there is
            // a dataZoom, animation will be disabled when too many points exist, while
            // it will be enabled for better visual effect when little points exist.
            if (useSnap) {
                var seriesDataCount = $eb59b5306dc411bd$export$bd39458db76002ab(axisModel).seriesDataCount;
                var axisExtent = axis.getExtent();
                // Approximate band width
                return Math.abs(axisExtent[0] - axisExtent[1]) / seriesDataCount > animationThreshold;
            }
            return false;
        }
        return animation === true;
    };
    /**
   * add {pointer, label, graphicKey} to elOption
   * @protected
   */ BaseAxisPointer.prototype.makeElOption = function(elOption, value, axisModel, axisPointerModel, api) {
    // Should be implemenented by sub-class.
    };
    /**
   * @protected
   */ BaseAxisPointer.prototype.createPointerEl = function(group, elOption, axisModel, axisPointerModel) {
        var pointerOption = elOption.pointer;
        if (pointerOption) {
            var pointerEl = $719d7e3d648d22b6$var$inner(group).pointerEl = new $6aec2e68b45f8796$exports[pointerOption.type]($719d7e3d648d22b6$var$clone(elOption.pointer));
            group.add(pointerEl);
        }
    };
    /**
   * @protected
   */ BaseAxisPointer.prototype.createLabelEl = function(group, elOption, axisModel, axisPointerModel) {
        if (elOption.label) {
            var labelEl = $719d7e3d648d22b6$var$inner(group).labelEl = new $6aec2e68b45f8796$exports.Text($719d7e3d648d22b6$var$clone(elOption.label));
            group.add(labelEl);
            $719d7e3d648d22b6$var$updateLabelShowHide(labelEl, axisPointerModel);
        }
    };
    /**
   * @protected
   */ BaseAxisPointer.prototype.updatePointerEl = function(group, elOption, updateProps) {
        var pointerEl = $719d7e3d648d22b6$var$inner(group).pointerEl;
        if (pointerEl && elOption.pointer) {
            pointerEl.setStyle(elOption.pointer.style);
            updateProps(pointerEl, {
                shape: elOption.pointer.shape
            });
        }
    };
    /**
   * @protected
   */ BaseAxisPointer.prototype.updateLabelEl = function(group, elOption, updateProps, axisPointerModel) {
        var labelEl = $719d7e3d648d22b6$var$inner(group).labelEl;
        if (labelEl) {
            labelEl.setStyle(elOption.label.style);
            updateProps(labelEl, {
                // Consider text length change in vertical axis, animation should
                // be used on shape, otherwise the effect will be weird.
                // TODOTODO
                // shape: elOption.label.shape,
                x: elOption.label.x,
                y: elOption.label.y
            });
            $719d7e3d648d22b6$var$updateLabelShowHide(labelEl, axisPointerModel);
        }
    };
    /**
   * @private
   */ BaseAxisPointer.prototype._renderHandle = function(value) {
        if (this._dragging || !this.updateHandleTransform) return;
        var axisPointerModel = this._axisPointerModel;
        var zr = this._api.getZr();
        var handle = this._handle;
        var handleModel = axisPointerModel.getModel("handle");
        var status = axisPointerModel.get("status");
        if (!handleModel.get("show") || !status || status === "hide") {
            handle && zr.remove(handle);
            this._handle = null;
            return;
        }
        var isInit;
        if (!this._handle) {
            isInit = true;
            handle = this._handle = $6aec2e68b45f8796$exports.createIcon(handleModel.get("icon"), {
                cursor: "move",
                draggable: true,
                onmousemove: function(e) {
                    // For mobile device, prevent screen slider on the button.
                    $81f76356654e394a$export$fa6813432f753b0d(e.event);
                },
                onmousedown: $719d7e3d648d22b6$var$bind(this._onHandleDragMove, this, 0, 0),
                drift: $719d7e3d648d22b6$var$bind(this._onHandleDragMove, this),
                ondragend: $719d7e3d648d22b6$var$bind(this._onHandleDragEnd, this)
            });
            zr.add(handle);
        }
        $719d7e3d648d22b6$var$updateMandatoryProps(handle, axisPointerModel, false);
        // update style
        handle.setStyle(handleModel.getItemStyle(null, [
            "color",
            "borderColor",
            "borderWidth",
            "opacity",
            "shadowColor",
            "shadowBlur",
            "shadowOffsetX",
            "shadowOffsetY"
        ]));
        // update position
        var handleSize = handleModel.get("size");
        if (!$e44eb14c4271d0f9$export$43bee75e5e14138e(handleSize)) handleSize = [
            handleSize,
            handleSize
        ];
        handle.scaleX = handleSize[0] / 2;
        handle.scaleY = handleSize[1] / 2;
        $1eadeed02cc6d4a8$export$958e3e1a02eac4b6(this, "_doDispatchAxisPointer", handleModel.get("throttle") || 0, "fixRate");
        this._moveHandleToValue(value, isInit);
    };
    BaseAxisPointer.prototype._moveHandleToValue = function(value, isInit) {
        $719d7e3d648d22b6$var$updateProps(this._axisPointerModel, !isInit && this._moveAnimation, this._handle, $719d7e3d648d22b6$var$getHandleTransProps(this.getHandleTransform(value, this._axisModel, this._axisPointerModel)));
    };
    BaseAxisPointer.prototype._onHandleDragMove = function(dx, dy) {
        var handle = this._handle;
        if (!handle) return;
        this._dragging = true;
        // Persistent for throttle.
        var trans = this.updateHandleTransform($719d7e3d648d22b6$var$getHandleTransProps(handle), [
            dx,
            dy
        ], this._axisModel, this._axisPointerModel);
        this._payloadInfo = trans;
        handle.stopAnimation();
        handle.attr($719d7e3d648d22b6$var$getHandleTransProps(trans));
        $719d7e3d648d22b6$var$inner(handle).lastProp = null;
        this._doDispatchAxisPointer();
    };
    /**
   * Throttled method.
   */ BaseAxisPointer.prototype._doDispatchAxisPointer = function() {
        var handle = this._handle;
        if (!handle) return;
        var payloadInfo = this._payloadInfo;
        var axisModel = this._axisModel;
        this._api.dispatchAction({
            type: "updateAxisPointer",
            x: payloadInfo.cursorPoint[0],
            y: payloadInfo.cursorPoint[1],
            tooltipOption: payloadInfo.tooltipOption,
            axesInfo: [
                {
                    axisDim: axisModel.axis.dim,
                    axisIndex: axisModel.componentIndex
                }
            ]
        });
    };
    BaseAxisPointer.prototype._onHandleDragEnd = function() {
        this._dragging = false;
        var handle = this._handle;
        if (!handle) return;
        var value = this._axisPointerModel.get("value");
        // Consider snap or categroy axis, handle may be not consistent with
        // axisPointer. So move handle to align the exact value position when
        // drag ended.
        this._moveHandleToValue(value);
        // For the effect: tooltip will be shown when finger holding on handle
        // button, and will be hidden after finger left handle button.
        this._api.dispatchAction({
            type: "hideTip"
        });
    };
    /**
   * @private
   */ BaseAxisPointer.prototype.clear = function(api) {
        this._lastValue = null;
        this._lastStatus = null;
        var zr = api.getZr();
        var group = this._group;
        var handle = this._handle;
        if (zr && group) {
            this._lastGraphicKey = null;
            group && zr.remove(group);
            handle && zr.remove(handle);
            this._group = null;
            this._handle = null;
            this._payloadInfo = null;
        }
        $1eadeed02cc6d4a8$export$42ffd38884aecdac(this, "_doDispatchAxisPointer");
    };
    /**
   * @protected
   */ BaseAxisPointer.prototype.doClear = function() {
    // Implemented by sub-class if necessary.
    };
    BaseAxisPointer.prototype.buildLabel = function(xy, wh, xDimIndex) {
        xDimIndex = xDimIndex || 0;
        return {
            x: xy[xDimIndex],
            y: xy[1 - xDimIndex],
            width: wh[xDimIndex],
            height: wh[1 - xDimIndex]
        };
    };
    return BaseAxisPointer;
}();
function $719d7e3d648d22b6$var$updateProps(animationModel, moveAnimation, el, props) {
    // Animation optimize.
    if (!$719d7e3d648d22b6$var$propsEqual($719d7e3d648d22b6$var$inner(el).lastProp, props)) {
        $719d7e3d648d22b6$var$inner(el).lastProp = props;
        moveAnimation ? $6aec2e68b45f8796$exports.updateProps(el, props, animationModel) : (el.stopAnimation(), el.attr(props));
    }
}
function $719d7e3d648d22b6$var$propsEqual(lastProps, newProps) {
    if ($e44eb14c4271d0f9$export$a6cdc56e425d0d0a(lastProps) && $e44eb14c4271d0f9$export$a6cdc56e425d0d0a(newProps)) {
        var equals_1 = true;
        $e44eb14c4271d0f9$export$79b2f7037acddd43(newProps, function(item, key) {
            equals_1 = equals_1 && $719d7e3d648d22b6$var$propsEqual(lastProps[key], item);
        });
        return !!equals_1;
    } else return lastProps === newProps;
}
function $719d7e3d648d22b6$var$updateLabelShowHide(labelEl, axisPointerModel) {
    labelEl[axisPointerModel.get([
        "label",
        "show"
    ]) ? "show" : "hide"]();
}
function $719d7e3d648d22b6$var$getHandleTransProps(trans) {
    return {
        x: trans.x || 0,
        y: trans.y || 0,
        rotation: trans.rotation || 0
    };
}
function $719d7e3d648d22b6$var$updateMandatoryProps(group, axisPointerModel, silent) {
    var z = axisPointerModel.get("z");
    var zlevel = axisPointerModel.get("zlevel");
    group && group.traverse(function(el) {
        if (el.type !== "group") {
            z != null && (el.z = z);
            zlevel != null && (el.zlevel = zlevel);
            el.silent = silent;
        }
    });
}
var $719d7e3d648d22b6$export$2e2bcd8739ae039 = $719d7e3d648d22b6$var$BaseAxisPointer;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 







function $c8027138cd31e1e6$export$b7fe459c7cc50060(axisPointerModel) {
    var axisPointerType = axisPointerModel.get("type");
    var styleModel = axisPointerModel.getModel(axisPointerType + "Style");
    var style;
    if (axisPointerType === "line") {
        style = styleModel.getLineStyle();
        style.fill = null;
    } else if (axisPointerType === "shadow") {
        style = styleModel.getAreaStyle();
        style.stroke = null;
    }
    return style;
}
function $c8027138cd31e1e6$export$8206a9937c45910f(elOption, axisModel, axisPointerModel, api, labelPos) {
    var value = axisPointerModel.get("value");
    var text = $c8027138cd31e1e6$export$7cffee0f9aed39d0(value, axisModel.axis, axisModel.ecModel, axisPointerModel.get("seriesDataIndices"), {
        precision: axisPointerModel.get([
            "label",
            "precision"
        ]),
        formatter: axisPointerModel.get([
            "label",
            "formatter"
        ])
    });
    var labelModel = axisPointerModel.getModel("label");
    var paddings = $1594f6dc0ce39685$export$f3a38102c49f4268(labelModel.get("padding") || 0);
    var font = labelModel.getFont();
    var textRect = $1a2563e7d7856dd8$export$c381147bfed79d9f(text, font);
    var position = labelPos.position;
    var width = textRect.width + paddings[1] + paddings[3];
    var height = textRect.height + paddings[0] + paddings[2];
    // Adjust by align.
    var align = labelPos.align;
    align === "right" && (position[0] -= width);
    align === "center" && (position[0] -= width / 2);
    var verticalAlign = labelPos.verticalAlign;
    verticalAlign === "bottom" && (position[1] -= height);
    verticalAlign === "middle" && (position[1] -= height / 2);
    // Not overflow ec container
    $c8027138cd31e1e6$var$confineInContainer(position, width, height, api);
    var bgColor = labelModel.get("backgroundColor");
    if (!bgColor || bgColor === "auto") bgColor = axisModel.get([
        "axisLine",
        "lineStyle",
        "color"
    ]);
    elOption.label = {
        // shape: {x: 0, y: 0, width: width, height: height, r: labelModel.get('borderRadius')},
        x: position[0],
        y: position[1],
        style: (0, $75926670b032879d$export$f8998c3d0a13de59)(labelModel, {
            text: text,
            font: font,
            fill: labelModel.getTextColor(),
            padding: paddings,
            backgroundColor: bgColor
        }),
        // Label should be over axisPointer.
        z2: 10
    };
}
// Do not overflow ec container
function $c8027138cd31e1e6$var$confineInContainer(position, width, height, api) {
    var viewWidth = api.getWidth();
    var viewHeight = api.getHeight();
    position[0] = Math.min(position[0] + width, viewWidth) - width;
    position[1] = Math.min(position[1] + height, viewHeight) - height;
    position[0] = Math.max(position[0], 0);
    position[1] = Math.max(position[1], 0);
}
function $c8027138cd31e1e6$export$7cffee0f9aed39d0(value, axis, ecModel, seriesDataIndices, opt) {
    value = axis.scale.parse(value);
    var text = axis.scale.getLabel({
        value: value
    }, {
        // If `precision` is set, width can be fixed (like '12.00500'), which
        // helps to debounce when when moving label.
        precision: opt.precision
    });
    var formatter = opt.formatter;
    if (formatter) {
        var params_1 = {
            value: $de26deaeb9c20c8b$export$a5a32f324c1fa457(axis, {
                value: value
            }),
            axisDimension: axis.dim,
            axisIndex: axis.index,
            seriesData: []
        };
        $e44eb14c4271d0f9$export$79b2f7037acddd43(seriesDataIndices, function(idxItem) {
            var series = ecModel.getSeriesByIndex(idxItem.seriesIndex);
            var dataIndex = idxItem.dataIndexInside;
            var dataParams = series && series.getDataParams(dataIndex);
            dataParams && params_1.seriesData.push(dataParams);
        });
        if ($e44eb14c4271d0f9$export$844ec244b1367d54(formatter)) text = formatter.replace("{value}", text);
        else if ($e44eb14c4271d0f9$export$f6e2535fb5126e54(formatter)) text = formatter(params_1);
    }
    return text;
}
function $c8027138cd31e1e6$export$4bb66440324c3a3d(axis, value, layoutInfo) {
    var transform = $27fca49e20b3ee21$export$185802fd694ee1f5();
    $27fca49e20b3ee21$export$bb628a54ab399bc9(transform, transform, layoutInfo.rotation);
    $27fca49e20b3ee21$export$d73ee8ef04f5226a(transform, transform, layoutInfo.position);
    return $6aec2e68b45f8796$export$9f9dcb98c894b623([
        axis.dataToCoord(value),
        (layoutInfo.labelOffset || 0) + (layoutInfo.labelDirection || 1) * (layoutInfo.labelMargin || 0)
    ], transform);
}
function $c8027138cd31e1e6$export$fd3eb3812211a173(value, elOption, layoutInfo, axisModel, axisPointerModel, api) {
    // @ts-ignore
    var textLayout = (0, $c3aa696b981feb10$export$2e2bcd8739ae039).innerTextLayout(layoutInfo.rotation, 0, layoutInfo.labelDirection);
    layoutInfo.labelMargin = axisPointerModel.get([
        "label",
        "margin"
    ]);
    $c8027138cd31e1e6$export$8206a9937c45910f(elOption, axisModel, axisPointerModel, api, {
        position: $c8027138cd31e1e6$export$4bb66440324c3a3d(axisModel.axis, value, layoutInfo),
        align: textLayout.textAlign,
        verticalAlign: textLayout.textVerticalAlign
    });
}
function $c8027138cd31e1e6$export$885fa0ad5a826207(p1, p2, xDimIndex) {
    xDimIndex = xDimIndex || 0;
    return {
        x1: p1[xDimIndex],
        y1: p1[1 - xDimIndex],
        x2: p2[xDimIndex],
        y2: p2[1 - xDimIndex]
    };
}
function $c8027138cd31e1e6$export$a8b35248bcc02756(xy, wh, xDimIndex) {
    xDimIndex = xDimIndex || 0;
    return {
        x: xy[xDimIndex],
        y: xy[1 - xDimIndex],
        width: wh[xDimIndex],
        height: wh[1 - xDimIndex]
    };
}
function $c8027138cd31e1e6$export$b0cf82e7ebc0d7d0(cx, cy, r0, r, startAngle, endAngle) {
    return {
        cx: cx,
        cy: cy,
        r0: r0,
        r: r,
        startAngle: startAngle,
        endAngle: endAngle,
        clockwise: true
    };
}



var $95f20d3bbbbe3ec4$var$CartesianAxisPointer = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(CartesianAxisPointer, _super);
    function CartesianAxisPointer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
   * @override
   */ CartesianAxisPointer.prototype.makeElOption = function(elOption, value, axisModel, axisPointerModel, api) {
        var axis = axisModel.axis;
        var grid = axis.grid;
        var axisPointerType = axisPointerModel.get("type");
        var otherExtent = $95f20d3bbbbe3ec4$var$getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();
        var pixelValue = axis.toGlobalCoord(axis.dataToCoord(value, true));
        if (axisPointerType && axisPointerType !== "none") {
            var elStyle = $c8027138cd31e1e6$export$b7fe459c7cc50060(axisPointerModel);
            var pointerOption = $95f20d3bbbbe3ec4$var$pointerShapeBuilder[axisPointerType](axis, pixelValue, otherExtent);
            pointerOption.style = elStyle;
            elOption.graphicKey = pointerOption.type;
            elOption.pointer = pointerOption;
        }
        var layoutInfo = $d21751c4b3ef4831$export$b3219800bda33a1f(grid.model, axisModel);
        $c8027138cd31e1e6$export$fd3eb3812211a173(// @ts-ignore
        value, elOption, layoutInfo, axisModel, axisPointerModel, api);
    };
    /**
   * @override
   */ CartesianAxisPointer.prototype.getHandleTransform = function(value, axisModel, axisPointerModel) {
        var layoutInfo = $d21751c4b3ef4831$export$b3219800bda33a1f(axisModel.axis.grid.model, axisModel, {
            labelInside: false
        });
        // @ts-ignore
        layoutInfo.labelMargin = axisPointerModel.get([
            "handle",
            "margin"
        ]);
        var pos = $c8027138cd31e1e6$export$4bb66440324c3a3d(axisModel.axis, value, layoutInfo);
        return {
            x: pos[0],
            y: pos[1],
            rotation: layoutInfo.rotation + (layoutInfo.labelDirection < 0 ? Math.PI : 0)
        };
    };
    /**
   * @override
   */ CartesianAxisPointer.prototype.updateHandleTransform = function(transform, delta, axisModel, axisPointerModel) {
        var axis = axisModel.axis;
        var grid = axis.grid;
        var axisExtent = axis.getGlobalExtent(true);
        var otherExtent = $95f20d3bbbbe3ec4$var$getCartesian(grid, axis).getOtherAxis(axis).getGlobalExtent();
        var dimIndex = axis.dim === "x" ? 0 : 1;
        var currPosition = [
            transform.x,
            transform.y
        ];
        currPosition[dimIndex] += delta[dimIndex];
        currPosition[dimIndex] = Math.min(axisExtent[1], currPosition[dimIndex]);
        currPosition[dimIndex] = Math.max(axisExtent[0], currPosition[dimIndex]);
        var cursorOtherValue = (otherExtent[1] + otherExtent[0]) / 2;
        var cursorPoint = [
            cursorOtherValue,
            cursorOtherValue
        ];
        cursorPoint[dimIndex] = currPosition[dimIndex];
        // Make tooltip do not overlap axisPointer and in the middle of the grid.
        var tooltipOptions = [
            {
                verticalAlign: "middle"
            },
            {
                align: "center"
            }
        ];
        return {
            x: currPosition[0],
            y: currPosition[1],
            rotation: transform.rotation,
            cursorPoint: cursorPoint,
            tooltipOption: tooltipOptions[dimIndex]
        };
    };
    return CartesianAxisPointer;
}((0, $719d7e3d648d22b6$export$2e2bcd8739ae039));
function $95f20d3bbbbe3ec4$var$getCartesian(grid, axis) {
    var opt = {};
    opt[axis.dim + "AxisIndex"] = axis.index;
    return grid.getCartesian(opt);
}
var $95f20d3bbbbe3ec4$var$pointerShapeBuilder = {
    line: function(axis, pixelValue, otherExtent) {
        var targetShape = $c8027138cd31e1e6$export$885fa0ad5a826207([
            pixelValue,
            otherExtent[0]
        ], [
            pixelValue,
            otherExtent[1]
        ], $95f20d3bbbbe3ec4$var$getAxisDimIndex(axis));
        return {
            type: "Line",
            subPixelOptimize: true,
            shape: targetShape
        };
    },
    shadow: function(axis, pixelValue, otherExtent) {
        var bandWidth = Math.max(1, axis.getBandWidth());
        var span = otherExtent[1] - otherExtent[0];
        return {
            type: "Rect",
            shape: $c8027138cd31e1e6$export$a8b35248bcc02756([
                pixelValue - bandWidth / 2,
                otherExtent[0]
            ], [
                bandWidth,
                span
            ], $95f20d3bbbbe3ec4$var$getAxisDimIndex(axis))
        };
    }
};
function $95f20d3bbbbe3ec4$var$getAxisDimIndex(axis) {
    return axis.dim === "x" ? 0 : 1;
}
var $95f20d3bbbbe3ec4$export$2e2bcd8739ae039 = $95f20d3bbbbe3ec4$var$CartesianAxisPointer;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

var $0a2cc958164b16bb$var$AxisPointerModel = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(AxisPointerModel, _super);
    function AxisPointerModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = AxisPointerModel.type;
        return _this;
    }
    AxisPointerModel.type = "axisPointer";
    AxisPointerModel.defaultOption = {
        // 'auto' means that show when triggered by tooltip or handle.
        show: "auto",
        // zlevel: 0,
        z: 50,
        type: "line",
        // axispointer triggered by tootip determine snap automatically,
        // see `modelHelper`.
        snap: false,
        triggerTooltip: true,
        triggerEmphasis: true,
        value: null,
        status: null,
        link: [],
        // Do not set 'auto' here, otherwise global animation: false
        // will not effect at this axispointer.
        animation: null,
        animationDurationUpdate: 200,
        lineStyle: {
            color: "#B9BEC9",
            width: 1,
            type: "dashed"
        },
        shadowStyle: {
            color: "rgba(210,219,238,0.2)"
        },
        label: {
            show: true,
            formatter: null,
            precision: "auto",
            margin: 3,
            color: "#fff",
            padding: [
                5,
                7,
                5,
                7
            ],
            backgroundColor: "auto",
            borderColor: null,
            borderWidth: 0,
            borderRadius: 3
        },
        handle: {
            show: false,
            // eslint-disable-next-line
            icon: "M10.7,11.9v-1.3H9.3v1.3c-4.9,0.3-8.8,4.4-8.8,9.4c0,5,3.9,9.1,8.8,9.4h1.3c4.9-0.3,8.8-4.4,8.8-9.4C19.5,16.3,15.6,12.2,10.7,11.9z M13.3,24.4H6.7v-1.2h6.6z M13.3,22H6.7v-1.2h6.6z M13.3,19.6H6.7v-1.2h6.6z",
            size: 45,
            // handle margin is from symbol center to axis, which is stable when circular move.
            margin: 50,
            // color: '#1b8bbd'
            // color: '#2f4554'
            color: "#333",
            shadowBlur: 3,
            shadowColor: "#aaa",
            shadowOffsetX: 0,
            shadowOffsetY: 2,
            // For mobile performance
            throttle: 40
        }
    };
    return AxisPointerModel;
}((0, $a756077528c07361$export$2e2bcd8739ae039));
var $0a2cc958164b16bb$export$2e2bcd8739ae039 = $0a2cc958164b16bb$var$AxisPointerModel;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 


var $60456cb347f49a27$var$inner = (0, $8917c02fd8256c67$export$64df9f8d92ae083f)();
var $60456cb347f49a27$var$each = $e44eb14c4271d0f9$export$79b2f7037acddd43;
function $60456cb347f49a27$export$6503ec6e8aabbaf(key, api, handler) {
    if ((0, $de9e931273a116c1$export$2e2bcd8739ae039).node) return;
    var zr = api.getZr();
    $60456cb347f49a27$var$inner(zr).records || ($60456cb347f49a27$var$inner(zr).records = {});
    $60456cb347f49a27$var$initGlobalListeners(zr, api);
    var record = $60456cb347f49a27$var$inner(zr).records[key] || ($60456cb347f49a27$var$inner(zr).records[key] = {});
    record.handler = handler;
}
function $60456cb347f49a27$var$initGlobalListeners(zr, api) {
    if ($60456cb347f49a27$var$inner(zr).initialized) return;
    $60456cb347f49a27$var$inner(zr).initialized = true;
    useHandler("click", $e44eb14c4271d0f9$export$c3095a23b368d1f2($60456cb347f49a27$var$doEnter, "click"));
    useHandler("mousemove", $e44eb14c4271d0f9$export$c3095a23b368d1f2($60456cb347f49a27$var$doEnter, "mousemove"));
    // useHandler('mouseout', onLeave);
    useHandler("globalout", $60456cb347f49a27$var$onLeave);
    function useHandler(eventType, cb) {
        zr.on(eventType, function(e) {
            var dis = $60456cb347f49a27$var$makeDispatchAction(api);
            $60456cb347f49a27$var$each($60456cb347f49a27$var$inner(zr).records, function(record) {
                record && cb(record, e, dis.dispatchAction);
            });
            $60456cb347f49a27$var$dispatchTooltipFinally(dis.pendings, api);
        });
    }
}
function $60456cb347f49a27$var$dispatchTooltipFinally(pendings, api) {
    var showLen = pendings.showTip.length;
    var hideLen = pendings.hideTip.length;
    var actuallyPayload;
    if (showLen) actuallyPayload = pendings.showTip[showLen - 1];
    else if (hideLen) actuallyPayload = pendings.hideTip[hideLen - 1];
    if (actuallyPayload) {
        actuallyPayload.dispatchAction = null;
        api.dispatchAction(actuallyPayload);
    }
}
function $60456cb347f49a27$var$onLeave(record, e, dispatchAction) {
    record.handler("leave", null, dispatchAction);
}
function $60456cb347f49a27$var$doEnter(currTrigger, record, e, dispatchAction) {
    record.handler(currTrigger, e, dispatchAction);
}
function $60456cb347f49a27$var$makeDispatchAction(api) {
    var pendings = {
        showTip: [],
        hideTip: []
    };
    // FIXME
    // better approach?
    // 'showTip' and 'hideTip' can be triggered by axisPointer and tooltip,
    // which may be conflict, (axisPointer call showTip but tooltip call hideTip);
    // So we have to add "final stage" to merge those dispatched actions.
    var dispatchAction = function(payload) {
        var pendingList = pendings[payload.type];
        if (pendingList) pendingList.push(payload);
        else {
            payload.dispatchAction = dispatchAction;
            api.dispatchAction(payload);
        }
    };
    return {
        dispatchAction: dispatchAction,
        pendings: pendings
    };
}
function $60456cb347f49a27$export$d07f55d4c15c0440(key, api) {
    if ((0, $de9e931273a116c1$export$2e2bcd8739ae039).node) return;
    var zr = api.getZr();
    var record = ($60456cb347f49a27$var$inner(zr).records || {})[key];
    if (record) $60456cb347f49a27$var$inner(zr).records[key] = null;
}



var $c310571f36b92c32$var$AxisPointerView = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(AxisPointerView, _super);
    function AxisPointerView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = AxisPointerView.type;
        return _this;
    }
    AxisPointerView.prototype.render = function(globalAxisPointerModel, ecModel, api) {
        var globalTooltipModel = ecModel.getComponent("tooltip");
        var triggerOn = globalAxisPointerModel.get("triggerOn") || globalTooltipModel && globalTooltipModel.get("triggerOn") || "mousemove|click";
        // Register global listener in AxisPointerView to enable
        // AxisPointerView to be independent to Tooltip.
        $60456cb347f49a27$export$6503ec6e8aabbaf("axisPointer", api, function(currTrigger, e, dispatchAction) {
            // If 'none', it is not controlled by mouse totally.
            if (triggerOn !== "none" && (currTrigger === "leave" || triggerOn.indexOf(currTrigger) >= 0)) dispatchAction({
                type: "updateAxisPointer",
                currTrigger: currTrigger,
                x: e && e.offsetX,
                y: e && e.offsetY
            });
        });
    };
    AxisPointerView.prototype.remove = function(ecModel, api) {
        $60456cb347f49a27$export$d07f55d4c15c0440("axisPointer", api);
    };
    AxisPointerView.prototype.dispose = function(ecModel, api) {
        $60456cb347f49a27$export$d07f55d4c15c0440("axisPointer", api);
    };
    AxisPointerView.type = "axisPointer";
    return AxisPointerView;
}((0, $ced42ef9869a1e4c$export$2e2bcd8739ae039));
var $c310571f36b92c32$export$2e2bcd8739ae039 = $c310571f36b92c32$var$AxisPointerView;




/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

function $77c2379cfeed536f$export$2e2bcd8739ae039(finder, ecModel) {
    var point = [];
    var seriesIndex = finder.seriesIndex;
    var seriesModel;
    if (seriesIndex == null || !(seriesModel = ecModel.getSeriesByIndex(seriesIndex))) return {
        point: []
    };
    var data = seriesModel.getData();
    var dataIndex = $8917c02fd8256c67$export$42b26cae8b8d10(data, finder);
    if (dataIndex == null || dataIndex < 0 || $e44eb14c4271d0f9$export$43bee75e5e14138e(dataIndex)) return {
        point: []
    };
    var el = data.getItemGraphicEl(dataIndex);
    var coordSys = seriesModel.coordinateSystem;
    if (seriesModel.getTooltipPosition) point = seriesModel.getTooltipPosition(dataIndex) || [];
    else if (coordSys && coordSys.dataToPoint) {
        if (finder.isStacked) {
            var baseAxis = coordSys.getBaseAxis();
            var valueAxis = coordSys.getOtherAxis(baseAxis);
            var valueAxisDim = valueAxis.dim;
            var baseAxisDim = baseAxis.dim;
            var baseDataOffset = valueAxisDim === "x" || valueAxisDim === "radius" ? 1 : 0;
            var baseDim = data.mapDimension(baseAxisDim);
            var stackedData = [];
            stackedData[baseDataOffset] = data.get(baseDim, dataIndex);
            stackedData[1 - baseDataOffset] = data.get(data.getCalculationInfo("stackResultDimension"), dataIndex);
            point = coordSys.dataToPoint(stackedData) || [];
        } else point = coordSys.dataToPoint(data.getValues($e44eb14c4271d0f9$export$871de8747c9eaa88(coordSys.dimensions, function(dim) {
            return data.mapDimension(dim);
        }), dataIndex)) || [];
    } else if (el) {
        // Use graphic bounding rect
        var rect = el.getBoundingRect().clone();
        rect.applyTransform(el.transform);
        point = [
            rect.x + rect.width / 2,
            rect.y + rect.height / 2
        ];
    }
    return {
        point: point,
        el: el
    };
}



var $5a8a650252c1d4b8$var$inner = (0, $8917c02fd8256c67$export$64df9f8d92ae083f)();
function $5a8a650252c1d4b8$export$2e2bcd8739ae039(payload, ecModel, api) {
    var currTrigger = payload.currTrigger;
    var point = [
        payload.x,
        payload.y
    ];
    var finder = payload;
    var dispatchAction = payload.dispatchAction || (0, $e44eb14c4271d0f9$export$2385a24977818dd0)(api.dispatchAction, api);
    var coordSysAxesInfo = ecModel.getComponent("axisPointer").coordSysAxesInfo;
    // Pending
    // See #6121. But we are not able to reproduce it yet.
    if (!coordSysAxesInfo) return;
    if ($5a8a650252c1d4b8$var$illegalPoint(point)) // Used in the default behavior of `connection`: use the sample seriesIndex
    // and dataIndex. And also used in the tooltipView trigger.
    point = (0, $77c2379cfeed536f$export$2e2bcd8739ae039)({
        seriesIndex: finder.seriesIndex,
        // Do not use dataIndexInside from other ec instance.
        // FIXME: auto detect it?
        dataIndex: finder.dataIndex
    }, ecModel).point;
    var isIllegalPoint = $5a8a650252c1d4b8$var$illegalPoint(point);
    // Axis and value can be specified when calling dispatchAction({type: 'updateAxisPointer'}).
    // Notice: In this case, it is difficult to get the `point` (which is necessary to show
    // tooltip, so if point is not given, we just use the point found by sample seriesIndex
    // and dataIndex.
    var inputAxesInfo = finder.axesInfo;
    var axesInfo = coordSysAxesInfo.axesInfo;
    var shouldHide = currTrigger === "leave" || $5a8a650252c1d4b8$var$illegalPoint(point);
    var outputPayload = {};
    var showValueMap = {};
    var dataByCoordSys = {
        list: [],
        map: {}
    };
    var updaters = {
        showPointer: (0, $e44eb14c4271d0f9$export$c3095a23b368d1f2)($5a8a650252c1d4b8$var$showPointer, showValueMap),
        showTooltip: (0, $e44eb14c4271d0f9$export$c3095a23b368d1f2)($5a8a650252c1d4b8$var$showTooltip, dataByCoordSys)
    };
    // Process for triggered axes.
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(coordSysAxesInfo.coordSysMap, function(coordSys, coordSysKey) {
        // If a point given, it must be contained by the coordinate system.
        var coordSysContainsPoint = isIllegalPoint || coordSys.containPoint(point);
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(coordSysAxesInfo.coordSysAxesInfo[coordSysKey], function(axisInfo, key) {
            var axis = axisInfo.axis;
            var inputAxisInfo = $5a8a650252c1d4b8$var$findInputAxisInfo(inputAxesInfo, axisInfo);
            // If no inputAxesInfo, no axis is restricted.
            if (!shouldHide && coordSysContainsPoint && (!inputAxesInfo || inputAxisInfo)) {
                var val = inputAxisInfo && inputAxisInfo.value;
                if (val == null && !isIllegalPoint) val = axis.pointToData(point);
                val != null && $5a8a650252c1d4b8$var$processOnAxis(axisInfo, val, updaters, false, outputPayload);
            }
        });
    });
    // Process for linked axes.
    var linkTriggers = {};
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(axesInfo, function(tarAxisInfo, tarKey) {
        var linkGroup = tarAxisInfo.linkGroup;
        // If axis has been triggered in the previous stage, it should not be triggered by link.
        if (linkGroup && !showValueMap[tarKey]) (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(linkGroup.axesInfo, function(srcAxisInfo, srcKey) {
            var srcValItem = showValueMap[srcKey];
            // If srcValItem exist, source axis is triggered, so link to target axis.
            if (srcAxisInfo !== tarAxisInfo && srcValItem) {
                var val = srcValItem.value;
                linkGroup.mapper && (val = tarAxisInfo.axis.scale.parse(linkGroup.mapper(val, $5a8a650252c1d4b8$var$makeMapperParam(srcAxisInfo), $5a8a650252c1d4b8$var$makeMapperParam(tarAxisInfo))));
                linkTriggers[tarAxisInfo.key] = val;
            }
        });
    });
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(linkTriggers, function(val, tarKey) {
        $5a8a650252c1d4b8$var$processOnAxis(axesInfo[tarKey], val, updaters, true, outputPayload);
    });
    $5a8a650252c1d4b8$var$updateModelActually(showValueMap, axesInfo, outputPayload);
    $5a8a650252c1d4b8$var$dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction);
    $5a8a650252c1d4b8$var$dispatchHighDownActually(axesInfo, dispatchAction, api);
    return outputPayload;
}
function $5a8a650252c1d4b8$var$processOnAxis(axisInfo, newValue, updaters, noSnap, outputFinder) {
    var axis = axisInfo.axis;
    if (axis.scale.isBlank() || !axis.containData(newValue)) return;
    if (!axisInfo.involveSeries) {
        updaters.showPointer(axisInfo, newValue);
        return;
    }
    // Heavy calculation. So put it after axis.containData checking.
    var payloadInfo = $5a8a650252c1d4b8$var$buildPayloadsBySeries(newValue, axisInfo);
    var payloadBatch = payloadInfo.payloadBatch;
    var snapToValue = payloadInfo.snapToValue;
    // Fill content of event obj for echarts.connect.
    // By default use the first involved series data as a sample to connect.
    if (payloadBatch[0] && outputFinder.seriesIndex == null) (0, $e44eb14c4271d0f9$export$8b58be045bf06082)(outputFinder, payloadBatch[0]);
    // If no linkSource input, this process is for collecting link
    // target, where snap should not be accepted.
    if (!noSnap && axisInfo.snap) {
        if (axis.containData(snapToValue) && snapToValue != null) newValue = snapToValue;
    }
    updaters.showPointer(axisInfo, newValue, payloadBatch);
    // Tooltip should always be snapToValue, otherwise there will be
    // incorrect "axis value ~ series value" mapping displayed in tooltip.
    updaters.showTooltip(axisInfo, payloadInfo, snapToValue);
}
function $5a8a650252c1d4b8$var$buildPayloadsBySeries(value, axisInfo) {
    var axis = axisInfo.axis;
    var dim = axis.dim;
    var snapToValue = value;
    var payloadBatch = [];
    var minDist = Number.MAX_VALUE;
    var minDiff = -1;
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(axisInfo.seriesModels, function(series, idx) {
        var dataDim = series.getData().mapDimensionsAll(dim);
        var seriesNestestValue;
        var dataIndices;
        if (series.getAxisTooltipData) {
            var result = series.getAxisTooltipData(dataDim, value, axis);
            dataIndices = result.dataIndices;
            seriesNestestValue = result.nestestValue;
        } else {
            dataIndices = series.getData().indicesOfNearest(dataDim[0], value, // Add a threshold to avoid find the wrong dataIndex
            // when data length is not same.
            // false,
            axis.type === "category" ? 0.5 : null);
            if (!dataIndices.length) return;
            seriesNestestValue = series.getData().get(dataDim[0], dataIndices[0]);
        }
        if (seriesNestestValue == null || !isFinite(seriesNestestValue)) return;
        var diff = value - seriesNestestValue;
        var dist = Math.abs(diff);
        // Consider category case
        if (dist <= minDist) {
            if (dist < minDist || diff >= 0 && minDiff < 0) {
                minDist = dist;
                minDiff = diff;
                snapToValue = seriesNestestValue;
                payloadBatch.length = 0;
            }
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(dataIndices, function(dataIndex) {
                payloadBatch.push({
                    seriesIndex: series.seriesIndex,
                    dataIndexInside: dataIndex,
                    dataIndex: series.getData().getRawIndex(dataIndex)
                });
            });
        }
    });
    return {
        payloadBatch: payloadBatch,
        snapToValue: snapToValue
    };
}
function $5a8a650252c1d4b8$var$showPointer(showValueMap, axisInfo, value, payloadBatch) {
    showValueMap[axisInfo.key] = {
        value: value,
        payloadBatch: payloadBatch
    };
}
function $5a8a650252c1d4b8$var$showTooltip(dataByCoordSys, axisInfo, payloadInfo, value) {
    var payloadBatch = payloadInfo.payloadBatch;
    var axis = axisInfo.axis;
    var axisModel = axis.model;
    var axisPointerModel = axisInfo.axisPointerModel;
    // If no data, do not create anything in dataByCoordSys,
    // whose length will be used to judge whether dispatch action.
    if (!axisInfo.triggerTooltip || !payloadBatch.length) return;
    var coordSysModel = axisInfo.coordSys.model;
    var coordSysKey = $eb59b5306dc411bd$export$d01b444bafb1a792(coordSysModel);
    var coordSysItem = dataByCoordSys.map[coordSysKey];
    if (!coordSysItem) {
        coordSysItem = dataByCoordSys.map[coordSysKey] = {
            coordSysId: coordSysModel.id,
            coordSysIndex: coordSysModel.componentIndex,
            coordSysType: coordSysModel.type,
            coordSysMainType: coordSysModel.mainType,
            dataByAxis: []
        };
        dataByCoordSys.list.push(coordSysItem);
    }
    coordSysItem.dataByAxis.push({
        axisDim: axis.dim,
        axisIndex: axisModel.componentIndex,
        axisType: axisModel.type,
        axisId: axisModel.id,
        value: value,
        // Caustion: viewHelper.getValueLabel is actually on "view stage", which
        // depends that all models have been updated. So it should not be performed
        // here. Considering axisPointerModel used here is volatile, which is hard
        // to be retrieve in TooltipView, we prepare parameters here.
        valueLabelOpt: {
            precision: axisPointerModel.get([
                "label",
                "precision"
            ]),
            formatter: axisPointerModel.get([
                "label",
                "formatter"
            ])
        },
        seriesDataIndices: payloadBatch.slice()
    });
}
function $5a8a650252c1d4b8$var$updateModelActually(showValueMap, axesInfo, outputPayload) {
    var outputAxesInfo = outputPayload.axesInfo = [];
    // Basic logic: If no 'show' required, 'hide' this axisPointer.
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(axesInfo, function(axisInfo, key) {
        var option = axisInfo.axisPointerModel.option;
        var valItem = showValueMap[key];
        if (valItem) {
            !axisInfo.useHandle && (option.status = "show");
            option.value = valItem.value;
            // For label formatter param and highlight.
            option.seriesDataIndices = (valItem.payloadBatch || []).slice();
        } else // If hide, value still need to be set, consider
        // click legend to toggle axis blank.
        !axisInfo.useHandle && (option.status = "hide");
        // If status is 'hide', should be no info in payload.
        option.status === "show" && outputAxesInfo.push({
            axisDim: axisInfo.axis.dim,
            axisIndex: axisInfo.axis.model.componentIndex,
            value: option.value
        });
    });
}
function $5a8a650252c1d4b8$var$dispatchTooltipActually(dataByCoordSys, point, payload, dispatchAction) {
    // Basic logic: If no showTip required, hideTip will be dispatched.
    if ($5a8a650252c1d4b8$var$illegalPoint(point) || !dataByCoordSys.list.length) {
        dispatchAction({
            type: "hideTip"
        });
        return;
    }
    // In most case only one axis (or event one series is used). It is
    // convenient to fetch payload.seriesIndex and payload.dataIndex
    // directly. So put the first seriesIndex and dataIndex of the first
    // axis on the payload.
    var sampleItem = ((dataByCoordSys.list[0].dataByAxis[0] || {}).seriesDataIndices || [])[0] || {};
    dispatchAction({
        type: "showTip",
        escapeConnect: true,
        x: point[0],
        y: point[1],
        tooltipOption: payload.tooltipOption,
        position: payload.position,
        dataIndexInside: sampleItem.dataIndexInside,
        dataIndex: sampleItem.dataIndex,
        seriesIndex: sampleItem.seriesIndex,
        dataByCoordSys: dataByCoordSys.list
    });
}
function $5a8a650252c1d4b8$var$dispatchHighDownActually(axesInfo, dispatchAction, api) {
    // FIXME
    // highlight status modification should be a stage of main process?
    // (Consider confilct (e.g., legend and axisPointer) and setOption)
    var zr = api.getZr();
    var highDownKey = "axisPointerLastHighlights";
    var lastHighlights = $5a8a650252c1d4b8$var$inner(zr)[highDownKey] || {};
    var newHighlights = $5a8a650252c1d4b8$var$inner(zr)[highDownKey] = {};
    // Update highlight/downplay status according to axisPointer model.
    // Build hash map and remove duplicate incidentally.
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(axesInfo, function(axisInfo, key) {
        var option = axisInfo.axisPointerModel.option;
        option.status === "show" && axisInfo.triggerEmphasis && (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(option.seriesDataIndices, function(batchItem) {
            var key = batchItem.seriesIndex + " | " + batchItem.dataIndex;
            newHighlights[key] = batchItem;
        });
    });
    // Diff.
    var toHighlight = [];
    var toDownplay = [];
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(lastHighlights, function(batchItem, key) {
        !newHighlights[key] && toDownplay.push(batchItem);
    });
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(newHighlights, function(batchItem, key) {
        !lastHighlights[key] && toHighlight.push(batchItem);
    });
    toDownplay.length && api.dispatchAction({
        type: "downplay",
        escapeConnect: true,
        // Not blur others when highlight in axisPointer.
        notBlur: true,
        batch: toDownplay
    });
    toHighlight.length && api.dispatchAction({
        type: "highlight",
        escapeConnect: true,
        // Not blur others when highlight in axisPointer.
        notBlur: true,
        batch: toHighlight
    });
}
function $5a8a650252c1d4b8$var$findInputAxisInfo(inputAxesInfo, axisInfo) {
    for(var i = 0; i < (inputAxesInfo || []).length; i++){
        var inputAxisInfo = inputAxesInfo[i];
        if (axisInfo.axis.dim === inputAxisInfo.axisDim && axisInfo.axis.model.componentIndex === inputAxisInfo.axisIndex) return inputAxisInfo;
    }
}
function $5a8a650252c1d4b8$var$makeMapperParam(axisInfo) {
    var axisModel = axisInfo.axis.model;
    var item = {};
    var dim = item.axisDim = axisInfo.axis.dim;
    item.axisIndex = item[dim + "AxisIndex"] = axisModel.componentIndex;
    item.axisName = item[dim + "AxisName"] = axisModel.name;
    item.axisId = item[dim + "AxisId"] = axisModel.id;
    return item;
}
function $5a8a650252c1d4b8$var$illegalPoint(point) {
    return !point || point[0] == null || isNaN(point[0]) || point[1] == null || isNaN(point[1]);
}


function $1ab6074a036ba6f8$export$4b3e715f166fdd78(registers) {
    // CartesianAxisPointer is not supposed to be required here. But consider
    // echarts.simple.js and online build tooltip, which only require gridSimple,
    // CartesianAxisPointer should be able to required somewhere.
    (0, $a773ac8b7f6b4266$export$2e2bcd8739ae039).registerAxisPointerClass("CartesianAxisPointer", (0, $95f20d3bbbbe3ec4$export$2e2bcd8739ae039));
    registers.registerComponentModel((0, $0a2cc958164b16bb$export$2e2bcd8739ae039));
    registers.registerComponentView((0, $c310571f36b92c32$export$2e2bcd8739ae039));
    registers.registerPreprocessor(function(option) {
        // Always has a global axisPointerModel for default setting.
        if (option) {
            (!option.axisPointer || option.axisPointer.length === 0) && (option.axisPointer = {});
            var link = option.axisPointer.link;
            // Normalize to array to avoid object mergin. But if link
            // is not set, remain null/undefined, otherwise it will
            // override existent link setting.
            if (link && !(0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(link)) option.axisPointer.link = [
                link
            ];
        }
    });
    // This process should proformed after coordinate systems created
    // and series data processed. So put it on statistic processing stage.
    registers.registerProcessor(registers.PRIORITY.PROCESSOR.STATISTIC, function(ecModel, api) {
        // Build axisPointerModel, mergin tooltip.axisPointer model for each axis.
        // allAxesInfo should be updated when setOption performed.
        ecModel.getComponent("axisPointer").coordSysAxesInfo = (0, $eb59b5306dc411bd$export$bb44f104e3c54dae)(ecModel, api);
    });
    // Broadcast to all views.
    registers.registerAction({
        type: "updateAxisPointer",
        event: "updateAxisPointer",
        update: ":updateAxisPointer"
    }, (0, $5a8a650252c1d4b8$export$2e2bcd8739ae039));
}



function $0a19182088c4bf1a$export$4b3e715f166fdd78(registers) {
    (0, $2456b78b4596463d$export$1f96ae73734a86cc)((0, $2f40d995090d05b4$export$4b3e715f166fdd78));
    (0, $2456b78b4596463d$export$1f96ae73734a86cc)((0, $1ab6074a036ba6f8$export$4b3e715f166fdd78));
}

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 




function $1d491fca301ec58e$export$f6339b3d96c5d3d7(resultItem, newElOption) {
    var existElOption = resultItem.existing;
    // Set id and type after id assigned.
    newElOption.id = resultItem.keyInfo.id;
    !newElOption.type && existElOption && (newElOption.type = existElOption.type);
    // Set parent id if not specified
    if (newElOption.parentId == null) {
        var newElParentOption = newElOption.parentOption;
        if (newElParentOption) newElOption.parentId = newElParentOption.id;
        else if (existElOption) newElOption.parentId = existElOption.parentId;
    }
    // Clear
    newElOption.parentOption = null;
}
function $1d491fca301ec58e$var$isSetLoc(obj, props) {
    var isSet;
    $e44eb14c4271d0f9$export$79b2f7037acddd43(props, function(prop) {
        obj[prop] != null && obj[prop] !== "auto" && (isSet = true);
    });
    return isSet;
}
function $1d491fca301ec58e$var$mergeNewElOptionToExist(existList, index, newElOption) {
    // Update existing options, for `getOption` feature.
    var newElOptCopy = $e44eb14c4271d0f9$export$8b58be045bf06082({}, newElOption);
    var existElOption = existList[index];
    var $action = newElOption.$action || "merge";
    if ($action === "merge") {
        if (existElOption) {
            var newType = newElOption.type;
            $e44eb14c4271d0f9$export$a7a9523472993e97(!newType || existElOption.type === newType, 'Please set $action: "replace" to change `type`');
            // We can ensure that newElOptCopy and existElOption are not
            // the same object, so `merge` will not change newElOptCopy.
            $e44eb14c4271d0f9$export$4950aa0f605343fb(existElOption, newElOptCopy, true);
            // Rigid body, use ignoreSize.
            (0, $074356ab3d6b1cdb$export$1754cb91f16ca028)(existElOption, newElOptCopy, {
                ignoreSize: true
            });
            // Will be used in render.
            (0, $074356ab3d6b1cdb$export$7438999faea9b6cc)(newElOption, existElOption);
            // Copy transition info to new option so it can be used in the transition.
            // DO IT AFTER merge
            $1d491fca301ec58e$var$copyTransitionInfo(newElOption, existElOption);
            $1d491fca301ec58e$var$copyTransitionInfo(newElOption, existElOption, "shape");
            $1d491fca301ec58e$var$copyTransitionInfo(newElOption, existElOption, "style");
            $1d491fca301ec58e$var$copyTransitionInfo(newElOption, existElOption, "extra");
            // Copy clipPath
            newElOption.clipPath = existElOption.clipPath;
        } else existList[index] = newElOptCopy;
    } else if ($action === "replace") existList[index] = newElOptCopy;
    else if ($action === "remove") // null will be cleaned later.
    existElOption && (existList[index] = null);
}
var $1d491fca301ec58e$var$TRANSITION_PROPS_TO_COPY = [
    "transition",
    "enterFrom",
    "leaveTo"
];
var $1d491fca301ec58e$var$ROOT_TRANSITION_PROPS_TO_COPY = $1d491fca301ec58e$var$TRANSITION_PROPS_TO_COPY.concat([
    "enterAnimation",
    "updateAnimation",
    "leaveAnimation"
]);
function $1d491fca301ec58e$var$copyTransitionInfo(target, source, targetProp) {
    if (targetProp) {
        if (!target[targetProp] && source[targetProp]) // TODO avoid creating this empty object when there is no transition configuration.
        target[targetProp] = {};
        target = target[targetProp];
        source = source[targetProp];
    }
    if (!target || !source) return;
    var props = targetProp ? $1d491fca301ec58e$var$TRANSITION_PROPS_TO_COPY : $1d491fca301ec58e$var$ROOT_TRANSITION_PROPS_TO_COPY;
    for(var i = 0; i < props.length; i++){
        var prop = props[i];
        if (target[prop] == null && source[prop] != null) target[prop] = source[prop];
    }
}
function $1d491fca301ec58e$var$setLayoutInfoToExist(existItem, newElOption) {
    if (!existItem) return;
    existItem.hv = newElOption.hv = [
        // Rigid body, don't care about `width`.
        $1d491fca301ec58e$var$isSetLoc(newElOption, [
            "left",
            "right"
        ]),
        // Rigid body, don't care about `height`.
        $1d491fca301ec58e$var$isSetLoc(newElOption, [
            "top",
            "bottom"
        ])
    ];
    // Give default group size. Otherwise layout error may occur.
    if (existItem.type === "group") {
        var existingGroupOpt = existItem;
        var newGroupOpt = newElOption;
        existingGroupOpt.width == null && (existingGroupOpt.width = newGroupOpt.width = 0);
        existingGroupOpt.height == null && (existingGroupOpt.height = newGroupOpt.height = 0);
    }
}
var $1d491fca301ec58e$export$6d85925da4d2cf23 = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(GraphicComponentModel, _super);
    function GraphicComponentModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = GraphicComponentModel.type;
        _this.preventAutoZ = true;
        return _this;
    }
    GraphicComponentModel.prototype.mergeOption = function(option, ecModel) {
        // Prevent default merge to elements
        var elements = this.option.elements;
        this.option.elements = null;
        _super.prototype.mergeOption.call(this, option, ecModel);
        this.option.elements = elements;
    };
    GraphicComponentModel.prototype.optionUpdated = function(newOption, isInit) {
        var thisOption = this.option;
        var newList = (isInit ? thisOption : newOption).elements;
        var existList = thisOption.elements = isInit ? [] : thisOption.elements;
        var flattenedList = [];
        this._flatten(newList, flattenedList, null);
        var mappingResult = $8917c02fd8256c67$export$574f818966e4da87(existList, flattenedList, "normalMerge");
        // Clear elOptionsToUpdate
        var elOptionsToUpdate = this._elOptionsToUpdate = [];
        $e44eb14c4271d0f9$export$79b2f7037acddd43(mappingResult, function(resultItem, index) {
            var newElOption = resultItem.newOption;
            $e44eb14c4271d0f9$export$a7a9523472993e97($e44eb14c4271d0f9$export$a6cdc56e425d0d0a(newElOption) || resultItem.existing, "Empty graphic option definition");
            if (!newElOption) return;
            elOptionsToUpdate.push(newElOption);
            $1d491fca301ec58e$export$f6339b3d96c5d3d7(resultItem, newElOption);
            $1d491fca301ec58e$var$mergeNewElOptionToExist(existList, index, newElOption);
            $1d491fca301ec58e$var$setLayoutInfoToExist(existList[index], newElOption);
        }, this);
        // Clean
        thisOption.elements = $e44eb14c4271d0f9$export$3dea766d36a8935f(existList, function(item) {
            // $action should be volatile, otherwise option gotten from
            // `getOption` will contain unexpected $action.
            item && delete item.$action;
            return item != null;
        });
    };
    /**
   * Convert
   * [{
   *  type: 'group',
   *  id: 'xx',
   *  children: [{type: 'circle'}, {type: 'polygon'}]
   * }]
   * to
   * [
   *  {type: 'group', id: 'xx'},
   *  {type: 'circle', parentId: 'xx'},
   *  {type: 'polygon', parentId: 'xx'}
   * ]
   */ GraphicComponentModel.prototype._flatten = function(optionList, result, parentOption) {
        $e44eb14c4271d0f9$export$79b2f7037acddd43(optionList, function(option) {
            if (!option) return;
            if (parentOption) option.parentOption = parentOption;
            result.push(option);
            var children = option.children;
            // here we don't judge if option.type is `group`
            // when new option doesn't provide `type`, it will cause that the children can't be updated.
            if (children && children.length) this._flatten(children, result, option);
            // Deleting for JSON output, and for not affecting group creation.
            delete option.children;
        }, this);
    };
    // FIXME
    // Pass to view using payload? setOption has a payload?
    GraphicComponentModel.prototype.useElOptionsToUpdate = function() {
        var els = this._elOptionsToUpdate;
        // Clear to avoid render duplicately when zooming.
        this._elOptionsToUpdate = null;
        return els;
    };
    GraphicComponentModel.type = "graphic";
    GraphicComponentModel.defaultOption = {
        elements: []
    };
    return GraphicComponentModel;
}((0, $a756077528c07361$export$2e2bcd8739ae039));


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 








/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
var $50c7731235814599$var$deprecatedLogs = {};
function $50c7731235814599$export$3b868abde5eae7d1(style, elType, hasOwnTextContentOption, hasOwnTextConfig) {
    // Since echarts5, `RectText` is separated from its host element and style.text
    // does not exist any more. The compat work brings some extra burden on performance.
    // So we provide:
    // `legacy: true` force make compat.
    // `legacy: false`, force do not compat.
    // `legacy` not set: auto detect whether legacy.
    //     But in this case we do not compat (difficult to detect and rare case):
    //     Becuse custom series and graphic component support "merge", users may firstly
    //     only set `textStrokeWidth` style or secondly only set `text`.
    return style && (style.legacy || style.legacy !== false && !hasOwnTextContentOption && !hasOwnTextConfig && elType !== "tspan" && (elType === "text" || (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(style, "text")));
}
function $50c7731235814599$export$7748133eaaa8aecc(hostStyle, elType, isNormal) {
    var srcStyle = hostStyle;
    var textConfig;
    var textContent;
    var textContentStyle;
    if (elType === "text") textContentStyle = srcStyle;
    else {
        textContentStyle = {};
        (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(srcStyle, "text") && (textContentStyle.text = srcStyle.text);
        (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(srcStyle, "rich") && (textContentStyle.rich = srcStyle.rich);
        (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(srcStyle, "textFill") && (textContentStyle.fill = srcStyle.textFill);
        (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(srcStyle, "textStroke") && (textContentStyle.stroke = srcStyle.textStroke);
        (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(srcStyle, "fontFamily") && (textContentStyle.fontFamily = srcStyle.fontFamily);
        (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(srcStyle, "fontSize") && (textContentStyle.fontSize = srcStyle.fontSize);
        (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(srcStyle, "fontStyle") && (textContentStyle.fontStyle = srcStyle.fontStyle);
        (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(srcStyle, "fontWeight") && (textContentStyle.fontWeight = srcStyle.fontWeight);
        textContent = {
            type: "text",
            style: textContentStyle,
            // ec4 does not support rectText trigger.
            // And when text position is different in normal and emphasis
            // => hover text trigger emphasis;
            // => text position changed, leave mouse pointer immediately;
            // That might cause incorrect state.
            silent: true
        };
        textConfig = {};
        var hasOwnPos = (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(srcStyle, "textPosition");
        if (isNormal) textConfig.position = hasOwnPos ? srcStyle.textPosition : "inside";
        else hasOwnPos && (textConfig.position = srcStyle.textPosition);
        (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(srcStyle, "textPosition") && (textConfig.position = srcStyle.textPosition);
        (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(srcStyle, "textOffset") && (textConfig.offset = srcStyle.textOffset);
        (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(srcStyle, "textRotation") && (textConfig.rotation = srcStyle.textRotation);
        (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(srcStyle, "textDistance") && (textConfig.distance = srcStyle.textDistance);
    }
    $50c7731235814599$var$convertEC4CompatibleRichItem(textContentStyle, hostStyle);
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(textContentStyle.rich, function(richItem) {
        $50c7731235814599$var$convertEC4CompatibleRichItem(richItem, richItem);
    });
    return {
        textConfig: textConfig,
        textContent: textContent
    };
}
/**
 * The result will be set to `out`.
 */ function $50c7731235814599$var$convertEC4CompatibleRichItem(out, richItem) {
    if (!richItem) return;
    // (1) For simplicity, make textXXX properties (deprecated since ec5) has
    // higher priority. For example, consider in ec4 `borderColor: 5, textBorderColor: 10`
    // on a rect means `borderColor: 4` on the rect and `borderColor: 10` on an attached
    // richText in ec5.
    // (2) `out === richItem` if and only if `out` is text el or rich item.
    // So we can overwrite existing props in `out` since textXXX has higher priority.
    richItem.font = richItem.textFont || richItem.font;
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "textStrokeWidth") && (out.lineWidth = richItem.textStrokeWidth);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "textAlign") && (out.align = richItem.textAlign);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "textVerticalAlign") && (out.verticalAlign = richItem.textVerticalAlign);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "textLineHeight") && (out.lineHeight = richItem.textLineHeight);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "textWidth") && (out.width = richItem.textWidth);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "textHeight") && (out.height = richItem.textHeight);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "textBackgroundColor") && (out.backgroundColor = richItem.textBackgroundColor);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "textPadding") && (out.padding = richItem.textPadding);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "textBorderColor") && (out.borderColor = richItem.textBorderColor);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "textBorderWidth") && (out.borderWidth = richItem.textBorderWidth);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "textBorderRadius") && (out.borderRadius = richItem.textBorderRadius);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "textBoxShadowColor") && (out.shadowColor = richItem.textBoxShadowColor);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "textBoxShadowBlur") && (out.shadowBlur = richItem.textBoxShadowBlur);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "textBoxShadowOffsetX") && (out.shadowOffsetX = richItem.textBoxShadowOffsetX);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "textBoxShadowOffsetY") && (out.shadowOffsetY = richItem.textBoxShadowOffsetY);
}
function $50c7731235814599$export$b8ddb75bd1b9b791(itemStl, txStl, txCfg) {
    var out = itemStl;
    // See `custom.ts`, a trick to set extra `textPosition` firstly.
    out.textPosition = out.textPosition || txCfg.position || "inside";
    txCfg.offset != null && (out.textOffset = txCfg.offset);
    txCfg.rotation != null && (out.textRotation = txCfg.rotation);
    txCfg.distance != null && (out.textDistance = txCfg.distance);
    var isInside = out.textPosition.indexOf("inside") >= 0;
    var hostFill = itemStl.fill || "#000";
    $50c7731235814599$var$convertToEC4RichItem(out, txStl);
    var textFillNotSet = out.textFill == null;
    if (isInside) {
        if (textFillNotSet) {
            out.textFill = txCfg.insideFill || "#fff";
            !out.textStroke && txCfg.insideStroke && (out.textStroke = txCfg.insideStroke);
            !out.textStroke && (out.textStroke = hostFill);
            out.textStrokeWidth == null && (out.textStrokeWidth = 2);
        }
    } else {
        if (textFillNotSet) out.textFill = itemStl.fill || txCfg.outsideFill || "#000";
        !out.textStroke && txCfg.outsideStroke && (out.textStroke = txCfg.outsideStroke);
    }
    out.text = txStl.text;
    out.rich = txStl.rich;
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(txStl.rich, function(richItem) {
        $50c7731235814599$var$convertToEC4RichItem(richItem, richItem);
    });
    return out;
}
function $50c7731235814599$var$convertToEC4RichItem(out, richItem) {
    if (!richItem) return;
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "fill") && (out.textFill = richItem.fill);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "stroke") && (out.textStroke = richItem.fill);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "lineWidth") && (out.textStrokeWidth = richItem.lineWidth);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "font") && (out.font = richItem.font);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "fontStyle") && (out.fontStyle = richItem.fontStyle);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "fontWeight") && (out.fontWeight = richItem.fontWeight);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "fontSize") && (out.fontSize = richItem.fontSize);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "fontFamily") && (out.fontFamily = richItem.fontFamily);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "align") && (out.textAlign = richItem.align);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "verticalAlign") && (out.textVerticalAlign = richItem.verticalAlign);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "lineHeight") && (out.textLineHeight = richItem.lineHeight);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "width") && (out.textWidth = richItem.width);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "height") && (out.textHeight = richItem.height);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "backgroundColor") && (out.textBackgroundColor = richItem.backgroundColor);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "padding") && (out.textPadding = richItem.padding);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "borderColor") && (out.textBorderColor = richItem.borderColor);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "borderWidth") && (out.textBorderWidth = richItem.borderWidth);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "borderRadius") && (out.textBorderRadius = richItem.borderRadius);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "shadowColor") && (out.textBoxShadowColor = richItem.shadowColor);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "shadowBlur") && (out.textBoxShadowBlur = richItem.shadowBlur);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "shadowOffsetX") && (out.textBoxShadowOffsetX = richItem.shadowOffsetX);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "shadowOffsetY") && (out.textBoxShadowOffsetY = richItem.shadowOffsetY);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "textShadowColor") && (out.textShadowColor = richItem.textShadowColor);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "textShadowBlur") && (out.textShadowBlur = richItem.textShadowBlur);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "textShadowOffsetX") && (out.textShadowOffsetX = richItem.textShadowOffsetX);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(richItem, "textShadowOffsetY") && (out.textShadowOffsetY = richItem.textShadowOffsetY);
}
function $50c7731235814599$export$606a5c06d13e04b6(deprecated, insteadApproach) {
    var key = deprecated + "^_^" + insteadApproach;
    if (!$50c7731235814599$var$deprecatedLogs[key]) {
        console.warn('[ECharts] DEPRECATED: "' + deprecated + '" has been deprecated. ' + insteadApproach);
        $50c7731235814599$var$deprecatedLogs[key] = true;
    }
}


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 







var $0da6e154765a9cff$var$LEGACY_TRANSFORM_PROPS_MAP = {
    position: [
        "x",
        "y"
    ],
    scale: [
        "scaleX",
        "scaleY"
    ],
    origin: [
        "originX",
        "originY"
    ]
};
var $0da6e154765a9cff$var$LEGACY_TRANSFORM_PROPS = (0, $e44eb14c4271d0f9$export$ed97f33186d4b816)($0da6e154765a9cff$var$LEGACY_TRANSFORM_PROPS_MAP);
var $0da6e154765a9cff$var$TRANSFORM_PROPS_MAP = (0, $e44eb14c4271d0f9$export$533b26079ad0b4b)((0, $039fe2b24eabe4b4$export$98ab6203ec3396e2), function(obj, key) {
    obj[key] = 1;
    return obj;
}, {});
var $0da6e154765a9cff$var$transformPropNamesStr = (0, $039fe2b24eabe4b4$export$98ab6203ec3396e2).join(", ");
var $0da6e154765a9cff$export$9a911ad86e905b13 = [
    "",
    "style",
    "shape",
    "extra"
];
var $0da6e154765a9cff$var$transitionInnerStore = (0, $8917c02fd8256c67$export$64df9f8d92ae083f)();
function $0da6e154765a9cff$var$getElementAnimationConfig(animationType, el, elOption, parentModel, dataIndex) {
    var animationProp = animationType + "Animation";
    var config = (0, $f7e735722ff36e8c$export$5cc7add7ab591d0a)(animationType, parentModel, dataIndex) || {};
    var userDuring = $0da6e154765a9cff$var$transitionInnerStore(el).userDuring;
    // Only set when duration is > 0 and it's need to be animated.
    if (config.duration > 0) {
        // For simplicity, if during not specified, the previous during will not work any more.
        config.during = userDuring ? (0, $e44eb14c4271d0f9$export$2385a24977818dd0)($0da6e154765a9cff$var$duringCall, {
            el: el,
            userDuring: userDuring
        }) : null;
        config.setToFinal = true;
        config.scope = animationType;
    }
    (0, $e44eb14c4271d0f9$export$8b58be045bf06082)(config, elOption[animationProp]);
    return config;
}
function $0da6e154765a9cff$export$4342b281b9b5d77e(el, elOption, animatableModel, opts) {
    opts = opts || {};
    var dataIndex = opts.dataIndex, isInit = opts.isInit, clearStyle = opts.clearStyle;
    var hasAnimation = animatableModel.isAnimationEnabled();
    // Save the meta info for further morphing. Like apply on the sub morphing elements.
    var store = $0da6e154765a9cff$var$transitionInnerStore(el);
    var styleOpt = elOption.style;
    store.userDuring = elOption.during;
    var transFromProps = {};
    var propsToSet = {};
    $0da6e154765a9cff$var$prepareTransformAllPropsFinal(el, elOption, propsToSet);
    $0da6e154765a9cff$var$prepareShapeOrExtraAllPropsFinal("shape", elOption, propsToSet);
    $0da6e154765a9cff$var$prepareShapeOrExtraAllPropsFinal("extra", elOption, propsToSet);
    if (!isInit && hasAnimation) {
        $0da6e154765a9cff$var$prepareTransformTransitionFrom(el, elOption, transFromProps);
        $0da6e154765a9cff$var$prepareShapeOrExtraTransitionFrom("shape", el, elOption, transFromProps);
        $0da6e154765a9cff$var$prepareShapeOrExtraTransitionFrom("extra", el, elOption, transFromProps);
        $0da6e154765a9cff$var$prepareStyleTransitionFrom(el, elOption, styleOpt, transFromProps);
    }
    propsToSet.style = styleOpt;
    $0da6e154765a9cff$var$applyPropsDirectly(el, propsToSet, clearStyle);
    $0da6e154765a9cff$var$applyMiscProps(el, elOption);
    if (hasAnimation) {
        if (isInit) {
            var enterFromProps_1 = {};
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)($0da6e154765a9cff$export$9a911ad86e905b13, function(propName) {
                var prop = propName ? elOption[propName] : elOption;
                if (prop && prop.enterFrom) {
                    if (propName) enterFromProps_1[propName] = enterFromProps_1[propName] || {};
                    (0, $e44eb14c4271d0f9$export$8b58be045bf06082)(propName ? enterFromProps_1[propName] : enterFromProps_1, prop.enterFrom);
                }
            });
            var config = $0da6e154765a9cff$var$getElementAnimationConfig("enter", el, elOption, animatableModel, dataIndex);
            if (config.duration > 0) el.animateFrom(enterFromProps_1, config);
        } else $0da6e154765a9cff$var$applyPropsTransition(el, elOption, dataIndex || 0, animatableModel, transFromProps);
    }
    // Store leave to be used in leave transition.
    $0da6e154765a9cff$export$a6f11bb1cb100e2a(el, elOption);
    styleOpt ? el.dirty() : el.markRedraw();
}
function $0da6e154765a9cff$export$a6f11bb1cb100e2a(el, elOption) {
    // Try merge to previous set leaveTo
    var leaveToProps = $0da6e154765a9cff$var$transitionInnerStore(el).leaveToProps;
    for(var i = 0; i < $0da6e154765a9cff$export$9a911ad86e905b13.length; i++){
        var propName = $0da6e154765a9cff$export$9a911ad86e905b13[i];
        var prop = propName ? elOption[propName] : elOption;
        if (prop && prop.leaveTo) {
            if (!leaveToProps) leaveToProps = $0da6e154765a9cff$var$transitionInnerStore(el).leaveToProps = {};
            if (propName) leaveToProps[propName] = leaveToProps[propName] || {};
            (0, $e44eb14c4271d0f9$export$8b58be045bf06082)(propName ? leaveToProps[propName] : leaveToProps, prop.leaveTo);
        }
    }
}
function $0da6e154765a9cff$export$15575b6d82d35bb3(el, elOption, animatableModel, onRemove) {
    if (el) {
        var parent_1 = el.parent;
        var leaveToProps = $0da6e154765a9cff$var$transitionInnerStore(el).leaveToProps;
        if (leaveToProps) {
            // TODO TODO use leave after leaveAnimation in series is introduced
            // TODO Data index?
            var config = $0da6e154765a9cff$var$getElementAnimationConfig("update", el, elOption, animatableModel, 0);
            config.done = function() {
                parent_1.remove(el);
                onRemove && onRemove();
            };
            el.animateTo(leaveToProps, config);
        } else {
            parent_1.remove(el);
            onRemove && onRemove();
        }
    }
}
function $0da6e154765a9cff$export$6f3361b4b8d7a8ba(transition) {
    return transition === "all";
}
function $0da6e154765a9cff$var$applyPropsDirectly(el, // Can be null/undefined
allPropsFinal, clearStyle) {
    var styleOpt = allPropsFinal.style;
    if (!el.isGroup && styleOpt) {
        if (clearStyle) {
            el.useStyle({});
            // When style object changed, how to trade the existing animation?
            // It is probably complicated and not needed to cover all the cases.
            // But still need consider the case:
            // (1) When using init animation on `style.opacity`, and before the animation
            //     ended users triggers an update by mousewhel. At that time the init
            //     animation should better be continued rather than terminated.
            //     So after `useStyle` called, we should change the animation target manually
            //     to continue the effect of the init animation.
            // (2) PENDING: If the previous animation targeted at a `val1`, and currently we need
            //     to update the value to `val2` and no animation declared, should be terminate
            //     the previous animation or just modify the target of the animation?
            //     Therotically That will happen not only on `style` but also on `shape` and
            //     `transfrom` props. But we haven't handle this case at present yet.
            // (3) PENDING: Is it proper to visit `animators` and `targetName`?
            var animators = el.animators;
            for(var i = 0; i < animators.length; i++){
                var animator = animators[i];
                // targetName is the "topKey".
                if (animator.targetName === "style") animator.changeTarget(el.style);
            }
        }
        el.setStyle(styleOpt);
    }
    if (allPropsFinal) {
        // Not set style here.
        allPropsFinal.style = null;
        // Set el to the final state firstly.
        allPropsFinal && el.attr(allPropsFinal);
        allPropsFinal.style = styleOpt;
    }
}
function $0da6e154765a9cff$var$applyPropsTransition(el, elOption, dataIndex, model, // Can be null/undefined
transFromProps) {
    if (transFromProps) {
        var config = $0da6e154765a9cff$var$getElementAnimationConfig("update", el, elOption, model, dataIndex);
        if (config.duration > 0) el.animateFrom(transFromProps, config);
    }
}
function $0da6e154765a9cff$var$applyMiscProps(el, elOption) {
    // Merge by default.
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(elOption, "silent") && (el.silent = elOption.silent);
    (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(elOption, "ignore") && (el.ignore = elOption.ignore);
    if (el instanceof (0, $42aae97fd255cbd2$export$2e2bcd8739ae039)) (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(elOption, "invisible") && (el.invisible = elOption.invisible);
    if (el instanceof (0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039)) (0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)(elOption, "autoBatch") && (el.autoBatch = elOption.autoBatch);
}
// Use it to avoid it be exposed to user.
var $0da6e154765a9cff$var$tmpDuringScope = {};
var $0da6e154765a9cff$var$transitionDuringAPI = {
    // Usually other props do not need to be changed in animation during.
    setTransform: function(key, val) {
        (0, $e44eb14c4271d0f9$export$a7a9523472993e97)((0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)($0da6e154765a9cff$var$TRANSFORM_PROPS_MAP, key), "Only " + $0da6e154765a9cff$var$transformPropNamesStr + " available in `setTransform`.");
        $0da6e154765a9cff$var$tmpDuringScope.el[key] = val;
        return this;
    },
    getTransform: function(key) {
        (0, $e44eb14c4271d0f9$export$a7a9523472993e97)((0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)($0da6e154765a9cff$var$TRANSFORM_PROPS_MAP, key), "Only " + $0da6e154765a9cff$var$transformPropNamesStr + " available in `getTransform`.");
        return $0da6e154765a9cff$var$tmpDuringScope.el[key];
    },
    setShape: function(key, val) {
        $0da6e154765a9cff$var$assertNotReserved(key);
        var el = $0da6e154765a9cff$var$tmpDuringScope.el;
        var shape = el.shape || (el.shape = {});
        shape[key] = val;
        el.dirtyShape && el.dirtyShape();
        return this;
    },
    getShape: function(key) {
        $0da6e154765a9cff$var$assertNotReserved(key);
        var shape = $0da6e154765a9cff$var$tmpDuringScope.el.shape;
        if (shape) return shape[key];
    },
    setStyle: function(key, val) {
        $0da6e154765a9cff$var$assertNotReserved(key);
        var el = $0da6e154765a9cff$var$tmpDuringScope.el;
        var style = el.style;
        if (style) {
            if ((0, $e44eb14c4271d0f9$export$7d667b9a0c48c975)(val)) (0, $4796c55e8b767685$export$c106dd0671a0fc2d)("style." + key + " must not be assigned with NaN.");
            style[key] = val;
            el.dirtyStyle && el.dirtyStyle();
        }
        return this;
    },
    getStyle: function(key) {
        $0da6e154765a9cff$var$assertNotReserved(key);
        var style = $0da6e154765a9cff$var$tmpDuringScope.el.style;
        if (style) return style[key];
    },
    setExtra: function(key, val) {
        $0da6e154765a9cff$var$assertNotReserved(key);
        var extra = $0da6e154765a9cff$var$tmpDuringScope.el.extra || ($0da6e154765a9cff$var$tmpDuringScope.el.extra = {});
        extra[key] = val;
        return this;
    },
    getExtra: function(key) {
        $0da6e154765a9cff$var$assertNotReserved(key);
        var extra = $0da6e154765a9cff$var$tmpDuringScope.el.extra;
        if (extra) return extra[key];
    }
};
function $0da6e154765a9cff$var$assertNotReserved(key) {
    if (key === "transition" || key === "enterFrom" || key === "leaveTo") throw new Error('key must not be "' + key + '"');
}
function $0da6e154765a9cff$var$duringCall() {
    // Do not provide "percent" until some requirements come.
    // Because consider thies case:
    // enterFrom: {x: 100, y: 30}, transition: 'x'.
    // And enter duration is different from update duration.
    // Thus it might be confused about the meaning of "percent" in during callback.
    var scope = this;
    var el = scope.el;
    if (!el) return;
    // If el is remove from zr by reason like legend, during still need to called,
    // because el will be added back to zr and the prop value should not be incorrect.
    var latestUserDuring = $0da6e154765a9cff$var$transitionInnerStore(el).userDuring;
    var scopeUserDuring = scope.userDuring;
    // Ensured a during is only called once in each animation frame.
    // If a during is called multiple times in one frame, maybe some users' calculation logic
    // might be wrong (not sure whether this usage exists).
    // The case of a during might be called twice can be: by default there is a animator for
    // 'x', 'y' when init. Before the init animation finished, call `setOption` to start
    // another animators for 'style'/'shape'/'extra'.
    if (latestUserDuring !== scopeUserDuring) {
        // release
        scope.el = scope.userDuring = null;
        return;
    }
    $0da6e154765a9cff$var$tmpDuringScope.el = el;
    // Give no `this` to user in "during" calling.
    scopeUserDuring($0da6e154765a9cff$var$transitionDuringAPI);
// FIXME: if in future meet the case that some prop will be both modified in `during` and `state`,
// consider the issue that the prop might be incorrect when return to "normal" state.
}
function $0da6e154765a9cff$var$prepareShapeOrExtraTransitionFrom(mainAttr, fromEl, elOption, transFromProps) {
    var attrOpt = elOption[mainAttr];
    if (!attrOpt) return;
    var elPropsInAttr = fromEl[mainAttr];
    var transFromPropsInAttr;
    if (elPropsInAttr) {
        var transition = elOption.transition;
        var attrTransition = attrOpt.transition;
        if (attrTransition) {
            !transFromPropsInAttr && (transFromPropsInAttr = transFromProps[mainAttr] = {});
            if ($0da6e154765a9cff$export$6f3361b4b8d7a8ba(attrTransition)) (0, $e44eb14c4271d0f9$export$8b58be045bf06082)(transFromPropsInAttr, elPropsInAttr);
            else {
                var transitionKeys = (0, $8917c02fd8256c67$export$4f07b212a02c8051)(attrTransition);
                for(var i = 0; i < transitionKeys.length; i++){
                    var key = transitionKeys[i];
                    var elVal = elPropsInAttr[key];
                    transFromPropsInAttr[key] = elVal;
                }
            }
        } else if ($0da6e154765a9cff$export$6f3361b4b8d7a8ba(transition) || (0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)(transition, mainAttr) >= 0) {
            !transFromPropsInAttr && (transFromPropsInAttr = transFromProps[mainAttr] = {});
            var elPropsInAttrKeys = (0, $e44eb14c4271d0f9$export$ed97f33186d4b816)(elPropsInAttr);
            for(var i = 0; i < elPropsInAttrKeys.length; i++){
                var key = elPropsInAttrKeys[i];
                var elVal = elPropsInAttr[key];
                if ($0da6e154765a9cff$var$isNonStyleTransitionEnabled(attrOpt[key], elVal)) transFromPropsInAttr[key] = elVal;
            }
        }
    }
}
function $0da6e154765a9cff$var$prepareShapeOrExtraAllPropsFinal(mainAttr, elOption, allProps) {
    var attrOpt = elOption[mainAttr];
    if (!attrOpt) return;
    var allPropsInAttr = allProps[mainAttr] = {};
    var keysInAttr = (0, $e44eb14c4271d0f9$export$ed97f33186d4b816)(attrOpt);
    for(var i = 0; i < keysInAttr.length; i++){
        var key = keysInAttr[i];
        // To avoid share one object with different element, and
        // to avoid user modify the object inexpectedly, have to clone.
        allPropsInAttr[key] = (0, $d03d5f018aba2b0f$export$c5e92b7f105af84e)(attrOpt[key]);
    }
}
function $0da6e154765a9cff$var$prepareTransformTransitionFrom(el, elOption, transFromProps) {
    var transition = elOption.transition;
    var transitionKeys = $0da6e154765a9cff$export$6f3361b4b8d7a8ba(transition) ? (0, $039fe2b24eabe4b4$export$98ab6203ec3396e2) : (0, $8917c02fd8256c67$export$4f07b212a02c8051)(transition || []);
    for(var i = 0; i < transitionKeys.length; i++){
        var key = transitionKeys[i];
        if (key === "style" || key === "shape" || key === "extra") continue;
        var elVal = el[key];
        $0da6e154765a9cff$var$checkTransformPropRefer(key, "el.transition");
        // Do not clone, animator will perform that clone.
        transFromProps[key] = elVal;
    }
}
function $0da6e154765a9cff$var$prepareTransformAllPropsFinal(el, elOption, allProps) {
    for(var i = 0; i < $0da6e154765a9cff$var$LEGACY_TRANSFORM_PROPS.length; i++){
        var legacyName = $0da6e154765a9cff$var$LEGACY_TRANSFORM_PROPS[i];
        var xyName = $0da6e154765a9cff$var$LEGACY_TRANSFORM_PROPS_MAP[legacyName];
        var legacyArr = elOption[legacyName];
        if (legacyArr) {
            allProps[xyName[0]] = legacyArr[0];
            allProps[xyName[1]] = legacyArr[1];
        }
    }
    for(var i = 0; i < (0, $039fe2b24eabe4b4$export$98ab6203ec3396e2).length; i++){
        var key = (0, $039fe2b24eabe4b4$export$98ab6203ec3396e2)[i];
        if (elOption[key] != null) allProps[key] = elOption[key];
    }
}
function $0da6e154765a9cff$var$prepareStyleTransitionFrom(fromEl, elOption, styleOpt, transFromProps) {
    if (!styleOpt) return;
    var fromElStyle = fromEl.style;
    var transFromStyleProps;
    if (fromElStyle) {
        var styleTransition = styleOpt.transition;
        var elTransition = elOption.transition;
        if (styleTransition && !$0da6e154765a9cff$export$6f3361b4b8d7a8ba(styleTransition)) {
            var transitionKeys = (0, $8917c02fd8256c67$export$4f07b212a02c8051)(styleTransition);
            !transFromStyleProps && (transFromStyleProps = transFromProps.style = {});
            for(var i = 0; i < transitionKeys.length; i++){
                var key = transitionKeys[i];
                var elVal = fromElStyle[key];
                // Do not clone, see `checkNonStyleTansitionRefer`.
                transFromStyleProps[key] = elVal;
            }
        } else if (fromEl.getAnimationStyleProps && ($0da6e154765a9cff$export$6f3361b4b8d7a8ba(elTransition) || $0da6e154765a9cff$export$6f3361b4b8d7a8ba(styleTransition) || (0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)(elTransition, "style") >= 0)) {
            var animationProps = fromEl.getAnimationStyleProps();
            var animationStyleProps = animationProps ? animationProps.style : null;
            if (animationStyleProps) {
                !transFromStyleProps && (transFromStyleProps = transFromProps.style = {});
                var styleKeys = (0, $e44eb14c4271d0f9$export$ed97f33186d4b816)(styleOpt);
                for(var i = 0; i < styleKeys.length; i++){
                    var key = styleKeys[i];
                    if (animationStyleProps[key]) {
                        var elVal = fromElStyle[key];
                        transFromStyleProps[key] = elVal;
                    }
                }
            }
        }
    }
}
function $0da6e154765a9cff$var$isNonStyleTransitionEnabled(optVal, elVal) {
    // The same as `checkNonStyleTansitionRefer`.
    return !(0, $e44eb14c4271d0f9$export$1e2f57719e155213)(optVal) ? optVal != null && isFinite(optVal) : optVal !== elVal;
}
var $0da6e154765a9cff$var$checkTransformPropRefer;
$0da6e154765a9cff$var$checkTransformPropRefer = function(key, usedIn) {
    if (!(0, $e44eb14c4271d0f9$export$b5a638e9b3fff9f3)($0da6e154765a9cff$var$TRANSFORM_PROPS_MAP, key)) (0, $4796c55e8b767685$export$c106dd0671a0fc2d)("Prop `" + key + "` is not a permitted in `" + usedIn + "`. " + "Only `" + (0, $e44eb14c4271d0f9$export$ed97f33186d4b816)($0da6e154765a9cff$var$TRANSFORM_PROPS_MAP).join("`, `") + "` are permitted.");
};



/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 




var $237ab0287d7334f0$var$getStateToRestore = (0, $8917c02fd8256c67$export$64df9f8d92ae083f)();
var $237ab0287d7334f0$var$KEYFRAME_EXCLUDE_KEYS = [
    "percent",
    "easing",
    "shape",
    "style",
    "extra"
];
function $237ab0287d7334f0$export$9e5c70edf1ec0cb4(el) {
    // Stop previous keyframe animation.
    el.stopAnimation("keyframe");
    // Restore
    el.attr($237ab0287d7334f0$var$getStateToRestore(el));
}
function $237ab0287d7334f0$export$b0aa6a5f01693fa4(el, animationOpts, animatableModel) {
    if (!animatableModel.isAnimationEnabled() || !animationOpts) return;
    if ((0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(animationOpts)) {
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(animationOpts, function(singleAnimationOpts) {
            $237ab0287d7334f0$export$b0aa6a5f01693fa4(el, singleAnimationOpts, animatableModel);
        });
        return;
    }
    var keyframes = animationOpts.keyframes;
    var duration = animationOpts.duration;
    if (animatableModel && duration == null) {
        // Default to use duration of config.
        // NOTE: animation config from payload will be ignored because they are mainly for transitions.
        var config = (0, $f7e735722ff36e8c$export$5cc7add7ab591d0a)("enter", animatableModel, 0);
        duration = config && config.duration;
    }
    if (!keyframes || !duration) return;
    var stateToRestore = $237ab0287d7334f0$var$getStateToRestore(el);
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)((0, $0da6e154765a9cff$export$9a911ad86e905b13), function(targetPropName) {
        if (targetPropName && !el[targetPropName]) return;
        var animator;
        var endFrameIsSet = false;
        // Sort keyframes by percent.
        keyframes.sort(function(a, b) {
            return a.percent - b.percent;
        });
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(keyframes, function(kf) {
            // Stop current animation.
            var animators = el.animators;
            var kfValues = targetPropName ? kf[targetPropName] : kf;
            if (kf.percent >= 1) endFrameIsSet = true;
            if (!kfValues) return;
            var propKeys = (0, $e44eb14c4271d0f9$export$ed97f33186d4b816)(kfValues);
            if (!targetPropName) // PENDING performance?
            propKeys = (0, $e44eb14c4271d0f9$export$3dea766d36a8935f)(propKeys, function(key) {
                return (0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)($237ab0287d7334f0$var$KEYFRAME_EXCLUDE_KEYS, key) < 0;
            });
            if (!propKeys.length) return;
            if (!animator) {
                animator = el.animate(targetPropName, animationOpts.loop, true);
                animator.scope = "keyframe";
            }
            for(var i = 0; i < animators.length; i++)// Stop all other animation that is not keyframe.
            if (animators[i] !== animator && animators[i].targetName === animator.targetName) animators[i].stopTracks(propKeys);
            targetPropName && (stateToRestore[targetPropName] = stateToRestore[targetPropName] || {});
            var savedTarget = targetPropName ? stateToRestore[targetPropName] : stateToRestore;
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(propKeys, function(key) {
                // Save original value.
                savedTarget[key] = ((targetPropName ? el[targetPropName] : el) || {})[key];
            });
            animator.whenWithKeys(duration * kf.percent, kfValues, propKeys, kf.easing);
        });
        if (!animator) return;
        if (!endFrameIsSet) (0, $4796c55e8b767685$export$c106dd0671a0fc2d)("End frame with percent: 1 is missing in the keyframeAnimation.", true);
        animator.delay(animationOpts.delay || 0).duration(duration).start(animationOpts.easing);
    });
}


var $b8f81eb49e4f8a26$var$nonShapeGraphicElements = {
    // Reserved but not supported in graphic component.
    path: null,
    compoundPath: null,
    // Supported in graphic component.
    group: $748aea24eee93173$export$2e2bcd8739ae039,
    image: $7fb187ddd76ee1dc$export$2e2bcd8739ae039,
    text: $6d12d9a137e168c2$export$2e2bcd8739ae039
};
var $b8f81eb49e4f8a26$export$4ae363f1d88fb658 = $8917c02fd8256c67$export$64df9f8d92ae083f();
// ------------------------
// View
// ------------------------
var $b8f81eb49e4f8a26$export$1132c9ab9ad80748 = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(GraphicComponentView, _super);
    function GraphicComponentView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = GraphicComponentView.type;
        return _this;
    }
    GraphicComponentView.prototype.init = function() {
        this._elMap = $e44eb14c4271d0f9$export$55f8aa7ef875b0a4();
    };
    GraphicComponentView.prototype.render = function(graphicModel, ecModel, api) {
        // Having leveraged between use cases and algorithm complexity, a very
        // simple layout mechanism is used:
        // The size(width/height) can be determined by itself or its parent (not
        // implemented yet), but can not by its children. (Top-down travel)
        // The location(x/y) can be determined by the bounding rect of itself
        // (can including its descendants or not) and the size of its parent.
        // (Bottom-up travel)
        // When `chart.clear()` or `chart.setOption({...}, true)` with the same id,
        // view will be reused.
        if (graphicModel !== this._lastGraphicModel) this._clear();
        this._lastGraphicModel = graphicModel;
        this._updateElements(graphicModel);
        this._relocate(graphicModel, api);
    };
    /**
   * Update graphic elements.
   */ GraphicComponentView.prototype._updateElements = function(graphicModel) {
        var elOptionsToUpdate = graphicModel.useElOptionsToUpdate();
        if (!elOptionsToUpdate) return;
        var elMap = this._elMap;
        var rootGroup = this.group;
        var globalZ = graphicModel.get("z");
        var globalZLevel = graphicModel.get("zlevel");
        // Top-down tranverse to assign graphic settings to each elements.
        $e44eb14c4271d0f9$export$79b2f7037acddd43(elOptionsToUpdate, function(elOption) {
            var id = $8917c02fd8256c67$export$fb1a222ba5dd6e51(elOption.id, null);
            var elExisting = id != null ? elMap.get(id) : null;
            var parentId = $8917c02fd8256c67$export$fb1a222ba5dd6e51(elOption.parentId, null);
            var targetElParent = parentId != null ? elMap.get(parentId) : rootGroup;
            var elType = elOption.type;
            var elOptionStyle = elOption.style;
            if (elType === "text" && elOptionStyle) // In top/bottom mode, textVerticalAlign should not be used, which cause
            // inaccurately locating.
            {
                if (elOption.hv && elOption.hv[1]) elOptionStyle.textVerticalAlign = elOptionStyle.textBaseline = elOptionStyle.verticalAlign = elOptionStyle.align = null;
            }
            var textContentOption = elOption.textContent;
            var textConfig = elOption.textConfig;
            if (elOptionStyle && (0, $50c7731235814599$export$3b868abde5eae7d1)(elOptionStyle, elType, !!textConfig, !!textContentOption)) {
                var convertResult = (0, $50c7731235814599$export$7748133eaaa8aecc)(elOptionStyle, elType, true);
                if (!textConfig && convertResult.textConfig) textConfig = elOption.textConfig = convertResult.textConfig;
                if (!textContentOption && convertResult.textContent) textContentOption = convertResult.textContent;
            }
            // Remove unnecessary props to avoid potential problems.
            var elOptionCleaned = $b8f81eb49e4f8a26$var$getCleanedElOption(elOption);
            elExisting && $e44eb14c4271d0f9$export$a7a9523472993e97(targetElParent === elExisting.parent, "Changing parent is not supported.");
            var $action = elOption.$action || "merge";
            var isMerge = $action === "merge";
            var isReplace = $action === "replace";
            if (isMerge) {
                var isInit = !elExisting;
                var el_1 = elExisting;
                if (isInit) el_1 = $b8f81eb49e4f8a26$var$createEl(id, targetElParent, elOption.type, elMap);
                else {
                    el_1 && ($b8f81eb49e4f8a26$export$4ae363f1d88fb658(el_1).isNew = false);
                    // Stop and restore before update any other attributes.
                    (0, $237ab0287d7334f0$export$9e5c70edf1ec0cb4)(el_1);
                }
                if (el_1) {
                    (0, $0da6e154765a9cff$export$4342b281b9b5d77e)(el_1, elOptionCleaned, graphicModel, {
                        isInit: isInit
                    });
                    $b8f81eb49e4f8a26$var$updateCommonAttrs(el_1, elOption, globalZ, globalZLevel);
                }
            } else if (isReplace) {
                $b8f81eb49e4f8a26$var$removeEl(elExisting, elOption, elMap, graphicModel);
                var el_2 = $b8f81eb49e4f8a26$var$createEl(id, targetElParent, elOption.type, elMap);
                if (el_2) {
                    (0, $0da6e154765a9cff$export$4342b281b9b5d77e)(el_2, elOptionCleaned, graphicModel, {
                        isInit: true
                    });
                    $b8f81eb49e4f8a26$var$updateCommonAttrs(el_2, elOption, globalZ, globalZLevel);
                }
            } else if ($action === "remove") {
                (0, $0da6e154765a9cff$export$a6f11bb1cb100e2a)(elExisting, elOption);
                $b8f81eb49e4f8a26$var$removeEl(elExisting, elOption, elMap, graphicModel);
            }
            var el = elMap.get(id);
            if (el && textContentOption) {
                if (isMerge) {
                    var textContentExisting = el.getTextContent();
                    textContentExisting ? textContentExisting.attr(textContentOption) : el.setTextContent(new $6d12d9a137e168c2$export$2e2bcd8739ae039(textContentOption));
                } else if (isReplace) el.setTextContent(new $6d12d9a137e168c2$export$2e2bcd8739ae039(textContentOption));
            }
            if (el) {
                var clipPathOption = elOption.clipPath;
                if (clipPathOption) {
                    var clipPathType = clipPathOption.type;
                    var clipPath = void 0;
                    var isInit = false;
                    if (isMerge) {
                        var oldClipPath = el.getClipPath();
                        isInit = !oldClipPath || $b8f81eb49e4f8a26$export$4ae363f1d88fb658(oldClipPath).type !== clipPathType;
                        clipPath = isInit ? $b8f81eb49e4f8a26$var$newEl(clipPathType) : oldClipPath;
                    } else if (isReplace) {
                        isInit = true;
                        clipPath = $b8f81eb49e4f8a26$var$newEl(clipPathType);
                    }
                    el.setClipPath(clipPath);
                    (0, $0da6e154765a9cff$export$4342b281b9b5d77e)(clipPath, clipPathOption, graphicModel, {
                        isInit: isInit
                    });
                    (0, $237ab0287d7334f0$export$b0aa6a5f01693fa4)(clipPath, clipPathOption.keyframeAnimation, graphicModel);
                }
                var elInner = $b8f81eb49e4f8a26$export$4ae363f1d88fb658(el);
                el.setTextConfig(textConfig);
                elInner.option = elOption;
                $b8f81eb49e4f8a26$var$setEventData(el, graphicModel, elOption);
                $6aec2e68b45f8796$export$fc6410d97fab306c({
                    el: el,
                    componentModel: graphicModel,
                    itemName: el.name,
                    itemTooltipOption: elOption.tooltip
                });
                (0, $237ab0287d7334f0$export$b0aa6a5f01693fa4)(el, elOption.keyframeAnimation, graphicModel);
            }
        });
    };
    /**
   * Locate graphic elements.
   */ GraphicComponentView.prototype._relocate = function(graphicModel, api) {
        var elOptions = graphicModel.option.elements;
        var rootGroup = this.group;
        var elMap = this._elMap;
        var apiWidth = api.getWidth();
        var apiHeight = api.getHeight();
        var xy = [
            "x",
            "y"
        ];
        // Top-down to calculate percentage width/height of group
        for(var i = 0; i < elOptions.length; i++){
            var elOption = elOptions[i];
            var id = $8917c02fd8256c67$export$fb1a222ba5dd6e51(elOption.id, null);
            var el = id != null ? elMap.get(id) : null;
            if (!el || !el.isGroup) continue;
            var parentEl = el.parent;
            var isParentRoot = parentEl === rootGroup;
            // Like 'position:absolut' in css, default 0.
            var elInner = $b8f81eb49e4f8a26$export$4ae363f1d88fb658(el);
            var parentElInner = $b8f81eb49e4f8a26$export$4ae363f1d88fb658(parentEl);
            elInner.width = (0, $13e6a1a716300dd4$export$e8514cb5a5e2b40f)(elInner.option.width, isParentRoot ? apiWidth : parentElInner.width) || 0;
            elInner.height = (0, $13e6a1a716300dd4$export$e8514cb5a5e2b40f)(elInner.option.height, isParentRoot ? apiHeight : parentElInner.height) || 0;
        }
        // Bottom-up tranvese all elements (consider ec resize) to locate elements.
        for(var i = elOptions.length - 1; i >= 0; i--){
            var elOption = elOptions[i];
            var id = $8917c02fd8256c67$export$fb1a222ba5dd6e51(elOption.id, null);
            var el = id != null ? elMap.get(id) : null;
            if (!el) continue;
            var parentEl = el.parent;
            var parentElInner = $b8f81eb49e4f8a26$export$4ae363f1d88fb658(parentEl);
            var containerInfo = parentEl === rootGroup ? {
                width: apiWidth,
                height: apiHeight
            } : {
                width: parentElInner.width,
                height: parentElInner.height
            };
            // PENDING
            // Currently, when `bounding: 'all'`, the union bounding rect of the group
            // does not include the rect of [0, 0, group.width, group.height], which
            // is probably weird for users. Should we make a break change for it?
            var layoutPos = {};
            var layouted = $074356ab3d6b1cdb$export$74054bd96b5eeef1(el, elOption, containerInfo, null, {
                hv: elOption.hv,
                boundingMode: elOption.bounding
            }, layoutPos);
            if (!$b8f81eb49e4f8a26$export$4ae363f1d88fb658(el).isNew && layouted) {
                var transition = elOption.transition;
                var animatePos = {};
                for(var k = 0; k < xy.length; k++){
                    var key = xy[k];
                    var val = layoutPos[key];
                    if (transition && ((0, $0da6e154765a9cff$export$6f3361b4b8d7a8ba)(transition) || $e44eb14c4271d0f9$export$305f7d4e9d4624f2(transition, key) >= 0)) animatePos[key] = val;
                    else el[key] = val;
                }
                (0, $f7e735722ff36e8c$export$c8dce3c08436e91e)(el, animatePos, graphicModel, 0);
            } else el.attr(layoutPos);
        }
    };
    /**
   * Clear all elements.
   */ GraphicComponentView.prototype._clear = function() {
        var _this = this;
        var elMap = this._elMap;
        elMap.each(function(el) {
            $b8f81eb49e4f8a26$var$removeEl(el, $b8f81eb49e4f8a26$export$4ae363f1d88fb658(el).option, elMap, _this._lastGraphicModel);
        });
        this._elMap = $e44eb14c4271d0f9$export$55f8aa7ef875b0a4();
    };
    GraphicComponentView.prototype.dispose = function() {
        this._clear();
    };
    GraphicComponentView.type = "graphic";
    return GraphicComponentView;
}((0, $ced42ef9869a1e4c$export$2e2bcd8739ae039));
function $b8f81eb49e4f8a26$var$newEl(graphicType) {
    $e44eb14c4271d0f9$export$a7a9523472993e97(graphicType, "graphic type MUST be set");
    var Clz = $e44eb14c4271d0f9$export$b5a638e9b3fff9f3($b8f81eb49e4f8a26$var$nonShapeGraphicElements, graphicType) ? $b8f81eb49e4f8a26$var$nonShapeGraphicElements[graphicType] : $6aec2e68b45f8796$export$51df4b5565a58189(graphicType);
    $e44eb14c4271d0f9$export$a7a9523472993e97(Clz, "graphic type " + graphicType + " can not be found");
    var el = new Clz({});
    $b8f81eb49e4f8a26$export$4ae363f1d88fb658(el).type = graphicType;
    return el;
}
function $b8f81eb49e4f8a26$var$createEl(id, targetElParent, graphicType, elMap) {
    var el = $b8f81eb49e4f8a26$var$newEl(graphicType);
    targetElParent.add(el);
    elMap.set(id, el);
    $b8f81eb49e4f8a26$export$4ae363f1d88fb658(el).id = id;
    $b8f81eb49e4f8a26$export$4ae363f1d88fb658(el).isNew = true;
    return el;
}
function $b8f81eb49e4f8a26$var$removeEl(elExisting, elOption, elMap, graphicModel) {
    var existElParent = elExisting && elExisting.parent;
    if (existElParent) {
        elExisting.type === "group" && elExisting.traverse(function(el) {
            $b8f81eb49e4f8a26$var$removeEl(el, elOption, elMap, graphicModel);
        });
        (0, $0da6e154765a9cff$export$15575b6d82d35bb3)(elExisting, elOption, graphicModel);
        elMap.removeKey($b8f81eb49e4f8a26$export$4ae363f1d88fb658(elExisting).id);
    }
}
function $b8f81eb49e4f8a26$var$updateCommonAttrs(el, elOption, defaultZ, defaultZlevel) {
    if (!el.isGroup) $e44eb14c4271d0f9$export$79b2f7037acddd43([
        [
            "cursor",
            (0, $42aae97fd255cbd2$export$2e2bcd8739ae039).prototype.cursor
        ],
        // We should not support configure z and zlevel in the element level.
        // But seems we didn't limit it previously. So here still use it to avoid breaking.
        [
            "zlevel",
            defaultZlevel || 0
        ],
        [
            "z",
            defaultZ || 0
        ],
        // z2 must not be null/undefined, otherwise sort error may occur.
        [
            "z2",
            0
        ]
    ], function(item) {
        var prop = item[0];
        if ($e44eb14c4271d0f9$export$b5a638e9b3fff9f3(elOption, prop)) el[prop] = $e44eb14c4271d0f9$export$995e01f2f5c9d030(elOption[prop], item[1]);
        else if (el[prop] == null) el[prop] = item[1];
    });
    $e44eb14c4271d0f9$export$79b2f7037acddd43($e44eb14c4271d0f9$export$ed97f33186d4b816(elOption), function(key) {
        // Assign event handlers.
        // PENDING: should enumerate all event names or use pattern matching?
        if (key.indexOf("on") === 0) {
            var val = elOption[key];
            el[key] = $e44eb14c4271d0f9$export$f6e2535fb5126e54(val) ? val : null;
        }
    });
    if ($e44eb14c4271d0f9$export$b5a638e9b3fff9f3(elOption, "draggable")) el.draggable = elOption.draggable;
    // Other attributes
    elOption.name != null && (el.name = elOption.name);
    elOption.id != null && (el.id = elOption.id);
}
// Remove unnecessary props to avoid potential problems.
function $b8f81eb49e4f8a26$var$getCleanedElOption(elOption) {
    elOption = $e44eb14c4271d0f9$export$8b58be045bf06082({}, elOption);
    $e44eb14c4271d0f9$export$79b2f7037acddd43([
        "id",
        "parentId",
        "$action",
        "hv",
        "bounding",
        "textContent",
        "clipPath"
    ].concat($074356ab3d6b1cdb$export$a9aa2cc018afbed), function(name) {
        delete elOption[name];
    });
    return elOption;
}
function $b8f81eb49e4f8a26$var$setEventData(el, graphicModel, elOption) {
    var eventData = (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(el).eventData;
    // Simple optimize for large amount of elements that no need event.
    if (!el.silent && !el.ignore && !eventData) eventData = (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(el).eventData = {
        componentType: "graphic",
        componentIndex: graphicModel.componentIndex,
        name: el.name
    };
    // `elOption.info` enables user to mount some info on
    // elements and use them in event handlers.
    if (eventData) eventData.info = elOption.info;
}


function $287cc9c31c4148ca$export$4b3e715f166fdd78(registers) {
    registers.registerComponentModel((0, $1d491fca301ec58e$export$6d85925da4d2cf23));
    registers.registerComponentView((0, $b8f81eb49e4f8a26$export$1132c9ab9ad80748));
    registers.registerPreprocessor(function(option) {
        var graphicOption = option.graphic;
        // Convert
        // {graphic: [{left: 10, type: 'circle'}, ...]}
        // or
        // {graphic: {left: 10, type: 'circle'}}
        // to
        // {graphic: [{elements: [{left: 10, type: 'circle'}, ...]}]}
        if ((0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(graphicOption)) {
            if (!graphicOption[0] || !graphicOption[0].elements) option.graphic = [
                {
                    elements: graphicOption
                }
            ];
            else // Only one graphic instance can be instantiated. (We don't
            // want that too many views are created in echarts._viewMap.)
            option.graphic = [
                option.graphic[0]
            ];
        } else if (graphicOption && !graphicOption.elements) option.graphic = [
            {
                elements: [
                    graphicOption
                ]
            }
        ];
    });
}

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
var $ce503c6b6cc63ecd$export$f25521e726513e83 = [
    "x",
    "y",
    "radius",
    "angle",
    "single"
];
// Supported coords.
// FIXME: polar has been broken (but rarely used).
var $ce503c6b6cc63ecd$var$SERIES_COORDS = [
    "cartesian2d",
    "polar",
    "singleAxis"
];
function $ce503c6b6cc63ecd$export$2d449d4adc0d2cfc(seriesModel) {
    var coordType = seriesModel.get("coordinateSystem");
    return (0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)($ce503c6b6cc63ecd$var$SERIES_COORDS, coordType) >= 0;
}
function $ce503c6b6cc63ecd$export$90855f7219399082(axisDim) {
    (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(axisDim);
    return axisDim + "Axis";
}
function $ce503c6b6cc63ecd$export$f9c16e110bf1e902(axisDim) {
    (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(axisDim);
    return axisDim + "AxisIndex";
}
function $ce503c6b6cc63ecd$export$fa8714b2310ddff9(axisDim) {
    (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(axisDim);
    return axisDim + "AxisId";
}
function $ce503c6b6cc63ecd$export$9e00b6c2b8b2e9a7(ecModel, payload) {
    // Key: `DataZoomAxisDimension`
    var axisRecords = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
    var effectedModels = [];
    // Key: uid of dataZoomModel
    var effectedModelMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
    // Find the dataZooms specified by payload.
    ecModel.eachComponent({
        mainType: "dataZoom",
        query: payload
    }, function(dataZoomModel) {
        if (!effectedModelMap.get(dataZoomModel.uid)) addToEffected(dataZoomModel);
    });
    // Start from the given dataZoomModels, travel the graph to find
    // all of the linked dataZoom models.
    var foundNewLink;
    do {
        foundNewLink = false;
        ecModel.eachComponent("dataZoom", processSingle);
    }while (foundNewLink);
    function processSingle(dataZoomModel) {
        if (!effectedModelMap.get(dataZoomModel.uid) && isLinked(dataZoomModel)) {
            addToEffected(dataZoomModel);
            foundNewLink = true;
        }
    }
    function addToEffected(dataZoom) {
        effectedModelMap.set(dataZoom.uid, true);
        effectedModels.push(dataZoom);
        markAxisControlled(dataZoom);
    }
    function isLinked(dataZoomModel) {
        var isLink = false;
        dataZoomModel.eachTargetAxis(function(axisDim, axisIndex) {
            var axisIdxArr = axisRecords.get(axisDim);
            if (axisIdxArr && axisIdxArr[axisIndex]) isLink = true;
        });
        return isLink;
    }
    function markAxisControlled(dataZoomModel) {
        dataZoomModel.eachTargetAxis(function(axisDim, axisIndex) {
            (axisRecords.get(axisDim) || axisRecords.set(axisDim, []))[axisIndex] = true;
        });
    }
    return effectedModels;
}
function $ce503c6b6cc63ecd$export$b41173dee9da195b(dataZoomModel) {
    var ecModel = dataZoomModel.ecModel;
    var coordSysInfoWrap = {
        infoList: [],
        infoMap: (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)()
    };
    dataZoomModel.eachTargetAxis(function(axisDim, axisIndex) {
        var axisModel = ecModel.getComponent($ce503c6b6cc63ecd$export$90855f7219399082(axisDim), axisIndex);
        if (!axisModel) return;
        var coordSysModel = axisModel.getCoordSysModel();
        if (!coordSysModel) return;
        var coordSysUid = coordSysModel.uid;
        var coordSysInfo = coordSysInfoWrap.infoMap.get(coordSysUid);
        if (!coordSysInfo) {
            coordSysInfo = {
                model: coordSysModel,
                axisModels: []
            };
            coordSysInfoWrap.infoList.push(coordSysInfo);
            coordSysInfoWrap.infoMap.set(coordSysUid, coordSysInfo);
        }
        coordSysInfo.axisModels.push(axisModel);
    });
    return coordSysInfoWrap;
}



var $ffd97d3630a9786d$var$DataZoomAxisInfo = /** @class */ function() {
    function DataZoomAxisInfo() {
        this.indexList = [];
        this.indexMap = [];
    }
    DataZoomAxisInfo.prototype.add = function(axisCmptIdx) {
        // Remove duplication.
        if (!this.indexMap[axisCmptIdx]) {
            this.indexList.push(axisCmptIdx);
            this.indexMap[axisCmptIdx] = true;
        }
    };
    return DataZoomAxisInfo;
}();
var $ffd97d3630a9786d$var$DataZoomModel = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(DataZoomModel, _super);
    function DataZoomModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = DataZoomModel.type;
        _this._autoThrottle = true;
        _this._noTarget = true;
        /**
     * It is `[rangeModeForMin, rangeModeForMax]`.
     * The optional values for `rangeMode`:
     * + `'value'` mode: the axis extent will always be determined by
     *     `dataZoom.startValue` and `dataZoom.endValue`, despite
     *     how data like and how `axis.min` and `axis.max` are.
     * + `'percent'` mode: `100` represents 100% of the `[dMin, dMax]`,
     *     where `dMin` is `axis.min` if `axis.min` specified, otherwise `data.extent[0]`,
     *     and `dMax` is `axis.max` if `axis.max` specified, otherwise `data.extent[1]`.
     *     Axis extent will be determined by the result of the percent of `[dMin, dMax]`.
     *
     * For example, when users are using dynamic data (update data periodically via `setOption`),
     * if in `'value`' mode, the window will be kept in a fixed value range despite how
     * data are appended, while if in `'percent'` mode, whe window range will be changed alone with
     * the appended data (suppose `axis.min` and `axis.max` are not specified).
     */ _this._rangePropMode = [
            "percent",
            "percent"
        ];
        return _this;
    }
    DataZoomModel.prototype.init = function(option, parentModel, ecModel) {
        var inputRawOption = $ffd97d3630a9786d$var$retrieveRawOption(option);
        /**
     * Suppose a "main process" start at the point that model prepared (that is,
     * model initialized or merged or method called in `action`).
     * We should keep the `main process` idempotent, that is, given a set of values
     * on `option`, we get the same result.
     *
     * But sometimes, values on `option` will be updated for providing users
     * a "final calculated value" (`dataZoomProcessor` will do that). Those value
     * should not be the base/input of the `main process`.
     *
     * So in that case we should save and keep the input of the `main process`
     * separately, called `settledOption`.
     *
     * For example, consider the case:
     * (Step_1) brush zoom the grid by `toolbox.dataZoom`,
     *     where the original input `option.startValue`, `option.endValue` are earsed by
     *     calculated value.
     * (Step)2) click the legend to hide and show a series,
     *     where the new range is calculated by the earsed `startValue` and `endValue`,
     *     which brings incorrect result.
     */ this.settledOption = inputRawOption;
        this.mergeDefaultAndTheme(option, ecModel);
        this._doInit(inputRawOption);
    };
    DataZoomModel.prototype.mergeOption = function(newOption) {
        var inputRawOption = $ffd97d3630a9786d$var$retrieveRawOption(newOption);
        // FIX #2591
        (0, $e44eb14c4271d0f9$export$4950aa0f605343fb)(this.option, newOption, true);
        (0, $e44eb14c4271d0f9$export$4950aa0f605343fb)(this.settledOption, inputRawOption, true);
        this._doInit(inputRawOption);
    };
    DataZoomModel.prototype._doInit = function(inputRawOption) {
        var thisOption = this.option;
        this._setDefaultThrottle(inputRawOption);
        this._updateRangeUse(inputRawOption);
        var settledOption = this.settledOption;
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)([
            [
                "start",
                "startValue"
            ],
            [
                "end",
                "endValue"
            ]
        ], function(names, index) {
            // start/end has higher priority over startValue/endValue if they
            // both set, but we should make chart.setOption({endValue: 1000})
            // effective, rather than chart.setOption({endValue: 1000, end: null}).
            if (this._rangePropMode[index] === "value") thisOption[names[0]] = settledOption[names[0]] = null;
        // Otherwise do nothing and use the merge result.
        }, this);
        this._resetTarget();
    };
    DataZoomModel.prototype._resetTarget = function() {
        var optionOrient = this.get("orient", true);
        var targetAxisIndexMap = this._targetAxisInfoMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
        var hasAxisSpecified = this._fillSpecifiedTargetAxis(targetAxisIndexMap);
        if (hasAxisSpecified) this._orient = optionOrient || this._makeAutoOrientByTargetAxis();
        else {
            this._orient = optionOrient || "horizontal";
            this._fillAutoTargetAxisByOrient(targetAxisIndexMap, this._orient);
        }
        this._noTarget = true;
        targetAxisIndexMap.each(function(axisInfo) {
            if (axisInfo.indexList.length) this._noTarget = false;
        }, this);
    };
    DataZoomModel.prototype._fillSpecifiedTargetAxis = function(targetAxisIndexMap) {
        var hasAxisSpecified = false;
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)((0, $ce503c6b6cc63ecd$export$f25521e726513e83), function(axisDim) {
            var refering = this.getReferringComponents((0, $ce503c6b6cc63ecd$export$90855f7219399082)(axisDim), (0, $8917c02fd8256c67$export$48d598924ce4892c));
            // When user set axisIndex as a empty array, we think that user specify axisIndex
            // but do not want use auto mode. Because empty array may be encountered when
            // some error occurred.
            if (!refering.specified) return;
            hasAxisSpecified = true;
            var axisInfo = new $ffd97d3630a9786d$var$DataZoomAxisInfo();
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(refering.models, function(axisModel) {
                axisInfo.add(axisModel.componentIndex);
            });
            targetAxisIndexMap.set(axisDim, axisInfo);
        }, this);
        return hasAxisSpecified;
    };
    DataZoomModel.prototype._fillAutoTargetAxisByOrient = function(targetAxisIndexMap, orient) {
        var ecModel = this.ecModel;
        var needAuto = true;
        // Find axis that parallel to dataZoom as default.
        if (needAuto) {
            var axisDim = orient === "vertical" ? "y" : "x";
            var axisModels = ecModel.findComponents({
                mainType: axisDim + "Axis"
            });
            setParallelAxis(axisModels, axisDim);
        }
        // Find axis that parallel to dataZoom as default.
        if (needAuto) {
            var axisModels = ecModel.findComponents({
                mainType: "singleAxis",
                filter: function(axisModel) {
                    return axisModel.get("orient", true) === orient;
                }
            });
            setParallelAxis(axisModels, "single");
        }
        function setParallelAxis(axisModels, axisDim) {
            // At least use the first parallel axis as the target axis.
            var axisModel = axisModels[0];
            if (!axisModel) return;
            var axisInfo = new $ffd97d3630a9786d$var$DataZoomAxisInfo();
            axisInfo.add(axisModel.componentIndex);
            targetAxisIndexMap.set(axisDim, axisInfo);
            needAuto = false;
            // Find parallel axes in the same grid.
            if (axisDim === "x" || axisDim === "y") {
                var gridModel_1 = axisModel.getReferringComponents("grid", (0, $8917c02fd8256c67$export$f076738ec84e693c)).models[0];
                gridModel_1 && (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(axisModels, function(axModel) {
                    if (axisModel.componentIndex !== axModel.componentIndex && gridModel_1 === axModel.getReferringComponents("grid", (0, $8917c02fd8256c67$export$f076738ec84e693c)).models[0]) axisInfo.add(axModel.componentIndex);
                });
            }
        }
        if (needAuto) // If no parallel axis, find the first category axis as default. (Also consider polar).
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)((0, $ce503c6b6cc63ecd$export$f25521e726513e83), function(axisDim) {
            if (!needAuto) return;
            var axisModels = ecModel.findComponents({
                mainType: (0, $ce503c6b6cc63ecd$export$90855f7219399082)(axisDim),
                filter: function(axisModel) {
                    return axisModel.get("type", true) === "category";
                }
            });
            if (axisModels[0]) {
                var axisInfo = new $ffd97d3630a9786d$var$DataZoomAxisInfo();
                axisInfo.add(axisModels[0].componentIndex);
                targetAxisIndexMap.set(axisDim, axisInfo);
                needAuto = false;
            }
        }, this);
    };
    DataZoomModel.prototype._makeAutoOrientByTargetAxis = function() {
        var dim;
        // Find the first axis
        this.eachTargetAxis(function(axisDim) {
            !dim && (dim = axisDim);
        }, this);
        return dim === "y" ? "vertical" : "horizontal";
    };
    DataZoomModel.prototype._setDefaultThrottle = function(inputRawOption) {
        // When first time user set throttle, auto throttle ends.
        if (inputRawOption.hasOwnProperty("throttle")) this._autoThrottle = false;
        if (this._autoThrottle) {
            var globalOption = this.ecModel.option;
            this.option.throttle = globalOption.animation && globalOption.animationDurationUpdate > 0 ? 100 : 20;
        }
    };
    DataZoomModel.prototype._updateRangeUse = function(inputRawOption) {
        var rangePropMode = this._rangePropMode;
        var rangeModeInOption = this.get("rangeMode");
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)([
            [
                "start",
                "startValue"
            ],
            [
                "end",
                "endValue"
            ]
        ], function(names, index) {
            var percentSpecified = inputRawOption[names[0]] != null;
            var valueSpecified = inputRawOption[names[1]] != null;
            if (percentSpecified && !valueSpecified) rangePropMode[index] = "percent";
            else if (!percentSpecified && valueSpecified) rangePropMode[index] = "value";
            else if (rangeModeInOption) rangePropMode[index] = rangeModeInOption[index];
            else if (percentSpecified) // percentSpecified && valueSpecified
            rangePropMode[index] = "percent";
        // else remain its original setting.
        });
    };
    DataZoomModel.prototype.noTarget = function() {
        return this._noTarget;
    };
    DataZoomModel.prototype.getFirstTargetAxisModel = function() {
        var firstAxisModel;
        this.eachTargetAxis(function(axisDim, axisIndex) {
            if (firstAxisModel == null) firstAxisModel = this.ecModel.getComponent((0, $ce503c6b6cc63ecd$export$90855f7219399082)(axisDim), axisIndex);
        }, this);
        return firstAxisModel;
    };
    /**
   * @param {Function} callback param: axisModel, dimNames, axisIndex, dataZoomModel, ecModel
   */ DataZoomModel.prototype.eachTargetAxis = function(callback, context) {
        this._targetAxisInfoMap.each(function(axisInfo, axisDim) {
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(axisInfo.indexList, function(axisIndex) {
                callback.call(context, axisDim, axisIndex);
            });
        });
    };
    /**
   * @return If not found, return null/undefined.
   */ DataZoomModel.prototype.getAxisProxy = function(axisDim, axisIndex) {
        var axisModel = this.getAxisModel(axisDim, axisIndex);
        if (axisModel) return axisModel.__dzAxisProxy;
    };
    /**
   * @return If not found, return null/undefined.
   */ DataZoomModel.prototype.getAxisModel = function(axisDim, axisIndex) {
        (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(axisDim && axisIndex != null);
        var axisInfo = this._targetAxisInfoMap.get(axisDim);
        if (axisInfo && axisInfo.indexMap[axisIndex]) return this.ecModel.getComponent((0, $ce503c6b6cc63ecd$export$90855f7219399082)(axisDim), axisIndex);
    };
    /**
   * If not specified, set to undefined.
   */ DataZoomModel.prototype.setRawRange = function(opt) {
        var thisOption = this.option;
        var settledOption = this.settledOption;
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)([
            [
                "start",
                "startValue"
            ],
            [
                "end",
                "endValue"
            ]
        ], function(names) {
            // Consider the pair <start, startValue>:
            // If one has value and the other one is `null/undefined`, we both set them
            // to `settledOption`. This strategy enables the feature to clear the original
            // value in `settledOption` to `null/undefined`.
            // But if both of them are `null/undefined`, we do not set them to `settledOption`
            // and keep `settledOption` with the original value. This strategy enables users to
            // only set <end or endValue> but not set <start or startValue> when calling
            // `dispatchAction`.
            // The pair <end, endValue> is treated in the same way.
            if (opt[names[0]] != null || opt[names[1]] != null) {
                thisOption[names[0]] = settledOption[names[0]] = opt[names[0]];
                thisOption[names[1]] = settledOption[names[1]] = opt[names[1]];
            }
        }, this);
        this._updateRangeUse(opt);
    };
    DataZoomModel.prototype.setCalculatedRange = function(opt) {
        var option = this.option;
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)([
            "start",
            "startValue",
            "end",
            "endValue"
        ], function(name) {
            option[name] = opt[name];
        });
    };
    DataZoomModel.prototype.getPercentRange = function() {
        var axisProxy = this.findRepresentativeAxisProxy();
        if (axisProxy) return axisProxy.getDataPercentWindow();
    };
    /**
   * For example, chart.getModel().getComponent('dataZoom').getValueRange('y', 0);
   *
   * @return [startValue, endValue] value can only be '-' or finite number.
   */ DataZoomModel.prototype.getValueRange = function(axisDim, axisIndex) {
        if (axisDim == null && axisIndex == null) {
            var axisProxy = this.findRepresentativeAxisProxy();
            if (axisProxy) return axisProxy.getDataValueWindow();
        } else return this.getAxisProxy(axisDim, axisIndex).getDataValueWindow();
    };
    /**
   * @param axisModel If axisModel given, find axisProxy
   *      corresponding to the axisModel
   */ DataZoomModel.prototype.findRepresentativeAxisProxy = function(axisModel) {
        if (axisModel) return axisModel.__dzAxisProxy;
        // Find the first hosted axisProxy
        var firstProxy;
        var axisDimList = this._targetAxisInfoMap.keys();
        for(var i = 0; i < axisDimList.length; i++){
            var axisDim = axisDimList[i];
            var axisInfo = this._targetAxisInfoMap.get(axisDim);
            for(var j = 0; j < axisInfo.indexList.length; j++){
                var proxy = this.getAxisProxy(axisDim, axisInfo.indexList[j]);
                if (proxy.hostedBy(this)) return proxy;
                if (!firstProxy) firstProxy = proxy;
            }
        }
        // If no hosted proxy found, still need to return a proxy.
        // This case always happens in toolbox dataZoom, where axes are all hosted by
        // other dataZooms.
        return firstProxy;
    };
    DataZoomModel.prototype.getRangePropMode = function() {
        return this._rangePropMode.slice();
    };
    DataZoomModel.prototype.getOrient = function() {
        // Should not be called before initialized.
        (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(this._orient);
        return this._orient;
    };
    DataZoomModel.type = "dataZoom";
    DataZoomModel.dependencies = [
        "xAxis",
        "yAxis",
        "radiusAxis",
        "angleAxis",
        "singleAxis",
        "series",
        "toolbox"
    ];
    DataZoomModel.defaultOption = {
        // zlevel: 0,
        z: 4,
        filterMode: "filter",
        start: 0,
        end: 100
    };
    return DataZoomModel;
}((0, $a756077528c07361$export$2e2bcd8739ae039));
/**
 * Retrieve those raw params from option, which will be cached separately,
 * because they will be overwritten by normalized/calculated values in the main
 * process.
 */ function $ffd97d3630a9786d$var$retrieveRawOption(option) {
    var ret = {};
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)([
        "start",
        "end",
        "startValue",
        "endValue",
        "throttle"
    ], function(name) {
        option.hasOwnProperty(name) && (ret[name] = option[name]);
    });
    return ret;
}
var $ffd97d3630a9786d$export$2e2bcd8739ae039 = $ffd97d3630a9786d$var$DataZoomModel;


var $557ec5ce8e11891e$var$SelectDataZoomModel = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(SelectDataZoomModel, _super);
    function SelectDataZoomModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = SelectDataZoomModel.type;
        return _this;
    }
    SelectDataZoomModel.type = "dataZoom.select";
    return SelectDataZoomModel;
}((0, $ffd97d3630a9786d$export$2e2bcd8739ae039));
var $557ec5ce8e11891e$export$2e2bcd8739ae039 = $557ec5ce8e11891e$var$SelectDataZoomModel;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

var $075d7d042585b153$var$DataZoomView = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(DataZoomView, _super);
    function DataZoomView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = DataZoomView.type;
        return _this;
    }
    DataZoomView.prototype.render = function(dataZoomModel, ecModel, api, payload) {
        this.dataZoomModel = dataZoomModel;
        this.ecModel = ecModel;
        this.api = api;
    };
    DataZoomView.type = "dataZoom";
    return DataZoomView;
}((0, $ced42ef9869a1e4c$export$2e2bcd8739ae039));
var $075d7d042585b153$export$2e2bcd8739ae039 = $075d7d042585b153$var$DataZoomView;


var $e589c8a537f53559$var$SelectDataZoomView = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(SelectDataZoomView, _super);
    function SelectDataZoomView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = SelectDataZoomView.type;
        return _this;
    }
    SelectDataZoomView.type = "dataZoom.select";
    return SelectDataZoomView;
}((0, $075d7d042585b153$export$2e2bcd8739ae039));
var $e589c8a537f53559$export$2e2bcd8739ae039 = $e589c8a537f53559$var$SelectDataZoomView;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * Calculate slider move result.
 * Usage:
 * (1) If both handle0 and handle1 are needed to be moved, set minSpan the same as
 * maxSpan and the same as `Math.abs(handleEnd[1] - handleEnds[0])`.
 * (2) If handle0 is forbidden to cross handle1, set minSpan as `0`.
 *
 * @param delta Move length.
 * @param handleEnds handleEnds[0] can be bigger then handleEnds[1].
 *              handleEnds will be modified in this method.
 * @param extent handleEnds is restricted by extent.
 *              extent[0] should less or equals than extent[1].
 * @param handleIndex Can be 'all', means that both move the two handleEnds.
 * @param minSpan The range of dataZoom can not be smaller than that.
 *              If not set, handle0 and cross handle1. If set as a non-negative
 *              number (including `0`), handles will push each other when reaching
 *              the minSpan.
 * @param maxSpan The range of dataZoom can not be larger than that.
 * @return The input handleEnds.
 */ function $bd452127b86a5d76$export$2e2bcd8739ae039(delta, handleEnds, extent, handleIndex, minSpan, maxSpan) {
    delta = delta || 0;
    var extentSpan = extent[1] - extent[0];
    // Notice maxSpan and minSpan can be null/undefined.
    if (minSpan != null) minSpan = $bd452127b86a5d76$var$restrict(minSpan, [
        0,
        extentSpan
    ]);
    if (maxSpan != null) maxSpan = Math.max(maxSpan, minSpan != null ? minSpan : 0);
    if (handleIndex === "all") {
        var handleSpan = Math.abs(handleEnds[1] - handleEnds[0]);
        handleSpan = $bd452127b86a5d76$var$restrict(handleSpan, [
            0,
            extentSpan
        ]);
        minSpan = maxSpan = $bd452127b86a5d76$var$restrict(handleSpan, [
            minSpan,
            maxSpan
        ]);
        handleIndex = 0;
    }
    handleEnds[0] = $bd452127b86a5d76$var$restrict(handleEnds[0], extent);
    handleEnds[1] = $bd452127b86a5d76$var$restrict(handleEnds[1], extent);
    var originalDistSign = $bd452127b86a5d76$var$getSpanSign(handleEnds, handleIndex);
    handleEnds[handleIndex] += delta;
    // Restrict in extent.
    var extentMinSpan = minSpan || 0;
    var realExtent = extent.slice();
    originalDistSign.sign < 0 ? realExtent[0] += extentMinSpan : realExtent[1] -= extentMinSpan;
    handleEnds[handleIndex] = $bd452127b86a5d76$var$restrict(handleEnds[handleIndex], realExtent);
    // Expand span.
    var currDistSign;
    currDistSign = $bd452127b86a5d76$var$getSpanSign(handleEnds, handleIndex);
    if (minSpan != null && (currDistSign.sign !== originalDistSign.sign || currDistSign.span < minSpan)) // If minSpan exists, 'cross' is forbidden.
    handleEnds[1 - handleIndex] = handleEnds[handleIndex] + originalDistSign.sign * minSpan;
    // Shrink span.
    currDistSign = $bd452127b86a5d76$var$getSpanSign(handleEnds, handleIndex);
    if (maxSpan != null && currDistSign.span > maxSpan) handleEnds[1 - handleIndex] = handleEnds[handleIndex] + currDistSign.sign * maxSpan;
    return handleEnds;
}
function $bd452127b86a5d76$var$getSpanSign(handleEnds, handleIndex) {
    var dist = handleEnds[handleIndex] - handleEnds[1 - handleIndex];
    // If `handleEnds[0] === handleEnds[1]`, always believe that handleEnd[0]
    // is at left of handleEnds[1] for non-cross case.
    return {
        span: Math.abs(dist),
        sign: dist > 0 ? -1 : dist < 0 ? 1 : handleIndex ? -1 : 1
    };
}
function $bd452127b86a5d76$var$restrict(value, extend) {
    return Math.min(extend[1] != null ? extend[1] : Infinity, Math.max(extend[0] != null ? extend[0] : -Infinity, value));
}






var $30de77a582223c95$var$each = $e44eb14c4271d0f9$export$79b2f7037acddd43;
var $30de77a582223c95$var$asc = $13e6a1a716300dd4$export$debe6e778e0a6d32;
/**
 * Operate single axis.
 * One axis can only operated by one axis operator.
 * Different dataZoomModels may be defined to operate the same axis.
 * (i.e. 'inside' data zoom and 'slider' data zoom components)
 * So dataZoomModels share one axisProxy in that case.
 */ var $30de77a582223c95$var$AxisProxy = /** @class */ function() {
    function AxisProxy(dimName, axisIndex, dataZoomModel, ecModel) {
        this._dimName = dimName;
        this._axisIndex = axisIndex;
        this.ecModel = ecModel;
        this._dataZoomModel = dataZoomModel;
    // /**
    //  * @readOnly
    //  * @private
    //  */
    // this.hasSeriesStacked;
    }
    /**
   * Whether the axisProxy is hosted by dataZoomModel.
   */ AxisProxy.prototype.hostedBy = function(dataZoomModel) {
        return this._dataZoomModel === dataZoomModel;
    };
    /**
   * @return Value can only be NaN or finite value.
   */ AxisProxy.prototype.getDataValueWindow = function() {
        return this._valueWindow.slice();
    };
    /**
   * @return {Array.<number>}
   */ AxisProxy.prototype.getDataPercentWindow = function() {
        return this._percentWindow.slice();
    };
    AxisProxy.prototype.getTargetSeriesModels = function() {
        var seriesModels = [];
        this.ecModel.eachSeries(function(seriesModel) {
            if ((0, $ce503c6b6cc63ecd$export$2d449d4adc0d2cfc)(seriesModel)) {
                var axisMainType = (0, $ce503c6b6cc63ecd$export$90855f7219399082)(this._dimName);
                var axisModel = seriesModel.getReferringComponents(axisMainType, (0, $8917c02fd8256c67$export$f076738ec84e693c)).models[0];
                if (axisModel && this._axisIndex === axisModel.componentIndex) seriesModels.push(seriesModel);
            }
        }, this);
        return seriesModels;
    };
    AxisProxy.prototype.getAxisModel = function() {
        return this.ecModel.getComponent(this._dimName + "Axis", this._axisIndex);
    };
    AxisProxy.prototype.getMinMaxSpan = function() {
        return $e44eb14c4271d0f9$export$9cd59f9826255e47(this._minMaxSpan);
    };
    /**
   * Only calculate by given range and this._dataExtent, do not change anything.
   */ AxisProxy.prototype.calculateDataWindow = function(opt) {
        var dataExtent = this._dataExtent;
        var axisModel = this.getAxisModel();
        var scale = axisModel.axis.scale;
        var rangePropMode = this._dataZoomModel.getRangePropMode();
        var percentExtent = [
            0,
            100
        ];
        var percentWindow = [];
        var valueWindow = [];
        var hasPropModeValue;
        $30de77a582223c95$var$each([
            "start",
            "end"
        ], function(prop, idx) {
            var boundPercent = opt[prop];
            var boundValue = opt[prop + "Value"];
            // Notice: dataZoom is based either on `percentProp` ('start', 'end') or
            // on `valueProp` ('startValue', 'endValue'). (They are based on the data extent
            // but not min/max of axis, which will be calculated by data window then).
            // The former one is suitable for cases that a dataZoom component controls multiple
            // axes with different unit or extent, and the latter one is suitable for accurate
            // zoom by pixel (e.g., in dataZoomSelect).
            // we use `getRangePropMode()` to mark which prop is used. `rangePropMode` is updated
            // only when setOption or dispatchAction, otherwise it remains its original value.
            // (Why not only record `percentProp` and always map to `valueProp`? Because
            // the map `valueProp` -> `percentProp` -> `valueProp` probably not the original
            // `valueProp`. consider two axes constrolled by one dataZoom. They have different
            // data extent. All of values that are overflow the `dataExtent` will be calculated
            // to percent '100%').
            if (rangePropMode[idx] === "percent") {
                boundPercent == null && (boundPercent = percentExtent[idx]);
                // Use scale.parse to math round for category or time axis.
                boundValue = scale.parse($13e6a1a716300dd4$export$d3f68fbaa670562(boundPercent, percentExtent, dataExtent));
            } else {
                hasPropModeValue = true;
                boundValue = boundValue == null ? dataExtent[idx] : scale.parse(boundValue);
                // Calculating `percent` from `value` may be not accurate, because
                // This calculation can not be inversed, because all of values that
                // are overflow the `dataExtent` will be calculated to percent '100%'
                boundPercent = $13e6a1a716300dd4$export$d3f68fbaa670562(boundValue, dataExtent, percentExtent);
            }
            // valueWindow[idx] = round(boundValue);
            // percentWindow[idx] = round(boundPercent);
            // fallback to extent start/end when parsed value or percent is invalid
            valueWindow[idx] = boundValue == null || isNaN(boundValue) ? dataExtent[idx] : boundValue;
            percentWindow[idx] = boundPercent == null || isNaN(boundPercent) ? percentExtent[idx] : boundPercent;
        });
        $30de77a582223c95$var$asc(valueWindow);
        $30de77a582223c95$var$asc(percentWindow);
        // The windows from user calling of `dispatchAction` might be out of the extent,
        // or do not obey the `min/maxSpan`, `min/maxValueSpan`. But we don't restrict window
        // by `zoomLock` here, because we see `zoomLock` just as a interaction constraint,
        // where API is able to initialize/modify the window size even though `zoomLock`
        // specified.
        var spans = this._minMaxSpan;
        hasPropModeValue ? restrictSet(valueWindow, percentWindow, dataExtent, percentExtent, false) : restrictSet(percentWindow, valueWindow, percentExtent, dataExtent, true);
        function restrictSet(fromWindow, toWindow, fromExtent, toExtent, toValue) {
            var suffix = toValue ? "Span" : "ValueSpan";
            (0, $bd452127b86a5d76$export$2e2bcd8739ae039)(0, fromWindow, fromExtent, "all", spans["min" + suffix], spans["max" + suffix]);
            for(var i = 0; i < 2; i++){
                toWindow[i] = $13e6a1a716300dd4$export$d3f68fbaa670562(fromWindow[i], fromExtent, toExtent, true);
                toValue && (toWindow[i] = scale.parse(toWindow[i]));
            }
        }
        return {
            valueWindow: valueWindow,
            percentWindow: percentWindow
        };
    };
    /**
   * Notice: reset should not be called before series.restoreData() is called,
   * so it is recommended to be called in "process stage" but not "model init
   * stage".
   */ AxisProxy.prototype.reset = function(dataZoomModel) {
        if (dataZoomModel !== this._dataZoomModel) return;
        var targetSeries = this.getTargetSeriesModels();
        // Culculate data window and data extent, and record them.
        this._dataExtent = $30de77a582223c95$var$calculateDataExtent(this, this._dimName, targetSeries);
        // `calculateDataWindow` uses min/maxSpan.
        this._updateMinMaxSpan();
        var dataWindow = this.calculateDataWindow(dataZoomModel.settledOption);
        this._valueWindow = dataWindow.valueWindow;
        this._percentWindow = dataWindow.percentWindow;
        // Update axis setting then.
        this._setAxisModel();
    };
    AxisProxy.prototype.filterData = function(dataZoomModel, api) {
        if (dataZoomModel !== this._dataZoomModel) return;
        var axisDim = this._dimName;
        var seriesModels = this.getTargetSeriesModels();
        var filterMode = dataZoomModel.get("filterMode");
        var valueWindow = this._valueWindow;
        if (filterMode === "none") return;
        // FIXME
        // Toolbox may has dataZoom injected. And if there are stacked bar chart
        // with NaN data, NaN will be filtered and stack will be wrong.
        // So we need to force the mode to be set empty.
        // In fect, it is not a big deal that do not support filterMode-'filter'
        // when using toolbox#dataZoom, utill tooltip#dataZoom support "single axis
        // selection" some day, which might need "adapt to data extent on the
        // otherAxis", which is disabled by filterMode-'empty'.
        // But currently, stack has been fixed to based on value but not index,
        // so this is not an issue any more.
        // let otherAxisModel = this.getOtherAxisModel();
        // if (dataZoomModel.get('$fromToolbox')
        //     && otherAxisModel
        //     && otherAxisModel.hasSeriesStacked
        // ) {
        //     filterMode = 'empty';
        // }
        // TODO
        // filterMode 'weakFilter' and 'empty' is not optimized for huge data yet.
        $30de77a582223c95$var$each(seriesModels, function(seriesModel) {
            var seriesData = seriesModel.getData();
            var dataDims = seriesData.mapDimensionsAll(axisDim);
            if (!dataDims.length) return;
            if (filterMode === "weakFilter") {
                var store_1 = seriesData.getStore();
                var dataDimIndices_1 = $e44eb14c4271d0f9$export$871de8747c9eaa88(dataDims, function(dim) {
                    return seriesData.getDimensionIndex(dim);
                }, seriesData);
                seriesData.filterSelf(function(dataIndex) {
                    var leftOut;
                    var rightOut;
                    var hasValue;
                    for(var i = 0; i < dataDims.length; i++){
                        var value = store_1.get(dataDimIndices_1[i], dataIndex);
                        var thisHasValue = !isNaN(value);
                        var thisLeftOut = value < valueWindow[0];
                        var thisRightOut = value > valueWindow[1];
                        if (thisHasValue && !thisLeftOut && !thisRightOut) return true;
                        thisHasValue && (hasValue = true);
                        thisLeftOut && (leftOut = true);
                        thisRightOut && (rightOut = true);
                    }
                    // If both left out and right out, do not filter.
                    return hasValue && leftOut && rightOut;
                });
            } else $30de77a582223c95$var$each(dataDims, function(dim) {
                if (filterMode === "empty") seriesModel.setData(seriesData = seriesData.map(dim, function(value) {
                    return !isInWindow(value) ? NaN : value;
                }));
                else {
                    var range = {};
                    range[dim] = valueWindow;
                    // console.time('select');
                    seriesData.selectRange(range);
                // console.timeEnd('select');
                }
            });
            $30de77a582223c95$var$each(dataDims, function(dim) {
                seriesData.setApproximateExtent(valueWindow, dim);
            });
        });
        function isInWindow(value) {
            return value >= valueWindow[0] && value <= valueWindow[1];
        }
    };
    AxisProxy.prototype._updateMinMaxSpan = function() {
        var minMaxSpan = this._minMaxSpan = {};
        var dataZoomModel = this._dataZoomModel;
        var dataExtent = this._dataExtent;
        $30de77a582223c95$var$each([
            "min",
            "max"
        ], function(minMax) {
            var percentSpan = dataZoomModel.get(minMax + "Span");
            var valueSpan = dataZoomModel.get(minMax + "ValueSpan");
            valueSpan != null && (valueSpan = this.getAxisModel().axis.scale.parse(valueSpan));
            // minValueSpan and maxValueSpan has higher priority than minSpan and maxSpan
            if (valueSpan != null) percentSpan = $13e6a1a716300dd4$export$d3f68fbaa670562(dataExtent[0] + valueSpan, dataExtent, [
                0,
                100
            ], true);
            else if (percentSpan != null) valueSpan = $13e6a1a716300dd4$export$d3f68fbaa670562(percentSpan, [
                0,
                100
            ], dataExtent, true) - dataExtent[0];
            minMaxSpan[minMax + "Span"] = percentSpan;
            minMaxSpan[minMax + "ValueSpan"] = valueSpan;
        }, this);
    };
    AxisProxy.prototype._setAxisModel = function() {
        var axisModel = this.getAxisModel();
        var percentWindow = this._percentWindow;
        var valueWindow = this._valueWindow;
        if (!percentWindow) return;
        // [0, 500]: arbitrary value, guess axis extent.
        var precision = $13e6a1a716300dd4$export$666260d9a2dda8a7(valueWindow, [
            0,
            500
        ]);
        precision = Math.min(precision, 20);
        // For value axis, if min/max/scale are not set, we just use the extent obtained
        // by series data, which may be a little different from the extent calculated by
        // `axisHelper.getScaleExtent`. But the different just affects the experience a
        // little when zooming. So it will not be fixed until some users require it strongly.
        var rawExtentInfo = axisModel.axis.scale.rawExtentInfo;
        if (percentWindow[0] !== 0) rawExtentInfo.setDeterminedMinMax("min", +valueWindow[0].toFixed(precision));
        if (percentWindow[1] !== 100) rawExtentInfo.setDeterminedMinMax("max", +valueWindow[1].toFixed(precision));
        rawExtentInfo.freeze();
    };
    return AxisProxy;
}();
function $30de77a582223c95$var$calculateDataExtent(axisProxy, axisDim, seriesModels) {
    var dataExtent = [
        Infinity,
        -Infinity
    ];
    $30de77a582223c95$var$each(seriesModels, function(seriesModel) {
        (0, $de26deaeb9c20c8b$export$635fe7f20d0f4c70)(dataExtent, seriesModel.getData(), axisDim);
    });
    // It is important to get "consistent" extent when more then one axes is
    // controlled by a `dataZoom`, otherwise those axes will not be synchronized
    // when zooming. But it is difficult to know what is "consistent", considering
    // axes have different type or even different meanings (For example, two
    // time axes are used to compare data of the same date in different years).
    // So basically dataZoom just obtains extent by series.data (in category axis
    // extent can be obtained from axis.data).
    // Nevertheless, user can set min/max/scale on axes to make extent of axes
    // consistent.
    var axisModel = axisProxy.getAxisModel();
    var rawExtentResult = (0, $e43c851a9774a8ec$export$5c3dbcbeb9ce7f5a)(axisModel.axis.scale, axisModel, dataExtent).calculate();
    return [
        rawExtentResult.min,
        rawExtentResult.max
    ];
}
var $30de77a582223c95$export$2e2bcd8739ae039 = $30de77a582223c95$var$AxisProxy;


var $5e3614d4dc9313d7$var$dataZoomProcessor = {
    // `dataZoomProcessor` will only be performed in needed series. Consider if
    // there is a line series and a pie series, it is better not to update the
    // line series if only pie series is needed to be updated.
    getTargetSeries: function(ecModel) {
        function eachAxisModel(cb) {
            ecModel.eachComponent("dataZoom", function(dataZoomModel) {
                dataZoomModel.eachTargetAxis(function(axisDim, axisIndex) {
                    var axisModel = ecModel.getComponent((0, $ce503c6b6cc63ecd$export$90855f7219399082)(axisDim), axisIndex);
                    cb(axisDim, axisIndex, axisModel, dataZoomModel);
                });
            });
        }
        // FIXME: it brings side-effect to `getTargetSeries`.
        // Prepare axis proxies.
        eachAxisModel(function(axisDim, axisIndex, axisModel, dataZoomModel) {
            // dispose all last axis proxy, in case that some axis are deleted.
            axisModel.__dzAxisProxy = null;
        });
        var proxyList = [];
        eachAxisModel(function(axisDim, axisIndex, axisModel, dataZoomModel) {
            // Different dataZooms may constrol the same axis. In that case,
            // an axisProxy serves both of them.
            if (!axisModel.__dzAxisProxy) {
                // Use the first dataZoomModel as the main model of axisProxy.
                axisModel.__dzAxisProxy = new (0, $30de77a582223c95$export$2e2bcd8739ae039)(axisDim, axisIndex, dataZoomModel, ecModel);
                proxyList.push(axisModel.__dzAxisProxy);
            }
        });
        var seriesModelMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(proxyList, function(axisProxy) {
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(axisProxy.getTargetSeriesModels(), function(seriesModel) {
                seriesModelMap.set(seriesModel.uid, seriesModel);
            });
        });
        return seriesModelMap;
    },
    // Consider appendData, where filter should be performed. Because data process is
    // in block mode currently, it is not need to worry about that the overallProgress
    // execute every frame.
    overallReset: function(ecModel, api) {
        ecModel.eachComponent("dataZoom", function(dataZoomModel) {
            // We calculate window and reset axis here but not in model
            // init stage and not after action dispatch handler, because
            // reset should be called after seriesData.restoreData.
            dataZoomModel.eachTargetAxis(function(axisDim, axisIndex) {
                dataZoomModel.getAxisProxy(axisDim, axisIndex).reset(dataZoomModel);
            });
            // Caution: data zoom filtering is order sensitive when using
            // percent range and no min/max/scale set on axis.
            // For example, we have dataZoom definition:
            // [
            //      {xAxisIndex: 0, start: 30, end: 70},
            //      {yAxisIndex: 0, start: 20, end: 80}
            // ]
            // In this case, [20, 80] of y-dataZoom should be based on data
            // that have filtered by x-dataZoom using range of [30, 70],
            // but should not be based on full raw data. Thus sliding
            // x-dataZoom will change both ranges of xAxis and yAxis,
            // while sliding y-dataZoom will only change the range of yAxis.
            // So we should filter x-axis after reset x-axis immediately,
            // and then reset y-axis and filter y-axis.
            dataZoomModel.eachTargetAxis(function(axisDim, axisIndex) {
                dataZoomModel.getAxisProxy(axisDim, axisIndex).filterData(dataZoomModel, api);
            });
        });
        ecModel.eachComponent("dataZoom", function(dataZoomModel) {
            // Fullfill all of the range props so that user
            // is able to get them from chart.getOption().
            var axisProxy = dataZoomModel.findRepresentativeAxisProxy();
            if (axisProxy) {
                var percentRange = axisProxy.getDataPercentWindow();
                var valueRange = axisProxy.getDataValueWindow();
                dataZoomModel.setCalculatedRange({
                    start: percentRange[0],
                    end: percentRange[1],
                    startValue: valueRange[0],
                    endValue: valueRange[1]
                });
            }
        });
    }
};
var $5e3614d4dc9313d7$export$2e2bcd8739ae039 = $5e3614d4dc9313d7$var$dataZoomProcessor;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

function $ba48f4229ed77b70$export$2e2bcd8739ae039(registers) {
    registers.registerAction("dataZoom", function(payload, ecModel) {
        var effectedModels = (0, $ce503c6b6cc63ecd$export$9e00b6c2b8b2e9a7)(ecModel, payload);
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(effectedModels, function(dataZoomModel) {
            dataZoomModel.setRawRange({
                start: payload.start,
                end: payload.end,
                startValue: payload.startValue,
                endValue: payload.endValue
            });
        });
    });
}


var $d141bd2f759ebb98$var$installed = false;
function $d141bd2f759ebb98$export$2e2bcd8739ae039(registers) {
    if ($d141bd2f759ebb98$var$installed) return;
    $d141bd2f759ebb98$var$installed = true;
    registers.registerProcessor(registers.PRIORITY.PROCESSOR.FILTER, (0, $5e3614d4dc9313d7$export$2e2bcd8739ae039));
    (0, $ba48f4229ed77b70$export$2e2bcd8739ae039)(registers);
    registers.registerSubTypeDefaulter("dataZoom", function() {
        // Default 'slider' when no type specified.
        return "slider";
    });
}


function $6274e43f9cf4e75a$export$4b3e715f166fdd78(registers) {
    registers.registerComponentModel((0, $557ec5ce8e11891e$export$2e2bcd8739ae039));
    registers.registerComponentView((0, $e589c8a537f53559$export$2e2bcd8739ae039));
    (0, $d141bd2f759ebb98$export$2e2bcd8739ae039)(registers);
}


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ var $e0f30959df02d068$export$1426bfb1b0bcf539 = /** @class */ function() {
    function ToolboxFeature() {}
    return ToolboxFeature;
}();
var $e0f30959df02d068$var$features = {};
function $e0f30959df02d068$export$c6213a6f247cf906(name, ctor) {
    $e0f30959df02d068$var$features[name] = ctor;
}
function $e0f30959df02d068$export$bba2e7bbd72e62e1(name) {
    return $e0f30959df02d068$var$features[name];
}



var $5eb8c977d6813756$var$ToolboxModel = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(ToolboxModel, _super);
    function ToolboxModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = ToolboxModel.type;
        return _this;
    }
    ToolboxModel.prototype.optionUpdated = function() {
        _super.prototype.optionUpdated.apply(this, arguments);
        var ecModel = this.ecModel;
        $e44eb14c4271d0f9$export$79b2f7037acddd43(this.option.feature, function(featureOpt, featureName) {
            var Feature = $e0f30959df02d068$export$bba2e7bbd72e62e1(featureName);
            if (Feature) {
                if (Feature.getDefaultOption) Feature.defaultOption = Feature.getDefaultOption(ecModel);
                $e44eb14c4271d0f9$export$4950aa0f605343fb(featureOpt, Feature.defaultOption);
            }
        });
    };
    ToolboxModel.type = "toolbox";
    ToolboxModel.layoutMode = {
        type: "box",
        ignoreSize: true
    };
    ToolboxModel.defaultOption = {
        show: true,
        z: 6,
        // zlevel: 0,
        orient: "horizontal",
        left: "right",
        top: "top",
        // right
        // bottom
        backgroundColor: "transparent",
        borderColor: "#ccc",
        borderRadius: 0,
        borderWidth: 0,
        padding: 5,
        itemSize: 15,
        itemGap: 8,
        showTitle: true,
        iconStyle: {
            borderColor: "#666",
            color: "none"
        },
        emphasis: {
            iconStyle: {
                borderColor: "#3E98C5"
            }
        },
        // textStyle: {},
        // feature
        tooltip: {
            show: false,
            position: "bottom"
        }
    };
    return ToolboxModel;
}((0, $a756077528c07361$export$2e2bcd8739ae039));
var $5eb8c977d6813756$export$2e2bcd8739ae039 = $5eb8c977d6813756$var$ToolboxModel;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 






/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ // @ts-nocheck



function $d8970f4f91a9ffbb$export$b3219800bda33a1f(group, componentModel, api) {
    var boxLayoutParams = componentModel.getBoxLayoutParams();
    var padding = componentModel.get("padding");
    var viewportSize = {
        width: api.getWidth(),
        height: api.getHeight()
    };
    var rect = (0, $074356ab3d6b1cdb$export$4517a5ca639a7293)(boxLayoutParams, viewportSize, padding);
    (0, $074356ab3d6b1cdb$export$827f4ee28efc37)(componentModel.get("orient"), group, componentModel.get("itemGap"), rect.width, rect.height);
    (0, $074356ab3d6b1cdb$export$74054bd96b5eeef1)(group, boxLayoutParams, viewportSize, padding);
}
function $d8970f4f91a9ffbb$export$fae23936eedfad4f(rect, componentModel) {
    var padding = $1594f6dc0ce39685$export$f3a38102c49f4268(componentModel.get("padding"));
    var style = componentModel.getItemStyle([
        "color",
        "opacity"
    ]);
    style.fill = componentModel.get("backgroundColor");
    rect = new $538026eba361a92a$export$2e2bcd8739ae039({
        shape: {
            x: rect.x - padding[3],
            y: rect.y - padding[0],
            width: rect.width + padding[1] + padding[3],
            height: rect.height + padding[0] + padding[2],
            r: componentModel.get("borderRadius")
        },
        style: style,
        silent: true,
        z2: -1
    });
    // FIXME
    // `subPixelOptimizeRect` may bring some gap between edge of viewpart
    // and background rect when setting like `left: 0`, `top: 0`.
    // graphic.subPixelOptimizeRect(rect);
    return rect;
}







var $5882bc4a297d04fd$var$ToolboxView = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(ToolboxView, _super);
    function ToolboxView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToolboxView.prototype.render = function(toolboxModel, ecModel, api, payload) {
        var group = this.group;
        group.removeAll();
        if (!toolboxModel.get("show")) return;
        var itemSize = +toolboxModel.get("itemSize");
        var isVertical = toolboxModel.get("orient") === "vertical";
        var featureOpts = toolboxModel.get("feature") || {};
        var features = this._features || (this._features = {});
        var featureNames = [];
        $e44eb14c4271d0f9$export$79b2f7037acddd43(featureOpts, function(opt, name) {
            featureNames.push(name);
        });
        new (0, $72bedc7af0abc791$export$2e2bcd8739ae039)(this._featureNames || [], featureNames).add(processFeature).update(processFeature).remove($e44eb14c4271d0f9$export$c3095a23b368d1f2(processFeature, null)).execute();
        // Keep for diff.
        this._featureNames = featureNames;
        function processFeature(newIndex, oldIndex) {
            var featureName = featureNames[newIndex];
            var oldName = featureNames[oldIndex];
            var featureOpt = featureOpts[featureName];
            var featureModel = new (0, $d92ec0eb853c4005$export$2e2bcd8739ae039)(featureOpt, toolboxModel, toolboxModel.ecModel);
            var feature;
            // FIX#11236, merge feature title from MagicType newOption. TODO: consider seriesIndex ?
            if (payload && payload.newTitle != null && payload.featureName === featureName) featureOpt.title = payload.newTitle;
            if (featureName && !oldName) {
                // Create
                if ($5882bc4a297d04fd$var$isUserFeatureName(featureName)) feature = {
                    onclick: featureModel.option.onclick,
                    featureName: featureName
                };
                else {
                    var Feature = (0, $e0f30959df02d068$export$bba2e7bbd72e62e1)(featureName);
                    if (!Feature) return;
                    feature = new Feature();
                }
                features[featureName] = feature;
            } else {
                feature = features[oldName];
                // If feature does not exist.
                if (!feature) return;
            }
            feature.uid = (0, $5e939fc0112f61e7$export$6d2b3473b0986646)("toolbox-feature");
            feature.model = featureModel;
            feature.ecModel = ecModel;
            feature.api = api;
            var isToolboxFeature = feature instanceof (0, $e0f30959df02d068$export$1426bfb1b0bcf539);
            if (!featureName && oldName) {
                isToolboxFeature && feature.dispose && feature.dispose(ecModel, api);
                return;
            }
            if (!featureModel.get("show") || isToolboxFeature && feature.unusable) {
                isToolboxFeature && feature.remove && feature.remove(ecModel, api);
                return;
            }
            createIconPaths(featureModel, feature, featureName);
            featureModel.setIconStatus = function(iconName, status) {
                var option = this.option;
                var iconPaths = this.iconPaths;
                option.iconStatus = option.iconStatus || {};
                option.iconStatus[iconName] = status;
                if (iconPaths[iconName]) (status === "emphasis" ? (0, $e3c0a36328c28ac4$export$b2d02638cc34c042) : (0, $e3c0a36328c28ac4$export$11be6f716239ac55))(iconPaths[iconName]);
            };
            if (feature instanceof (0, $e0f30959df02d068$export$1426bfb1b0bcf539)) {
                if (feature.render) feature.render(featureModel, ecModel, api, payload);
            }
        }
        function createIconPaths(featureModel, feature, featureName) {
            var iconStyleModel = featureModel.getModel("iconStyle");
            var iconStyleEmphasisModel = featureModel.getModel([
                "emphasis",
                "iconStyle"
            ]);
            // If one feature has multiple icons, they are organized as
            // {
            //     icon: {
            //         foo: '',
            //         bar: ''
            //     },
            //     title: {
            //         foo: '',
            //         bar: ''
            //     }
            // }
            var icons = feature instanceof (0, $e0f30959df02d068$export$1426bfb1b0bcf539) && feature.getIcons ? feature.getIcons() : featureModel.get("icon");
            var titles = featureModel.get("title") || {};
            var iconsMap;
            var titlesMap;
            if ($e44eb14c4271d0f9$export$844ec244b1367d54(icons)) {
                iconsMap = {};
                iconsMap[featureName] = icons;
            } else iconsMap = icons;
            if ($e44eb14c4271d0f9$export$844ec244b1367d54(titles)) {
                titlesMap = {};
                titlesMap[featureName] = titles;
            } else titlesMap = titles;
            var iconPaths = featureModel.iconPaths = {};
            $e44eb14c4271d0f9$export$79b2f7037acddd43(iconsMap, function(iconStr, iconName) {
                var path = $6aec2e68b45f8796$export$274edc73af1ae9c8(iconStr, {}, {
                    x: -itemSize / 2,
                    y: -itemSize / 2,
                    width: itemSize,
                    height: itemSize
                }); // TODO handling image
                path.setStyle(iconStyleModel.getItemStyle());
                var pathEmphasisState = path.ensureState("emphasis");
                pathEmphasisState.style = iconStyleEmphasisModel.getItemStyle();
                // Text position calculation
                // TODO: extract `textStyle` from `iconStyle` and use `createTextStyle`
                var textContent = new (0, $6d12d9a137e168c2$export$2e2bcd8739ae039)({
                    style: {
                        text: titlesMap[iconName],
                        align: iconStyleEmphasisModel.get("textAlign"),
                        borderRadius: iconStyleEmphasisModel.get("textBorderRadius"),
                        padding: iconStyleEmphasisModel.get("textPadding"),
                        fill: null,
                        font: (0, $75926670b032879d$export$155316a870a9d61e)({
                            fontStyle: iconStyleEmphasisModel.get("textFontStyle"),
                            fontFamily: iconStyleEmphasisModel.get("textFontFamily"),
                            fontSize: iconStyleEmphasisModel.get("textFontSize"),
                            fontWeight: iconStyleEmphasisModel.get("textFontWeight")
                        }, ecModel)
                    },
                    ignore: true
                });
                path.setTextContent(textContent);
                $6aec2e68b45f8796$export$fc6410d97fab306c({
                    el: path,
                    componentModel: toolboxModel,
                    itemName: iconName,
                    formatterParamsExtra: {
                        title: titlesMap[iconName]
                    }
                });
                path.__title = titlesMap[iconName];
                path.on("mouseover", function() {
                    // Should not reuse above hoverStyle, which might be modified.
                    var hoverStyle = iconStyleEmphasisModel.getItemStyle();
                    var defaultTextPosition = isVertical ? toolboxModel.get("right") == null && toolboxModel.get("left") !== "right" ? "right" : "left" : toolboxModel.get("bottom") == null && toolboxModel.get("top") !== "bottom" ? "bottom" : "top";
                    textContent.setStyle({
                        fill: iconStyleEmphasisModel.get("textFill") || hoverStyle.fill || hoverStyle.stroke || "#000",
                        backgroundColor: iconStyleEmphasisModel.get("textBackgroundColor")
                    });
                    path.setTextConfig({
                        position: iconStyleEmphasisModel.get("textPosition") || defaultTextPosition
                    });
                    textContent.ignore = !toolboxModel.get("showTitle");
                    // Use enterEmphasis and leaveEmphasis provide by ec.
                    // There are flags managed by the echarts.
                    api.enterEmphasis(this);
                }).on("mouseout", function() {
                    if (featureModel.get([
                        "iconStatus",
                        iconName
                    ]) !== "emphasis") api.leaveEmphasis(this);
                    textContent.hide();
                });
                (featureModel.get([
                    "iconStatus",
                    iconName
                ]) === "emphasis" ? (0, $e3c0a36328c28ac4$export$b2d02638cc34c042) : (0, $e3c0a36328c28ac4$export$11be6f716239ac55))(path);
                group.add(path);
                path.on("click", $e44eb14c4271d0f9$export$2385a24977818dd0(feature.onclick, feature, ecModel, api, iconName));
                iconPaths[iconName] = path;
            });
        }
        $d8970f4f91a9ffbb$export$b3219800bda33a1f(group, toolboxModel, api);
        // Render background after group is layout
        // FIXME
        group.add($d8970f4f91a9ffbb$export$fae23936eedfad4f(group.getBoundingRect(), toolboxModel));
        // Adjust icon title positions to avoid them out of screen
        isVertical || group.eachChild(function(icon) {
            var titleText = icon.__title;
            // const hoverStyle = icon.hoverStyle;
            // TODO simplify code?
            var emphasisState = icon.ensureState("emphasis");
            var emphasisTextConfig = emphasisState.textConfig || (emphasisState.textConfig = {});
            var textContent = icon.getTextContent();
            var emphasisTextState = textContent && textContent.ensureState("emphasis");
            // May be background element
            if (emphasisTextState && !$e44eb14c4271d0f9$export$f6e2535fb5126e54(emphasisTextState) && titleText) {
                var emphasisTextStyle = emphasisTextState.style || (emphasisTextState.style = {});
                var rect = $1a2563e7d7856dd8$export$c381147bfed79d9f(titleText, (0, $6d12d9a137e168c2$export$2e2bcd8739ae039).makeFont(emphasisTextStyle));
                var offsetX = icon.x + group.x;
                var offsetY = icon.y + group.y + itemSize;
                var needPutOnTop = false;
                if (offsetY + rect.height > api.getHeight()) {
                    emphasisTextConfig.position = "top";
                    needPutOnTop = true;
                }
                var topOffset = needPutOnTop ? -5 - rect.height : itemSize + 10;
                if (offsetX + rect.width / 2 > api.getWidth()) {
                    emphasisTextConfig.position = [
                        "100%",
                        topOffset
                    ];
                    emphasisTextStyle.align = "right";
                } else if (offsetX - rect.width / 2 < 0) {
                    emphasisTextConfig.position = [
                        0,
                        topOffset
                    ];
                    emphasisTextStyle.align = "left";
                }
            }
        });
    };
    ToolboxView.prototype.updateView = function(toolboxModel, ecModel, api, payload) {
        $e44eb14c4271d0f9$export$79b2f7037acddd43(this._features, function(feature) {
            feature instanceof (0, $e0f30959df02d068$export$1426bfb1b0bcf539) && feature.updateView && feature.updateView(feature.model, ecModel, api, payload);
        });
    };
    // updateLayout(toolboxModel, ecModel, api, payload) {
    //     zrUtil.each(this._features, function (feature) {
    //         feature.updateLayout && feature.updateLayout(feature.model, ecModel, api, payload);
    //     });
    // },
    ToolboxView.prototype.remove = function(ecModel, api) {
        $e44eb14c4271d0f9$export$79b2f7037acddd43(this._features, function(feature) {
            feature instanceof (0, $e0f30959df02d068$export$1426bfb1b0bcf539) && feature.remove && feature.remove(ecModel, api);
        });
        this.group.removeAll();
    };
    ToolboxView.prototype.dispose = function(ecModel, api) {
        $e44eb14c4271d0f9$export$79b2f7037acddd43(this._features, function(feature) {
            feature instanceof (0, $e0f30959df02d068$export$1426bfb1b0bcf539) && feature.dispose && feature.dispose(ecModel, api);
        });
    };
    ToolboxView.type = "toolbox";
    return ToolboxView;
}((0, $ced42ef9869a1e4c$export$2e2bcd8739ae039));
function $5882bc4a297d04fd$var$isUserFeatureName(featureName) {
    return featureName.indexOf("my") === 0;
}
var $5882bc4a297d04fd$export$2e2bcd8739ae039 = $5882bc4a297d04fd$var$ToolboxView;



/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 



/* global window, document */ var $111a1f91f3c8c961$var$SaveAsImage = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(SaveAsImage, _super);
    function SaveAsImage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SaveAsImage.prototype.onclick = function(ecModel, api) {
        var model = this.model;
        var title = model.get("name") || ecModel.get("title.0.text") || "echarts";
        var isSvg = api.getZr().painter.getType() === "svg";
        var type = isSvg ? "svg" : model.get("type", true) || "png";
        var url = api.getConnectedDataURL({
            type: type,
            backgroundColor: model.get("backgroundColor", true) || ecModel.get("backgroundColor") || "#fff",
            connectedBackgroundColor: model.get("connectedBackgroundColor"),
            excludeComponents: model.get("excludeComponents"),
            pixelRatio: model.get("pixelRatio")
        });
        var browser = (0, $de9e931273a116c1$export$2e2bcd8739ae039).browser;
        // Chrome, Firefox, New Edge
        if ((0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(MouseEvent) && (browser.newEdge || !browser.ie && !browser.edge)) {
            var $a = document.createElement("a");
            $a.download = title + "." + type;
            $a.target = "_blank";
            $a.href = url;
            var evt = new MouseEvent("click", {
                // some micro front-end framework， window maybe is a Proxy
                view: document.defaultView,
                bubbles: true,
                cancelable: false
            });
            $a.dispatchEvent(evt);
        } else // @ts-ignore
        if (window.navigator.msSaveOrOpenBlob || isSvg) {
            var parts = url.split(",");
            // data:[<mime type>][;charset=<charset>][;base64],<encoded data>
            var base64Encoded = parts[0].indexOf("base64") > -1;
            var bstr = isSvg ? decodeURIComponent(parts[1]) : parts[1];
            // only `atob` when the data uri is encoded with base64
            // otherwise, like `svg` data uri exported by zrender,
            // there will be an error, for it's not encoded with base64.
            // (just a url-encoded string through `encodeURIComponent`)
            base64Encoded && (bstr = window.atob(bstr));
            var filename = title + "." + type;
            // @ts-ignore
            if (window.navigator.msSaveOrOpenBlob) {
                var n = bstr.length;
                var u8arr = new Uint8Array(n);
                while(n--)u8arr[n] = bstr.charCodeAt(n);
                var blob = new Blob([
                    u8arr
                ]); // @ts-ignore
                window.navigator.msSaveOrOpenBlob(blob, filename);
            } else {
                var frame = document.createElement("iframe");
                document.body.appendChild(frame);
                var cw = frame.contentWindow;
                var doc = cw.document;
                doc.open("image/svg+xml", "replace");
                doc.write(bstr);
                doc.close();
                cw.focus();
                doc.execCommand("SaveAs", true, filename);
                document.body.removeChild(frame);
            }
        } else {
            var lang = model.get("lang");
            var html = '<body style="margin:0;"><img src="' + url + '" style="max-width:100%;" title="' + (lang && lang[0] || "") + '" />' + "</body>";
            var tab = window.open();
            tab.document.write(html);
            tab.document.title = title;
        }
    };
    SaveAsImage.getDefaultOption = function(ecModel) {
        var defaultOption = {
            show: true,
            icon: "M4.7,22.9L29.3,45.5L54.7,23.4M4.6,43.6L4.6,58L53.8,58L53.8,43.6M29.2,45.1L29.2,0",
            title: ecModel.getLocaleModel().get([
                "toolbox",
                "saveAsImage",
                "title"
            ]),
            type: "png",
            // Default use option.backgroundColor
            // backgroundColor: '#fff',
            connectedBackgroundColor: "#fff",
            name: "",
            excludeComponents: [
                "toolbox"
            ],
            // use current pixel ratio of device by default
            // pixelRatio: 1,
            lang: ecModel.getLocaleModel().get([
                "toolbox",
                "saveAsImage",
                "lang"
            ])
        };
        return defaultOption;
    };
    return SaveAsImage;
}((0, $e0f30959df02d068$export$1426bfb1b0bcf539));
var $111a1f91f3c8c961$export$2e2bcd8739ae039 = $111a1f91f3c8c961$var$SaveAsImage;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 




var $814367005540c44b$var$INNER_STACK_KEYWORD = "__ec_magicType_stack__";
var $814367005540c44b$var$ICON_TYPES = [
    "line",
    "bar",
    "stack"
];
// stack and tiled appears in pair for the title
var $814367005540c44b$var$TITLE_TYPES = [
    "line",
    "bar",
    "stack",
    "tiled"
];
var $814367005540c44b$var$radioTypes = [
    [
        "line",
        "bar"
    ],
    [
        "stack"
    ]
];
var $814367005540c44b$var$MagicType = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(MagicType, _super);
    function MagicType() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MagicType.prototype.getIcons = function() {
        var model = this.model;
        var availableIcons = model.get("icon");
        var icons = {};
        $e44eb14c4271d0f9$export$79b2f7037acddd43(model.get("type"), function(type) {
            if (availableIcons[type]) icons[type] = availableIcons[type];
        });
        return icons;
    };
    MagicType.getDefaultOption = function(ecModel) {
        var defaultOption = {
            show: true,
            type: [],
            // Icon group
            icon: {
                line: "M4.1,28.9h7.1l9.3-22l7.4,38l9.7-19.7l3,12.8h14.9M4.1,58h51.4",
                bar: "M6.7,22.9h10V48h-10V22.9zM24.9,13h10v35h-10V13zM43.2,2h10v46h-10V2zM3.1,58h53.7",
                // eslint-disable-next-line
                stack: "M8.2,38.4l-8.4,4.1l30.6,15.3L60,42.5l-8.1-4.1l-21.5,11L8.2,38.4z M51.9,30l-8.1,4.2l-13.4,6.9l-13.9-6.9L8.2,30l-8.4,4.2l8.4,4.2l22.2,11l21.5-11l8.1-4.2L51.9,30z M51.9,21.7l-8.1,4.2L35.7,30l-5.3,2.8L24.9,30l-8.4-4.1l-8.3-4.2l-8.4,4.2L8.2,30l8.3,4.2l13.9,6.9l13.4-6.9l8.1-4.2l8.1-4.1L51.9,21.7zM30.4,2.2L-0.2,17.5l8.4,4.1l8.3,4.2l8.4,4.2l5.5,2.7l5.3-2.7l8.1-4.2l8.1-4.2l8.1-4.1L30.4,2.2z" // jshint ignore:line
            },
            // `line`, `bar`, `stack`, `tiled`
            title: ecModel.getLocaleModel().get([
                "toolbox",
                "magicType",
                "title"
            ]),
            option: {},
            seriesIndex: {}
        };
        return defaultOption;
    };
    MagicType.prototype.onclick = function(ecModel, api, type) {
        var model = this.model;
        var seriesIndex = model.get([
            "seriesIndex",
            type
        ]);
        // Not supported magicType
        if (!$814367005540c44b$var$seriesOptGenreator[type]) return;
        var newOption = {
            series: []
        };
        var generateNewSeriesTypes = function(seriesModel) {
            var seriesType = seriesModel.subType;
            var seriesId = seriesModel.id;
            var newSeriesOpt = $814367005540c44b$var$seriesOptGenreator[type](seriesType, seriesId, seriesModel, model);
            if (newSeriesOpt) {
                // PENDING If merge original option?
                $e44eb14c4271d0f9$export$ebe90cb607ad99e(newSeriesOpt, seriesModel.option);
                newOption.series.push(newSeriesOpt);
            }
            // Modify boundaryGap
            var coordSys = seriesModel.coordinateSystem;
            if (coordSys && coordSys.type === "cartesian2d" && (type === "line" || type === "bar")) {
                var categoryAxis = coordSys.getAxesByScale("ordinal")[0];
                if (categoryAxis) {
                    var axisDim = categoryAxis.dim;
                    var axisType = axisDim + "Axis";
                    var axisModel = seriesModel.getReferringComponents(axisType, (0, $8917c02fd8256c67$export$f076738ec84e693c)).models[0];
                    var axisIndex = axisModel.componentIndex;
                    newOption[axisType] = newOption[axisType] || [];
                    for(var i = 0; i <= axisIndex; i++)newOption[axisType][axisIndex] = newOption[axisType][axisIndex] || {};
                    newOption[axisType][axisIndex].boundaryGap = type === "bar";
                }
            }
        };
        $e44eb14c4271d0f9$export$79b2f7037acddd43($814367005540c44b$var$radioTypes, function(radio) {
            if ($e44eb14c4271d0f9$export$305f7d4e9d4624f2(radio, type) >= 0) $e44eb14c4271d0f9$export$79b2f7037acddd43(radio, function(item) {
                model.setIconStatus(item, "normal");
            });
        });
        model.setIconStatus(type, "emphasis");
        ecModel.eachComponent({
            mainType: "series",
            query: seriesIndex == null ? null : {
                seriesIndex: seriesIndex
            }
        }, generateNewSeriesTypes);
        var newTitle;
        var currentType = type;
        // Change title of stack
        if (type === "stack") {
            // use titles in model instead of ecModel
            // as stack and tiled appears in pair, just flip them
            // no need of checking stack state
            newTitle = $e44eb14c4271d0f9$export$4950aa0f605343fb({
                stack: model.option.title.tiled,
                tiled: model.option.title.stack
            }, model.option.title);
            if (model.get([
                "iconStatus",
                type
            ]) !== "emphasis") currentType = "tiled";
        }
        api.dispatchAction({
            type: "changeMagicType",
            currentType: currentType,
            newOption: newOption,
            newTitle: newTitle,
            featureName: "magicType"
        });
    };
    return MagicType;
}((0, $e0f30959df02d068$export$1426bfb1b0bcf539));
var $814367005540c44b$var$seriesOptGenreator = {
    "line": function(seriesType, seriesId, seriesModel, model) {
        if (seriesType === "bar") return $e44eb14c4271d0f9$export$4950aa0f605343fb({
            id: seriesId,
            type: "line",
            // Preserve data related option
            data: seriesModel.get("data"),
            stack: seriesModel.get("stack"),
            markPoint: seriesModel.get("markPoint"),
            markLine: seriesModel.get("markLine")
        }, model.get([
            "option",
            "line"
        ]) || {}, true);
    },
    "bar": function(seriesType, seriesId, seriesModel, model) {
        if (seriesType === "line") return $e44eb14c4271d0f9$export$4950aa0f605343fb({
            id: seriesId,
            type: "bar",
            // Preserve data related option
            data: seriesModel.get("data"),
            stack: seriesModel.get("stack"),
            markPoint: seriesModel.get("markPoint"),
            markLine: seriesModel.get("markLine")
        }, model.get([
            "option",
            "bar"
        ]) || {}, true);
    },
    "stack": function(seriesType, seriesId, seriesModel, model) {
        var isStack = seriesModel.get("stack") === $814367005540c44b$var$INNER_STACK_KEYWORD;
        if (seriesType === "line" || seriesType === "bar") {
            model.setIconStatus("stack", isStack ? "normal" : "emphasis");
            return $e44eb14c4271d0f9$export$4950aa0f605343fb({
                id: seriesId,
                stack: isStack ? "" : $814367005540c44b$var$INNER_STACK_KEYWORD
            }, model.get([
                "option",
                "stack"
            ]) || {}, true);
        }
    }
};
// TODO: SELF REGISTERED.
$5f4351e0b7aaad84$export$408c24786cd729c6({
    type: "changeMagicType",
    event: "magicTypeChanged",
    update: "prepareAndUpdate"
}, function(payload, ecModel) {
    ecModel.mergeOption(payload.newOption);
});
var $814367005540c44b$export$2e2bcd8739ae039 = $814367005540c44b$var$MagicType;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 





/* global document */ var $928b1a8eb5e3c36c$var$BLOCK_SPLITER = new Array(60).join("-");
var $928b1a8eb5e3c36c$var$ITEM_SPLITER = "	";
/**
 * Group series into two types
 *  1. on category axis, like line, bar
 *  2. others, like scatter, pie
 */ function $928b1a8eb5e3c36c$var$groupSeries(ecModel) {
    var seriesGroupByCategoryAxis = {};
    var otherSeries = [];
    var meta = [];
    ecModel.eachRawSeries(function(seriesModel) {
        var coordSys = seriesModel.coordinateSystem;
        if (coordSys && (coordSys.type === "cartesian2d" || coordSys.type === "polar")) {
            // TODO: TYPE Consider polar? Include polar may increase unecessary bundle size.
            var baseAxis = coordSys.getBaseAxis();
            if (baseAxis.type === "category") {
                var key = baseAxis.dim + "_" + baseAxis.index;
                if (!seriesGroupByCategoryAxis[key]) {
                    seriesGroupByCategoryAxis[key] = {
                        categoryAxis: baseAxis,
                        valueAxis: coordSys.getOtherAxis(baseAxis),
                        series: []
                    };
                    meta.push({
                        axisDim: baseAxis.dim,
                        axisIndex: baseAxis.index
                    });
                }
                seriesGroupByCategoryAxis[key].series.push(seriesModel);
            } else otherSeries.push(seriesModel);
        } else otherSeries.push(seriesModel);
    });
    return {
        seriesGroupByCategoryAxis: seriesGroupByCategoryAxis,
        other: otherSeries,
        meta: meta
    };
}
/**
 * Assemble content of series on cateogory axis
 * @inner
 */ function $928b1a8eb5e3c36c$var$assembleSeriesWithCategoryAxis(groups) {
    var tables = [];
    $e44eb14c4271d0f9$export$79b2f7037acddd43(groups, function(group, key) {
        var categoryAxis = group.categoryAxis;
        var valueAxis = group.valueAxis;
        var valueAxisDim = valueAxis.dim;
        var headers = [
            " "
        ].concat($e44eb14c4271d0f9$export$871de8747c9eaa88(group.series, function(series) {
            return series.name;
        }));
        // @ts-ignore TODO Polar
        var columns = [
            categoryAxis.model.getCategories()
        ];
        $e44eb14c4271d0f9$export$79b2f7037acddd43(group.series, function(series) {
            var rawData = series.getRawData();
            columns.push(series.getRawData().mapArray(rawData.mapDimension(valueAxisDim), function(val) {
                return val;
            }));
        });
        // Assemble table content
        var lines = [
            headers.join($928b1a8eb5e3c36c$var$ITEM_SPLITER)
        ];
        for(var i = 0; i < columns[0].length; i++){
            var items = [];
            for(var j = 0; j < columns.length; j++)items.push(columns[j][i]);
            lines.push(items.join($928b1a8eb5e3c36c$var$ITEM_SPLITER));
        }
        tables.push(lines.join("\n"));
    });
    return tables.join("\n\n" + $928b1a8eb5e3c36c$var$BLOCK_SPLITER + "\n\n");
}
/**
 * Assemble content of other series
 */ function $928b1a8eb5e3c36c$var$assembleOtherSeries(series) {
    return $e44eb14c4271d0f9$export$871de8747c9eaa88(series, function(series) {
        var data = series.getRawData();
        var lines = [
            series.name
        ];
        var vals = [];
        data.each(data.dimensions, function() {
            var argLen = arguments.length;
            var dataIndex = arguments[argLen - 1];
            var name = data.getName(dataIndex);
            for(var i = 0; i < argLen - 1; i++)vals[i] = arguments[i];
            lines.push((name ? name + $928b1a8eb5e3c36c$var$ITEM_SPLITER : "") + vals.join($928b1a8eb5e3c36c$var$ITEM_SPLITER));
        });
        return lines.join("\n");
    }).join("\n\n" + $928b1a8eb5e3c36c$var$BLOCK_SPLITER + "\n\n");
}
function $928b1a8eb5e3c36c$var$getContentFromModel(ecModel) {
    var result = $928b1a8eb5e3c36c$var$groupSeries(ecModel);
    return {
        value: $e44eb14c4271d0f9$export$3dea766d36a8935f([
            $928b1a8eb5e3c36c$var$assembleSeriesWithCategoryAxis(result.seriesGroupByCategoryAxis),
            $928b1a8eb5e3c36c$var$assembleOtherSeries(result.other)
        ], function(str) {
            return !!str.replace(/[\n\t\s]/g, "");
        }).join("\n\n" + $928b1a8eb5e3c36c$var$BLOCK_SPLITER + "\n\n"),
        meta: result.meta
    };
}
function $928b1a8eb5e3c36c$var$trim(str) {
    return str.replace(/^\s\s*/, "").replace(/\s\s*$/, "");
}
/**
 * If a block is tsv format
 */ function $928b1a8eb5e3c36c$var$isTSVFormat(block) {
    // Simple method to find out if a block is tsv format
    var firstLine = block.slice(0, block.indexOf("\n"));
    if (firstLine.indexOf($928b1a8eb5e3c36c$var$ITEM_SPLITER) >= 0) return true;
}
var $928b1a8eb5e3c36c$var$itemSplitRegex = new RegExp("[" + $928b1a8eb5e3c36c$var$ITEM_SPLITER + "]+", "g");
/**
 * @param {string} tsv
 * @return {Object}
 */ function $928b1a8eb5e3c36c$var$parseTSVContents(tsv) {
    var tsvLines = tsv.split(/\n+/g);
    var headers = $928b1a8eb5e3c36c$var$trim(tsvLines.shift()).split($928b1a8eb5e3c36c$var$itemSplitRegex);
    var categories = [];
    var series = $e44eb14c4271d0f9$export$871de8747c9eaa88(headers, function(header) {
        return {
            name: header,
            data: []
        };
    });
    for(var i = 0; i < tsvLines.length; i++){
        var items = $928b1a8eb5e3c36c$var$trim(tsvLines[i]).split($928b1a8eb5e3c36c$var$itemSplitRegex);
        categories.push(items.shift());
        for(var j = 0; j < items.length; j++)series[j] && (series[j].data[i] = items[j]);
    }
    return {
        series: series,
        categories: categories
    };
}
function $928b1a8eb5e3c36c$var$parseListContents(str) {
    var lines = str.split(/\n+/g);
    var seriesName = $928b1a8eb5e3c36c$var$trim(lines.shift());
    var data = [];
    for(var i = 0; i < lines.length; i++){
        // if line is empty, ignore it.
        // there is a case that a user forgot to delete `\n`.
        var line = $928b1a8eb5e3c36c$var$trim(lines[i]);
        if (!line) continue;
        var items = line.split($928b1a8eb5e3c36c$var$itemSplitRegex);
        var name_1 = "";
        var value = void 0;
        var hasName = false;
        if (isNaN(items[0])) {
            // First item is name
            hasName = true;
            name_1 = items[0];
            items = items.slice(1);
            data[i] = {
                name: name_1,
                value: []
            };
            value = data[i].value;
        } else value = data[i] = [];
        for(var j = 0; j < items.length; j++)value.push(+items[j]);
        if (value.length === 1) hasName ? data[i].value = value[0] : data[i] = value[0];
    }
    return {
        name: seriesName,
        data: data
    };
}
function $928b1a8eb5e3c36c$var$parseContents(str, blockMetaList) {
    var blocks = str.split(new RegExp("\n*" + $928b1a8eb5e3c36c$var$BLOCK_SPLITER + "\n*", "g"));
    var newOption = {
        series: []
    };
    $e44eb14c4271d0f9$export$79b2f7037acddd43(blocks, function(block, idx) {
        if ($928b1a8eb5e3c36c$var$isTSVFormat(block)) {
            var result = $928b1a8eb5e3c36c$var$parseTSVContents(block);
            var blockMeta = blockMetaList[idx];
            var axisKey = blockMeta.axisDim + "Axis";
            if (blockMeta) {
                newOption[axisKey] = newOption[axisKey] || [];
                newOption[axisKey][blockMeta.axisIndex] = {
                    data: result.categories
                };
                newOption.series = newOption.series.concat(result.series);
            }
        } else {
            var result = $928b1a8eb5e3c36c$var$parseListContents(block);
            newOption.series.push(result);
        }
    });
    return newOption;
}
var $928b1a8eb5e3c36c$var$DataView = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(DataView, _super);
    function DataView() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DataView.prototype.onclick = function(ecModel, api) {
        // FIXME: better way?
        setTimeout(function() {
            api.dispatchAction({
                type: "hideTip"
            });
        });
        var container = api.getDom();
        var model = this.model;
        if (this._dom) container.removeChild(this._dom);
        var root = document.createElement("div");
        // use padding to avoid 5px whitespace
        root.style.cssText = "position:absolute;top:0;bottom:0;left:0;right:0;padding:5px";
        root.style.backgroundColor = model.get("backgroundColor") || "#fff";
        // Create elements
        var header = document.createElement("h4");
        var lang = model.get("lang") || [];
        header.innerHTML = lang[0] || model.get("title");
        header.style.cssText = "margin:10px 20px";
        header.style.color = model.get("textColor");
        var viewMain = document.createElement("div");
        var textarea = document.createElement("textarea");
        viewMain.style.cssText = "overflow:auto";
        var optionToContent = model.get("optionToContent");
        var contentToOption = model.get("contentToOption");
        var result = $928b1a8eb5e3c36c$var$getContentFromModel(ecModel);
        if ($e44eb14c4271d0f9$export$f6e2535fb5126e54(optionToContent)) {
            var htmlOrDom = optionToContent(api.getOption());
            if ($e44eb14c4271d0f9$export$844ec244b1367d54(htmlOrDom)) viewMain.innerHTML = htmlOrDom;
            else if ($e44eb14c4271d0f9$export$9f57505b7bd8dae(htmlOrDom)) viewMain.appendChild(htmlOrDom);
        } else {
            // Use default textarea
            textarea.readOnly = model.get("readOnly");
            var style = textarea.style;
            // eslint-disable-next-line max-len
            style.cssText = "display:block;width:100%;height:100%;font-family:monospace;font-size:14px;line-height:1.6rem;resize:none;box-sizing:border-box;outline:none";
            style.color = model.get("textColor");
            style.borderColor = model.get("textareaBorderColor");
            style.backgroundColor = model.get("textareaColor");
            textarea.value = result.value;
            viewMain.appendChild(textarea);
        }
        var blockMetaList = result.meta;
        var buttonContainer = document.createElement("div");
        buttonContainer.style.cssText = "position:absolute;bottom:5px;left:0;right:0";
        // eslint-disable-next-line max-len
        var buttonStyle = "float:right;margin-right:20px;border:none;cursor:pointer;padding:2px 5px;font-size:12px;border-radius:3px";
        var closeButton = document.createElement("div");
        var refreshButton = document.createElement("div");
        buttonStyle += ";background-color:" + model.get("buttonColor");
        buttonStyle += ";color:" + model.get("buttonTextColor");
        var self = this;
        function close() {
            container.removeChild(root);
            self._dom = null;
        }
        (0, $81f76356654e394a$export$3f65cefe8380dbea)(closeButton, "click", close);
        (0, $81f76356654e394a$export$3f65cefe8380dbea)(refreshButton, "click", function() {
            if (contentToOption == null && optionToContent != null || contentToOption != null && optionToContent == null) {
                // eslint-disable-next-line
                (0, $4796c55e8b767685$export$c106dd0671a0fc2d)("It seems you have just provided one of `contentToOption` and `optionToContent` functions but missed the other one. Data change is ignored.");
                close();
                return;
            }
            var newOption;
            try {
                if ($e44eb14c4271d0f9$export$f6e2535fb5126e54(contentToOption)) newOption = contentToOption(viewMain, api.getOption());
                else newOption = $928b1a8eb5e3c36c$var$parseContents(textarea.value, blockMetaList);
            } catch (e) {
                close();
                throw new Error("Data view format error " + e);
            }
            if (newOption) api.dispatchAction({
                type: "changeDataView",
                newOption: newOption
            });
            close();
        });
        closeButton.innerHTML = lang[1];
        refreshButton.innerHTML = lang[2];
        refreshButton.style.cssText = closeButton.style.cssText = buttonStyle;
        !model.get("readOnly") && buttonContainer.appendChild(refreshButton);
        buttonContainer.appendChild(closeButton);
        root.appendChild(header);
        root.appendChild(viewMain);
        root.appendChild(buttonContainer);
        viewMain.style.height = container.clientHeight - 80 + "px";
        container.appendChild(root);
        this._dom = root;
    };
    DataView.prototype.remove = function(ecModel, api) {
        this._dom && api.getDom().removeChild(this._dom);
    };
    DataView.prototype.dispose = function(ecModel, api) {
        this.remove(ecModel, api);
    };
    DataView.getDefaultOption = function(ecModel) {
        var defaultOption = {
            show: true,
            readOnly: false,
            optionToContent: null,
            contentToOption: null,
            // eslint-disable-next-line
            icon: "M17.5,17.3H33 M17.5,17.3H33 M45.4,29.5h-28 M11.5,2v56H51V14.8L38.4,2H11.5z M38.4,2.2v12.7H51 M45.4,41.7h-28",
            title: ecModel.getLocaleModel().get([
                "toolbox",
                "dataView",
                "title"
            ]),
            lang: ecModel.getLocaleModel().get([
                "toolbox",
                "dataView",
                "lang"
            ]),
            backgroundColor: "#fff",
            textColor: "#000",
            textareaColor: "#fff",
            textareaBorderColor: "#333",
            buttonColor: "#c23531",
            buttonTextColor: "#fff"
        };
        return defaultOption;
    };
    return DataView;
}((0, $e0f30959df02d068$export$1426bfb1b0bcf539));
/**
 * @inner
 */ function $928b1a8eb5e3c36c$var$tryMergeDataOption(newData, originalData) {
    return $e44eb14c4271d0f9$export$871de8747c9eaa88(newData, function(newVal, idx) {
        var original = originalData && originalData[idx];
        if ($e44eb14c4271d0f9$export$a6cdc56e425d0d0a(original) && !$e44eb14c4271d0f9$export$43bee75e5e14138e(original)) {
            var newValIsObject = $e44eb14c4271d0f9$export$a6cdc56e425d0d0a(newVal) && !$e44eb14c4271d0f9$export$43bee75e5e14138e(newVal);
            if (!newValIsObject) newVal = {
                value: newVal
            };
            // original data has name but new data has no name
            var shouldDeleteName = original.name != null && newVal.name == null;
            // Original data has option
            newVal = $e44eb14c4271d0f9$export$ebe90cb607ad99e(newVal, original);
            shouldDeleteName && delete newVal.name;
            return newVal;
        } else return newVal;
    });
}
// TODO: SELF REGISTERED.
$5f4351e0b7aaad84$export$408c24786cd729c6({
    type: "changeDataView",
    event: "dataViewChanged",
    update: "prepareAndUpdate"
}, function(payload, ecModel) {
    var newSeriesOptList = [];
    $e44eb14c4271d0f9$export$79b2f7037acddd43(payload.newOption.series, function(seriesOpt) {
        var seriesModel = ecModel.getSeriesByName(seriesOpt.name)[0];
        if (!seriesModel) // New created series
        // Geuss the series type
        newSeriesOptList.push($e44eb14c4271d0f9$export$8b58be045bf06082({
            // Default is scatter
            type: "scatter"
        }, seriesOpt));
        else {
            var originalData = seriesModel.get("data");
            newSeriesOptList.push({
                name: seriesOpt.name,
                data: $928b1a8eb5e3c36c$var$tryMergeDataOption(seriesOpt.data, originalData)
            });
        }
    });
    ecModel.mergeOption($e44eb14c4271d0f9$export$ebe90cb607ad99e({
        series: newSeriesOptList
    }, payload.newOption));
});
var $928b1a8eb5e3c36c$export$2e2bcd8739ae039 = $928b1a8eb5e3c36c$var$DataView;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

var $609aa5fd74d2a81e$var$each = $e44eb14c4271d0f9$export$79b2f7037acddd43;
var $609aa5fd74d2a81e$var$inner = (0, $8917c02fd8256c67$export$64df9f8d92ae083f)();
function $609aa5fd74d2a81e$export$4cbf152802aa238(ecModel, newSnapshot) {
    var storedSnapshots = $609aa5fd74d2a81e$var$getStoreSnapshots(ecModel);
    // If previous dataZoom can not be found,
    // complete an range with current range.
    $609aa5fd74d2a81e$var$each(newSnapshot, function(batchItem, dataZoomId) {
        var i = storedSnapshots.length - 1;
        for(; i >= 0; i--){
            var snapshot = storedSnapshots[i];
            if (snapshot[dataZoomId]) break;
        }
        if (i < 0) {
            // No origin range set, create one by current range.
            var dataZoomModel = ecModel.queryComponents({
                mainType: "dataZoom",
                subType: "select",
                id: dataZoomId
            })[0];
            if (dataZoomModel) {
                var percentRange = dataZoomModel.getPercentRange();
                storedSnapshots[0][dataZoomId] = {
                    dataZoomId: dataZoomId,
                    start: percentRange[0],
                    end: percentRange[1]
                };
            }
        }
    });
    storedSnapshots.push(newSnapshot);
}
function $609aa5fd74d2a81e$export$3e41007ebfff0e64(ecModel) {
    var storedSnapshots = $609aa5fd74d2a81e$var$getStoreSnapshots(ecModel);
    var head = storedSnapshots[storedSnapshots.length - 1];
    storedSnapshots.length > 1 && storedSnapshots.pop();
    // Find top for all dataZoom.
    var snapshot = {};
    $609aa5fd74d2a81e$var$each(head, function(batchItem, dataZoomId) {
        for(var i = storedSnapshots.length - 1; i >= 0; i--){
            batchItem = storedSnapshots[i][dataZoomId];
            if (batchItem) {
                snapshot[dataZoomId] = batchItem;
                break;
            }
        }
    });
    return snapshot;
}
function $609aa5fd74d2a81e$export$42ffd38884aecdac(ecModel) {
    $609aa5fd74d2a81e$var$inner(ecModel).snapshots = null;
}
function $609aa5fd74d2a81e$export$85b9a36db797e02b(ecModel) {
    return $609aa5fd74d2a81e$var$getStoreSnapshots(ecModel).length;
}
/**
 * History length of each dataZoom may be different.
 * this._history[0] is used to store origin range.
 */ function $609aa5fd74d2a81e$var$getStoreSnapshots(ecModel) {
    var store = $609aa5fd74d2a81e$var$inner(ecModel);
    if (!store.snapshots) store.snapshots = [
        {}
    ];
    return store.snapshots;
}



var $df1b8d96527ac516$var$RestoreOption = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(RestoreOption, _super);
    function RestoreOption() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    RestoreOption.prototype.onclick = function(ecModel, api) {
        $609aa5fd74d2a81e$export$42ffd38884aecdac(ecModel);
        api.dispatchAction({
            type: "restore",
            from: this.uid
        });
    };
    RestoreOption.getDefaultOption = function(ecModel) {
        var defaultOption = {
            show: true,
            // eslint-disable-next-line
            icon: "M3.8,33.4 M47,18.9h9.8V8.7 M56.3,20.1 C52.1,9,40.5,0.6,26.8,2.1C12.6,3.7,1.6,16.2,2.1,30.6 M13,41.1H3.1v10.2 M3.7,39.9c4.2,11.1,15.8,19.5,29.5,18 c14.2-1.6,25.2-14.1,24.7-28.5",
            title: ecModel.getLocaleModel().get([
                "toolbox",
                "restore",
                "title"
            ])
        };
        return defaultOption;
    };
    return RestoreOption;
}((0, $e0f30959df02d068$export$1426bfb1b0bcf539));
// TODO: SELF REGISTERED.
$5f4351e0b7aaad84$export$408c24786cd729c6({
    type: "restore",
    event: "restore",
    update: "prepareAndUpdate"
}, function(payload, ecModel) {
    ecModel.resetOption("recreate");
});
var $df1b8d96527ac516$export$2e2bcd8739ae039 = $df1b8d96527ac516$var$RestoreOption;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 



/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ // @ts-nocheck


var $2d46a12b440d2a8b$var$ATTR = "\0_ec_interaction_mutex";
function $2d46a12b440d2a8b$export$b7df5d561049483a(zr, resourceKey, userKey) {
    var store = $2d46a12b440d2a8b$var$getStore(zr);
    store[resourceKey] = userKey;
}
function $2d46a12b440d2a8b$export$23d3fad09dc44362(zr, resourceKey, userKey) {
    var store = $2d46a12b440d2a8b$var$getStore(zr);
    var uKey = store[resourceKey];
    if (uKey === userKey) store[resourceKey] = null;
}
function $2d46a12b440d2a8b$export$5623cba512bc9470(zr, resourceKey) {
    return !!$2d46a12b440d2a8b$var$getStore(zr)[resourceKey];
}
function $2d46a12b440d2a8b$var$getStore(zr) {
    return zr[$2d46a12b440d2a8b$var$ATTR] || (zr[$2d46a12b440d2a8b$var$ATTR] = {});
}
/**
 * payload: {
 *     type: 'takeGlobalCursor',
 *     key: 'dataZoomSelect', or 'brush', or ...,
 *         If no userKey, release global cursor.
 * }
 */ // TODO: SELF REGISTERED.
$5f4351e0b7aaad84$export$408c24786cd729c6({
    type: "takeGlobalCursor",
    event: "globalCursorTaken",
    update: "update"
}, (0, $e44eb14c4271d0f9$export$8793edee2d425525));



var $4a9e7f33c9e335db$var$BRUSH_PANEL_GLOBAL = true;
var $4a9e7f33c9e335db$var$mathMin = Math.min;
var $4a9e7f33c9e335db$var$mathMax = Math.max;
var $4a9e7f33c9e335db$var$mathPow = Math.pow;
var $4a9e7f33c9e335db$var$COVER_Z = 10000;
var $4a9e7f33c9e335db$var$UNSELECT_THRESHOLD = 6;
var $4a9e7f33c9e335db$var$MIN_RESIZE_LINE_WIDTH = 6;
var $4a9e7f33c9e335db$var$MUTEX_RESOURCE_KEY = "globalPan";
var $4a9e7f33c9e335db$var$DIRECTION_MAP = {
    w: [
        0,
        0
    ],
    e: [
        0,
        1
    ],
    n: [
        1,
        0
    ],
    s: [
        1,
        1
    ]
};
var $4a9e7f33c9e335db$var$CURSOR_MAP = {
    w: "ew",
    e: "ew",
    n: "ns",
    s: "ns",
    ne: "nesw",
    sw: "nesw",
    nw: "nwse",
    se: "nwse"
};
var $4a9e7f33c9e335db$var$DEFAULT_BRUSH_OPT = {
    brushStyle: {
        lineWidth: 2,
        stroke: "rgba(210,219,238,0.3)",
        fill: "#D2DBEE"
    },
    transformable: true,
    brushMode: "single",
    removeOnClick: false
};
var $4a9e7f33c9e335db$var$baseUID = 0;
/**
 * params:
 *     areas: Array.<Array>, coord relates to container group,
 *                             If no container specified, to global.
 *     opt {
 *         isEnd: boolean,
 *         removeOnClick: boolean
 *     }
 */ var $4a9e7f33c9e335db$var$BrushController = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(BrushController, _super);
    function BrushController(zr) {
        var _this = _super.call(this) || this;
        /**
     * @internal
     */ _this._track = [];
        /**
     * @internal
     */ _this._covers = [];
        _this._handlers = {};
        (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(zr);
        _this._zr = zr;
        _this.group = new $748aea24eee93173$export$2e2bcd8739ae039();
        _this._uid = "brushController_" + $4a9e7f33c9e335db$var$baseUID++;
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)($4a9e7f33c9e335db$var$pointerHandlers, function(handler, eventName) {
            this._handlers[eventName] = (0, $e44eb14c4271d0f9$export$2385a24977818dd0)(handler, this);
        }, _this);
        return _this;
    }
    /**
   * If set to `false`, select disabled.
   */ BrushController.prototype.enableBrush = function(brushOption) {
        (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(this._mounted);
        this._brushType && this._doDisableBrush();
        brushOption.brushType && this._doEnableBrush(brushOption);
        return this;
    };
    BrushController.prototype._doEnableBrush = function(brushOption) {
        var zr = this._zr;
        // Consider roam, which takes globalPan too.
        if (!this._enableGlobalPan) $2d46a12b440d2a8b$export$b7df5d561049483a(zr, $4a9e7f33c9e335db$var$MUTEX_RESOURCE_KEY, this._uid);
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(this._handlers, function(handler, eventName) {
            zr.on(eventName, handler);
        });
        this._brushType = brushOption.brushType;
        this._brushOption = (0, $e44eb14c4271d0f9$export$4950aa0f605343fb)((0, $e44eb14c4271d0f9$export$9cd59f9826255e47)($4a9e7f33c9e335db$var$DEFAULT_BRUSH_OPT), brushOption, true);
    };
    BrushController.prototype._doDisableBrush = function() {
        var zr = this._zr;
        $2d46a12b440d2a8b$export$23d3fad09dc44362(zr, $4a9e7f33c9e335db$var$MUTEX_RESOURCE_KEY, this._uid);
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(this._handlers, function(handler, eventName) {
            zr.off(eventName, handler);
        });
        this._brushType = this._brushOption = null;
    };
    /**
   * @param panelOpts If not pass, it is global brush.
   */ BrushController.prototype.setPanels = function(panelOpts) {
        if (panelOpts && panelOpts.length) {
            var panels_1 = this._panels = {};
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(panelOpts, function(panelOpts) {
                panels_1[panelOpts.panelId] = (0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(panelOpts);
            });
        } else this._panels = null;
        return this;
    };
    BrushController.prototype.mount = function(opt) {
        opt = opt || {};
        this._mounted = true; // should be at first.
        this._enableGlobalPan = opt.enableGlobalPan;
        var thisGroup = this.group;
        this._zr.add(thisGroup);
        thisGroup.attr({
            x: opt.x || 0,
            y: opt.y || 0,
            rotation: opt.rotation || 0,
            scaleX: opt.scaleX || 1,
            scaleY: opt.scaleY || 1
        });
        this._transform = thisGroup.getLocalTransform();
        return this;
    };
    // eachCover(cb, context): void {
    //     each(this._covers, cb, context);
    // }
    /**
   * Update covers.
   * @param coverConfigList
   *        If coverConfigList is null/undefined, all covers removed.
   */ BrushController.prototype.updateCovers = function(coverConfigList) {
        (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(this._mounted);
        coverConfigList = (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(coverConfigList, function(coverConfig) {
            return (0, $e44eb14c4271d0f9$export$4950aa0f605343fb)((0, $e44eb14c4271d0f9$export$9cd59f9826255e47)($4a9e7f33c9e335db$var$DEFAULT_BRUSH_OPT), coverConfig, true);
        });
        var tmpIdPrefix = "\0-brush-index-";
        var oldCovers = this._covers;
        var newCovers = this._covers = [];
        var controller = this;
        var creatingCover = this._creatingCover;
        new (0, $72bedc7af0abc791$export$2e2bcd8739ae039)(oldCovers, coverConfigList, oldGetKey, getKey).add(addOrUpdate).update(addOrUpdate).remove(remove).execute();
        return this;
        function getKey(brushOption, index) {
            return (brushOption.id != null ? brushOption.id : tmpIdPrefix + index) + "-" + brushOption.brushType;
        }
        function oldGetKey(cover, index) {
            return getKey(cover.__brushOption, index);
        }
        function addOrUpdate(newIndex, oldIndex) {
            var newBrushInternal = coverConfigList[newIndex];
            // Consider setOption in event listener of brushSelect,
            // where updating cover when creating should be forbidden.
            if (oldIndex != null && oldCovers[oldIndex] === creatingCover) newCovers[newIndex] = oldCovers[oldIndex];
            else {
                var cover = newCovers[newIndex] = oldIndex != null ? (oldCovers[oldIndex].__brushOption = newBrushInternal, oldCovers[oldIndex]) : $4a9e7f33c9e335db$var$endCreating(controller, $4a9e7f33c9e335db$var$createCover(controller, newBrushInternal));
                $4a9e7f33c9e335db$var$updateCoverAfterCreation(controller, cover);
            }
        }
        function remove(oldIndex) {
            if (oldCovers[oldIndex] !== creatingCover) controller.group.remove(oldCovers[oldIndex]);
        }
    };
    BrushController.prototype.unmount = function() {
        if (!this._mounted) return;
        this.enableBrush(false);
        // container may 'removeAll' outside.
        $4a9e7f33c9e335db$var$clearCovers(this);
        this._zr.remove(this.group);
        this._mounted = false; // should be at last.
        return this;
    };
    BrushController.prototype.dispose = function() {
        this.unmount();
        this.off();
    };
    return BrushController;
}((0, $a2a21788c772d0fe$export$2e2bcd8739ae039));
function $4a9e7f33c9e335db$var$createCover(controller, brushOption) {
    var cover = $4a9e7f33c9e335db$var$coverRenderers[brushOption.brushType].createCover(controller, brushOption);
    cover.__brushOption = brushOption;
    $4a9e7f33c9e335db$var$updateZ(cover, brushOption);
    controller.group.add(cover);
    return cover;
}
function $4a9e7f33c9e335db$var$endCreating(controller, creatingCover) {
    var coverRenderer = $4a9e7f33c9e335db$var$getCoverRenderer(creatingCover);
    if (coverRenderer.endCreating) {
        coverRenderer.endCreating(controller, creatingCover);
        $4a9e7f33c9e335db$var$updateZ(creatingCover, creatingCover.__brushOption);
    }
    return creatingCover;
}
function $4a9e7f33c9e335db$var$updateCoverShape(controller, cover) {
    var brushOption = cover.__brushOption;
    $4a9e7f33c9e335db$var$getCoverRenderer(cover).updateCoverShape(controller, cover, brushOption.range, brushOption);
}
function $4a9e7f33c9e335db$var$updateZ(cover, brushOption) {
    var z = brushOption.z;
    z == null && (z = $4a9e7f33c9e335db$var$COVER_Z);
    cover.traverse(function(el) {
        el.z = z;
        el.z2 = z; // Consider in given container.
    });
}
function $4a9e7f33c9e335db$var$updateCoverAfterCreation(controller, cover) {
    $4a9e7f33c9e335db$var$getCoverRenderer(cover).updateCommon(controller, cover);
    $4a9e7f33c9e335db$var$updateCoverShape(controller, cover);
}
function $4a9e7f33c9e335db$var$getCoverRenderer(cover) {
    return $4a9e7f33c9e335db$var$coverRenderers[cover.__brushOption.brushType];
}
// return target panel or `true` (means global panel)
function $4a9e7f33c9e335db$var$getPanelByPoint(controller, e, localCursorPoint) {
    var panels = controller._panels;
    if (!panels) return $4a9e7f33c9e335db$var$BRUSH_PANEL_GLOBAL; // Global panel
    var panel;
    var transform = controller._transform;
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(panels, function(pn) {
        pn.isTargetByCursor(e, localCursorPoint, transform) && (panel = pn);
    });
    return panel;
}
// Return a panel or true
function $4a9e7f33c9e335db$var$getPanelByCover(controller, cover) {
    var panels = controller._panels;
    if (!panels) return $4a9e7f33c9e335db$var$BRUSH_PANEL_GLOBAL; // Global panel
    var panelId = cover.__brushOption.panelId;
    // User may give cover without coord sys info,
    // which is then treated as global panel.
    return panelId != null ? panels[panelId] : $4a9e7f33c9e335db$var$BRUSH_PANEL_GLOBAL;
}
function $4a9e7f33c9e335db$var$clearCovers(controller) {
    var covers = controller._covers;
    var originalLength = covers.length;
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(covers, function(cover) {
        controller.group.remove(cover);
    }, controller);
    covers.length = 0;
    return !!originalLength;
}
function $4a9e7f33c9e335db$var$trigger(controller, opt) {
    var areas = (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(controller._covers, function(cover) {
        var brushOption = cover.__brushOption;
        var range = (0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(brushOption.range);
        return {
            brushType: brushOption.brushType,
            panelId: brushOption.panelId,
            range: range
        };
    });
    controller.trigger("brush", {
        areas: areas,
        isEnd: !!opt.isEnd,
        removeOnClick: !!opt.removeOnClick
    });
}
function $4a9e7f33c9e335db$var$shouldShowCover(controller) {
    var track = controller._track;
    if (!track.length) return false;
    var p2 = track[track.length - 1];
    var p1 = track[0];
    var dx = p2[0] - p1[0];
    var dy = p2[1] - p1[1];
    var dist = $4a9e7f33c9e335db$var$mathPow(dx * dx + dy * dy, 0.5);
    return dist > $4a9e7f33c9e335db$var$UNSELECT_THRESHOLD;
}
function $4a9e7f33c9e335db$var$getTrackEnds(track) {
    var tail = track.length - 1;
    tail < 0 && (tail = 0);
    return [
        track[0],
        track[tail]
    ];
}
function $4a9e7f33c9e335db$var$createBaseRectCover(rectRangeConverter, controller, brushOption, edgeNameSequences) {
    var cover = new $748aea24eee93173$export$2e2bcd8739ae039();
    cover.add(new $538026eba361a92a$export$2e2bcd8739ae039({
        name: "main",
        style: $4a9e7f33c9e335db$var$makeStyle(brushOption),
        silent: true,
        draggable: true,
        cursor: "move",
        drift: (0, $e44eb14c4271d0f9$export$c3095a23b368d1f2)($4a9e7f33c9e335db$var$driftRect, rectRangeConverter, controller, cover, [
            "n",
            "s",
            "w",
            "e"
        ]),
        ondragend: (0, $e44eb14c4271d0f9$export$c3095a23b368d1f2)($4a9e7f33c9e335db$var$trigger, controller, {
            isEnd: true
        })
    }));
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(edgeNameSequences, function(nameSequence) {
        cover.add(new $538026eba361a92a$export$2e2bcd8739ae039({
            name: nameSequence.join(""),
            style: {
                opacity: 0
            },
            draggable: true,
            silent: true,
            invisible: true,
            drift: (0, $e44eb14c4271d0f9$export$c3095a23b368d1f2)($4a9e7f33c9e335db$var$driftRect, rectRangeConverter, controller, cover, nameSequence),
            ondragend: (0, $e44eb14c4271d0f9$export$c3095a23b368d1f2)($4a9e7f33c9e335db$var$trigger, controller, {
                isEnd: true
            })
        }));
    });
    return cover;
}
function $4a9e7f33c9e335db$var$updateBaseRect(controller, cover, localRange, brushOption) {
    var lineWidth = brushOption.brushStyle.lineWidth || 0;
    var handleSize = $4a9e7f33c9e335db$var$mathMax(lineWidth, $4a9e7f33c9e335db$var$MIN_RESIZE_LINE_WIDTH);
    var x = localRange[0][0];
    var y = localRange[1][0];
    var xa = x - lineWidth / 2;
    var ya = y - lineWidth / 2;
    var x2 = localRange[0][1];
    var y2 = localRange[1][1];
    var x2a = x2 - handleSize + lineWidth / 2;
    var y2a = y2 - handleSize + lineWidth / 2;
    var width = x2 - x;
    var height = y2 - y;
    var widtha = width + lineWidth;
    var heighta = height + lineWidth;
    $4a9e7f33c9e335db$var$updateRectShape(controller, cover, "main", x, y, width, height);
    if (brushOption.transformable) {
        $4a9e7f33c9e335db$var$updateRectShape(controller, cover, "w", xa, ya, handleSize, heighta);
        $4a9e7f33c9e335db$var$updateRectShape(controller, cover, "e", x2a, ya, handleSize, heighta);
        $4a9e7f33c9e335db$var$updateRectShape(controller, cover, "n", xa, ya, widtha, handleSize);
        $4a9e7f33c9e335db$var$updateRectShape(controller, cover, "s", xa, y2a, widtha, handleSize);
        $4a9e7f33c9e335db$var$updateRectShape(controller, cover, "nw", xa, ya, handleSize, handleSize);
        $4a9e7f33c9e335db$var$updateRectShape(controller, cover, "ne", x2a, ya, handleSize, handleSize);
        $4a9e7f33c9e335db$var$updateRectShape(controller, cover, "sw", xa, y2a, handleSize, handleSize);
        $4a9e7f33c9e335db$var$updateRectShape(controller, cover, "se", x2a, y2a, handleSize, handleSize);
    }
}
function $4a9e7f33c9e335db$var$updateCommon(controller, cover) {
    var brushOption = cover.__brushOption;
    var transformable = brushOption.transformable;
    var mainEl = cover.childAt(0);
    mainEl.useStyle($4a9e7f33c9e335db$var$makeStyle(brushOption));
    mainEl.attr({
        silent: !transformable,
        cursor: transformable ? "move" : "default"
    });
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)([
        [
            "w"
        ],
        [
            "e"
        ],
        [
            "n"
        ],
        [
            "s"
        ],
        [
            "s",
            "e"
        ],
        [
            "s",
            "w"
        ],
        [
            "n",
            "e"
        ],
        [
            "n",
            "w"
        ]
    ], function(nameSequence) {
        var el = cover.childOfName(nameSequence.join(""));
        var globalDir = nameSequence.length === 1 ? $4a9e7f33c9e335db$var$getGlobalDirection1(controller, nameSequence[0]) : $4a9e7f33c9e335db$var$getGlobalDirection2(controller, nameSequence);
        el && el.attr({
            silent: !transformable,
            invisible: !transformable,
            cursor: transformable ? $4a9e7f33c9e335db$var$CURSOR_MAP[globalDir] + "-resize" : null
        });
    });
}
function $4a9e7f33c9e335db$var$updateRectShape(controller, cover, name, x, y, w, h) {
    var el = cover.childOfName(name);
    el && el.setShape($4a9e7f33c9e335db$var$pointsToRect($4a9e7f33c9e335db$var$clipByPanel(controller, cover, [
        [
            x,
            y
        ],
        [
            x + w,
            y + h
        ]
    ])));
}
function $4a9e7f33c9e335db$var$makeStyle(brushOption) {
    return (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)({
        strokeNoScale: true
    }, brushOption.brushStyle);
}
function $4a9e7f33c9e335db$var$formatRectRange(x, y, x2, y2) {
    var min = [
        $4a9e7f33c9e335db$var$mathMin(x, x2),
        $4a9e7f33c9e335db$var$mathMin(y, y2)
    ];
    var max = [
        $4a9e7f33c9e335db$var$mathMax(x, x2),
        $4a9e7f33c9e335db$var$mathMax(y, y2)
    ];
    return [
        [
            min[0],
            max[0]
        ],
        [
            min[1],
            max[1]
        ] // y range
    ];
}
function $4a9e7f33c9e335db$var$getTransform(controller) {
    return $6aec2e68b45f8796$export$fce0c6cfca85ed96(controller.group);
}
function $4a9e7f33c9e335db$var$getGlobalDirection1(controller, localDirName) {
    var map = {
        w: "left",
        e: "right",
        n: "top",
        s: "bottom"
    };
    var inverseMap = {
        left: "w",
        right: "e",
        top: "n",
        bottom: "s"
    };
    var dir = $6aec2e68b45f8796$export$fff94e9792354cfa(map[localDirName], $4a9e7f33c9e335db$var$getTransform(controller));
    return inverseMap[dir];
}
function $4a9e7f33c9e335db$var$getGlobalDirection2(controller, localDirNameSeq) {
    var globalDir = [
        $4a9e7f33c9e335db$var$getGlobalDirection1(controller, localDirNameSeq[0]),
        $4a9e7f33c9e335db$var$getGlobalDirection1(controller, localDirNameSeq[1])
    ];
    (globalDir[0] === "e" || globalDir[0] === "w") && globalDir.reverse();
    return globalDir.join("");
}
function $4a9e7f33c9e335db$var$driftRect(rectRangeConverter, controller, cover, dirNameSequence, dx, dy) {
    var brushOption = cover.__brushOption;
    var rectRange = rectRangeConverter.toRectRange(brushOption.range);
    var localDelta = $4a9e7f33c9e335db$var$toLocalDelta(controller, dx, dy);
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(dirNameSequence, function(dirName) {
        var ind = $4a9e7f33c9e335db$var$DIRECTION_MAP[dirName];
        rectRange[ind[0]][ind[1]] += localDelta[ind[0]];
    });
    brushOption.range = rectRangeConverter.fromRectRange($4a9e7f33c9e335db$var$formatRectRange(rectRange[0][0], rectRange[1][0], rectRange[0][1], rectRange[1][1]));
    $4a9e7f33c9e335db$var$updateCoverAfterCreation(controller, cover);
    $4a9e7f33c9e335db$var$trigger(controller, {
        isEnd: false
    });
}
function $4a9e7f33c9e335db$var$driftPolygon(controller, cover, dx, dy) {
    var range = cover.__brushOption.range;
    var localDelta = $4a9e7f33c9e335db$var$toLocalDelta(controller, dx, dy);
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(range, function(point) {
        point[0] += localDelta[0];
        point[1] += localDelta[1];
    });
    $4a9e7f33c9e335db$var$updateCoverAfterCreation(controller, cover);
    $4a9e7f33c9e335db$var$trigger(controller, {
        isEnd: false
    });
}
function $4a9e7f33c9e335db$var$toLocalDelta(controller, dx, dy) {
    var thisGroup = controller.group;
    var localD = thisGroup.transformCoordToLocal(dx, dy);
    var localZero = thisGroup.transformCoordToLocal(0, 0);
    return [
        localD[0] - localZero[0],
        localD[1] - localZero[1]
    ];
}
function $4a9e7f33c9e335db$var$clipByPanel(controller, cover, data) {
    var panel = $4a9e7f33c9e335db$var$getPanelByCover(controller, cover);
    return panel && panel !== $4a9e7f33c9e335db$var$BRUSH_PANEL_GLOBAL ? panel.clipPath(data, controller._transform) : (0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(data);
}
function $4a9e7f33c9e335db$var$pointsToRect(points) {
    var xmin = $4a9e7f33c9e335db$var$mathMin(points[0][0], points[1][0]);
    var ymin = $4a9e7f33c9e335db$var$mathMin(points[0][1], points[1][1]);
    var xmax = $4a9e7f33c9e335db$var$mathMax(points[0][0], points[1][0]);
    var ymax = $4a9e7f33c9e335db$var$mathMax(points[0][1], points[1][1]);
    return {
        x: xmin,
        y: ymin,
        width: xmax - xmin,
        height: ymax - ymin
    };
}
function $4a9e7f33c9e335db$var$resetCursor(controller, e, localCursorPoint) {
    if (// Check active
    !controller._brushType || $4a9e7f33c9e335db$var$isOutsideZrArea(controller, e.offsetX, e.offsetY)) return;
    var zr = controller._zr;
    var covers = controller._covers;
    var currPanel = $4a9e7f33c9e335db$var$getPanelByPoint(controller, e, localCursorPoint);
    // Check whether in covers.
    if (!controller._dragging) for(var i = 0; i < covers.length; i++){
        var brushOption = covers[i].__brushOption;
        if (currPanel && (currPanel === $4a9e7f33c9e335db$var$BRUSH_PANEL_GLOBAL || brushOption.panelId === currPanel.panelId) && $4a9e7f33c9e335db$var$coverRenderers[brushOption.brushType].contain(covers[i], localCursorPoint[0], localCursorPoint[1])) // Use cursor style set on cover.
        return;
    }
    currPanel && zr.setCursorStyle("crosshair");
}
function $4a9e7f33c9e335db$var$preventDefault(e) {
    var rawE = e.event;
    rawE.preventDefault && rawE.preventDefault();
}
function $4a9e7f33c9e335db$var$mainShapeContain(cover, x, y) {
    return cover.childOfName("main").contain(x, y);
}
function $4a9e7f33c9e335db$var$updateCoverByMouse(controller, e, localCursorPoint, isEnd) {
    var creatingCover = controller._creatingCover;
    var panel = controller._creatingPanel;
    var thisBrushOption = controller._brushOption;
    var eventParams;
    controller._track.push(localCursorPoint.slice());
    if ($4a9e7f33c9e335db$var$shouldShowCover(controller) || creatingCover) {
        if (panel && !creatingCover) {
            thisBrushOption.brushMode === "single" && $4a9e7f33c9e335db$var$clearCovers(controller);
            var brushOption = (0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(thisBrushOption);
            brushOption.brushType = $4a9e7f33c9e335db$var$determineBrushType(brushOption.brushType, panel);
            brushOption.panelId = panel === $4a9e7f33c9e335db$var$BRUSH_PANEL_GLOBAL ? null : panel.panelId;
            creatingCover = controller._creatingCover = $4a9e7f33c9e335db$var$createCover(controller, brushOption);
            controller._covers.push(creatingCover);
        }
        if (creatingCover) {
            var coverRenderer = $4a9e7f33c9e335db$var$coverRenderers[$4a9e7f33c9e335db$var$determineBrushType(controller._brushType, panel)];
            var coverBrushOption = creatingCover.__brushOption;
            coverBrushOption.range = coverRenderer.getCreatingRange($4a9e7f33c9e335db$var$clipByPanel(controller, creatingCover, controller._track));
            if (isEnd) {
                $4a9e7f33c9e335db$var$endCreating(controller, creatingCover);
                coverRenderer.updateCommon(controller, creatingCover);
            }
            $4a9e7f33c9e335db$var$updateCoverShape(controller, creatingCover);
            eventParams = {
                isEnd: isEnd
            };
        }
    } else if (isEnd && thisBrushOption.brushMode === "single" && thisBrushOption.removeOnClick) // Help user to remove covers easily, only by a tiny drag, in 'single' mode.
    // But a single click do not clear covers, because user may have casual
    // clicks (for example, click on other component and do not expect covers
    // disappear).
    // Only some cover removed, trigger action, but not every click trigger action.
    {
        if ($4a9e7f33c9e335db$var$getPanelByPoint(controller, e, localCursorPoint) && $4a9e7f33c9e335db$var$clearCovers(controller)) eventParams = {
            isEnd: isEnd,
            removeOnClick: true
        };
    }
    return eventParams;
}
function $4a9e7f33c9e335db$var$determineBrushType(brushType, panel) {
    if (brushType === "auto") {
        (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(panel && panel.defaultBrushType, 'MUST have defaultBrushType when brushType is "atuo"');
        return panel.defaultBrushType;
    }
    return brushType;
}
var $4a9e7f33c9e335db$var$pointerHandlers = {
    mousedown: function(e) {
        if (this._dragging) // In case some browser do not support globalOut,
        // and release mouse out side the browser.
        $4a9e7f33c9e335db$var$handleDragEnd(this, e);
        else if (!e.target || !e.target.draggable) {
            $4a9e7f33c9e335db$var$preventDefault(e);
            var localCursorPoint = this.group.transformCoordToLocal(e.offsetX, e.offsetY);
            this._creatingCover = null;
            var panel = this._creatingPanel = $4a9e7f33c9e335db$var$getPanelByPoint(this, e, localCursorPoint);
            if (panel) {
                this._dragging = true;
                this._track = [
                    localCursorPoint.slice()
                ];
            }
        }
    },
    mousemove: function(e) {
        var x = e.offsetX;
        var y = e.offsetY;
        var localCursorPoint = this.group.transformCoordToLocal(x, y);
        $4a9e7f33c9e335db$var$resetCursor(this, e, localCursorPoint);
        if (this._dragging) {
            $4a9e7f33c9e335db$var$preventDefault(e);
            var eventParams = $4a9e7f33c9e335db$var$updateCoverByMouse(this, e, localCursorPoint, false);
            eventParams && $4a9e7f33c9e335db$var$trigger(this, eventParams);
        }
    },
    mouseup: function(e) {
        $4a9e7f33c9e335db$var$handleDragEnd(this, e);
    }
};
function $4a9e7f33c9e335db$var$handleDragEnd(controller, e) {
    if (controller._dragging) {
        $4a9e7f33c9e335db$var$preventDefault(e);
        var x = e.offsetX;
        var y = e.offsetY;
        var localCursorPoint = controller.group.transformCoordToLocal(x, y);
        var eventParams = $4a9e7f33c9e335db$var$updateCoverByMouse(controller, e, localCursorPoint, true);
        controller._dragging = false;
        controller._track = [];
        controller._creatingCover = null;
        // trigger event should be at final, after procedure will be nested.
        eventParams && $4a9e7f33c9e335db$var$trigger(controller, eventParams);
    }
}
function $4a9e7f33c9e335db$var$isOutsideZrArea(controller, x, y) {
    var zr = controller._zr;
    return x < 0 || x > zr.getWidth() || y < 0 || y > zr.getHeight();
}
/**
 * key: brushType
 */ var $4a9e7f33c9e335db$var$coverRenderers = {
    lineX: $4a9e7f33c9e335db$var$getLineRenderer(0),
    lineY: $4a9e7f33c9e335db$var$getLineRenderer(1),
    rect: {
        createCover: function(controller, brushOption) {
            function returnInput(range) {
                return range;
            }
            return $4a9e7f33c9e335db$var$createBaseRectCover({
                toRectRange: returnInput,
                fromRectRange: returnInput
            }, controller, brushOption, [
                [
                    "w"
                ],
                [
                    "e"
                ],
                [
                    "n"
                ],
                [
                    "s"
                ],
                [
                    "s",
                    "e"
                ],
                [
                    "s",
                    "w"
                ],
                [
                    "n",
                    "e"
                ],
                [
                    "n",
                    "w"
                ]
            ]);
        },
        getCreatingRange: function(localTrack) {
            var ends = $4a9e7f33c9e335db$var$getTrackEnds(localTrack);
            return $4a9e7f33c9e335db$var$formatRectRange(ends[1][0], ends[1][1], ends[0][0], ends[0][1]);
        },
        updateCoverShape: function(controller, cover, localRange, brushOption) {
            $4a9e7f33c9e335db$var$updateBaseRect(controller, cover, localRange, brushOption);
        },
        updateCommon: $4a9e7f33c9e335db$var$updateCommon,
        contain: $4a9e7f33c9e335db$var$mainShapeContain
    },
    polygon: {
        createCover: function(controller, brushOption) {
            var cover = new $748aea24eee93173$export$2e2bcd8739ae039();
            // Do not use graphic.Polygon because graphic.Polyline do not close the
            // border of the shape when drawing, which is a better experience for user.
            cover.add(new $8e5cb49aeb92b686$export$2e2bcd8739ae039({
                name: "main",
                style: $4a9e7f33c9e335db$var$makeStyle(brushOption),
                silent: true
            }));
            return cover;
        },
        getCreatingRange: function(localTrack) {
            return localTrack;
        },
        endCreating: function(controller, cover) {
            cover.remove(cover.childAt(0));
            // Use graphic.Polygon close the shape.
            cover.add(new $e9532b79bfd5259a$export$2e2bcd8739ae039({
                name: "main",
                draggable: true,
                drift: (0, $e44eb14c4271d0f9$export$c3095a23b368d1f2)($4a9e7f33c9e335db$var$driftPolygon, controller, cover),
                ondragend: (0, $e44eb14c4271d0f9$export$c3095a23b368d1f2)($4a9e7f33c9e335db$var$trigger, controller, {
                    isEnd: true
                })
            }));
        },
        updateCoverShape: function(controller, cover, localRange, brushOption) {
            cover.childAt(0).setShape({
                points: $4a9e7f33c9e335db$var$clipByPanel(controller, cover, localRange)
            });
        },
        updateCommon: $4a9e7f33c9e335db$var$updateCommon,
        contain: $4a9e7f33c9e335db$var$mainShapeContain
    }
};
function $4a9e7f33c9e335db$var$getLineRenderer(xyIndex) {
    return {
        createCover: function(controller, brushOption) {
            return $4a9e7f33c9e335db$var$createBaseRectCover({
                toRectRange: function(range) {
                    var rectRange = [
                        range,
                        [
                            0,
                            100
                        ]
                    ];
                    xyIndex && rectRange.reverse();
                    return rectRange;
                },
                fromRectRange: function(rectRange) {
                    return rectRange[xyIndex];
                }
            }, controller, brushOption, [
                [
                    [
                        "w"
                    ],
                    [
                        "e"
                    ]
                ],
                [
                    [
                        "n"
                    ],
                    [
                        "s"
                    ]
                ]
            ][xyIndex]);
        },
        getCreatingRange: function(localTrack) {
            var ends = $4a9e7f33c9e335db$var$getTrackEnds(localTrack);
            var min = $4a9e7f33c9e335db$var$mathMin(ends[0][xyIndex], ends[1][xyIndex]);
            var max = $4a9e7f33c9e335db$var$mathMax(ends[0][xyIndex], ends[1][xyIndex]);
            return [
                min,
                max
            ];
        },
        updateCoverShape: function(controller, cover, localRange, brushOption) {
            var otherExtent;
            // If brushWidth not specified, fit the panel.
            var panel = $4a9e7f33c9e335db$var$getPanelByCover(controller, cover);
            if (panel !== $4a9e7f33c9e335db$var$BRUSH_PANEL_GLOBAL && panel.getLinearBrushOtherExtent) otherExtent = panel.getLinearBrushOtherExtent(xyIndex);
            else {
                var zr = controller._zr;
                otherExtent = [
                    0,
                    [
                        zr.getWidth(),
                        zr.getHeight()
                    ][1 - xyIndex]
                ];
            }
            var rectRange = [
                localRange,
                otherExtent
            ];
            xyIndex && rectRange.reverse();
            $4a9e7f33c9e335db$var$updateBaseRect(controller, cover, rectRange, brushOption);
        },
        updateCommon: $4a9e7f33c9e335db$var$updateCommon,
        contain: $4a9e7f33c9e335db$var$mainShapeContain
    };
}
var $4a9e7f33c9e335db$export$2e2bcd8739ae039 = $4a9e7f33c9e335db$var$BrushController;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ var $c9d6032f50bd0dc3$var$IRRELEVANT_EXCLUDES = {
    "axisPointer": 1,
    "tooltip": 1,
    "brush": 1
};
function $c9d6032f50bd0dc3$export$8a33eacb690eac07(e, api, targetCoordSysModel) {
    var model = api.getComponentByElement(e.topTarget);
    // If model is axisModel, it works only if it is injected with coordinateSystem.
    var coordSys = model && model.coordinateSystem;
    return model && model !== targetCoordSysModel && !$c9d6032f50bd0dc3$var$IRRELEVANT_EXCLUDES.hasOwnProperty(model.mainType) && coordSys && coordSys.model !== targetCoordSysModel;
}



function $2c908ffaa2592f1e$export$fee17964a62a87a7(rect) {
    rect = $2c908ffaa2592f1e$var$normalizeRect(rect);
    return function(localPoints) {
        return $6aec2e68b45f8796$export$e2f409471bbbc1dc(localPoints, rect);
    };
}
function $2c908ffaa2592f1e$export$7280070e90fad7a0(rect, specifiedXYIndex) {
    rect = $2c908ffaa2592f1e$var$normalizeRect(rect);
    return function(xyIndex) {
        var idx = specifiedXYIndex != null ? specifiedXYIndex : xyIndex;
        var brushWidth = idx ? rect.width : rect.height;
        var base = idx ? rect.x : rect.y;
        return [
            base,
            base + (brushWidth || 0)
        ];
    };
}
function $2c908ffaa2592f1e$export$e63e66b3b18aa99f(rect, api, targetModel) {
    var boundingRect = $2c908ffaa2592f1e$var$normalizeRect(rect);
    return function(e, localCursorPoint) {
        return boundingRect.contain(localCursorPoint[0], localCursorPoint[1]) && !(0, $c9d6032f50bd0dc3$export$8a33eacb690eac07)(e, api, targetModel);
    };
}
// Consider width/height is negative.
function $2c908ffaa2592f1e$var$normalizeRect(rect) {
    return (0, $bf33be5184c664d0$export$2e2bcd8739ae039).create(rect);
}



// FIXME
// how to genarialize to more coordinate systems.
var $e9876b0577af9dd0$var$INCLUDE_FINDER_MAIN_TYPES = [
    "grid",
    "xAxis",
    "yAxis",
    "geo",
    "graph",
    "polar",
    "radiusAxis",
    "angleAxis",
    "bmap"
];
var $e9876b0577af9dd0$var$BrushTargetManager = /** @class */ function() {
    /**
   * @param finder contains Index/Id/Name of xAxis/yAxis/geo/grid
   *        Each can be {number|Array.<number>}. like: {xAxisIndex: [3, 4]}
   * @param opt.include include coordinate system types.
   */ function BrushTargetManager(finder, ecModel, opt) {
        var _this = this;
        this._targetInfoList = [];
        var foundCpts = $e9876b0577af9dd0$var$parseFinder(ecModel, finder);
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)($e9876b0577af9dd0$var$targetInfoBuilders, function(builder, type) {
            if (!opt || !opt.include || (0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)(opt.include, type) >= 0) builder(foundCpts, _this._targetInfoList);
        });
    }
    BrushTargetManager.prototype.setOutputRanges = function(areas, ecModel) {
        this.matchOutputRanges(areas, ecModel, function(area, coordRange, coordSys) {
            (area.coordRanges || (area.coordRanges = [])).push(coordRange);
            // area.coordRange is the first of area.coordRanges
            if (!area.coordRange) {
                area.coordRange = coordRange;
                // In 'category' axis, coord to pixel is not reversible, so we can not
                // rebuild range by coordRange accrately, which may bring trouble when
                // brushing only one item. So we use __rangeOffset to rebuilding range
                // by coordRange. And this it only used in brush component so it is no
                // need to be adapted to coordRanges.
                var result = $e9876b0577af9dd0$var$coordConvert[area.brushType](0, coordSys, coordRange);
                area.__rangeOffset = {
                    offset: $e9876b0577af9dd0$var$diffProcessor[area.brushType](result.values, area.range, [
                        1,
                        1
                    ]),
                    xyMinMax: result.xyMinMax
                };
            }
        });
        return areas;
    };
    BrushTargetManager.prototype.matchOutputRanges = function(areas, ecModel, cb) {
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(areas, function(area) {
            var targetInfo = this.findTargetInfo(area, ecModel);
            if (targetInfo && targetInfo !== true) (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(targetInfo.coordSyses, function(coordSys) {
                var result = $e9876b0577af9dd0$var$coordConvert[area.brushType](1, coordSys, area.range, true);
                cb(area, result.values, coordSys, ecModel);
            });
        }, this);
    };
    /**
   * the `areas` is `BrushModel.areas`.
   * Called in layout stage.
   * convert `area.coordRange` to global range and set panelId to `area.range`.
   */ BrushTargetManager.prototype.setInputRanges = function(areas, ecModel) {
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(areas, function(area) {
            var targetInfo = this.findTargetInfo(area, ecModel);
            (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(!targetInfo || targetInfo === true || area.coordRange, "coordRange must be specified when coord index specified.");
            (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(!targetInfo || targetInfo !== true || area.range, "range must be specified in global brush.");
            area.range = area.range || [];
            // convert coordRange to global range and set panelId.
            if (targetInfo && targetInfo !== true) {
                area.panelId = targetInfo.panelId;
                // (1) area.range should always be calculate from coordRange but does
                // not keep its original value, for the sake of the dataZoom scenario,
                // where area.coordRange remains unchanged but area.range may be changed.
                // (2) Only support converting one coordRange to pixel range in brush
                // component. So do not consider `coordRanges`.
                // (3) About __rangeOffset, see comment above.
                var result = $e9876b0577af9dd0$var$coordConvert[area.brushType](0, targetInfo.coordSys, area.coordRange);
                var rangeOffset = area.__rangeOffset;
                area.range = rangeOffset ? $e9876b0577af9dd0$var$diffProcessor[area.brushType](result.values, rangeOffset.offset, $e9876b0577af9dd0$var$getScales(result.xyMinMax, rangeOffset.xyMinMax)) : result.values;
            }
        }, this);
    };
    BrushTargetManager.prototype.makePanelOpts = function(api, getDefaultBrushType) {
        return (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(this._targetInfoList, function(targetInfo) {
            var rect = targetInfo.getPanelRect();
            return {
                panelId: targetInfo.panelId,
                defaultBrushType: getDefaultBrushType ? getDefaultBrushType(targetInfo) : null,
                clipPath: $2c908ffaa2592f1e$export$fee17964a62a87a7(rect),
                isTargetByCursor: $2c908ffaa2592f1e$export$e63e66b3b18aa99f(rect, api, targetInfo.coordSysModel),
                getLinearBrushOtherExtent: $2c908ffaa2592f1e$export$7280070e90fad7a0(rect)
            };
        });
    };
    BrushTargetManager.prototype.controlSeries = function(area, seriesModel, ecModel) {
        // Check whether area is bound in coord, and series do not belong to that coord.
        // If do not do this check, some brush (like lineX) will controll all axes.
        var targetInfo = this.findTargetInfo(area, ecModel);
        return targetInfo === true || targetInfo && (0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)(targetInfo.coordSyses, seriesModel.coordinateSystem) >= 0;
    };
    /**
   * If return Object, a coord found.
   * If return true, global found.
   * Otherwise nothing found.
   */ BrushTargetManager.prototype.findTargetInfo = function(area, ecModel) {
        var targetInfoList = this._targetInfoList;
        var foundCpts = $e9876b0577af9dd0$var$parseFinder(ecModel, area);
        for(var i = 0; i < targetInfoList.length; i++){
            var targetInfo = targetInfoList[i];
            var areaPanelId = area.panelId;
            if (areaPanelId) {
                if (targetInfo.panelId === areaPanelId) return targetInfo;
            } else for(var j = 0; j < $e9876b0577af9dd0$var$targetInfoMatchers.length; j++){
                if ($e9876b0577af9dd0$var$targetInfoMatchers[j](foundCpts, targetInfo)) return targetInfo;
            }
        }
        return true;
    };
    return BrushTargetManager;
}();
function $e9876b0577af9dd0$var$formatMinMax(minMax) {
    minMax[0] > minMax[1] && minMax.reverse();
    return minMax;
}
function $e9876b0577af9dd0$var$parseFinder(ecModel, finder) {
    return (0, $8917c02fd8256c67$export$95de80076abac814)(ecModel, finder, {
        includeMainTypes: $e9876b0577af9dd0$var$INCLUDE_FINDER_MAIN_TYPES
    });
}
var $e9876b0577af9dd0$var$targetInfoBuilders = {
    grid: function(foundCpts, targetInfoList) {
        var xAxisModels = foundCpts.xAxisModels;
        var yAxisModels = foundCpts.yAxisModels;
        var gridModels = foundCpts.gridModels;
        // Remove duplicated.
        var gridModelMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
        var xAxesHas = {};
        var yAxesHas = {};
        if (!xAxisModels && !yAxisModels && !gridModels) return;
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(xAxisModels, function(axisModel) {
            var gridModel = axisModel.axis.grid.model;
            gridModelMap.set(gridModel.id, gridModel);
            xAxesHas[gridModel.id] = true;
        });
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(yAxisModels, function(axisModel) {
            var gridModel = axisModel.axis.grid.model;
            gridModelMap.set(gridModel.id, gridModel);
            yAxesHas[gridModel.id] = true;
        });
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(gridModels, function(gridModel) {
            gridModelMap.set(gridModel.id, gridModel);
            xAxesHas[gridModel.id] = true;
            yAxesHas[gridModel.id] = true;
        });
        gridModelMap.each(function(gridModel) {
            var grid = gridModel.coordinateSystem;
            var cartesians = [];
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(grid.getCartesians(), function(cartesian, index) {
                if ((0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)(xAxisModels, cartesian.getAxis("x").model) >= 0 || (0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)(yAxisModels, cartesian.getAxis("y").model) >= 0) cartesians.push(cartesian);
            });
            targetInfoList.push({
                panelId: "grid--" + gridModel.id,
                gridModel: gridModel,
                coordSysModel: gridModel,
                // Use the first one as the representitive coordSys.
                coordSys: cartesians[0],
                coordSyses: cartesians,
                getPanelRect: $e9876b0577af9dd0$var$panelRectBuilders.grid,
                xAxisDeclared: xAxesHas[gridModel.id],
                yAxisDeclared: yAxesHas[gridModel.id]
            });
        });
    },
    geo: function(foundCpts, targetInfoList) {
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(foundCpts.geoModels, function(geoModel) {
            var coordSys = geoModel.coordinateSystem;
            targetInfoList.push({
                panelId: "geo--" + geoModel.id,
                geoModel: geoModel,
                coordSysModel: geoModel,
                coordSys: coordSys,
                coordSyses: [
                    coordSys
                ],
                getPanelRect: $e9876b0577af9dd0$var$panelRectBuilders.geo
            });
        });
    }
};
var $e9876b0577af9dd0$var$targetInfoMatchers = [
    // grid
    function(foundCpts, targetInfo) {
        var xAxisModel = foundCpts.xAxisModel;
        var yAxisModel = foundCpts.yAxisModel;
        var gridModel = foundCpts.gridModel;
        !gridModel && xAxisModel && (gridModel = xAxisModel.axis.grid.model);
        !gridModel && yAxisModel && (gridModel = yAxisModel.axis.grid.model);
        return gridModel && gridModel === targetInfo.gridModel;
    },
    // geo
    function(foundCpts, targetInfo) {
        var geoModel = foundCpts.geoModel;
        return geoModel && geoModel === targetInfo.geoModel;
    }
];
var $e9876b0577af9dd0$var$panelRectBuilders = {
    grid: function() {
        // grid is not Transformable.
        return this.coordSys.master.getRect().clone();
    },
    geo: function() {
        var coordSys = this.coordSys;
        var rect = coordSys.getBoundingRect().clone();
        // geo roam and zoom transform
        rect.applyTransform($6aec2e68b45f8796$export$fce0c6cfca85ed96(coordSys));
        return rect;
    }
};
var $e9876b0577af9dd0$var$coordConvert = {
    lineX: (0, $e44eb14c4271d0f9$export$c3095a23b368d1f2)($e9876b0577af9dd0$var$axisConvert, 0),
    lineY: (0, $e44eb14c4271d0f9$export$c3095a23b368d1f2)($e9876b0577af9dd0$var$axisConvert, 1),
    rect: function(to, coordSys, rangeOrCoordRange, clamp) {
        var xminymin = to ? coordSys.pointToData([
            rangeOrCoordRange[0][0],
            rangeOrCoordRange[1][0]
        ], clamp) : coordSys.dataToPoint([
            rangeOrCoordRange[0][0],
            rangeOrCoordRange[1][0]
        ], clamp);
        var xmaxymax = to ? coordSys.pointToData([
            rangeOrCoordRange[0][1],
            rangeOrCoordRange[1][1]
        ], clamp) : coordSys.dataToPoint([
            rangeOrCoordRange[0][1],
            rangeOrCoordRange[1][1]
        ], clamp);
        var values = [
            $e9876b0577af9dd0$var$formatMinMax([
                xminymin[0],
                xmaxymax[0]
            ]),
            $e9876b0577af9dd0$var$formatMinMax([
                xminymin[1],
                xmaxymax[1]
            ])
        ];
        return {
            values: values,
            xyMinMax: values
        };
    },
    polygon: function(to, coordSys, rangeOrCoordRange, clamp) {
        var xyMinMax = [
            [
                Infinity,
                -Infinity
            ],
            [
                Infinity,
                -Infinity
            ]
        ];
        var values = (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(rangeOrCoordRange, function(item) {
            var p = to ? coordSys.pointToData(item, clamp) : coordSys.dataToPoint(item, clamp);
            xyMinMax[0][0] = Math.min(xyMinMax[0][0], p[0]);
            xyMinMax[1][0] = Math.min(xyMinMax[1][0], p[1]);
            xyMinMax[0][1] = Math.max(xyMinMax[0][1], p[0]);
            xyMinMax[1][1] = Math.max(xyMinMax[1][1], p[1]);
            return p;
        });
        return {
            values: values,
            xyMinMax: xyMinMax
        };
    }
};
function $e9876b0577af9dd0$var$axisConvert(axisNameIndex, to, coordSys, rangeOrCoordRange) {
    (0, $e44eb14c4271d0f9$export$a7a9523472993e97)(coordSys.type === "cartesian2d", "lineX/lineY brush is available only in cartesian2d.");
    var axis = coordSys.getAxis([
        "x",
        "y"
    ][axisNameIndex]);
    var values = $e9876b0577af9dd0$var$formatMinMax((0, $e44eb14c4271d0f9$export$871de8747c9eaa88)([
        0,
        1
    ], function(i) {
        return to ? axis.coordToData(axis.toLocalCoord(rangeOrCoordRange[i]), true) : axis.toGlobalCoord(axis.dataToCoord(rangeOrCoordRange[i]));
    }));
    var xyMinMax = [];
    xyMinMax[axisNameIndex] = values;
    xyMinMax[1 - axisNameIndex] = [
        NaN,
        NaN
    ];
    return {
        values: values,
        xyMinMax: xyMinMax
    };
}
var $e9876b0577af9dd0$var$diffProcessor = {
    lineX: (0, $e44eb14c4271d0f9$export$c3095a23b368d1f2)($e9876b0577af9dd0$var$axisDiffProcessor, 0),
    lineY: (0, $e44eb14c4271d0f9$export$c3095a23b368d1f2)($e9876b0577af9dd0$var$axisDiffProcessor, 1),
    rect: function(values, refer, scales) {
        return [
            [
                values[0][0] - scales[0] * refer[0][0],
                values[0][1] - scales[0] * refer[0][1]
            ],
            [
                values[1][0] - scales[1] * refer[1][0],
                values[1][1] - scales[1] * refer[1][1]
            ]
        ];
    },
    polygon: function(values, refer, scales) {
        return (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(values, function(item, idx) {
            return [
                item[0] - scales[0] * refer[idx][0],
                item[1] - scales[1] * refer[idx][1]
            ];
        });
    }
};
function $e9876b0577af9dd0$var$axisDiffProcessor(axisNameIndex, values, refer, scales) {
    return [
        values[0] - scales[axisNameIndex] * refer[0],
        values[1] - scales[axisNameIndex] * refer[1]
    ];
}
// We have to process scale caused by dataZoom manually,
// although it might be not accurate.
// Return [0~1, 0~1]
function $e9876b0577af9dd0$var$getScales(xyMinMaxCurr, xyMinMaxOrigin) {
    var sizeCurr = $e9876b0577af9dd0$var$getSize(xyMinMaxCurr);
    var sizeOrigin = $e9876b0577af9dd0$var$getSize(xyMinMaxOrigin);
    var scales = [
        sizeCurr[0] / sizeOrigin[0],
        sizeCurr[1] / sizeOrigin[1]
    ];
    isNaN(scales[0]) && (scales[0] = 1);
    isNaN(scales[1]) && (scales[1] = 1);
    return scales;
}
function $e9876b0577af9dd0$var$getSize(xyMinMax) {
    return xyMinMax ? [
        xyMinMax[0][1] - xyMinMax[0][0],
        xyMinMax[1][1] - xyMinMax[1][0]
    ] : [
        NaN,
        NaN
    ];
}
var $e9876b0577af9dd0$export$2e2bcd8739ae039 = $e9876b0577af9dd0$var$BrushTargetManager;







var $31db24f527bfecc5$var$each = $e44eb14c4271d0f9$export$79b2f7037acddd43;
var $31db24f527bfecc5$var$DATA_ZOOM_ID_BASE = (0, $8917c02fd8256c67$export$1753133c42e665e8)("toolbox-dataZoom_");
var $31db24f527bfecc5$var$ICON_TYPES = [
    "zoom",
    "back"
];
var $31db24f527bfecc5$var$DataZoomFeature = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(DataZoomFeature, _super);
    function DataZoomFeature() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DataZoomFeature.prototype.render = function(featureModel, ecModel, api, payload) {
        if (!this._brushController) {
            this._brushController = new (0, $4a9e7f33c9e335db$export$2e2bcd8739ae039)(api.getZr());
            this._brushController.on("brush", $e44eb14c4271d0f9$export$2385a24977818dd0(this._onBrush, this)).mount();
        }
        $31db24f527bfecc5$var$updateZoomBtnStatus(featureModel, ecModel, this, payload, api);
        $31db24f527bfecc5$var$updateBackBtnStatus(featureModel, ecModel);
    };
    DataZoomFeature.prototype.onclick = function(ecModel, api, type) {
        $31db24f527bfecc5$var$handlers[type].call(this);
    };
    DataZoomFeature.prototype.remove = function(ecModel, api) {
        this._brushController && this._brushController.unmount();
    };
    DataZoomFeature.prototype.dispose = function(ecModel, api) {
        this._brushController && this._brushController.dispose();
    };
    DataZoomFeature.prototype._onBrush = function(eventParam) {
        var areas = eventParam.areas;
        if (!eventParam.isEnd || !areas.length) return;
        var snapshot = {};
        var ecModel = this.ecModel;
        this._brushController.updateCovers([]); // remove cover
        var brushTargetManager = new (0, $e9876b0577af9dd0$export$2e2bcd8739ae039)($31db24f527bfecc5$var$makeAxisFinder(this.model), ecModel, {
            include: [
                "grid"
            ]
        });
        brushTargetManager.matchOutputRanges(areas, ecModel, function(area, coordRange, coordSys) {
            if (coordSys.type !== "cartesian2d") return;
            var brushType = area.brushType;
            if (brushType === "rect") {
                setBatch("x", coordSys, coordRange[0]);
                setBatch("y", coordSys, coordRange[1]);
            } else setBatch({
                lineX: "x",
                lineY: "y"
            }[brushType], coordSys, coordRange);
        });
        $609aa5fd74d2a81e$export$4cbf152802aa238(ecModel, snapshot);
        this._dispatchZoomAction(snapshot);
        function setBatch(dimName, coordSys, minMax) {
            var axis = coordSys.getAxis(dimName);
            var axisModel = axis.model;
            var dataZoomModel = findDataZoom(dimName, axisModel, ecModel);
            // Restrict range.
            var minMaxSpan = dataZoomModel.findRepresentativeAxisProxy(axisModel).getMinMaxSpan();
            if (minMaxSpan.minValueSpan != null || minMaxSpan.maxValueSpan != null) minMax = (0, $bd452127b86a5d76$export$2e2bcd8739ae039)(0, minMax.slice(), axis.scale.getExtent(), 0, minMaxSpan.minValueSpan, minMaxSpan.maxValueSpan);
            dataZoomModel && (snapshot[dataZoomModel.id] = {
                dataZoomId: dataZoomModel.id,
                startValue: minMax[0],
                endValue: minMax[1]
            });
        }
        function findDataZoom(dimName, axisModel, ecModel) {
            var found;
            ecModel.eachComponent({
                mainType: "dataZoom",
                subType: "select"
            }, function(dzModel) {
                var has = dzModel.getAxisModel(dimName, axisModel.componentIndex);
                has && (found = dzModel);
            });
            return found;
        }
    };
    DataZoomFeature.prototype._dispatchZoomAction = function(snapshot) {
        var batch = [];
        // Convert from hash map to array.
        $31db24f527bfecc5$var$each(snapshot, function(batchItem, dataZoomId) {
            batch.push($e44eb14c4271d0f9$export$9cd59f9826255e47(batchItem));
        });
        batch.length && this.api.dispatchAction({
            type: "dataZoom",
            from: this.uid,
            batch: batch
        });
    };
    DataZoomFeature.getDefaultOption = function(ecModel) {
        var defaultOption = {
            show: true,
            filterMode: "filter",
            // Icon group
            icon: {
                zoom: "M0,13.5h26.9 M13.5,26.9V0 M32.1,13.5H58V58H13.5 V32.1",
                back: "M22,1.4L9.9,13.5l12.3,12.3 M10.3,13.5H54.9v44.6 H10.3v-26"
            },
            // `zoom`, `back`
            title: ecModel.getLocaleModel().get([
                "toolbox",
                "dataZoom",
                "title"
            ]),
            brushStyle: {
                borderWidth: 0,
                color: "rgba(210,219,238,0.2)"
            }
        };
        return defaultOption;
    };
    return DataZoomFeature;
}((0, $e0f30959df02d068$export$1426bfb1b0bcf539));
var $31db24f527bfecc5$var$handlers = {
    zoom: function() {
        var nextActive = !this._isZoomActive;
        this.api.dispatchAction({
            type: "takeGlobalCursor",
            key: "dataZoomSelect",
            dataZoomSelectActive: nextActive
        });
    },
    back: function() {
        this._dispatchZoomAction($609aa5fd74d2a81e$export$3e41007ebfff0e64(this.ecModel));
    }
};
function $31db24f527bfecc5$var$makeAxisFinder(dzFeatureModel) {
    var setting = {
        xAxisIndex: dzFeatureModel.get("xAxisIndex", true),
        yAxisIndex: dzFeatureModel.get("yAxisIndex", true),
        xAxisId: dzFeatureModel.get("xAxisId", true),
        yAxisId: dzFeatureModel.get("yAxisId", true)
    };
    // If both `xAxisIndex` `xAxisId` not set, it means 'all'.
    // If both `yAxisIndex` `yAxisId` not set, it means 'all'.
    // Some old cases set like this below to close yAxis control but leave xAxis control:
    // `{ feature: { dataZoom: { yAxisIndex: false } }`.
    if (setting.xAxisIndex == null && setting.xAxisId == null) setting.xAxisIndex = "all";
    if (setting.yAxisIndex == null && setting.yAxisId == null) setting.yAxisIndex = "all";
    return setting;
}
function $31db24f527bfecc5$var$updateBackBtnStatus(featureModel, ecModel) {
    featureModel.setIconStatus("back", $609aa5fd74d2a81e$export$85b9a36db797e02b(ecModel) > 1 ? "emphasis" : "normal");
}
function $31db24f527bfecc5$var$updateZoomBtnStatus(featureModel, ecModel, view, payload, api) {
    var zoomActive = view._isZoomActive;
    if (payload && payload.type === "takeGlobalCursor") zoomActive = payload.key === "dataZoomSelect" ? payload.dataZoomSelectActive : false;
    view._isZoomActive = zoomActive;
    featureModel.setIconStatus("zoom", zoomActive ? "emphasis" : "normal");
    var brushTargetManager = new (0, $e9876b0577af9dd0$export$2e2bcd8739ae039)($31db24f527bfecc5$var$makeAxisFinder(featureModel), ecModel, {
        include: [
            "grid"
        ]
    });
    var panels = brushTargetManager.makePanelOpts(api, function(targetInfo) {
        return targetInfo.xAxisDeclared && !targetInfo.yAxisDeclared ? "lineX" : !targetInfo.xAxisDeclared && targetInfo.yAxisDeclared ? "lineY" : "rect";
    });
    view._brushController.setPanels(panels).enableBrush(zoomActive && panels.length ? {
        brushType: "auto",
        brushStyle: featureModel.getModel("brushStyle").getItemStyle()
    } : false);
}
(0, $b7083c5e76243873$export$5a90be4668898d38)("dataZoom", function(ecModel) {
    var toolboxModel = ecModel.getComponent("toolbox", 0);
    var featureDataZoomPath = [
        "feature",
        "dataZoom"
    ];
    if (!toolboxModel || toolboxModel.get(featureDataZoomPath) == null) return;
    var dzFeatureModel = toolboxModel.getModel(featureDataZoomPath);
    var dzOptions = [];
    var finder = $31db24f527bfecc5$var$makeAxisFinder(dzFeatureModel);
    var finderResult = (0, $8917c02fd8256c67$export$95de80076abac814)(ecModel, finder);
    $31db24f527bfecc5$var$each(finderResult.xAxisModels, function(axisModel) {
        return buildInternalOptions(axisModel, "xAxis", "xAxisIndex");
    });
    $31db24f527bfecc5$var$each(finderResult.yAxisModels, function(axisModel) {
        return buildInternalOptions(axisModel, "yAxis", "yAxisIndex");
    });
    function buildInternalOptions(axisModel, axisMainType, axisIndexPropName) {
        var axisIndex = axisModel.componentIndex;
        var newOpt = {
            type: "select",
            $fromToolbox: true,
            // Default to be filter
            filterMode: dzFeatureModel.get("filterMode", true) || "filter",
            // Id for merge mapping.
            id: $31db24f527bfecc5$var$DATA_ZOOM_ID_BASE + axisMainType + axisIndex
        };
        newOpt[axisIndexPropName] = axisIndex;
        dzOptions.push(newOpt);
    }
    return dzOptions;
});
var $31db24f527bfecc5$export$2e2bcd8739ae039 = $31db24f527bfecc5$var$DataZoomFeature;


function $ea459734a164849e$export$4b3e715f166fdd78(registers) {
    registers.registerComponentModel((0, $5eb8c977d6813756$export$2e2bcd8739ae039));
    registers.registerComponentView((0, $5882bc4a297d04fd$export$2e2bcd8739ae039));
    (0, $e0f30959df02d068$export$c6213a6f247cf906)("saveAsImage", (0, $111a1f91f3c8c961$export$2e2bcd8739ae039));
    (0, $e0f30959df02d068$export$c6213a6f247cf906)("magicType", (0, $814367005540c44b$export$2e2bcd8739ae039));
    (0, $e0f30959df02d068$export$c6213a6f247cf906)("dataView", (0, $928b1a8eb5e3c36c$export$2e2bcd8739ae039));
    (0, $e0f30959df02d068$export$c6213a6f247cf906)("dataZoom", (0, $31db24f527bfecc5$export$2e2bcd8739ae039));
    (0, $e0f30959df02d068$export$c6213a6f247cf906)("restore", (0, $df1b8d96527ac516$export$2e2bcd8739ae039));
    (0, $2456b78b4596463d$export$1f96ae73734a86cc)((0, $6274e43f9cf4e75a$export$4b3e715f166fdd78));
}

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

var $b67ad52727ec8106$var$TooltipModel = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(TooltipModel, _super);
    function TooltipModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = TooltipModel.type;
        return _this;
    }
    TooltipModel.type = "tooltip";
    TooltipModel.dependencies = [
        "axisPointer"
    ];
    TooltipModel.defaultOption = {
        // zlevel: 0,
        z: 60,
        show: true,
        // tooltip main content
        showContent: true,
        // 'trigger' only works on coordinate system.
        // 'item' | 'axis' | 'none'
        trigger: "item",
        // 'click' | 'mousemove' | 'none'
        triggerOn: "mousemove|click",
        alwaysShowContent: false,
        displayMode: "single",
        renderMode: "auto",
        // whether restraint content inside viewRect.
        // If renderMode: 'richText', default true.
        // If renderMode: 'html', defaut false (for backward compat).
        confine: null,
        showDelay: 0,
        hideDelay: 100,
        // Animation transition time, unit is second
        transitionDuration: 0.4,
        enterable: false,
        backgroundColor: "#fff",
        // box shadow
        shadowBlur: 10,
        shadowColor: "rgba(0, 0, 0, .2)",
        shadowOffsetX: 1,
        shadowOffsetY: 2,
        // tooltip border radius, unit is px, default is 4
        borderRadius: 4,
        // tooltip border width, unit is px, default is 0 (no border)
        borderWidth: 1,
        // Tooltip inside padding, default is 5 for all direction
        // Array is allowed to set up, right, bottom, left, same with css
        // The default value: See `tooltip/tooltipMarkup.ts#getPaddingFromTooltipModel`.
        padding: null,
        // Extra css text
        extraCssText: "",
        // axis indicator, trigger by axis
        axisPointer: {
            // default is line
            // legal values: 'line' | 'shadow' | 'cross'
            type: "line",
            // Valid when type is line, appoint tooltip line locate on which line. Optional
            // legal values: 'x' | 'y' | 'angle' | 'radius' | 'auto'
            // default is 'auto', chose the axis which type is category.
            // for multiply y axis, cartesian coord chose x axis, polar chose angle axis
            axis: "auto",
            animation: "auto",
            animationDurationUpdate: 200,
            animationEasingUpdate: "exponentialOut",
            crossStyle: {
                color: "#999",
                width: 1,
                type: "dashed",
                // TODO formatter
                textStyle: {}
            }
        },
        textStyle: {
            color: "#666",
            fontSize: 14
        }
    };
    return TooltipModel;
}((0, $a756077528c07361$export$2e2bcd8739ae039));
var $b67ad52727ec8106$export$2e2bcd8739ae039 = $b67ad52727ec8106$var$TooltipModel;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ 


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 




/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

function $6a3e76517838a37d$export$a309528050824ba4(tooltipModel) {
    var confineOption = tooltipModel.get("confine");
    return confineOption != null ? !!confineOption : tooltipModel.get("renderMode") === "richText";
}
function $6a3e76517838a37d$var$testStyle(styleProps) {
    if (!(0, $de9e931273a116c1$export$2e2bcd8739ae039).domSupported) return;
    var style = document.documentElement.style;
    for(var i = 0, len = styleProps.length; i < len; i++){
        if (styleProps[i] in style) return styleProps[i];
    }
}
var $6a3e76517838a37d$export$7b4286b1e4a23439 = $6a3e76517838a37d$var$testStyle([
    "transform",
    "webkitTransform",
    "OTransform",
    "MozTransform",
    "msTransform"
]);
var $6a3e76517838a37d$export$70a631ae991b5e76 = $6a3e76517838a37d$var$testStyle([
    "webkitTransition",
    "transition",
    "OTransition",
    "MozTransition",
    "msTransition"
]);
function $6a3e76517838a37d$export$5886acafe29a08d1(styleVendor, styleProp) {
    if (!styleVendor) return styleProp;
    styleProp = (0, $1594f6dc0ce39685$export$86f54f62aa7a7514)(styleProp, true);
    var idx = styleVendor.indexOf(styleProp);
    styleVendor = idx === -1 ? styleProp : "-" + styleVendor.slice(0, idx) + "-" + styleProp;
    return styleVendor.toLowerCase();
}
function $6a3e76517838a37d$export$3735103072e4a80(el, style) {
    var stl = el.currentStyle || document.defaultView && document.defaultView.getComputedStyle(el);
    return stl ? style ? stl[style] : stl : null;
}



/* global document, window */ var $aa3cbaed0bd0dc00$var$CSS_TRANSITION_VENDOR = (0, $6a3e76517838a37d$export$5886acafe29a08d1)((0, $6a3e76517838a37d$export$70a631ae991b5e76), "transition");
var $aa3cbaed0bd0dc00$var$CSS_TRANSFORM_VENDOR = (0, $6a3e76517838a37d$export$5886acafe29a08d1)((0, $6a3e76517838a37d$export$7b4286b1e4a23439), "transform");
// eslint-disable-next-line
var $aa3cbaed0bd0dc00$var$gCssText = "position:absolute;display:block;border-style:solid;white-space:nowrap;z-index:9999999;" + ((0, $de9e931273a116c1$export$2e2bcd8739ae039).transform3dSupported ? "will-change:transform;" : "");
function $aa3cbaed0bd0dc00$var$mirrorPos(pos) {
    pos = pos === "left" ? "right" : pos === "right" ? "left" : pos === "top" ? "bottom" : "top";
    return pos;
}
function $aa3cbaed0bd0dc00$var$assembleArrow(tooltipModel, borderColor, arrowPosition) {
    if (!(0, $e44eb14c4271d0f9$export$844ec244b1367d54)(arrowPosition) || arrowPosition === "inside") return "";
    var backgroundColor = tooltipModel.get("backgroundColor");
    var borderWidth = tooltipModel.get("borderWidth");
    borderColor = (0, $1594f6dc0ce39685$export$cda04d03233e5555)(borderColor);
    var arrowPos = $aa3cbaed0bd0dc00$var$mirrorPos(arrowPosition);
    var arrowSize = Math.max(Math.round(borderWidth) * 1.5, 6);
    var positionStyle = "";
    var transformStyle = $aa3cbaed0bd0dc00$var$CSS_TRANSFORM_VENDOR + ":";
    var rotateDeg;
    if ((0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)([
        "left",
        "right"
    ], arrowPos) > -1) {
        positionStyle += "top:50%";
        transformStyle += "translateY(-50%) rotate(" + (rotateDeg = arrowPos === "left" ? -225 : -45) + "deg)";
    } else {
        positionStyle += "left:50%";
        transformStyle += "translateX(-50%) rotate(" + (rotateDeg = arrowPos === "top" ? 225 : 45) + "deg)";
    }
    var rotateRadian = rotateDeg * Math.PI / 180;
    var arrowWH = arrowSize + borderWidth;
    var rotatedWH = arrowWH * Math.abs(Math.cos(rotateRadian)) + arrowWH * Math.abs(Math.sin(rotateRadian));
    var arrowOffset = Math.round(((rotatedWH - Math.SQRT2 * borderWidth) / 2 + Math.SQRT2 * borderWidth - (rotatedWH - arrowWH) / 2) * 100) / 100;
    positionStyle += ";" + arrowPos + ":-" + arrowOffset + "px";
    var borderStyle = borderColor + " solid " + borderWidth + "px;";
    var styleCss = [
        "position:absolute;width:" + arrowSize + "px;height:" + arrowSize + "px;z-index:-1;",
        positionStyle + ";" + transformStyle + ";",
        "border-bottom:" + borderStyle,
        "border-right:" + borderStyle,
        "background-color:" + backgroundColor + ";"
    ];
    return '<div style="' + styleCss.join("") + '"></div>';
}
function $aa3cbaed0bd0dc00$var$assembleTransition(duration, onlyFade) {
    var transitionCurve = "cubic-bezier(0.23,1,0.32,1)";
    var transitionOption = " " + duration / 2 + "s " + transitionCurve;
    var transitionText = "opacity" + transitionOption + ",visibility" + transitionOption;
    if (!onlyFade) {
        transitionOption = " " + duration + "s " + transitionCurve;
        transitionText += (0, $de9e931273a116c1$export$2e2bcd8739ae039).transformSupported ? "," + $aa3cbaed0bd0dc00$var$CSS_TRANSFORM_VENDOR + transitionOption : ",left" + transitionOption + ",top" + transitionOption;
    }
    return $aa3cbaed0bd0dc00$var$CSS_TRANSITION_VENDOR + ":" + transitionText;
}
function $aa3cbaed0bd0dc00$var$assembleTransform(x, y, toString) {
    // If using float on style, the final width of the dom might
    // keep changing slightly while mouse move. So `toFixed(0)` them.
    var x0 = x.toFixed(0) + "px";
    var y0 = y.toFixed(0) + "px";
    // not support transform, use `left` and `top` instead.
    if (!(0, $de9e931273a116c1$export$2e2bcd8739ae039).transformSupported) return toString ? "top:" + y0 + ";left:" + x0 + ";" : [
        [
            "top",
            y0
        ],
        [
            "left",
            x0
        ]
    ];
    // support transform
    var is3d = (0, $de9e931273a116c1$export$2e2bcd8739ae039).transform3dSupported;
    var translate = "translate" + (is3d ? "3d" : "") + "(" + x0 + "," + y0 + (is3d ? ",0" : "") + ")";
    return toString ? "top:0;left:0;" + $aa3cbaed0bd0dc00$var$CSS_TRANSFORM_VENDOR + ":" + translate + ";" : [
        [
            "top",
            0
        ],
        [
            "left",
            0
        ],
        [
            (0, $6a3e76517838a37d$export$7b4286b1e4a23439),
            translate
        ]
    ];
}
/**
 * @param {Object} textStyle
 * @return {string}
 * @inner
 */ function $aa3cbaed0bd0dc00$var$assembleFont(textStyleModel) {
    var cssText = [];
    var fontSize = textStyleModel.get("fontSize");
    var color = textStyleModel.getTextColor();
    color && cssText.push("color:" + color);
    cssText.push("font:" + textStyleModel.getFont());
    fontSize && cssText.push("line-height:" + Math.round(fontSize * 3 / 2) + "px");
    var shadowColor = textStyleModel.get("textShadowColor");
    var shadowBlur = textStyleModel.get("textShadowBlur") || 0;
    var shadowOffsetX = textStyleModel.get("textShadowOffsetX") || 0;
    var shadowOffsetY = textStyleModel.get("textShadowOffsetY") || 0;
    shadowColor && shadowBlur && cssText.push("text-shadow:" + shadowOffsetX + "px " + shadowOffsetY + "px " + shadowBlur + "px " + shadowColor);
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)([
        "decoration",
        "align"
    ], function(name) {
        var val = textStyleModel.get(name);
        val && cssText.push("text-" + name + ":" + val);
    });
    return cssText.join(";");
}
function $aa3cbaed0bd0dc00$var$assembleCssText(tooltipModel, enableTransition, onlyFade) {
    var cssText = [];
    var transitionDuration = tooltipModel.get("transitionDuration");
    var backgroundColor = tooltipModel.get("backgroundColor");
    var shadowBlur = tooltipModel.get("shadowBlur");
    var shadowColor = tooltipModel.get("shadowColor");
    var shadowOffsetX = tooltipModel.get("shadowOffsetX");
    var shadowOffsetY = tooltipModel.get("shadowOffsetY");
    var textStyleModel = tooltipModel.getModel("textStyle");
    var padding = (0, $5045e51428120a21$export$3048212c802df496)(tooltipModel, "html");
    var boxShadow = shadowOffsetX + "px " + shadowOffsetY + "px " + shadowBlur + "px " + shadowColor;
    cssText.push("box-shadow:" + boxShadow);
    // Animation transition. Do not animate when transitionDuration is 0.
    enableTransition && transitionDuration && cssText.push($aa3cbaed0bd0dc00$var$assembleTransition(transitionDuration, onlyFade));
    if (backgroundColor) cssText.push("background-color:" + backgroundColor);
    // Border style
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)([
        "width",
        "color",
        "radius"
    ], function(name) {
        var borderName = "border-" + name;
        var camelCase = (0, $1594f6dc0ce39685$export$86f54f62aa7a7514)(borderName);
        var val = tooltipModel.get(camelCase);
        val != null && cssText.push(borderName + ":" + val + (name === "color" ? "" : "px"));
    });
    // Text style
    cssText.push($aa3cbaed0bd0dc00$var$assembleFont(textStyleModel));
    // Padding
    if (padding != null) cssText.push("padding:" + (0, $1594f6dc0ce39685$export$f3a38102c49f4268)(padding).join("px ") + "px");
    return cssText.join(";") + ";";
}
// If not able to make, do not modify the input `out`.
function $aa3cbaed0bd0dc00$var$makeStyleCoord(out, zr, container, zrX, zrY) {
    var zrPainter = zr && zr.painter;
    if (container) {
        var zrViewportRoot = zrPainter && zrPainter.getViewportRoot();
        if (zrViewportRoot) // Some APPs might use scale on body, so we support CSS transform here.
        (0, $e8bddf605818feb2$export$8c5c02e118307e20)(out, zrViewportRoot, container, zrX, zrY);
    } else {
        out[0] = zrX;
        out[1] = zrY;
        // xy should be based on canvas root. But tooltipContent is
        // the sibling of canvas root. So padding of ec container
        // should be considered here.
        var viewportRootOffset = zrPainter && zrPainter.getViewportRootOffset();
        if (viewportRootOffset) {
            out[0] += viewportRootOffset.offsetLeft;
            out[1] += viewportRootOffset.offsetTop;
        }
    }
    out[2] = out[0] / zr.getWidth();
    out[3] = out[1] / zr.getHeight();
}
var $aa3cbaed0bd0dc00$var$TooltipHTMLContent = /** @class */ function() {
    function TooltipHTMLContent(api, opt) {
        this._show = false;
        this._styleCoord = [
            0,
            0,
            0,
            0
        ];
        this._enterable = true;
        this._alwaysShowContent = false;
        this._firstShow = true;
        this._longHide = true;
        if ((0, $de9e931273a116c1$export$2e2bcd8739ae039).wxa) return null;
        var el = document.createElement("div");
        // TODO: TYPE
        el.domBelongToZr = true;
        this.el = el;
        var zr = this._zr = api.getZr();
        var appendTo = opt.appendTo;
        var container = appendTo && ((0, $e44eb14c4271d0f9$export$844ec244b1367d54)(appendTo) ? document.querySelector(appendTo) : (0, $e44eb14c4271d0f9$export$9f57505b7bd8dae)(appendTo) ? appendTo : (0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(appendTo) && appendTo(api.getDom()));
        $aa3cbaed0bd0dc00$var$makeStyleCoord(this._styleCoord, zr, container, api.getWidth() / 2, api.getHeight() / 2);
        (container || api.getDom()).appendChild(el);
        this._api = api;
        this._container = container;
        // FIXME
        // Is it needed to trigger zr event manually if
        // the browser do not support `pointer-events: none`.
        var self = this;
        el.onmouseenter = function() {
            // clear the timeout in hideLater and keep showing tooltip
            if (self._enterable) {
                clearTimeout(self._hideTimeout);
                self._show = true;
            }
            self._inContent = true;
        };
        el.onmousemove = function(e) {
            e = e || window.event;
            if (!self._enterable) {
                // `pointer-events: none` is set to tooltip content div
                // if `enterable` is set as `false`, and `el.onmousemove`
                // can not be triggered. But in browser that do not
                // support `pointer-events`, we need to do this:
                // Try trigger zrender event to avoid mouse
                // in and out shape too frequently
                var handler = zr.handler;
                var zrViewportRoot = zr.painter.getViewportRoot();
                (0, $81f76356654e394a$export$40fadb093aebad71)(zrViewportRoot, e, true);
                handler.dispatch("mousemove", e);
            }
        };
        el.onmouseleave = function() {
            // set `_inContent` to `false` before `hideLater`
            self._inContent = false;
            if (self._enterable) {
                if (self._show) self.hideLater(self._hideDelay);
            }
        };
    }
    /**
   * Update when tooltip is rendered
   */ TooltipHTMLContent.prototype.update = function(tooltipModel) {
        // FIXME
        // Move this logic to ec main?
        if (!this._container) {
            var container = this._api.getDom();
            var position = (0, $6a3e76517838a37d$export$3735103072e4a80)(container, "position");
            var domStyle = container.style;
            if (domStyle.position !== "absolute" && position !== "absolute") domStyle.position = "relative";
        }
        // move tooltip if chart resized
        var alwaysShowContent = tooltipModel.get("alwaysShowContent");
        alwaysShowContent && this._moveIfResized();
        // update alwaysShowContent
        this._alwaysShowContent = alwaysShowContent;
        // update className
        this.el.className = tooltipModel.get("className") || "";
    // Hide the tooltip
    // PENDING
    // this.hide();
    };
    TooltipHTMLContent.prototype.show = function(tooltipModel, nearPointColor) {
        clearTimeout(this._hideTimeout);
        clearTimeout(this._longHideTimeout);
        var el = this.el;
        var style = el.style;
        var styleCoord = this._styleCoord;
        if (!el.innerHTML) style.display = "none";
        else style.cssText = $aa3cbaed0bd0dc00$var$gCssText + $aa3cbaed0bd0dc00$var$assembleCssText(tooltipModel, !this._firstShow, this._longHide) + $aa3cbaed0bd0dc00$var$assembleTransform(styleCoord[0], styleCoord[1], true) + ("border-color:" + (0, $1594f6dc0ce39685$export$cda04d03233e5555)(nearPointColor) + ";") + (tooltipModel.get("extraCssText") || "") + (";pointer-events:" + (this._enterable ? "auto" : "none"));
        this._show = true;
        this._firstShow = false;
        this._longHide = false;
    };
    TooltipHTMLContent.prototype.setContent = function(content, markers, tooltipModel, borderColor, arrowPosition) {
        var el = this.el;
        if (content == null) {
            el.innerHTML = "";
            return;
        }
        var arrow = "";
        if ((0, $e44eb14c4271d0f9$export$844ec244b1367d54)(arrowPosition) && tooltipModel.get("trigger") === "item" && !(0, $6a3e76517838a37d$export$a309528050824ba4)(tooltipModel)) arrow = $aa3cbaed0bd0dc00$var$assembleArrow(tooltipModel, borderColor, arrowPosition);
        if ((0, $e44eb14c4271d0f9$export$844ec244b1367d54)(content)) el.innerHTML = content + arrow;
        else if (content) {
            // Clear previous
            el.innerHTML = "";
            if (!(0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(content)) content = [
                content
            ];
            for(var i = 0; i < content.length; i++)if ((0, $e44eb14c4271d0f9$export$9f57505b7bd8dae)(content[i]) && content[i].parentNode !== el) el.appendChild(content[i]);
            // no arrow if empty
            if (arrow && el.childNodes.length) {
                // no need to create a new parent element, but it's not supported by IE 10 and older.
                // const arrowEl = document.createRange().createContextualFragment(arrow);
                var arrowEl = document.createElement("div");
                arrowEl.innerHTML = arrow;
                el.appendChild(arrowEl);
            }
        }
    };
    TooltipHTMLContent.prototype.setEnterable = function(enterable) {
        this._enterable = enterable;
    };
    TooltipHTMLContent.prototype.getSize = function() {
        var el = this.el;
        return [
            el.offsetWidth,
            el.offsetHeight
        ];
    };
    TooltipHTMLContent.prototype.moveTo = function(zrX, zrY) {
        var styleCoord = this._styleCoord;
        $aa3cbaed0bd0dc00$var$makeStyleCoord(styleCoord, this._zr, this._container, zrX, zrY);
        if (styleCoord[0] != null && styleCoord[1] != null) {
            var style_1 = this.el.style;
            var transforms = $aa3cbaed0bd0dc00$var$assembleTransform(styleCoord[0], styleCoord[1]);
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(transforms, function(transform) {
                style_1[transform[0]] = transform[1];
            });
        }
    };
    /**
   * when `alwaysShowContent` is true,
   * move the tooltip after chart resized
   */ TooltipHTMLContent.prototype._moveIfResized = function() {
        // The ratio of left to width
        var ratioX = this._styleCoord[2];
        // The ratio of top to height
        var ratioY = this._styleCoord[3];
        this.moveTo(ratioX * this._zr.getWidth(), ratioY * this._zr.getHeight());
    };
    TooltipHTMLContent.prototype.hide = function() {
        var _this = this;
        var style = this.el.style;
        style.visibility = "hidden";
        style.opacity = "0";
        (0, $de9e931273a116c1$export$2e2bcd8739ae039).transform3dSupported && (style.willChange = "");
        this._show = false;
        this._longHideTimeout = setTimeout(function() {
            return _this._longHide = true;
        }, 500);
    };
    TooltipHTMLContent.prototype.hideLater = function(time) {
        if (this._show && !(this._inContent && this._enterable) && !this._alwaysShowContent) {
            if (time) {
                this._hideDelay = time;
                // Set show false to avoid invoke hideLater multiple times
                this._show = false;
                this._hideTimeout = setTimeout((0, $e44eb14c4271d0f9$export$2385a24977818dd0)(this.hide, this), time);
            } else this.hide();
        }
    };
    TooltipHTMLContent.prototype.isShow = function() {
        return this._show;
    };
    TooltipHTMLContent.prototype.dispose = function() {
        clearTimeout(this._hideTimeout);
        clearTimeout(this._longHideTimeout);
        var parentNode = this.el.parentNode;
        parentNode && parentNode.removeChild(this.el);
        this.el = this._container = null;
    };
    return TooltipHTMLContent;
}();
var $aa3cbaed0bd0dc00$export$2e2bcd8739ae039 = $aa3cbaed0bd0dc00$var$TooltipHTMLContent;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 



var $00796d7a9cc3e10f$var$TooltipRichContent = /** @class */ function() {
    function TooltipRichContent(api) {
        this._show = false;
        this._styleCoord = [
            0,
            0,
            0,
            0
        ];
        this._alwaysShowContent = false;
        this._enterable = true;
        this._zr = api.getZr();
        $00796d7a9cc3e10f$var$makeStyleCoord(this._styleCoord, this._zr, api.getWidth() / 2, api.getHeight() / 2);
    }
    /**
   * Update when tooltip is rendered
   */ TooltipRichContent.prototype.update = function(tooltipModel) {
        var alwaysShowContent = tooltipModel.get("alwaysShowContent");
        alwaysShowContent && this._moveIfResized();
        // update alwaysShowContent
        this._alwaysShowContent = alwaysShowContent;
    };
    TooltipRichContent.prototype.show = function() {
        if (this._hideTimeout) clearTimeout(this._hideTimeout);
        this.el.show();
        this._show = true;
    };
    /**
   * Set tooltip content
   */ TooltipRichContent.prototype.setContent = function(content, markupStyleCreator, tooltipModel, borderColor, arrowPosition) {
        var _this = this;
        if ($e44eb14c4271d0f9$export$a6cdc56e425d0d0a(content)) (0, $4796c55e8b767685$export$8bf7aba4a9e09055)("Passing DOM nodes as content is not supported in richText tooltip!");
        if (this.el) this._zr.remove(this.el);
        var textStyleModel = tooltipModel.getModel("textStyle");
        this.el = new (0, $6d12d9a137e168c2$export$2e2bcd8739ae039)({
            style: {
                rich: markupStyleCreator.richTextStyles,
                text: content,
                lineHeight: 22,
                borderWidth: 1,
                borderColor: borderColor,
                textShadowColor: textStyleModel.get("textShadowColor"),
                fill: tooltipModel.get([
                    "textStyle",
                    "color"
                ]),
                padding: (0, $5045e51428120a21$export$3048212c802df496)(tooltipModel, "richText"),
                verticalAlign: "top",
                align: "left"
            },
            z: tooltipModel.get("z")
        });
        $e44eb14c4271d0f9$export$79b2f7037acddd43([
            "backgroundColor",
            "borderRadius",
            "shadowColor",
            "shadowBlur",
            "shadowOffsetX",
            "shadowOffsetY"
        ], function(propName) {
            _this.el.style[propName] = tooltipModel.get(propName);
        });
        $e44eb14c4271d0f9$export$79b2f7037acddd43([
            "textShadowBlur",
            "textShadowOffsetX",
            "textShadowOffsetY"
        ], function(propName) {
            _this.el.style[propName] = textStyleModel.get(propName) || 0;
        });
        this._zr.add(this.el);
        var self = this;
        this.el.on("mouseover", function() {
            // clear the timeout in hideLater and keep showing tooltip
            if (self._enterable) {
                clearTimeout(self._hideTimeout);
                self._show = true;
            }
            self._inContent = true;
        });
        this.el.on("mouseout", function() {
            if (self._enterable) {
                if (self._show) self.hideLater(self._hideDelay);
            }
            self._inContent = false;
        });
    };
    TooltipRichContent.prototype.setEnterable = function(enterable) {
        this._enterable = enterable;
    };
    TooltipRichContent.prototype.getSize = function() {
        var el = this.el;
        var bounding = this.el.getBoundingRect();
        // bounding rect does not include shadow. For renderMode richText,
        // if overflow, it will be cut. So calculate them accurately.
        var shadowOuterSize = $00796d7a9cc3e10f$var$calcShadowOuterSize(el.style);
        return [
            bounding.width + shadowOuterSize.left + shadowOuterSize.right,
            bounding.height + shadowOuterSize.top + shadowOuterSize.bottom
        ];
    };
    TooltipRichContent.prototype.moveTo = function(x, y) {
        var el = this.el;
        if (el) {
            var styleCoord = this._styleCoord;
            $00796d7a9cc3e10f$var$makeStyleCoord(styleCoord, this._zr, x, y);
            x = styleCoord[0];
            y = styleCoord[1];
            var style = el.style;
            var borderWidth = $00796d7a9cc3e10f$var$mathMaxWith0(style.borderWidth || 0);
            var shadowOuterSize = $00796d7a9cc3e10f$var$calcShadowOuterSize(style);
            // rich text x, y do not include border.
            el.x = x + borderWidth + shadowOuterSize.left;
            el.y = y + borderWidth + shadowOuterSize.top;
            el.markRedraw();
        }
    };
    /**
   * when `alwaysShowContent` is true,
   * move the tooltip after chart resized
   */ TooltipRichContent.prototype._moveIfResized = function() {
        // The ratio of left to width
        var ratioX = this._styleCoord[2];
        // The ratio of top to height
        var ratioY = this._styleCoord[3];
        this.moveTo(ratioX * this._zr.getWidth(), ratioY * this._zr.getHeight());
    };
    TooltipRichContent.prototype.hide = function() {
        if (this.el) this.el.hide();
        this._show = false;
    };
    TooltipRichContent.prototype.hideLater = function(time) {
        if (this._show && !(this._inContent && this._enterable) && !this._alwaysShowContent) {
            if (time) {
                this._hideDelay = time;
                // Set show false to avoid invoke hideLater multiple times
                this._show = false;
                this._hideTimeout = setTimeout($e44eb14c4271d0f9$export$2385a24977818dd0(this.hide, this), time);
            } else this.hide();
        }
    };
    TooltipRichContent.prototype.isShow = function() {
        return this._show;
    };
    TooltipRichContent.prototype.dispose = function() {
        this._zr.remove(this.el);
    };
    return TooltipRichContent;
}();
function $00796d7a9cc3e10f$var$mathMaxWith0(val) {
    return Math.max(0, val);
}
function $00796d7a9cc3e10f$var$calcShadowOuterSize(style) {
    var shadowBlur = $00796d7a9cc3e10f$var$mathMaxWith0(style.shadowBlur || 0);
    var shadowOffsetX = $00796d7a9cc3e10f$var$mathMaxWith0(style.shadowOffsetX || 0);
    var shadowOffsetY = $00796d7a9cc3e10f$var$mathMaxWith0(style.shadowOffsetY || 0);
    return {
        left: $00796d7a9cc3e10f$var$mathMaxWith0(shadowBlur - shadowOffsetX),
        right: $00796d7a9cc3e10f$var$mathMaxWith0(shadowBlur + shadowOffsetX),
        top: $00796d7a9cc3e10f$var$mathMaxWith0(shadowBlur - shadowOffsetY),
        bottom: $00796d7a9cc3e10f$var$mathMaxWith0(shadowBlur + shadowOffsetY)
    };
}
function $00796d7a9cc3e10f$var$makeStyleCoord(out, zr, zrX, zrY) {
    out[0] = zrX;
    out[1] = zrY;
    out[2] = out[0] / zr.getWidth();
    out[3] = out[1] / zr.getHeight();
}
var $00796d7a9cc3e10f$export$2e2bcd8739ae039 = $00796d7a9cc3e10f$var$TooltipRichContent;




















var $1acff2907fa57bb6$var$proxyRect = new (0, $538026eba361a92a$export$2e2bcd8739ae039)({
    shape: {
        x: -1,
        y: -1,
        width: 2,
        height: 2
    }
});
var $1acff2907fa57bb6$var$TooltipView = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(TooltipView, _super);
    function TooltipView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = TooltipView.type;
        return _this;
    }
    TooltipView.prototype.init = function(ecModel, api) {
        if ((0, $de9e931273a116c1$export$2e2bcd8739ae039).node || !api.getDom()) return;
        var tooltipModel = ecModel.getComponent("tooltip");
        var renderMode = this._renderMode = (0, $8917c02fd8256c67$export$cc0a17a5d27b4e17)(tooltipModel.get("renderMode"));
        this._tooltipContent = renderMode === "richText" ? new (0, $00796d7a9cc3e10f$export$2e2bcd8739ae039)(api) : new (0, $aa3cbaed0bd0dc00$export$2e2bcd8739ae039)(api, {
            appendTo: tooltipModel.get("appendToBody", true) ? "body" : tooltipModel.get("appendTo", true)
        });
    };
    TooltipView.prototype.render = function(tooltipModel, ecModel, api) {
        if ((0, $de9e931273a116c1$export$2e2bcd8739ae039).node || !api.getDom()) return;
        // Reset
        this.group.removeAll();
        this._tooltipModel = tooltipModel;
        this._ecModel = ecModel;
        this._api = api;
        var tooltipContent = this._tooltipContent;
        tooltipContent.update(tooltipModel);
        tooltipContent.setEnterable(tooltipModel.get("enterable"));
        this._initGlobalListener();
        this._keepShow();
        // PENDING
        // `mousemove` event will be triggered very frequently when the mouse moves fast,
        // which causes that the `updatePosition` function was also called frequently.
        // In Chrome with devtools open and Firefox, tooltip looks laggy and shakes. See #14695 #16101
        // To avoid frequent triggering,
        // consider throttling it in 50ms when transition is enabled
        if (this._renderMode !== "richText" && tooltipModel.get("transitionDuration")) (0, $1eadeed02cc6d4a8$export$958e3e1a02eac4b6)(this, "_updatePosition", 50, "fixRate");
        else (0, $1eadeed02cc6d4a8$export$42ffd38884aecdac)(this, "_updatePosition");
    };
    TooltipView.prototype._initGlobalListener = function() {
        var tooltipModel = this._tooltipModel;
        var triggerOn = tooltipModel.get("triggerOn");
        $60456cb347f49a27$export$6503ec6e8aabbaf("itemTooltip", this._api, (0, $e44eb14c4271d0f9$export$2385a24977818dd0)(function(currTrigger, e, dispatchAction) {
            // If 'none', it is not controlled by mouse totally.
            if (triggerOn !== "none") {
                if (triggerOn.indexOf(currTrigger) >= 0) this._tryShow(e, dispatchAction);
                else if (currTrigger === "leave") this._hide(dispatchAction);
            }
        }, this));
    };
    TooltipView.prototype._keepShow = function() {
        var tooltipModel = this._tooltipModel;
        var ecModel = this._ecModel;
        var api = this._api;
        var triggerOn = tooltipModel.get("triggerOn");
        // Try to keep the tooltip show when refreshing
        if (this._lastX != null && this._lastY != null && triggerOn !== "none" && triggerOn !== "click") {
            var self_1 = this;
            clearTimeout(this._refreshUpdateTimeout);
            this._refreshUpdateTimeout = setTimeout(function() {
                // Show tip next tick after other charts are rendered
                // In case highlight action has wrong result
                // FIXME
                !api.isDisposed() && self_1.manuallyShowTip(tooltipModel, ecModel, api, {
                    x: self_1._lastX,
                    y: self_1._lastY,
                    dataByCoordSys: self_1._lastDataByCoordSys
                });
            });
        }
    };
    /**
   * Show tip manually by
   * dispatchAction({
   *     type: 'showTip',
   *     x: 10,
   *     y: 10
   * });
   * Or
   * dispatchAction({
   *      type: 'showTip',
   *      seriesIndex: 0,
   *      dataIndex or dataIndexInside or name
   * });
   *
   *  TODO Batch
   */ TooltipView.prototype.manuallyShowTip = function(tooltipModel, ecModel, api, payload) {
        if (payload.from === this.uid || (0, $de9e931273a116c1$export$2e2bcd8739ae039).node || !api.getDom()) return;
        var dispatchAction = $1acff2907fa57bb6$var$makeDispatchAction(payload, api);
        // Reset ticket
        this._ticket = "";
        // When triggered from axisPointer.
        var dataByCoordSys = payload.dataByCoordSys;
        var cmptRef = $1acff2907fa57bb6$var$findComponentReference(payload, ecModel, api);
        if (cmptRef) {
            var rect = cmptRef.el.getBoundingRect().clone();
            rect.applyTransform(cmptRef.el.transform);
            this._tryShow({
                offsetX: rect.x + rect.width / 2,
                offsetY: rect.y + rect.height / 2,
                target: cmptRef.el,
                position: payload.position,
                // When manully trigger, the mouse is not on the el, so we'd better to
                // position tooltip on the bottom of the el and display arrow is possible.
                positionDefault: "bottom"
            }, dispatchAction);
        } else if (payload.tooltip && payload.x != null && payload.y != null) {
            var el = $1acff2907fa57bb6$var$proxyRect;
            el.x = payload.x;
            el.y = payload.y;
            el.update();
            (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(el).tooltipConfig = {
                name: null,
                option: payload.tooltip
            };
            // Manually show tooltip while view is not using zrender elements.
            this._tryShow({
                offsetX: payload.x,
                offsetY: payload.y,
                target: el
            }, dispatchAction);
        } else if (dataByCoordSys) this._tryShow({
            offsetX: payload.x,
            offsetY: payload.y,
            position: payload.position,
            dataByCoordSys: dataByCoordSys,
            tooltipOption: payload.tooltipOption
        }, dispatchAction);
        else if (payload.seriesIndex != null) {
            if (this._manuallyAxisShowTip(tooltipModel, ecModel, api, payload)) return;
            var pointInfo = (0, $77c2379cfeed536f$export$2e2bcd8739ae039)(payload, ecModel);
            var cx = pointInfo.point[0];
            var cy = pointInfo.point[1];
            if (cx != null && cy != null) this._tryShow({
                offsetX: cx,
                offsetY: cy,
                target: pointInfo.el,
                position: payload.position,
                // When manully trigger, the mouse is not on the el, so we'd better to
                // position tooltip on the bottom of the el and display arrow is possible.
                positionDefault: "bottom"
            }, dispatchAction);
        } else if (payload.x != null && payload.y != null) {
            // FIXME
            // should wrap dispatchAction like `axisPointer/globalListener` ?
            api.dispatchAction({
                type: "updateAxisPointer",
                x: payload.x,
                y: payload.y
            });
            this._tryShow({
                offsetX: payload.x,
                offsetY: payload.y,
                position: payload.position,
                target: api.getZr().findHover(payload.x, payload.y).target
            }, dispatchAction);
        }
    };
    TooltipView.prototype.manuallyHideTip = function(tooltipModel, ecModel, api, payload) {
        var tooltipContent = this._tooltipContent;
        if (this._tooltipModel) tooltipContent.hideLater(this._tooltipModel.get("hideDelay"));
        this._lastX = this._lastY = this._lastDataByCoordSys = null;
        if (payload.from !== this.uid) this._hide($1acff2907fa57bb6$var$makeDispatchAction(payload, api));
    };
    // Be compatible with previous design, that is, when tooltip.type is 'axis' and
    // dispatchAction 'showTip' with seriesIndex and dataIndex will trigger axis pointer
    // and tooltip.
    TooltipView.prototype._manuallyAxisShowTip = function(tooltipModel, ecModel, api, payload) {
        var seriesIndex = payload.seriesIndex;
        var dataIndex = payload.dataIndex;
        // @ts-ignore
        var coordSysAxesInfo = ecModel.getComponent("axisPointer").coordSysAxesInfo;
        if (seriesIndex == null || dataIndex == null || coordSysAxesInfo == null) return;
        var seriesModel = ecModel.getSeriesByIndex(seriesIndex);
        if (!seriesModel) return;
        var data = seriesModel.getData();
        var tooltipCascadedModel = $1acff2907fa57bb6$var$buildTooltipModel([
            data.getItemModel(dataIndex),
            seriesModel,
            (seriesModel.coordinateSystem || {}).model
        ], this._tooltipModel);
        if (tooltipCascadedModel.get("trigger") !== "axis") return;
        api.dispatchAction({
            type: "updateAxisPointer",
            seriesIndex: seriesIndex,
            dataIndex: dataIndex,
            position: payload.position
        });
        return true;
    };
    TooltipView.prototype._tryShow = function(e, dispatchAction) {
        var el = e.target;
        var tooltipModel = this._tooltipModel;
        if (!tooltipModel) return;
        // Save mouse x, mouse y. So we can try to keep showing the tip if chart is refreshed
        this._lastX = e.offsetX;
        this._lastY = e.offsetY;
        var dataByCoordSys = e.dataByCoordSys;
        if (dataByCoordSys && dataByCoordSys.length) this._showAxisTooltip(dataByCoordSys, e);
        else if (el) {
            var ecData = (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(el);
            if (ecData.ssrType === "legend") // Don't trigger tooltip for legend tooltip item
            return;
            this._lastDataByCoordSys = null;
            var seriesDispatcher_1;
            var cmptDispatcher_1;
            (0, $02d5aa029ba8870d$export$8a4fca9e04eb4df6)(el, function(target) {
                // Always show item tooltip if mouse is on the element with dataIndex
                if ((0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(target).dataIndex != null) {
                    seriesDispatcher_1 = target;
                    return true;
                }
                // Tooltip provided directly. Like legend.
                if ((0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(target).tooltipConfig != null) {
                    cmptDispatcher_1 = target;
                    return true;
                }
            }, true);
            if (seriesDispatcher_1) this._showSeriesItemTooltip(e, seriesDispatcher_1, dispatchAction);
            else if (cmptDispatcher_1) this._showComponentItemTooltip(e, cmptDispatcher_1, dispatchAction);
            else this._hide(dispatchAction);
        } else {
            this._lastDataByCoordSys = null;
            this._hide(dispatchAction);
        }
    };
    TooltipView.prototype._showOrMove = function(tooltipModel, cb) {
        // showDelay is used in this case: tooltip.enterable is set
        // as true. User intent to move mouse into tooltip and click
        // something. `showDelay` makes it easier to enter the content
        // but tooltip do not move immediately.
        var delay = tooltipModel.get("showDelay");
        cb = (0, $e44eb14c4271d0f9$export$2385a24977818dd0)(cb, this);
        clearTimeout(this._showTimout);
        delay > 0 ? this._showTimout = setTimeout(cb, delay) : cb();
    };
    TooltipView.prototype._showAxisTooltip = function(dataByCoordSys, e) {
        var ecModel = this._ecModel;
        var globalTooltipModel = this._tooltipModel;
        var point = [
            e.offsetX,
            e.offsetY
        ];
        var singleTooltipModel = $1acff2907fa57bb6$var$buildTooltipModel([
            e.tooltipOption
        ], globalTooltipModel);
        var renderMode = this._renderMode;
        var cbParamsList = [];
        var articleMarkup = (0, $5045e51428120a21$export$cf63b23ce77d1921)("section", {
            blocks: [],
            noHeader: true
        });
        // Only for legacy: `Serise['formatTooltip']` returns a string.
        var markupTextArrLegacy = [];
        var markupStyleCreator = new (0, $5045e51428120a21$export$2fba3afbcdcf3e18)();
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(dataByCoordSys, function(itemCoordSys) {
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(itemCoordSys.dataByAxis, function(axisItem) {
                var axisModel = ecModel.getComponent(axisItem.axisDim + "Axis", axisItem.axisIndex);
                var axisValue = axisItem.value;
                if (!axisModel || axisValue == null) return;
                var axisValueLabel = $c8027138cd31e1e6$export$7cffee0f9aed39d0(axisValue, axisModel.axis, ecModel, axisItem.seriesDataIndices, axisItem.valueLabelOpt);
                var axisSectionMarkup = (0, $5045e51428120a21$export$cf63b23ce77d1921)("section", {
                    header: axisValueLabel,
                    noHeader: !(0, $e44eb14c4271d0f9$export$87c2784dc9fc4ab)(axisValueLabel),
                    sortBlocks: true,
                    blocks: []
                });
                articleMarkup.blocks.push(axisSectionMarkup);
                (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(axisItem.seriesDataIndices, function(idxItem) {
                    var series = ecModel.getSeriesByIndex(idxItem.seriesIndex);
                    var dataIndex = idxItem.dataIndexInside;
                    var cbParams = series.getDataParams(dataIndex);
                    // Can't find data.
                    if (cbParams.dataIndex < 0) return;
                    cbParams.axisDim = axisItem.axisDim;
                    cbParams.axisIndex = axisItem.axisIndex;
                    cbParams.axisType = axisItem.axisType;
                    cbParams.axisId = axisItem.axisId;
                    cbParams.axisValue = $de26deaeb9c20c8b$export$a5a32f324c1fa457(axisModel.axis, {
                        value: axisValue
                    });
                    cbParams.axisValueLabel = axisValueLabel;
                    // Pre-create marker style for makers. Users can assemble richText
                    // text in `formatter` callback and use those markers style.
                    cbParams.marker = markupStyleCreator.makeTooltipMarker("item", (0, $1594f6dc0ce39685$export$cda04d03233e5555)(cbParams.color), renderMode);
                    var seriesTooltipResult = (0, $a2cdd1973149e0c6$export$2d16fa82a50c4741)(series.formatTooltip(dataIndex, true, null));
                    var frag = seriesTooltipResult.frag;
                    if (frag) {
                        var valueFormatter = $1acff2907fa57bb6$var$buildTooltipModel([
                            series
                        ], globalTooltipModel).get("valueFormatter");
                        axisSectionMarkup.blocks.push(valueFormatter ? (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({
                            valueFormatter: valueFormatter
                        }, frag) : frag);
                    }
                    if (seriesTooltipResult.text) markupTextArrLegacy.push(seriesTooltipResult.text);
                    cbParamsList.push(cbParams);
                });
            });
        });
        // In most cases, the second axis is displays upper on the first one.
        // So we reverse it to look better.
        articleMarkup.blocks.reverse();
        markupTextArrLegacy.reverse();
        var positionExpr = e.position;
        var orderMode = singleTooltipModel.get("order");
        var builtMarkupText = (0, $5045e51428120a21$export$6969ffb02c1cb49a)(articleMarkup, markupStyleCreator, renderMode, orderMode, ecModel.get("useUTC"), singleTooltipModel.get("textStyle"));
        builtMarkupText && markupTextArrLegacy.unshift(builtMarkupText);
        var blockBreak = renderMode === "richText" ? "\n\n" : "<br/>";
        var allMarkupText = markupTextArrLegacy.join(blockBreak);
        this._showOrMove(singleTooltipModel, function() {
            if (this._updateContentNotChangedOnAxis(dataByCoordSys, cbParamsList)) this._updatePosition(singleTooltipModel, positionExpr, point[0], point[1], this._tooltipContent, cbParamsList);
            else this._showTooltipContent(singleTooltipModel, allMarkupText, cbParamsList, Math.random() + "", point[0], point[1], positionExpr, null, markupStyleCreator);
        });
    // Do not trigger events here, because this branch only be entered
    // from dispatchAction.
    };
    TooltipView.prototype._showSeriesItemTooltip = function(e, dispatcher, dispatchAction) {
        var ecModel = this._ecModel;
        var ecData = (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(dispatcher);
        // Use dataModel in element if possible
        // Used when mouseover on a element like markPoint or edge
        // In which case, the data is not main data in series.
        var seriesIndex = ecData.seriesIndex;
        var seriesModel = ecModel.getSeriesByIndex(seriesIndex);
        // For example, graph link.
        var dataModel = ecData.dataModel || seriesModel;
        var dataIndex = ecData.dataIndex;
        var dataType = ecData.dataType;
        var data = dataModel.getData(dataType);
        var renderMode = this._renderMode;
        var positionDefault = e.positionDefault;
        var tooltipModel = $1acff2907fa57bb6$var$buildTooltipModel([
            data.getItemModel(dataIndex),
            dataModel,
            seriesModel && (seriesModel.coordinateSystem || {}).model
        ], this._tooltipModel, positionDefault ? {
            position: positionDefault
        } : null);
        var tooltipTrigger = tooltipModel.get("trigger");
        if (tooltipTrigger != null && tooltipTrigger !== "item") return;
        var params = dataModel.getDataParams(dataIndex, dataType);
        var markupStyleCreator = new (0, $5045e51428120a21$export$2fba3afbcdcf3e18)();
        // Pre-create marker style for makers. Users can assemble richText
        // text in `formatter` callback and use those markers style.
        params.marker = markupStyleCreator.makeTooltipMarker("item", (0, $1594f6dc0ce39685$export$cda04d03233e5555)(params.color), renderMode);
        var seriesTooltipResult = (0, $a2cdd1973149e0c6$export$2d16fa82a50c4741)(dataModel.formatTooltip(dataIndex, false, dataType));
        var orderMode = tooltipModel.get("order");
        var valueFormatter = tooltipModel.get("valueFormatter");
        var frag = seriesTooltipResult.frag;
        var markupText = frag ? (0, $5045e51428120a21$export$6969ffb02c1cb49a)(valueFormatter ? (0, $e44eb14c4271d0f9$export$8b58be045bf06082)({
            valueFormatter: valueFormatter
        }, frag) : frag, markupStyleCreator, renderMode, orderMode, ecModel.get("useUTC"), tooltipModel.get("textStyle")) : seriesTooltipResult.text;
        var asyncTicket = "item_" + dataModel.name + "_" + dataIndex;
        this._showOrMove(tooltipModel, function() {
            this._showTooltipContent(tooltipModel, markupText, params, asyncTicket, e.offsetX, e.offsetY, e.position, e.target, markupStyleCreator);
        });
        // FIXME
        // duplicated showtip if manuallyShowTip is called from dispatchAction.
        dispatchAction({
            type: "showTip",
            dataIndexInside: dataIndex,
            dataIndex: data.getRawIndex(dataIndex),
            seriesIndex: seriesIndex,
            from: this.uid
        });
    };
    TooltipView.prototype._showComponentItemTooltip = function(e, el, dispatchAction) {
        var ecData = (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(el);
        var tooltipConfig = ecData.tooltipConfig;
        var tooltipOpt = tooltipConfig.option || {};
        if ((0, $e44eb14c4271d0f9$export$844ec244b1367d54)(tooltipOpt)) {
            var content = tooltipOpt;
            tooltipOpt = {
                content: content,
                // Fixed formatter
                formatter: content
            };
        }
        var tooltipModelCascade = [
            tooltipOpt
        ];
        var cmpt = this._ecModel.getComponent(ecData.componentMainType, ecData.componentIndex);
        if (cmpt) tooltipModelCascade.push(cmpt);
        // In most cases, component tooltip formatter has different params with series tooltip formatter,
        // so that they cannot share the same formatter. Since the global tooltip formatter is used for series
        // by convention, we do not use it as the default formatter for component.
        tooltipModelCascade.push({
            formatter: tooltipOpt.content
        });
        var positionDefault = e.positionDefault;
        var subTooltipModel = $1acff2907fa57bb6$var$buildTooltipModel(tooltipModelCascade, this._tooltipModel, positionDefault ? {
            position: positionDefault
        } : null);
        var defaultHtml = subTooltipModel.get("content");
        var asyncTicket = Math.random() + "";
        // PENDING: this case do not support richText style yet.
        var markupStyleCreator = new (0, $5045e51428120a21$export$2fba3afbcdcf3e18)();
        // Do not check whether `trigger` is 'none' here, because `trigger`
        // only works on coordinate system. In fact, we have not found case
        // that requires setting `trigger` nothing on component yet.
        this._showOrMove(subTooltipModel, function() {
            // Use formatterParams from element defined in component
            // Avoid users modify it.
            var formatterParams = (0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(subTooltipModel.get("formatterParams") || {});
            this._showTooltipContent(subTooltipModel, defaultHtml, formatterParams, asyncTicket, e.offsetX, e.offsetY, e.position, el, markupStyleCreator);
        });
        // If not dispatch showTip, tip may be hide triggered by axis.
        dispatchAction({
            type: "showTip",
            from: this.uid
        });
    };
    TooltipView.prototype._showTooltipContent = function(// Use Model<TooltipOption> insteadof TooltipModel because this model may be from series or other options.
    // Instead of top level tooltip.
    tooltipModel, defaultHtml, params, asyncTicket, x, y, positionExpr, el, markupStyleCreator) {
        // Reset ticket
        this._ticket = "";
        if (!tooltipModel.get("showContent") || !tooltipModel.get("show")) return;
        var tooltipContent = this._tooltipContent;
        tooltipContent.setEnterable(tooltipModel.get("enterable"));
        var formatter = tooltipModel.get("formatter");
        positionExpr = positionExpr || tooltipModel.get("position");
        var html = defaultHtml;
        var nearPoint = this._getNearestPoint([
            x,
            y
        ], params, tooltipModel.get("trigger"), tooltipModel.get("borderColor"));
        var nearPointColor = nearPoint.color;
        if (formatter) {
            if ((0, $e44eb14c4271d0f9$export$844ec244b1367d54)(formatter)) {
                var useUTC = tooltipModel.ecModel.get("useUTC");
                var params0 = (0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(params) ? params[0] : params;
                var isTimeAxis = params0 && params0.axisType && params0.axisType.indexOf("time") >= 0;
                html = formatter;
                if (isTimeAxis) html = (0, $c5a9021cf573c334$export$d9468344d3651243)(params0.axisValue, html, useUTC);
                html = (0, $1594f6dc0ce39685$export$2028496a35766e41)(html, params, true);
            } else if ((0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(formatter)) {
                var callback = (0, $e44eb14c4271d0f9$export$2385a24977818dd0)(function(cbTicket, html) {
                    if (cbTicket === this._ticket) {
                        tooltipContent.setContent(html, markupStyleCreator, tooltipModel, nearPointColor, positionExpr);
                        this._updatePosition(tooltipModel, positionExpr, x, y, tooltipContent, params, el);
                    }
                }, this);
                this._ticket = asyncTicket;
                html = formatter(params, asyncTicket, callback);
            } else html = formatter;
        }
        tooltipContent.setContent(html, markupStyleCreator, tooltipModel, nearPointColor, positionExpr);
        tooltipContent.show(tooltipModel, nearPointColor);
        this._updatePosition(tooltipModel, positionExpr, x, y, tooltipContent, params, el);
    };
    TooltipView.prototype._getNearestPoint = function(point, tooltipDataParams, trigger, borderColor) {
        if (trigger === "axis" || (0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(tooltipDataParams)) return {
            color: borderColor || (this._renderMode === "html" ? "#fff" : "none")
        };
        if (!(0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(tooltipDataParams)) return {
            color: borderColor || tooltipDataParams.color || tooltipDataParams.borderColor
        };
    };
    TooltipView.prototype._updatePosition = function(tooltipModel, positionExpr, x, // Mouse x
    y, // Mouse y
    content, params, el) {
        var viewWidth = this._api.getWidth();
        var viewHeight = this._api.getHeight();
        positionExpr = positionExpr || tooltipModel.get("position");
        var contentSize = content.getSize();
        var align = tooltipModel.get("align");
        var vAlign = tooltipModel.get("verticalAlign");
        var rect = el && el.getBoundingRect().clone();
        el && rect.applyTransform(el.transform);
        if ((0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(positionExpr)) // Callback of position can be an array or a string specify the position
        positionExpr = positionExpr([
            x,
            y
        ], params, content.el, rect, {
            viewSize: [
                viewWidth,
                viewHeight
            ],
            contentSize: contentSize.slice()
        });
        if ((0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(positionExpr)) {
            x = (0, $13e6a1a716300dd4$export$e8514cb5a5e2b40f)(positionExpr[0], viewWidth);
            y = (0, $13e6a1a716300dd4$export$e8514cb5a5e2b40f)(positionExpr[1], viewHeight);
        } else if ((0, $e44eb14c4271d0f9$export$a6cdc56e425d0d0a)(positionExpr)) {
            var boxLayoutPosition = positionExpr;
            boxLayoutPosition.width = contentSize[0];
            boxLayoutPosition.height = contentSize[1];
            var layoutRect = (0, $074356ab3d6b1cdb$export$4517a5ca639a7293)(boxLayoutPosition, {
                width: viewWidth,
                height: viewHeight
            });
            x = layoutRect.x;
            y = layoutRect.y;
            align = null;
            // When positionExpr is left/top/right/bottom,
            // align and verticalAlign will not work.
            vAlign = null;
        } else if ((0, $e44eb14c4271d0f9$export$844ec244b1367d54)(positionExpr) && el) {
            var pos = $1acff2907fa57bb6$var$calcTooltipPosition(positionExpr, rect, contentSize, tooltipModel.get("borderWidth"));
            x = pos[0];
            y = pos[1];
        } else {
            var pos = $1acff2907fa57bb6$var$refixTooltipPosition(x, y, content, viewWidth, viewHeight, align ? null : 20, vAlign ? null : 20);
            x = pos[0];
            y = pos[1];
        }
        align && (x -= $1acff2907fa57bb6$var$isCenterAlign(align) ? contentSize[0] / 2 : align === "right" ? contentSize[0] : 0);
        vAlign && (y -= $1acff2907fa57bb6$var$isCenterAlign(vAlign) ? contentSize[1] / 2 : vAlign === "bottom" ? contentSize[1] : 0);
        if ((0, $6a3e76517838a37d$export$a309528050824ba4)(tooltipModel)) {
            var pos = $1acff2907fa57bb6$var$confineTooltipPosition(x, y, content, viewWidth, viewHeight);
            x = pos[0];
            y = pos[1];
        }
        content.moveTo(x, y);
    };
    // FIXME
    // Should we remove this but leave this to user?
    TooltipView.prototype._updateContentNotChangedOnAxis = function(dataByCoordSys, cbParamsList) {
        var lastCoordSys = this._lastDataByCoordSys;
        var lastCbParamsList = this._cbParamsList;
        var contentNotChanged = !!lastCoordSys && lastCoordSys.length === dataByCoordSys.length;
        contentNotChanged && (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(lastCoordSys, function(lastItemCoordSys, indexCoordSys) {
            var lastDataByAxis = lastItemCoordSys.dataByAxis || [];
            var thisItemCoordSys = dataByCoordSys[indexCoordSys] || {};
            var thisDataByAxis = thisItemCoordSys.dataByAxis || [];
            contentNotChanged = contentNotChanged && lastDataByAxis.length === thisDataByAxis.length;
            contentNotChanged && (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(lastDataByAxis, function(lastItem, indexAxis) {
                var thisItem = thisDataByAxis[indexAxis] || {};
                var lastIndices = lastItem.seriesDataIndices || [];
                var newIndices = thisItem.seriesDataIndices || [];
                contentNotChanged = contentNotChanged && lastItem.value === thisItem.value && lastItem.axisType === thisItem.axisType && lastItem.axisId === thisItem.axisId && lastIndices.length === newIndices.length;
                contentNotChanged && (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(lastIndices, function(lastIdxItem, j) {
                    var newIdxItem = newIndices[j];
                    contentNotChanged = contentNotChanged && lastIdxItem.seriesIndex === newIdxItem.seriesIndex && lastIdxItem.dataIndex === newIdxItem.dataIndex;
                });
                // check is cbParams data value changed
                lastCbParamsList && (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(lastItem.seriesDataIndices, function(idxItem) {
                    var seriesIdx = idxItem.seriesIndex;
                    var cbParams = cbParamsList[seriesIdx];
                    var lastCbParams = lastCbParamsList[seriesIdx];
                    if (cbParams && lastCbParams && lastCbParams.data !== cbParams.data) contentNotChanged = false;
                });
            });
        });
        this._lastDataByCoordSys = dataByCoordSys;
        this._cbParamsList = cbParamsList;
        return !!contentNotChanged;
    };
    TooltipView.prototype._hide = function(dispatchAction) {
        // Do not directly hideLater here, because this behavior may be prevented
        // in dispatchAction when showTip is dispatched.
        // FIXME
        // duplicated hideTip if manuallyHideTip is called from dispatchAction.
        this._lastDataByCoordSys = null;
        dispatchAction({
            type: "hideTip",
            from: this.uid
        });
    };
    TooltipView.prototype.dispose = function(ecModel, api) {
        if ((0, $de9e931273a116c1$export$2e2bcd8739ae039).node || !api.getDom()) return;
        (0, $1eadeed02cc6d4a8$export$42ffd38884aecdac)(this, "_updatePosition");
        this._tooltipContent.dispose();
        $60456cb347f49a27$export$d07f55d4c15c0440("itemTooltip", api);
    };
    TooltipView.type = "tooltip";
    return TooltipView;
}((0, $ced42ef9869a1e4c$export$2e2bcd8739ae039));
/**
 * From top to bottom. (the last one should be globalTooltipModel);
 */ function $1acff2907fa57bb6$var$buildTooltipModel(modelCascade, globalTooltipModel, defaultTooltipOption) {
    // Last is always tooltip model.
    var ecModel = globalTooltipModel.ecModel;
    var resultModel;
    if (defaultTooltipOption) {
        resultModel = new (0, $d92ec0eb853c4005$export$2e2bcd8739ae039)(defaultTooltipOption, ecModel, ecModel);
        resultModel = new (0, $d92ec0eb853c4005$export$2e2bcd8739ae039)(globalTooltipModel.option, resultModel, ecModel);
    } else resultModel = globalTooltipModel;
    for(var i = modelCascade.length - 1; i >= 0; i--){
        var tooltipOpt = modelCascade[i];
        if (tooltipOpt) {
            if (tooltipOpt instanceof (0, $d92ec0eb853c4005$export$2e2bcd8739ae039)) tooltipOpt = tooltipOpt.get("tooltip", true);
            // In each data item tooltip can be simply write:
            // {
            //  value: 10,
            //  tooltip: 'Something you need to know'
            // }
            if ((0, $e44eb14c4271d0f9$export$844ec244b1367d54)(tooltipOpt)) tooltipOpt = {
                formatter: tooltipOpt
            };
            if (tooltipOpt) resultModel = new (0, $d92ec0eb853c4005$export$2e2bcd8739ae039)(tooltipOpt, resultModel, ecModel);
        }
    }
    return resultModel;
}
function $1acff2907fa57bb6$var$makeDispatchAction(payload, api) {
    return payload.dispatchAction || (0, $e44eb14c4271d0f9$export$2385a24977818dd0)(api.dispatchAction, api);
}
function $1acff2907fa57bb6$var$refixTooltipPosition(x, y, content, viewWidth, viewHeight, gapH, gapV) {
    var size = content.getSize();
    var width = size[0];
    var height = size[1];
    if (gapH != null) {
        // Add extra 2 pixels for this case:
        // At present the "values" in default tooltip are using CSS `float: right`.
        // When the right edge of the tooltip box is on the right side of the
        // viewport, the `float` layout might push the "values" to the second line.
        if (x + width + gapH + 2 > viewWidth) x -= width + gapH;
        else x += gapH;
    }
    if (gapV != null) {
        if (y + height + gapV > viewHeight) y -= height + gapV;
        else y += gapV;
    }
    return [
        x,
        y
    ];
}
function $1acff2907fa57bb6$var$confineTooltipPosition(x, y, content, viewWidth, viewHeight) {
    var size = content.getSize();
    var width = size[0];
    var height = size[1];
    x = Math.min(x + width, viewWidth) - width;
    y = Math.min(y + height, viewHeight) - height;
    x = Math.max(x, 0);
    y = Math.max(y, 0);
    return [
        x,
        y
    ];
}
function $1acff2907fa57bb6$var$calcTooltipPosition(position, rect, contentSize, borderWidth) {
    var domWidth = contentSize[0];
    var domHeight = contentSize[1];
    var offset = Math.ceil(Math.SQRT2 * borderWidth) + 8;
    var x = 0;
    var y = 0;
    var rectWidth = rect.width;
    var rectHeight = rect.height;
    switch(position){
        case "inside":
            x = rect.x + rectWidth / 2 - domWidth / 2;
            y = rect.y + rectHeight / 2 - domHeight / 2;
            break;
        case "top":
            x = rect.x + rectWidth / 2 - domWidth / 2;
            y = rect.y - domHeight - offset;
            break;
        case "bottom":
            x = rect.x + rectWidth / 2 - domWidth / 2;
            y = rect.y + rectHeight + offset;
            break;
        case "left":
            x = rect.x - domWidth - offset;
            y = rect.y + rectHeight / 2 - domHeight / 2;
            break;
        case "right":
            x = rect.x + rectWidth + offset;
            y = rect.y + rectHeight / 2 - domHeight / 2;
    }
    return [
        x,
        y
    ];
}
function $1acff2907fa57bb6$var$isCenterAlign(align) {
    return align === "center" || align === "middle";
}
/**
 * Find target component by payload like:
 * ```js
 * { legendId: 'some_id', name: 'xxx' }
 * { toolboxIndex: 1, name: 'xxx' }
 * { geoName: 'some_name', name: 'xxx' }
 * ```
 * PENDING: at present only
 *
 * If not found, return null/undefined.
 */ function $1acff2907fa57bb6$var$findComponentReference(payload, ecModel, api) {
    var queryOptionMap = (0, $8917c02fd8256c67$export$fe600815775d9400)(payload).queryOptionMap;
    var componentMainType = queryOptionMap.keys()[0];
    if (!componentMainType || componentMainType === "series") return;
    var queryResult = (0, $8917c02fd8256c67$export$dc741340f7e5f186)(ecModel, componentMainType, queryOptionMap.get(componentMainType), {
        useDefault: false,
        enableAll: false,
        enableNone: false
    });
    var model = queryResult.models[0];
    if (!model) return;
    var view = api.getViewOfComponentModel(model);
    var el;
    view.group.traverse(function(subEl) {
        var tooltipConfig = (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(subEl).tooltipConfig;
        if (tooltipConfig && tooltipConfig.name === payload.name) {
            el = subEl;
            return true; // stop
        }
    });
    if (el) return {
        componentMainType: componentMainType,
        componentIndex: model.componentIndex,
        el: el
    };
}
var $1acff2907fa57bb6$export$2e2bcd8739ae039 = $1acff2907fa57bb6$var$TooltipView;



function $cc34440a87706c72$export$4b3e715f166fdd78(registers) {
    (0, $2456b78b4596463d$export$1f96ae73734a86cc)((0, $1ab6074a036ba6f8$export$4b3e715f166fdd78));
    registers.registerComponentModel((0, $b67ad52727ec8106$export$2e2bcd8739ae039));
    registers.registerComponentView((0, $1acff2907fa57bb6$export$2e2bcd8739ae039));
    /**
   * @action
   * @property {string} type
   * @property {number} seriesIndex
   * @property {number} dataIndex
   * @property {number} [x]
   * @property {number} [y]
   */ registers.registerAction({
        type: "showTip",
        event: "showTip",
        update: "tooltip:manuallyShowTip"
    }, (0, $e44eb14c4271d0f9$export$8793edee2d425525));
    registers.registerAction({
        type: "hideTip",
        event: "hideTip",
        update: "tooltip:manuallyHideTip"
    }, (0, $e44eb14c4271d0f9$export$8793edee2d425525));
}

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 








var $a94998fee89fbc6a$var$TitleModel = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(TitleModel, _super);
    function TitleModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = TitleModel.type;
        _this.layoutMode = {
            type: "box",
            ignoreSize: true
        };
        return _this;
    }
    TitleModel.type = "title";
    TitleModel.defaultOption = {
        // zlevel: 0,
        z: 6,
        show: true,
        text: "",
        target: "blank",
        subtext: "",
        subtarget: "blank",
        left: 0,
        top: 0,
        backgroundColor: "rgba(0,0,0,0)",
        borderColor: "#ccc",
        borderWidth: 0,
        padding: 5,
        itemGap: 10,
        textStyle: {
            fontSize: 18,
            fontWeight: "bold",
            color: "#464646"
        },
        subtextStyle: {
            fontSize: 12,
            color: "#6E7079"
        }
    };
    return TitleModel;
}((0, $a756077528c07361$export$2e2bcd8739ae039));
// View
var $a94998fee89fbc6a$var$TitleView = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(TitleView, _super);
    function TitleView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = TitleView.type;
        return _this;
    }
    TitleView.prototype.render = function(titleModel, ecModel, api) {
        this.group.removeAll();
        if (!titleModel.get("show")) return;
        var group = this.group;
        var textStyleModel = titleModel.getModel("textStyle");
        var subtextStyleModel = titleModel.getModel("subtextStyle");
        var textAlign = titleModel.get("textAlign");
        var textVerticalAlign = $e44eb14c4271d0f9$export$995e01f2f5c9d030(titleModel.get("textBaseline"), titleModel.get("textVerticalAlign"));
        var textEl = new $6d12d9a137e168c2$export$2e2bcd8739ae039({
            style: (0, $75926670b032879d$export$f8998c3d0a13de59)(textStyleModel, {
                text: titleModel.get("text"),
                fill: textStyleModel.getTextColor()
            }, {
                disableBox: true
            }),
            z2: 10
        });
        var textRect = textEl.getBoundingRect();
        var subText = titleModel.get("subtext");
        var subTextEl = new $6d12d9a137e168c2$export$2e2bcd8739ae039({
            style: (0, $75926670b032879d$export$f8998c3d0a13de59)(subtextStyleModel, {
                text: subText,
                fill: subtextStyleModel.getTextColor(),
                y: textRect.height + titleModel.get("itemGap"),
                verticalAlign: "top"
            }, {
                disableBox: true
            }),
            z2: 10
        });
        var link = titleModel.get("link");
        var sublink = titleModel.get("sublink");
        var triggerEvent = titleModel.get("triggerEvent", true);
        textEl.silent = !link && !triggerEvent;
        subTextEl.silent = !sublink && !triggerEvent;
        if (link) textEl.on("click", function() {
            (0, $1594f6dc0ce39685$export$13e13f9b96dbe8fa)(link, "_" + titleModel.get("target"));
        });
        if (sublink) subTextEl.on("click", function() {
            (0, $1594f6dc0ce39685$export$13e13f9b96dbe8fa)(sublink, "_" + titleModel.get("subtarget"));
        });
        (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(textEl).eventData = (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(subTextEl).eventData = triggerEvent ? {
            componentType: "title",
            componentIndex: titleModel.componentIndex
        } : null;
        group.add(textEl);
        subText && group.add(subTextEl);
        // If no subText, but add subTextEl, there will be an empty line.
        var groupRect = group.getBoundingRect();
        var layoutOption = titleModel.getBoxLayoutParams();
        layoutOption.width = groupRect.width;
        layoutOption.height = groupRect.height;
        var layoutRect = (0, $074356ab3d6b1cdb$export$4517a5ca639a7293)(layoutOption, {
            width: api.getWidth(),
            height: api.getHeight()
        }, titleModel.get("padding"));
        // Adjust text align based on position
        if (!textAlign) {
            // Align left if title is on the left. center and right is same
            textAlign = titleModel.get("left") || titleModel.get("right");
            // @ts-ignore
            if (textAlign === "middle") textAlign = "center";
            // Adjust layout by text align
            if (textAlign === "right") layoutRect.x += layoutRect.width;
            else if (textAlign === "center") layoutRect.x += layoutRect.width / 2;
        }
        if (!textVerticalAlign) {
            textVerticalAlign = titleModel.get("top") || titleModel.get("bottom");
            // @ts-ignore
            if (textVerticalAlign === "center") textVerticalAlign = "middle";
            if (textVerticalAlign === "bottom") layoutRect.y += layoutRect.height;
            else if (textVerticalAlign === "middle") layoutRect.y += layoutRect.height / 2;
            textVerticalAlign = textVerticalAlign || "top";
        }
        group.x = layoutRect.x;
        group.y = layoutRect.y;
        group.markRedraw();
        var alignStyle = {
            align: textAlign,
            verticalAlign: textVerticalAlign
        };
        textEl.setStyle(alignStyle);
        subTextEl.setStyle(alignStyle);
        // Render background
        // Get groupRect again because textAlign has been changed
        groupRect = group.getBoundingRect();
        var padding = layoutRect.margin;
        var style = titleModel.getItemStyle([
            "color",
            "opacity"
        ]);
        style.fill = titleModel.get("backgroundColor");
        var rect = new $538026eba361a92a$export$2e2bcd8739ae039({
            shape: {
                x: groupRect.x - padding[3],
                y: groupRect.y - padding[0],
                width: groupRect.width + padding[1] + padding[3],
                height: groupRect.height + padding[0] + padding[2],
                r: titleModel.get("borderRadius")
            },
            style: style,
            subPixelOptimize: true,
            silent: true
        });
        group.add(rect);
    };
    TitleView.type = "title";
    return TitleView;
}((0, $ced42ef9869a1e4c$export$2e2bcd8739ae039));
function $a94998fee89fbc6a$export$4b3e715f166fdd78(registers) {
    registers.registerComponentModel($a94998fee89fbc6a$var$TitleModel);
    registers.registerComponentView($a94998fee89fbc6a$var$TitleView);
}

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 




var $9cee1d70114eea71$var$getDefaultSelectorOptions = function(ecModel, type) {
    if (type === "all") return {
        type: "all",
        title: ecModel.getLocaleModel().get([
            "legend",
            "selector",
            "all"
        ])
    };
    else if (type === "inverse") return {
        type: "inverse",
        title: ecModel.getLocaleModel().get([
            "legend",
            "selector",
            "inverse"
        ])
    };
};
var $9cee1d70114eea71$var$LegendModel = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(LegendModel, _super);
    function LegendModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = LegendModel.type;
        _this.layoutMode = {
            type: "box",
            // legend.width/height are maxWidth/maxHeight actually,
            // whereas real width/height is calculated by its content.
            // (Setting {left: 10, right: 10} does not make sense).
            // So consider the case:
            // `setOption({legend: {left: 10});`
            // then `setOption({legend: {right: 10});`
            // The previous `left` should be cleared by setting `ignoreSize`.
            ignoreSize: true
        };
        return _this;
    }
    LegendModel.prototype.init = function(option, parentModel, ecModel) {
        this.mergeDefaultAndTheme(option, ecModel);
        option.selected = option.selected || {};
        this._updateSelector(option);
    };
    LegendModel.prototype.mergeOption = function(option, ecModel) {
        _super.prototype.mergeOption.call(this, option, ecModel);
        this._updateSelector(option);
    };
    LegendModel.prototype._updateSelector = function(option) {
        var selector = option.selector;
        var ecModel = this.ecModel;
        if (selector === true) selector = option.selector = [
            "all",
            "inverse"
        ];
        if ($e44eb14c4271d0f9$export$43bee75e5e14138e(selector)) $e44eb14c4271d0f9$export$79b2f7037acddd43(selector, function(item, index) {
            $e44eb14c4271d0f9$export$844ec244b1367d54(item) && (item = {
                type: item
            });
            selector[index] = $e44eb14c4271d0f9$export$4950aa0f605343fb(item, $9cee1d70114eea71$var$getDefaultSelectorOptions(ecModel, item.type));
        });
    };
    LegendModel.prototype.optionUpdated = function() {
        this._updateData(this.ecModel);
        var legendData = this._data;
        // If selectedMode is single, try to select one
        if (legendData[0] && this.get("selectedMode") === "single") {
            var hasSelected = false;
            // If has any selected in option.selected
            for(var i = 0; i < legendData.length; i++){
                var name_1 = legendData[i].get("name");
                if (this.isSelected(name_1)) {
                    // Force to unselect others
                    this.select(name_1);
                    hasSelected = true;
                    break;
                }
            }
            // Try select the first if selectedMode is single
            !hasSelected && this.select(legendData[0].get("name"));
        }
    };
    LegendModel.prototype._updateData = function(ecModel) {
        var potentialData = [];
        var availableNames = [];
        ecModel.eachRawSeries(function(seriesModel) {
            var seriesName = seriesModel.name;
            availableNames.push(seriesName);
            var isPotential;
            if (seriesModel.legendVisualProvider) {
                var provider = seriesModel.legendVisualProvider;
                var names = provider.getAllNames();
                if (!ecModel.isSeriesFiltered(seriesModel)) availableNames = availableNames.concat(names);
                if (names.length) potentialData = potentialData.concat(names);
                else isPotential = true;
            } else isPotential = true;
            if (isPotential && (0, $8917c02fd8256c67$export$beae19a2652b3368)(seriesModel)) potentialData.push(seriesModel.name);
        });
        /**
     * @type {Array.<string>}
     * @private
     */ this._availableNames = availableNames;
        // If legend.data is not specified in option, use availableNames as data,
        // which is convenient for user preparing option.
        var rawData = this.get("data") || potentialData;
        var legendNameMap = $e44eb14c4271d0f9$export$55f8aa7ef875b0a4();
        var legendData = $e44eb14c4271d0f9$export$871de8747c9eaa88(rawData, function(dataItem) {
            // Can be string or number
            if ($e44eb14c4271d0f9$export$844ec244b1367d54(dataItem) || $e44eb14c4271d0f9$export$7e4aa119212bc614(dataItem)) dataItem = {
                name: dataItem
            };
            if (legendNameMap.get(dataItem.name)) // remove legend name duplicate
            return null;
            legendNameMap.set(dataItem.name, true);
            return new (0, $d92ec0eb853c4005$export$2e2bcd8739ae039)(dataItem, this, this.ecModel);
        }, this);
        /**
     * @type {Array.<module:echarts/model/Model>}
     * @private
     */ this._data = $e44eb14c4271d0f9$export$3dea766d36a8935f(legendData, function(item) {
            return !!item;
        });
    };
    LegendModel.prototype.getData = function() {
        return this._data;
    };
    LegendModel.prototype.select = function(name) {
        var selected = this.option.selected;
        var selectedMode = this.get("selectedMode");
        if (selectedMode === "single") {
            var data = this._data;
            $e44eb14c4271d0f9$export$79b2f7037acddd43(data, function(dataItem) {
                selected[dataItem.get("name")] = false;
            });
        }
        selected[name] = true;
    };
    LegendModel.prototype.unSelect = function(name) {
        if (this.get("selectedMode") !== "single") this.option.selected[name] = false;
    };
    LegendModel.prototype.toggleSelected = function(name) {
        var selected = this.option.selected;
        // Default is true
        if (!selected.hasOwnProperty(name)) selected[name] = true;
        this[selected[name] ? "unSelect" : "select"](name);
    };
    LegendModel.prototype.allSelect = function() {
        var data = this._data;
        var selected = this.option.selected;
        $e44eb14c4271d0f9$export$79b2f7037acddd43(data, function(dataItem) {
            selected[dataItem.get("name", true)] = true;
        });
    };
    LegendModel.prototype.inverseSelect = function() {
        var data = this._data;
        var selected = this.option.selected;
        $e44eb14c4271d0f9$export$79b2f7037acddd43(data, function(dataItem) {
            var name = dataItem.get("name", true);
            // Initially, default value is true
            if (!selected.hasOwnProperty(name)) selected[name] = true;
            selected[name] = !selected[name];
        });
    };
    LegendModel.prototype.isSelected = function(name) {
        var selected = this.option.selected;
        return !(selected.hasOwnProperty(name) && !selected[name]) && $e44eb14c4271d0f9$export$305f7d4e9d4624f2(this._availableNames, name) >= 0;
    };
    LegendModel.prototype.getOrient = function() {
        return this.get("orient") === "vertical" ? {
            index: 1,
            name: "vertical"
        } : {
            index: 0,
            name: "horizontal"
        };
    };
    LegendModel.type = "legend.plain";
    LegendModel.dependencies = [
        "series"
    ];
    LegendModel.defaultOption = {
        // zlevel: 0,
        z: 4,
        show: true,
        orient: "horizontal",
        left: "center",
        // right: 'center',
        top: 0,
        // bottom: null,
        align: "auto",
        backgroundColor: "rgba(0,0,0,0)",
        borderColor: "#ccc",
        borderRadius: 0,
        borderWidth: 0,
        padding: 5,
        itemGap: 10,
        itemWidth: 25,
        itemHeight: 14,
        symbolRotate: "inherit",
        symbolKeepAspect: true,
        inactiveColor: "#ccc",
        inactiveBorderColor: "#ccc",
        inactiveBorderWidth: "auto",
        itemStyle: {
            color: "inherit",
            opacity: "inherit",
            borderColor: "inherit",
            borderWidth: "auto",
            borderCap: "inherit",
            borderJoin: "inherit",
            borderDashOffset: "inherit",
            borderMiterLimit: "inherit"
        },
        lineStyle: {
            width: "auto",
            color: "inherit",
            inactiveColor: "#ccc",
            inactiveWidth: 2,
            opacity: "inherit",
            type: "inherit",
            cap: "inherit",
            join: "inherit",
            dashOffset: "inherit",
            miterLimit: "inherit"
        },
        textStyle: {
            color: "#333"
        },
        selectedMode: true,
        selector: false,
        selectorLabel: {
            show: true,
            borderRadius: 10,
            padding: [
                3,
                5,
                3,
                5
            ],
            fontSize: 12,
            fontFamily: "sans-serif",
            color: "#666",
            borderWidth: 1,
            borderColor: "#666"
        },
        emphasis: {
            selectorLabel: {
                show: true,
                color: "#eee",
                backgroundColor: "#666"
            }
        },
        selectorPosition: "auto",
        selectorItemGap: 7,
        selectorButtonGap: 10,
        tooltip: {
            show: false
        }
    };
    return LegendModel;
}((0, $a756077528c07361$export$2e2bcd8739ae039));
var $9cee1d70114eea71$export$2e2bcd8739ae039 = $9cee1d70114eea71$var$LegendModel;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 











var $e85785299a991dc5$var$curry = $e44eb14c4271d0f9$export$c3095a23b368d1f2;
var $e85785299a991dc5$var$each = $e44eb14c4271d0f9$export$79b2f7037acddd43;
var $e85785299a991dc5$var$Group = $748aea24eee93173$export$2e2bcd8739ae039;
var $e85785299a991dc5$var$LegendView = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(LegendView, _super);
    function LegendView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = LegendView.type;
        _this.newlineDisabled = false;
        return _this;
    }
    LegendView.prototype.init = function() {
        this.group.add(this._contentGroup = new $e85785299a991dc5$var$Group());
        this.group.add(this._selectorGroup = new $e85785299a991dc5$var$Group());
        this._isFirstRender = true;
    };
    /**
   * @protected
   */ LegendView.prototype.getContentGroup = function() {
        return this._contentGroup;
    };
    /**
   * @protected
   */ LegendView.prototype.getSelectorGroup = function() {
        return this._selectorGroup;
    };
    /**
   * @override
   */ LegendView.prototype.render = function(legendModel, ecModel, api) {
        var isFirstRender = this._isFirstRender;
        this._isFirstRender = false;
        this.resetInner();
        if (!legendModel.get("show", true)) return;
        var itemAlign = legendModel.get("align");
        var orient = legendModel.get("orient");
        if (!itemAlign || itemAlign === "auto") itemAlign = legendModel.get("left") === "right" && orient === "vertical" ? "right" : "left";
        // selector has been normalized to an array in model
        var selector = legendModel.get("selector", true);
        var selectorPosition = legendModel.get("selectorPosition", true);
        if (selector && (!selectorPosition || selectorPosition === "auto")) selectorPosition = orient === "horizontal" ? "end" : "start";
        this.renderInner(itemAlign, legendModel, ecModel, api, selector, orient, selectorPosition);
        // Perform layout.
        var positionInfo = legendModel.getBoxLayoutParams();
        var viewportSize = {
            width: api.getWidth(),
            height: api.getHeight()
        };
        var padding = legendModel.get("padding");
        var maxSize = $074356ab3d6b1cdb$export$4517a5ca639a7293(positionInfo, viewportSize, padding);
        var mainRect = this.layoutInner(legendModel, itemAlign, maxSize, isFirstRender, selector, selectorPosition);
        // Place mainGroup, based on the calculated `mainRect`.
        var layoutRect = $074356ab3d6b1cdb$export$4517a5ca639a7293($e44eb14c4271d0f9$export$ebe90cb607ad99e({
            width: mainRect.width,
            height: mainRect.height
        }, positionInfo), viewportSize, padding);
        this.group.x = layoutRect.x - mainRect.x;
        this.group.y = layoutRect.y - mainRect.y;
        this.group.markRedraw();
        // Render background after group is layout.
        this.group.add(this._backgroundEl = (0, $d8970f4f91a9ffbb$export$fae23936eedfad4f)(mainRect, legendModel));
    };
    LegendView.prototype.resetInner = function() {
        this.getContentGroup().removeAll();
        this._backgroundEl && this.group.remove(this._backgroundEl);
        this.getSelectorGroup().removeAll();
    };
    LegendView.prototype.renderInner = function(itemAlign, legendModel, ecModel, api, selector, orient, selectorPosition) {
        var contentGroup = this.getContentGroup();
        var legendDrawnMap = $e44eb14c4271d0f9$export$55f8aa7ef875b0a4();
        var selectMode = legendModel.get("selectedMode");
        var excludeSeriesId = [];
        ecModel.eachRawSeries(function(seriesModel) {
            !seriesModel.get("legendHoverLink") && excludeSeriesId.push(seriesModel.id);
        });
        $e85785299a991dc5$var$each(legendModel.getData(), function(legendItemModel, dataIndex) {
            var name = legendItemModel.get("name");
            // Use empty string or \n as a newline string
            if (!this.newlineDisabled && (name === "" || name === "\n")) {
                var g = new $e85785299a991dc5$var$Group();
                // @ts-ignore
                g.newline = true;
                contentGroup.add(g);
                return;
            }
            // Representitive series.
            var seriesModel = ecModel.getSeriesByName(name)[0];
            if (legendDrawnMap.get(name)) // Have been drawn
            return;
            // Legend to control series.
            if (seriesModel) {
                var data = seriesModel.getData();
                var lineVisualStyle = data.getVisual("legendLineStyle") || {};
                var legendIcon = data.getVisual("legendIcon");
                /**
         * `data.getVisual('style')` may be the color from the register
         * in series. For example, for line series,
         */ var style = data.getVisual("style");
                var itemGroup = this._createItem(seriesModel, name, dataIndex, legendItemModel, legendModel, itemAlign, lineVisualStyle, style, legendIcon, selectMode, api);
                itemGroup.on("click", $e85785299a991dc5$var$curry($e85785299a991dc5$var$dispatchSelectAction, name, null, api, excludeSeriesId)).on("mouseover", $e85785299a991dc5$var$curry($e85785299a991dc5$var$dispatchHighlightAction, seriesModel.name, null, api, excludeSeriesId)).on("mouseout", $e85785299a991dc5$var$curry($e85785299a991dc5$var$dispatchDownplayAction, seriesModel.name, null, api, excludeSeriesId));
                if (ecModel.ssr) itemGroup.eachChild(function(child) {
                    var ecData = (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(child);
                    ecData.seriesIndex = seriesModel.seriesIndex;
                    ecData.dataIndex = dataIndex;
                    ecData.ssrType = "legend";
                });
                legendDrawnMap.set(name, true);
            } else // Legend to control data. In pie and funnel.
            ecModel.eachRawSeries(function(seriesModel) {
                // In case multiple series has same data name
                if (legendDrawnMap.get(name)) return;
                if (seriesModel.legendVisualProvider) {
                    var provider = seriesModel.legendVisualProvider;
                    if (!provider.containName(name)) return;
                    var idx = provider.indexOfName(name);
                    var style = provider.getItemVisual(idx, "style");
                    var legendIcon = provider.getItemVisual(idx, "legendIcon");
                    var colorArr = (0, $5373993605fe25d6$export$98e6a39c04603d36)(style.fill);
                    // Color may be set to transparent in visualMap when data is out of range.
                    // Do not show nothing.
                    if (colorArr && colorArr[3] === 0) {
                        colorArr[3] = 0.2;
                        // TODO color is set to 0, 0, 0, 0. Should show correct RGBA
                        style = $e44eb14c4271d0f9$export$8b58be045bf06082($e44eb14c4271d0f9$export$8b58be045bf06082({}, style), {
                            fill: (0, $5373993605fe25d6$export$fac44ee5b035f737)(colorArr, "rgba")
                        });
                    }
                    var itemGroup = this._createItem(seriesModel, name, dataIndex, legendItemModel, legendModel, itemAlign, {}, style, legendIcon, selectMode, api);
                    // FIXME: consider different series has items with the same name.
                    itemGroup.on("click", $e85785299a991dc5$var$curry($e85785299a991dc5$var$dispatchSelectAction, null, name, api, excludeSeriesId))// Should not specify the series name, consider legend controls
                    // more than one pie series.
                    .on("mouseover", $e85785299a991dc5$var$curry($e85785299a991dc5$var$dispatchHighlightAction, null, name, api, excludeSeriesId)).on("mouseout", $e85785299a991dc5$var$curry($e85785299a991dc5$var$dispatchDownplayAction, null, name, api, excludeSeriesId));
                    if (ecModel.ssr) itemGroup.eachChild(function(child) {
                        var ecData = (0, $85ade22ad4768945$export$b1c39b2bacd1ddc2)(child);
                        ecData.seriesIndex = seriesModel.seriesIndex;
                        ecData.dataIndex = dataIndex;
                        ecData.ssrType = "legend";
                    });
                    legendDrawnMap.set(name, true);
                }
            }, this);
            if (!legendDrawnMap.get(name)) console.warn(name + " series not exists. Legend data should be same with series name or data name.");
        }, this);
        if (selector) this._createSelector(selector, legendModel, api, orient, selectorPosition);
    };
    LegendView.prototype._createSelector = function(selector, legendModel, api, orient, selectorPosition) {
        var selectorGroup = this.getSelectorGroup();
        $e85785299a991dc5$var$each(selector, function createSelectorButton(selectorItem) {
            var type = selectorItem.type;
            var labelText = new $6d12d9a137e168c2$export$2e2bcd8739ae039({
                style: {
                    x: 0,
                    y: 0,
                    align: "center",
                    verticalAlign: "middle"
                },
                onclick: function() {
                    api.dispatchAction({
                        type: type === "all" ? "legendAllSelect" : "legendInverseSelect"
                    });
                }
            });
            selectorGroup.add(labelText);
            var labelModel = legendModel.getModel("selectorLabel");
            var emphasisLabelModel = legendModel.getModel([
                "emphasis",
                "selectorLabel"
            ]);
            (0, $75926670b032879d$export$9a13992917966657)(labelText, {
                normal: labelModel,
                emphasis: emphasisLabelModel
            }, {
                defaultText: selectorItem.title
            });
            (0, $e3c0a36328c28ac4$export$5f393df0b5aee2e7)(labelText);
        });
    };
    LegendView.prototype._createItem = function(seriesModel, name, dataIndex, legendItemModel, legendModel, itemAlign, lineVisualStyle, itemVisualStyle, legendIcon, selectMode, api) {
        var drawType = seriesModel.visualDrawType;
        var itemWidth = legendModel.get("itemWidth");
        var itemHeight = legendModel.get("itemHeight");
        var isSelected = legendModel.isSelected(name);
        var iconRotate = legendItemModel.get("symbolRotate");
        var symbolKeepAspect = legendItemModel.get("symbolKeepAspect");
        var legendIconType = legendItemModel.get("icon");
        legendIcon = legendIconType || legendIcon || "roundRect";
        var style = $e85785299a991dc5$var$getLegendStyle(legendIcon, legendItemModel, lineVisualStyle, itemVisualStyle, drawType, isSelected, api);
        var itemGroup = new $e85785299a991dc5$var$Group();
        var textStyleModel = legendItemModel.getModel("textStyle");
        if ($e44eb14c4271d0f9$export$f6e2535fb5126e54(seriesModel.getLegendIcon) && (!legendIconType || legendIconType === "inherit")) // Series has specific way to define legend icon
        itemGroup.add(seriesModel.getLegendIcon({
            itemWidth: itemWidth,
            itemHeight: itemHeight,
            icon: legendIcon,
            iconRotate: iconRotate,
            itemStyle: style.itemStyle,
            lineStyle: style.lineStyle,
            symbolKeepAspect: symbolKeepAspect
        }));
        else {
            // Use default legend icon policy for most series
            var rotate = legendIconType === "inherit" && seriesModel.getData().getVisual("symbol") ? iconRotate === "inherit" ? seriesModel.getData().getVisual("symbolRotate") : iconRotate : 0; // No rotation for no icon
            itemGroup.add($e85785299a991dc5$var$getDefaultLegendIcon({
                itemWidth: itemWidth,
                itemHeight: itemHeight,
                icon: legendIcon,
                iconRotate: rotate,
                itemStyle: style.itemStyle,
                lineStyle: style.lineStyle,
                symbolKeepAspect: symbolKeepAspect
            }));
        }
        var textX = itemAlign === "left" ? itemWidth + 5 : -5;
        var textAlign = itemAlign;
        var formatter = legendModel.get("formatter");
        var content = name;
        if ($e44eb14c4271d0f9$export$844ec244b1367d54(formatter) && formatter) content = formatter.replace("{name}", name != null ? name : "");
        else if ($e44eb14c4271d0f9$export$f6e2535fb5126e54(formatter)) content = formatter(name);
        var textColor = isSelected ? textStyleModel.getTextColor() : legendItemModel.get("inactiveColor");
        itemGroup.add(new $6d12d9a137e168c2$export$2e2bcd8739ae039({
            style: (0, $75926670b032879d$export$f8998c3d0a13de59)(textStyleModel, {
                text: content,
                x: textX,
                y: itemHeight / 2,
                fill: textColor,
                align: textAlign,
                verticalAlign: "middle"
            }, {
                inheritColor: textColor
            })
        }));
        // Add a invisible rect to increase the area of mouse hover
        var hitRect = new $538026eba361a92a$export$2e2bcd8739ae039({
            shape: itemGroup.getBoundingRect(),
            style: {
                // Cannot use 'invisible' because SVG SSR will miss the node
                fill: "transparent"
            }
        });
        var tooltipModel = legendItemModel.getModel("tooltip");
        if (tooltipModel.get("show")) $6aec2e68b45f8796$export$fc6410d97fab306c({
            el: hitRect,
            componentModel: legendModel,
            itemName: name,
            itemTooltipOption: tooltipModel.option
        });
        itemGroup.add(hitRect);
        itemGroup.eachChild(function(child) {
            child.silent = true;
        });
        hitRect.silent = !selectMode;
        this.getContentGroup().add(itemGroup);
        (0, $e3c0a36328c28ac4$export$5f393df0b5aee2e7)(itemGroup);
        // @ts-ignore
        itemGroup.__legendDataIndex = dataIndex;
        return itemGroup;
    };
    LegendView.prototype.layoutInner = function(legendModel, itemAlign, maxSize, isFirstRender, selector, selectorPosition) {
        var contentGroup = this.getContentGroup();
        var selectorGroup = this.getSelectorGroup();
        // Place items in contentGroup.
        $074356ab3d6b1cdb$export$827f4ee28efc37(legendModel.get("orient"), contentGroup, legendModel.get("itemGap"), maxSize.width, maxSize.height);
        var contentRect = contentGroup.getBoundingRect();
        var contentPos = [
            -contentRect.x,
            -contentRect.y
        ];
        selectorGroup.markRedraw();
        contentGroup.markRedraw();
        if (selector) {
            // Place buttons in selectorGroup
            $074356ab3d6b1cdb$export$827f4ee28efc37(// Buttons in selectorGroup always layout horizontally
            "horizontal", selectorGroup, legendModel.get("selectorItemGap", true));
            var selectorRect = selectorGroup.getBoundingRect();
            var selectorPos = [
                -selectorRect.x,
                -selectorRect.y
            ];
            var selectorButtonGap = legendModel.get("selectorButtonGap", true);
            var orientIdx = legendModel.getOrient().index;
            var wh = orientIdx === 0 ? "width" : "height";
            var hw = orientIdx === 0 ? "height" : "width";
            var yx = orientIdx === 0 ? "y" : "x";
            if (selectorPosition === "end") selectorPos[orientIdx] += contentRect[wh] + selectorButtonGap;
            else contentPos[orientIdx] += selectorRect[wh] + selectorButtonGap;
            // Always align selector to content as 'middle'
            selectorPos[1 - orientIdx] += contentRect[hw] / 2 - selectorRect[hw] / 2;
            selectorGroup.x = selectorPos[0];
            selectorGroup.y = selectorPos[1];
            contentGroup.x = contentPos[0];
            contentGroup.y = contentPos[1];
            var mainRect = {
                x: 0,
                y: 0
            };
            mainRect[wh] = contentRect[wh] + selectorButtonGap + selectorRect[wh];
            mainRect[hw] = Math.max(contentRect[hw], selectorRect[hw]);
            mainRect[yx] = Math.min(0, selectorRect[yx] + selectorPos[1 - orientIdx]);
            return mainRect;
        } else {
            contentGroup.x = contentPos[0];
            contentGroup.y = contentPos[1];
            return this.group.getBoundingRect();
        }
    };
    /**
   * @protected
   */ LegendView.prototype.remove = function() {
        this.getContentGroup().removeAll();
        this._isFirstRender = true;
    };
    LegendView.type = "legend.plain";
    return LegendView;
}((0, $ced42ef9869a1e4c$export$2e2bcd8739ae039));
function $e85785299a991dc5$var$getLegendStyle(iconType, legendItemModel, lineVisualStyle, itemVisualStyle, drawType, isSelected, api) {
    /**
   * Use series style if is inherit;
   * elsewise, use legend style
   */ function handleCommonProps(style, visualStyle) {
        // If lineStyle.width is 'auto', it is set to be 2 if series has border
        if (style.lineWidth === "auto") style.lineWidth = visualStyle.lineWidth > 0 ? 2 : 0;
        $e85785299a991dc5$var$each(style, function(propVal, propName) {
            style[propName] === "inherit" && (style[propName] = visualStyle[propName]);
        });
    }
    // itemStyle
    var itemStyleModel = legendItemModel.getModel("itemStyle");
    var itemStyle = itemStyleModel.getItemStyle();
    var iconBrushType = iconType.lastIndexOf("empty", 0) === 0 ? "fill" : "stroke";
    var decalStyle = itemStyleModel.getShallow("decal");
    itemStyle.decal = !decalStyle || decalStyle === "inherit" ? itemVisualStyle.decal : (0, $0823d6350507a307$export$a3ba048e1a648972)(decalStyle, api);
    if (itemStyle.fill === "inherit") /**
     * Series with visualDrawType as 'stroke' should have
     * series stroke as legend fill
     */ itemStyle.fill = itemVisualStyle[drawType];
    if (itemStyle.stroke === "inherit") /**
     * icon type with "emptyXXX" should use fill color
     * in visual style
     */ itemStyle.stroke = itemVisualStyle[iconBrushType];
    if (itemStyle.opacity === "inherit") /**
     * Use lineStyle.opacity if drawType is stroke
     */ itemStyle.opacity = (drawType === "fill" ? itemVisualStyle : lineVisualStyle).opacity;
    handleCommonProps(itemStyle, itemVisualStyle);
    // lineStyle
    var legendLineModel = legendItemModel.getModel("lineStyle");
    var lineStyle = legendLineModel.getLineStyle();
    handleCommonProps(lineStyle, lineVisualStyle);
    // Fix auto color to real color
    itemStyle.fill === "auto" && (itemStyle.fill = itemVisualStyle.fill);
    itemStyle.stroke === "auto" && (itemStyle.stroke = itemVisualStyle.fill);
    lineStyle.stroke === "auto" && (lineStyle.stroke = itemVisualStyle.fill);
    if (!isSelected) {
        var borderWidth = legendItemModel.get("inactiveBorderWidth");
        /**
     * Since stroke is set to be inactiveBorderColor, it may occur that
     * there is no border in series but border in legend, so we need to
     * use border only when series has border if is set to be auto
     */ var visualHasBorder = itemStyle[iconBrushType];
        itemStyle.lineWidth = borderWidth === "auto" ? itemVisualStyle.lineWidth > 0 && visualHasBorder ? 2 : 0 : itemStyle.lineWidth;
        itemStyle.fill = legendItemModel.get("inactiveColor");
        itemStyle.stroke = legendItemModel.get("inactiveBorderColor");
        lineStyle.stroke = legendLineModel.get("inactiveColor");
        lineStyle.lineWidth = legendLineModel.get("inactiveWidth");
    }
    return {
        itemStyle: itemStyle,
        lineStyle: lineStyle
    };
}
function $e85785299a991dc5$var$getDefaultLegendIcon(opt) {
    var symboType = opt.icon || "roundRect";
    var icon = (0, $f918b475beb849b6$export$af050e04da3a02e8)(symboType, 0, 0, opt.itemWidth, opt.itemHeight, opt.itemStyle.fill, opt.symbolKeepAspect);
    icon.setStyle(opt.itemStyle);
    icon.rotation = (opt.iconRotate || 0) * Math.PI / 180;
    icon.setOrigin([
        opt.itemWidth / 2,
        opt.itemHeight / 2
    ]);
    if (symboType.indexOf("empty") > -1) {
        icon.style.stroke = icon.style.fill;
        icon.style.fill = "#fff";
        icon.style.lineWidth = 2;
    }
    return icon;
}
function $e85785299a991dc5$var$dispatchSelectAction(seriesName, dataName, api, excludeSeriesId) {
    // downplay before unselect
    $e85785299a991dc5$var$dispatchDownplayAction(seriesName, dataName, api, excludeSeriesId);
    api.dispatchAction({
        type: "legendToggleSelect",
        name: seriesName != null ? seriesName : dataName
    });
    // highlight after select
    // TODO highlight immediately may cause animation loss.
    $e85785299a991dc5$var$dispatchHighlightAction(seriesName, dataName, api, excludeSeriesId);
}
function $e85785299a991dc5$var$isUseHoverLayer(api) {
    var list = api.getZr().storage.getDisplayList();
    var emphasisState;
    var i = 0;
    var len = list.length;
    while(i < len && !(emphasisState = list[i].states.emphasis))i++;
    return emphasisState && emphasisState.hoverLayer;
}
function $e85785299a991dc5$var$dispatchHighlightAction(seriesName, dataName, api, excludeSeriesId) {
    // If element hover will move to a hoverLayer.
    if (!$e85785299a991dc5$var$isUseHoverLayer(api)) api.dispatchAction({
        type: "highlight",
        seriesName: seriesName,
        name: dataName,
        excludeSeriesId: excludeSeriesId
    });
}
function $e85785299a991dc5$var$dispatchDownplayAction(seriesName, dataName, api, excludeSeriesId) {
    // If element hover will move to a hoverLayer.
    if (!$e85785299a991dc5$var$isUseHoverLayer(api)) api.dispatchAction({
        type: "downplay",
        seriesName: seriesName,
        name: dataName,
        excludeSeriesId: excludeSeriesId
    });
}
var $e85785299a991dc5$export$2e2bcd8739ae039 = $e85785299a991dc5$var$LegendView;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ function $16a4d12ae1d2a04b$export$2e2bcd8739ae039(ecModel) {
    var legendModels = ecModel.findComponents({
        mainType: "legend"
    });
    if (legendModels && legendModels.length) ecModel.filterSeries(function(series) {
        // If in any legend component the status is not selected.
        // Because in legend series is assumed selected when it is not in the legend data.
        for(var i = 0; i < legendModels.length; i++){
            if (!legendModels[i].isSelected(series.name)) return false;
        }
        return true;
    });
}


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ // @ts-nocheck

function $2846738ad4105beb$var$legendSelectActionHandler(methodName, payload, ecModel) {
    var selectedMap = {};
    var isToggleSelect = methodName === "toggleSelected";
    var isSelected;
    // Update all legend components
    ecModel.eachComponent("legend", function(legendModel) {
        if (isToggleSelect && isSelected != null) // Force other legend has same selected status
        // Or the first is toggled to true and other are toggled to false
        // In the case one legend has some item unSelected in option. And if other legend
        // doesn't has the item, they will assume it is selected.
        legendModel[isSelected ? "select" : "unSelect"](payload.name);
        else if (methodName === "allSelect" || methodName === "inverseSelect") legendModel[methodName]();
        else {
            legendModel[methodName](payload.name);
            isSelected = legendModel.isSelected(payload.name);
        }
        var legendData = legendModel.getData();
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(legendData, function(model) {
            var name = model.get("name");
            // Wrap element
            if (name === "\n" || name === "") return;
            var isItemSelected = legendModel.isSelected(name);
            if (selectedMap.hasOwnProperty(name)) // Unselected if any legend is unselected
            selectedMap[name] = selectedMap[name] && isItemSelected;
            else selectedMap[name] = isItemSelected;
        });
    });
    // Return the event explicitly
    return methodName === "allSelect" || methodName === "inverseSelect" ? {
        selected: selectedMap
    } : {
        name: payload.name,
        selected: selectedMap
    };
}
function $2846738ad4105beb$export$139982ea529c452f(registers) {
    /**
   * @event legendToggleSelect
   * @type {Object}
   * @property {string} type 'legendToggleSelect'
   * @property {string} [from]
   * @property {string} name Series name or data item name
   */ registers.registerAction("legendToggleSelect", "legendselectchanged", (0, $e44eb14c4271d0f9$export$c3095a23b368d1f2)($2846738ad4105beb$var$legendSelectActionHandler, "toggleSelected"));
    registers.registerAction("legendAllSelect", "legendselectall", (0, $e44eb14c4271d0f9$export$c3095a23b368d1f2)($2846738ad4105beb$var$legendSelectActionHandler, "allSelect"));
    registers.registerAction("legendInverseSelect", "legendinverseselect", (0, $e44eb14c4271d0f9$export$c3095a23b368d1f2)($2846738ad4105beb$var$legendSelectActionHandler, "inverseSelect"));
    /**
   * @event legendSelect
   * @type {Object}
   * @property {string} type 'legendSelect'
   * @property {string} name Series name or data item name
   */ registers.registerAction("legendSelect", "legendselected", (0, $e44eb14c4271d0f9$export$c3095a23b368d1f2)($2846738ad4105beb$var$legendSelectActionHandler, "select"));
    /**
   * @event legendUnSelect
   * @type {Object}
   * @property {string} type 'legendUnSelect'
   * @property {string} name Series name or data item name
   */ registers.registerAction("legendUnSelect", "legendunselected", (0, $e44eb14c4271d0f9$export$c3095a23b368d1f2)($2846738ad4105beb$var$legendSelectActionHandler, "unSelect"));
}


function $5ed11a473d5fd6a3$export$4b3e715f166fdd78(registers) {
    registers.registerComponentModel((0, $9cee1d70114eea71$export$2e2bcd8739ae039));
    registers.registerComponentView((0, $e85785299a991dc5$export$2e2bcd8739ae039));
    registers.registerProcessor(registers.PRIORITY.PROCESSOR.SERIES_FILTER, (0, $16a4d12ae1d2a04b$export$2e2bcd8739ae039));
    registers.registerSubTypeDefaulter("legend", function() {
        return "plain";
    });
    (0, $2846738ad4105beb$export$139982ea529c452f)(registers);
}


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 



var $444be200847703f3$var$ScrollableLegendModel = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(ScrollableLegendModel, _super);
    function ScrollableLegendModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = ScrollableLegendModel.type;
        return _this;
    }
    /**
   * @param {number} scrollDataIndex
   */ ScrollableLegendModel.prototype.setScrollDataIndex = function(scrollDataIndex) {
        this.option.scrollDataIndex = scrollDataIndex;
    };
    ScrollableLegendModel.prototype.init = function(option, parentModel, ecModel) {
        var inputPositionParams = (0, $074356ab3d6b1cdb$export$4b0d20af19c9875e)(option);
        _super.prototype.init.call(this, option, parentModel, ecModel);
        $444be200847703f3$var$mergeAndNormalizeLayoutParams(this, option, inputPositionParams);
    };
    /**
   * @override
   */ ScrollableLegendModel.prototype.mergeOption = function(option, ecModel) {
        _super.prototype.mergeOption.call(this, option, ecModel);
        $444be200847703f3$var$mergeAndNormalizeLayoutParams(this, this.option, option);
    };
    ScrollableLegendModel.type = "legend.scroll";
    ScrollableLegendModel.defaultOption = (0, $5e939fc0112f61e7$export$68acc510e46fef2)((0, $9cee1d70114eea71$export$2e2bcd8739ae039).defaultOption, {
        scrollDataIndex: 0,
        pageButtonItemGap: 5,
        pageButtonGap: null,
        pageButtonPosition: "end",
        pageFormatter: "{current}/{total}",
        pageIcons: {
            horizontal: [
                "M0,0L12,-10L12,10z",
                "M0,0L-12,-10L-12,10z"
            ],
            vertical: [
                "M0,0L20,0L10,-20z",
                "M0,0L20,0L10,20z"
            ]
        },
        pageIconColor: "#2f4554",
        pageIconInactiveColor: "#aaa",
        pageIconSize: 15,
        pageTextStyle: {
            color: "#333"
        },
        animationDurationUpdate: 800
    });
    return ScrollableLegendModel;
}((0, $9cee1d70114eea71$export$2e2bcd8739ae039));
// Do not `ignoreSize` to enable setting {left: 10, right: 10}.
function $444be200847703f3$var$mergeAndNormalizeLayoutParams(legendModel, target, raw) {
    var orient = legendModel.getOrient();
    var ignoreSize = [
        1,
        1
    ];
    ignoreSize[orient.index] = 0;
    (0, $074356ab3d6b1cdb$export$1754cb91f16ca028)(target, raw, {
        type: "box",
        ignoreSize: !!ignoreSize
    });
}
var $444be200847703f3$export$2e2bcd8739ae039 = $444be200847703f3$var$ScrollableLegendModel;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 




var $8656f50a6af08f92$var$Group = $748aea24eee93173$export$2e2bcd8739ae039;
var $8656f50a6af08f92$var$WH = [
    "width",
    "height"
];
var $8656f50a6af08f92$var$XY = [
    "x",
    "y"
];
var $8656f50a6af08f92$var$ScrollableLegendView = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(ScrollableLegendView, _super);
    function ScrollableLegendView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = ScrollableLegendView.type;
        _this.newlineDisabled = true;
        _this._currentIndex = 0;
        return _this;
    }
    ScrollableLegendView.prototype.init = function() {
        _super.prototype.init.call(this);
        this.group.add(this._containerGroup = new $8656f50a6af08f92$var$Group());
        this._containerGroup.add(this.getContentGroup());
        this.group.add(this._controllerGroup = new $8656f50a6af08f92$var$Group());
    };
    /**
   * @override
   */ ScrollableLegendView.prototype.resetInner = function() {
        _super.prototype.resetInner.call(this);
        this._controllerGroup.removeAll();
        this._containerGroup.removeClipPath();
        this._containerGroup.__rectSize = null;
    };
    /**
   * @override
   */ ScrollableLegendView.prototype.renderInner = function(itemAlign, legendModel, ecModel, api, selector, orient, selectorPosition) {
        var self = this;
        // Render content items.
        _super.prototype.renderInner.call(this, itemAlign, legendModel, ecModel, api, selector, orient, selectorPosition);
        var controllerGroup = this._controllerGroup;
        // FIXME: support be 'auto' adapt to size number text length,
        // e.g., '3/12345' should not overlap with the control arrow button.
        var pageIconSize = legendModel.get("pageIconSize", true);
        var pageIconSizeArr = $e44eb14c4271d0f9$export$43bee75e5e14138e(pageIconSize) ? pageIconSize : [
            pageIconSize,
            pageIconSize
        ];
        createPageButton("pagePrev", 0);
        var pageTextStyleModel = legendModel.getModel("pageTextStyle");
        controllerGroup.add(new $6d12d9a137e168c2$export$2e2bcd8739ae039({
            name: "pageText",
            style: {
                // Placeholder to calculate a proper layout.
                text: "xx/xx",
                fill: pageTextStyleModel.getTextColor(),
                font: pageTextStyleModel.getFont(),
                verticalAlign: "middle",
                align: "center"
            },
            silent: true
        }));
        createPageButton("pageNext", 1);
        function createPageButton(name, iconIdx) {
            var pageDataIndexName = name + "DataIndex";
            var icon = $6aec2e68b45f8796$export$274edc73af1ae9c8(legendModel.get("pageIcons", true)[legendModel.getOrient().name][iconIdx], {
                // Buttons will be created in each render, so we do not need
                // to worry about avoiding using legendModel kept in scope.
                onclick: $e44eb14c4271d0f9$export$2385a24977818dd0(self._pageGo, self, pageDataIndexName, legendModel, api)
            }, {
                x: -pageIconSizeArr[0] / 2,
                y: -pageIconSizeArr[1] / 2,
                width: pageIconSizeArr[0],
                height: pageIconSizeArr[1]
            });
            icon.name = name;
            controllerGroup.add(icon);
        }
    };
    /**
   * @override
   */ ScrollableLegendView.prototype.layoutInner = function(legendModel, itemAlign, maxSize, isFirstRender, selector, selectorPosition) {
        var selectorGroup = this.getSelectorGroup();
        var orientIdx = legendModel.getOrient().index;
        var wh = $8656f50a6af08f92$var$WH[orientIdx];
        var xy = $8656f50a6af08f92$var$XY[orientIdx];
        var hw = $8656f50a6af08f92$var$WH[1 - orientIdx];
        var yx = $8656f50a6af08f92$var$XY[1 - orientIdx];
        selector && $074356ab3d6b1cdb$export$827f4ee28efc37(// Buttons in selectorGroup always layout horizontally
        "horizontal", selectorGroup, legendModel.get("selectorItemGap", true));
        var selectorButtonGap = legendModel.get("selectorButtonGap", true);
        var selectorRect = selectorGroup.getBoundingRect();
        var selectorPos = [
            -selectorRect.x,
            -selectorRect.y
        ];
        var processMaxSize = $e44eb14c4271d0f9$export$9cd59f9826255e47(maxSize);
        selector && (processMaxSize[wh] = maxSize[wh] - selectorRect[wh] - selectorButtonGap);
        var mainRect = this._layoutContentAndController(legendModel, isFirstRender, processMaxSize, orientIdx, wh, hw, yx, xy);
        if (selector) {
            if (selectorPosition === "end") selectorPos[orientIdx] += mainRect[wh] + selectorButtonGap;
            else {
                var offset = selectorRect[wh] + selectorButtonGap;
                selectorPos[orientIdx] -= offset;
                mainRect[xy] -= offset;
            }
            mainRect[wh] += selectorRect[wh] + selectorButtonGap;
            selectorPos[1 - orientIdx] += mainRect[yx] + mainRect[hw] / 2 - selectorRect[hw] / 2;
            mainRect[hw] = Math.max(mainRect[hw], selectorRect[hw]);
            mainRect[yx] = Math.min(mainRect[yx], selectorRect[yx] + selectorPos[1 - orientIdx]);
            selectorGroup.x = selectorPos[0];
            selectorGroup.y = selectorPos[1];
            selectorGroup.markRedraw();
        }
        return mainRect;
    };
    ScrollableLegendView.prototype._layoutContentAndController = function(legendModel, isFirstRender, maxSize, orientIdx, wh, hw, yx, xy) {
        var contentGroup = this.getContentGroup();
        var containerGroup = this._containerGroup;
        var controllerGroup = this._controllerGroup;
        // Place items in contentGroup.
        $074356ab3d6b1cdb$export$827f4ee28efc37(legendModel.get("orient"), contentGroup, legendModel.get("itemGap"), !orientIdx ? null : maxSize.width, orientIdx ? null : maxSize.height);
        $074356ab3d6b1cdb$export$827f4ee28efc37(// Buttons in controller are layout always horizontally.
        "horizontal", controllerGroup, legendModel.get("pageButtonItemGap", true));
        var contentRect = contentGroup.getBoundingRect();
        var controllerRect = controllerGroup.getBoundingRect();
        var showController = this._showController = contentRect[wh] > maxSize[wh];
        // In case that the inner elements of contentGroup layout do not based on [0, 0]
        var contentPos = [
            -contentRect.x,
            -contentRect.y
        ];
        // Remain contentPos when scroll animation perfroming.
        // If first rendering, `contentGroup.position` is [0, 0], which
        // does not make sense and may cause unexepcted animation if adopted.
        if (!isFirstRender) contentPos[orientIdx] = contentGroup[xy];
        // Layout container group based on 0.
        var containerPos = [
            0,
            0
        ];
        var controllerPos = [
            -controllerRect.x,
            -controllerRect.y
        ];
        var pageButtonGap = $e44eb14c4271d0f9$export$995e01f2f5c9d030(legendModel.get("pageButtonGap", true), legendModel.get("itemGap", true));
        // Place containerGroup and controllerGroup and contentGroup.
        if (showController) {
            var pageButtonPosition = legendModel.get("pageButtonPosition", true);
            // controller is on the right / bottom.
            if (pageButtonPosition === "end") controllerPos[orientIdx] += maxSize[wh] - controllerRect[wh];
            else containerPos[orientIdx] += controllerRect[wh] + pageButtonGap;
        }
        // Always align controller to content as 'middle'.
        controllerPos[1 - orientIdx] += contentRect[hw] / 2 - controllerRect[hw] / 2;
        contentGroup.setPosition(contentPos);
        containerGroup.setPosition(containerPos);
        controllerGroup.setPosition(controllerPos);
        // Calculate `mainRect` and set `clipPath`.
        // mainRect should not be calculated by `this.group.getBoundingRect()`
        // for sake of the overflow.
        var mainRect = {
            x: 0,
            y: 0
        };
        // Consider content may be overflow (should be clipped).
        mainRect[wh] = showController ? maxSize[wh] : contentRect[wh];
        mainRect[hw] = Math.max(contentRect[hw], controllerRect[hw]);
        // `containerRect[yx] + containerPos[1 - orientIdx]` is 0.
        mainRect[yx] = Math.min(0, controllerRect[yx] + controllerPos[1 - orientIdx]);
        containerGroup.__rectSize = maxSize[wh];
        if (showController) {
            var clipShape = {
                x: 0,
                y: 0
            };
            clipShape[wh] = Math.max(maxSize[wh] - controllerRect[wh] - pageButtonGap, 0);
            clipShape[hw] = mainRect[hw];
            containerGroup.setClipPath(new $538026eba361a92a$export$2e2bcd8739ae039({
                shape: clipShape
            }));
            // Consider content may be larger than container, container rect
            // can not be obtained from `containerGroup.getBoundingRect()`.
            containerGroup.__rectSize = clipShape[wh];
        } else // Do not remove or ignore controller. Keep them set as placeholders.
        controllerGroup.eachChild(function(child) {
            child.attr({
                invisible: true,
                silent: true
            });
        });
        // Content translate animation.
        var pageInfo = this._getPageInfo(legendModel);
        pageInfo.pageIndex != null && $f7e735722ff36e8c$export$c8dce3c08436e91e(contentGroup, {
            x: pageInfo.contentPosition[0],
            y: pageInfo.contentPosition[1]
        }, // When switch from "show controller" to "not show controller", view should be
        // updated immediately without animation, otherwise causes weird effect.
        showController ? legendModel : null);
        this._updatePageInfoView(legendModel, pageInfo);
        return mainRect;
    };
    ScrollableLegendView.prototype._pageGo = function(to, legendModel, api) {
        var scrollDataIndex = this._getPageInfo(legendModel)[to];
        scrollDataIndex != null && api.dispatchAction({
            type: "legendScroll",
            scrollDataIndex: scrollDataIndex,
            legendId: legendModel.id
        });
    };
    ScrollableLegendView.prototype._updatePageInfoView = function(legendModel, pageInfo) {
        var controllerGroup = this._controllerGroup;
        $e44eb14c4271d0f9$export$79b2f7037acddd43([
            "pagePrev",
            "pageNext"
        ], function(name) {
            var key = name + "DataIndex";
            var canJump = pageInfo[key] != null;
            var icon = controllerGroup.childOfName(name);
            if (icon) {
                icon.setStyle("fill", canJump ? legendModel.get("pageIconColor", true) : legendModel.get("pageIconInactiveColor", true));
                icon.cursor = canJump ? "pointer" : "default";
            }
        });
        var pageText = controllerGroup.childOfName("pageText");
        var pageFormatter = legendModel.get("pageFormatter");
        var pageIndex = pageInfo.pageIndex;
        var current = pageIndex != null ? pageIndex + 1 : 0;
        var total = pageInfo.pageCount;
        pageText && pageFormatter && pageText.setStyle("text", $e44eb14c4271d0f9$export$844ec244b1367d54(pageFormatter) ? pageFormatter.replace("{current}", current == null ? "" : current + "").replace("{total}", total == null ? "" : total + "") : pageFormatter({
            current: current,
            total: total
        }));
    };
    /**
   *  contentPosition: Array.<number>, null when data item not found.
   *  pageIndex: number, null when data item not found.
   *  pageCount: number, always be a number, can be 0.
   *  pagePrevDataIndex: number, null when no previous page.
   *  pageNextDataIndex: number, null when no next page.
   * }
   */ ScrollableLegendView.prototype._getPageInfo = function(legendModel) {
        var scrollDataIndex = legendModel.get("scrollDataIndex", true);
        var contentGroup = this.getContentGroup();
        var containerRectSize = this._containerGroup.__rectSize;
        var orientIdx = legendModel.getOrient().index;
        var wh = $8656f50a6af08f92$var$WH[orientIdx];
        var xy = $8656f50a6af08f92$var$XY[orientIdx];
        var targetItemIndex = this._findTargetItemIndex(scrollDataIndex);
        var children = contentGroup.children();
        var targetItem = children[targetItemIndex];
        var itemCount = children.length;
        var pCount = !itemCount ? 0 : 1;
        var result = {
            contentPosition: [
                contentGroup.x,
                contentGroup.y
            ],
            pageCount: pCount,
            pageIndex: pCount - 1,
            pagePrevDataIndex: null,
            pageNextDataIndex: null
        };
        if (!targetItem) return result;
        var targetItemInfo = getItemInfo(targetItem);
        result.contentPosition[orientIdx] = -targetItemInfo.s;
        // Strategy:
        // (1) Always align based on the left/top most item.
        // (2) It is user-friendly that the last item shown in the
        // current window is shown at the begining of next window.
        // Otherwise if half of the last item is cut by the window,
        // it will have no chance to display entirely.
        // (3) Consider that item size probably be different, we
        // have calculate pageIndex by size rather than item index,
        // and we can not get page index directly by division.
        // (4) The window is to narrow to contain more than
        // one item, we should make sure that the page can be fliped.
        for(var i = targetItemIndex + 1, winStartItemInfo = targetItemInfo, winEndItemInfo = targetItemInfo, currItemInfo = null; i <= itemCount; ++i){
            currItemInfo = getItemInfo(children[i]);
            if (// Half of the last item is out of the window.
            !currItemInfo && winEndItemInfo.e > winStartItemInfo.s + containerRectSize || currItemInfo && !intersect(currItemInfo, winStartItemInfo.s)) {
                if (winEndItemInfo.i > winStartItemInfo.i) winStartItemInfo = winEndItemInfo;
                else // e.g., when page size is smaller than item size.
                winStartItemInfo = currItemInfo;
                if (winStartItemInfo) {
                    if (result.pageNextDataIndex == null) result.pageNextDataIndex = winStartItemInfo.i;
                    ++result.pageCount;
                }
            }
            winEndItemInfo = currItemInfo;
        }
        for(var i = targetItemIndex - 1, winStartItemInfo = targetItemInfo, winEndItemInfo = targetItemInfo, currItemInfo = null; i >= -1; --i){
            currItemInfo = getItemInfo(children[i]);
            if (// If the the end item does not intersect with the window started
            // from the current item, a page can be settled.
            (!currItemInfo || !intersect(winEndItemInfo, currItemInfo.s)) && winStartItemInfo.i < winEndItemInfo.i) {
                winEndItemInfo = winStartItemInfo;
                if (result.pagePrevDataIndex == null) result.pagePrevDataIndex = winStartItemInfo.i;
                ++result.pageCount;
                ++result.pageIndex;
            }
            winStartItemInfo = currItemInfo;
        }
        return result;
        function getItemInfo(el) {
            if (el) {
                var itemRect = el.getBoundingRect();
                var start = itemRect[xy] + el[xy];
                return {
                    s: start,
                    e: start + itemRect[wh],
                    i: el.__legendDataIndex
                };
            }
        }
        function intersect(itemInfo, winStart) {
            return itemInfo.e >= winStart && itemInfo.s <= winStart + containerRectSize;
        }
    };
    ScrollableLegendView.prototype._findTargetItemIndex = function(targetDataIndex) {
        if (!this._showController) return 0;
        var index;
        var contentGroup = this.getContentGroup();
        var defaultIndex;
        contentGroup.eachChild(function(child, idx) {
            var legendDataIdx = child.__legendDataIndex;
            // FIXME
            // If the given targetDataIndex (from model) is illegal,
            // we use defaultIndex. But the index on the legend model and
            // action payload is still illegal. That case will not be
            // changed until some scenario requires.
            if (defaultIndex == null && legendDataIdx != null) defaultIndex = idx;
            if (legendDataIdx === targetDataIndex) index = idx;
        });
        return index != null ? index : defaultIndex;
    };
    ScrollableLegendView.type = "legend.scroll";
    return ScrollableLegendView;
}((0, $e85785299a991dc5$export$2e2bcd8739ae039));
var $8656f50a6af08f92$export$2e2bcd8739ae039 = $8656f50a6af08f92$var$ScrollableLegendView;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ function $91210acd5527072d$export$2e2bcd8739ae039(registers) {
    /**
   * @event legendScroll
   * @type {Object}
   * @property {string} type 'legendScroll'
   * @property {string} scrollDataIndex
   */ registers.registerAction("legendScroll", "legendscroll", function(payload, ecModel) {
        var scrollDataIndex = payload.scrollDataIndex;
        scrollDataIndex != null && ecModel.eachComponent({
            mainType: "legend",
            subType: "scroll",
            query: payload
        }, function(legendModel) {
            legendModel.setScrollDataIndex(scrollDataIndex);
        });
    });
}


function $424ba4e729adf74e$export$4b3e715f166fdd78(registers) {
    (0, $2456b78b4596463d$export$1f96ae73734a86cc)((0, $5ed11a473d5fd6a3$export$4b3e715f166fdd78));
    registers.registerComponentModel((0, $444be200847703f3$export$2e2bcd8739ae039));
    registers.registerComponentView((0, $8656f50a6af08f92$export$2e2bcd8739ae039));
    (0, $91210acd5527072d$export$2e2bcd8739ae039)(registers);
}


function $b178fe6f21151f8a$export$4b3e715f166fdd78(registers) {
    (0, $2456b78b4596463d$export$1f96ae73734a86cc)((0, $5ed11a473d5fd6a3$export$4b3e715f166fdd78));
    (0, $2456b78b4596463d$export$1f96ae73734a86cc)((0, $424ba4e729adf74e$export$4b3e715f166fdd78));
}

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 


var $867f8f105524fa08$var$InsideZoomModel = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(InsideZoomModel, _super);
    function InsideZoomModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = InsideZoomModel.type;
        return _this;
    }
    InsideZoomModel.type = "dataZoom.inside";
    InsideZoomModel.defaultOption = (0, $5e939fc0112f61e7$export$68acc510e46fef2)((0, $ffd97d3630a9786d$export$2e2bcd8739ae039).defaultOption, {
        disabled: false,
        zoomLock: false,
        zoomOnMouseWheel: true,
        moveOnMouseMove: true,
        moveOnMouseWheel: false,
        preventDefaultMouseMove: true
    });
    return InsideZoomModel;
}((0, $ffd97d3630a9786d$export$2e2bcd8739ae039));
var $867f8f105524fa08$export$2e2bcd8739ae039 = $867f8f105524fa08$var$InsideZoomModel;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ // Only create one roam controller for each coordinate system.
// one roam controller might be refered by two inside data zoom
// components (for example, one for x and one for y). When user
// pan or zoom, only dispatch one action for those data zoom
// components.
/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 




var $790ba57bd9140039$var$RoamController = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(RoamController, _super);
    function RoamController(zr) {
        var _this = _super.call(this) || this;
        _this._zr = zr;
        // Avoid two roamController bind the same handler
        var mousedownHandler = (0, $e44eb14c4271d0f9$export$2385a24977818dd0)(_this._mousedownHandler, _this);
        var mousemoveHandler = (0, $e44eb14c4271d0f9$export$2385a24977818dd0)(_this._mousemoveHandler, _this);
        var mouseupHandler = (0, $e44eb14c4271d0f9$export$2385a24977818dd0)(_this._mouseupHandler, _this);
        var mousewheelHandler = (0, $e44eb14c4271d0f9$export$2385a24977818dd0)(_this._mousewheelHandler, _this);
        var pinchHandler = (0, $e44eb14c4271d0f9$export$2385a24977818dd0)(_this._pinchHandler, _this);
        /**
     * Notice: only enable needed types. For example, if 'zoom'
     * is not needed, 'zoom' should not be enabled, otherwise
     * default mousewheel behaviour (scroll page) will be disabled.
     */ _this.enable = function(controlType, opt) {
            // Disable previous first
            this.disable();
            this._opt = (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)((0, $e44eb14c4271d0f9$export$9cd59f9826255e47)(opt) || {}, {
                zoomOnMouseWheel: true,
                moveOnMouseMove: true,
                // By default, wheel do not trigger move.
                moveOnMouseWheel: false,
                preventDefaultMouseMove: true
            });
            if (controlType == null) controlType = true;
            if (controlType === true || controlType === "move" || controlType === "pan") {
                zr.on("mousedown", mousedownHandler);
                zr.on("mousemove", mousemoveHandler);
                zr.on("mouseup", mouseupHandler);
            }
            if (controlType === true || controlType === "scale" || controlType === "zoom") {
                zr.on("mousewheel", mousewheelHandler);
                zr.on("pinch", pinchHandler);
            }
        };
        _this.disable = function() {
            zr.off("mousedown", mousedownHandler);
            zr.off("mousemove", mousemoveHandler);
            zr.off("mouseup", mouseupHandler);
            zr.off("mousewheel", mousewheelHandler);
            zr.off("pinch", pinchHandler);
        };
        return _this;
    }
    RoamController.prototype.isDragging = function() {
        return this._dragging;
    };
    RoamController.prototype.isPinching = function() {
        return this._pinching;
    };
    RoamController.prototype.setPointerChecker = function(pointerChecker) {
        this.pointerChecker = pointerChecker;
    };
    RoamController.prototype.dispose = function() {
        this.disable();
    };
    RoamController.prototype._mousedownHandler = function(e) {
        if ($81f76356654e394a$export$b7ae4cded3e71bd2(e)) return;
        var el = e.target;
        while(el){
            if (el.draggable) return;
            // check if host is draggable
            el = el.__hostTarget || el.parent;
        }
        var x = e.offsetX;
        var y = e.offsetY;
        // Only check on mosedown, but not mousemove.
        // Mouse can be out of target when mouse moving.
        if (this.pointerChecker && this.pointerChecker(e, x, y)) {
            this._x = x;
            this._y = y;
            this._dragging = true;
        }
    };
    RoamController.prototype._mousemoveHandler = function(e) {
        if (!this._dragging || !$790ba57bd9140039$var$isAvailableBehavior("moveOnMouseMove", e, this._opt) || e.gestureEvent === "pinch" || $2d46a12b440d2a8b$export$5623cba512bc9470(this._zr, "globalPan")) return;
        var x = e.offsetX;
        var y = e.offsetY;
        var oldX = this._x;
        var oldY = this._y;
        var dx = x - oldX;
        var dy = y - oldY;
        this._x = x;
        this._y = y;
        this._opt.preventDefaultMouseMove && $81f76356654e394a$export$fa6813432f753b0d(e.event);
        $790ba57bd9140039$var$trigger(this, "pan", "moveOnMouseMove", e, {
            dx: dx,
            dy: dy,
            oldX: oldX,
            oldY: oldY,
            newX: x,
            newY: y,
            isAvailableBehavior: null
        });
    };
    RoamController.prototype._mouseupHandler = function(e) {
        if (!$81f76356654e394a$export$b7ae4cded3e71bd2(e)) this._dragging = false;
    };
    RoamController.prototype._mousewheelHandler = function(e) {
        var shouldZoom = $790ba57bd9140039$var$isAvailableBehavior("zoomOnMouseWheel", e, this._opt);
        var shouldMove = $790ba57bd9140039$var$isAvailableBehavior("moveOnMouseWheel", e, this._opt);
        var wheelDelta = e.wheelDelta;
        var absWheelDeltaDelta = Math.abs(wheelDelta);
        var originX = e.offsetX;
        var originY = e.offsetY;
        // wheelDelta maybe -0 in chrome mac.
        if (wheelDelta === 0 || !shouldZoom && !shouldMove) return;
        // If both `shouldZoom` and `shouldMove` is true, trigger
        // their event both, and the final behavior is determined
        // by event listener themselves.
        if (shouldZoom) {
            // Convenience:
            // Mac and VM Windows on Mac: scroll up: zoom out.
            // Windows: scroll up: zoom in.
            // FIXME: Should do more test in different environment.
            // wheelDelta is too complicated in difference nvironment
            // (https://developer.mozilla.org/en-US/docs/Web/Events/mousewheel),
            // although it has been normallized by zrender.
            // wheelDelta of mouse wheel is bigger than touch pad.
            var factor = absWheelDeltaDelta > 3 ? 1.4 : absWheelDeltaDelta > 1 ? 1.2 : 1.1;
            var scale = wheelDelta > 0 ? factor : 1 / factor;
            $790ba57bd9140039$var$checkPointerAndTrigger(this, "zoom", "zoomOnMouseWheel", e, {
                scale: scale,
                originX: originX,
                originY: originY,
                isAvailableBehavior: null
            });
        }
        if (shouldMove) {
            // FIXME: Should do more test in different environment.
            var absDelta = Math.abs(wheelDelta);
            // wheelDelta of mouse wheel is bigger than touch pad.
            var scrollDelta = (wheelDelta > 0 ? 1 : -1) * (absDelta > 3 ? 0.4 : absDelta > 1 ? 0.15 : 0.05);
            $790ba57bd9140039$var$checkPointerAndTrigger(this, "scrollMove", "moveOnMouseWheel", e, {
                scrollDelta: scrollDelta,
                originX: originX,
                originY: originY,
                isAvailableBehavior: null
            });
        }
    };
    RoamController.prototype._pinchHandler = function(e) {
        if ($2d46a12b440d2a8b$export$5623cba512bc9470(this._zr, "globalPan")) return;
        var scale = e.pinchScale > 1 ? 1.1 : 1 / 1.1;
        $790ba57bd9140039$var$checkPointerAndTrigger(this, "zoom", null, e, {
            scale: scale,
            originX: e.pinchX,
            originY: e.pinchY,
            isAvailableBehavior: null
        });
    };
    return RoamController;
}((0, $a2a21788c772d0fe$export$2e2bcd8739ae039));
function $790ba57bd9140039$var$checkPointerAndTrigger(controller, eventName, behaviorToCheck, e, contollerEvent) {
    if (controller.pointerChecker && controller.pointerChecker(e, contollerEvent.originX, contollerEvent.originY)) {
        // When mouse is out of roamController rect,
        // default befavoius should not be be disabled, otherwise
        // page sliding is disabled, contrary to expectation.
        $81f76356654e394a$export$fa6813432f753b0d(e.event);
        $790ba57bd9140039$var$trigger(controller, eventName, behaviorToCheck, e, contollerEvent);
    }
}
function $790ba57bd9140039$var$trigger(controller, eventName, behaviorToCheck, e, contollerEvent) {
    // Also provide behavior checker for event listener, for some case that
    // multiple components share one listener.
    contollerEvent.isAvailableBehavior = (0, $e44eb14c4271d0f9$export$2385a24977818dd0)($790ba57bd9140039$var$isAvailableBehavior, null, behaviorToCheck, e);
    // TODO should not have type issue.
    controller.trigger(eventName, contollerEvent);
}
// settings: {
//     zoomOnMouseWheel
//     moveOnMouseMove
//     moveOnMouseWheel
// }
// The value can be: true / false / 'shift' / 'ctrl' / 'alt'.
function $790ba57bd9140039$var$isAvailableBehavior(behaviorToCheck, e, settings) {
    var setting = settings[behaviorToCheck];
    return !behaviorToCheck || setting && (!(0, $e44eb14c4271d0f9$export$844ec244b1367d54)(setting) || e.event[setting + "Key"]);
}
var $790ba57bd9140039$export$2e2bcd8739ae039 = $790ba57bd9140039$var$RoamController;






var $6a54aab21a858be1$var$inner = (0, $8917c02fd8256c67$export$64df9f8d92ae083f)();
function $6a54aab21a858be1$export$c499fdc26107c565(api, dataZoomModel, getRange) {
    $6a54aab21a858be1$var$inner(api).coordSysRecordMap.each(function(coordSysRecord) {
        var dzInfo = coordSysRecord.dataZoomInfoMap.get(dataZoomModel.uid);
        if (dzInfo) dzInfo.getRange = getRange;
    });
}
function $6a54aab21a858be1$export$d074fdbbb2bf218c(api, dataZoomModel) {
    var coordSysRecordMap = $6a54aab21a858be1$var$inner(api).coordSysRecordMap;
    var coordSysKeyArr = coordSysRecordMap.keys();
    for(var i = 0; i < coordSysKeyArr.length; i++){
        var coordSysKey = coordSysKeyArr[i];
        var coordSysRecord = coordSysRecordMap.get(coordSysKey);
        var dataZoomInfoMap = coordSysRecord.dataZoomInfoMap;
        if (dataZoomInfoMap) {
            var dzUid = dataZoomModel.uid;
            var dzInfo = dataZoomInfoMap.get(dzUid);
            if (dzInfo) {
                dataZoomInfoMap.removeKey(dzUid);
                if (!dataZoomInfoMap.keys().length) $6a54aab21a858be1$var$disposeCoordSysRecord(coordSysRecordMap, coordSysRecord);
            }
        }
    }
}
function $6a54aab21a858be1$var$disposeCoordSysRecord(coordSysRecordMap, coordSysRecord) {
    if (coordSysRecord) {
        coordSysRecordMap.removeKey(coordSysRecord.model.uid);
        var controller = coordSysRecord.controller;
        controller && controller.dispose();
    }
}
function $6a54aab21a858be1$var$createCoordSysRecord(api, coordSysModel) {
    // These init props will never change after record created.
    var coordSysRecord = {
        model: coordSysModel,
        containsPoint: (0, $e44eb14c4271d0f9$export$c3095a23b368d1f2)($6a54aab21a858be1$var$containsPoint, coordSysModel),
        dispatchAction: (0, $e44eb14c4271d0f9$export$c3095a23b368d1f2)($6a54aab21a858be1$var$dispatchAction, api),
        dataZoomInfoMap: null,
        controller: null
    };
    // Must not do anything depends on coordSysRecord outside the event handler here,
    // because coordSysRecord not completed yet.
    var controller = coordSysRecord.controller = new (0, $790ba57bd9140039$export$2e2bcd8739ae039)(api.getZr());
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)([
        "pan",
        "zoom",
        "scrollMove"
    ], function(eventName) {
        controller.on(eventName, function(event) {
            var batch = [];
            coordSysRecord.dataZoomInfoMap.each(function(dzInfo) {
                // Check whether the behaviors (zoomOnMouseWheel, moveOnMouseMove,
                // moveOnMouseWheel, ...) enabled.
                if (!event.isAvailableBehavior(dzInfo.model.option)) return;
                var method = (dzInfo.getRange || {})[eventName];
                var range = method && method(dzInfo.dzReferCoordSysInfo, coordSysRecord.model.mainType, coordSysRecord.controller, event);
                !dzInfo.model.get("disabled", true) && range && batch.push({
                    dataZoomId: dzInfo.model.id,
                    start: range[0],
                    end: range[1]
                });
            });
            batch.length && coordSysRecord.dispatchAction(batch);
        });
    });
    return coordSysRecord;
}
/**
 * This action will be throttled.
 */ function $6a54aab21a858be1$var$dispatchAction(api, batch) {
    if (!api.isDisposed()) api.dispatchAction({
        type: "dataZoom",
        animation: {
            easing: "cubicOut",
            duration: 100
        },
        batch: batch
    });
}
function $6a54aab21a858be1$var$containsPoint(coordSysModel, e, x, y) {
    return coordSysModel.coordinateSystem.containPoint([
        x,
        y
    ]);
}
/**
 * Merge roamController settings when multiple dataZooms share one roamController.
 */ function $6a54aab21a858be1$var$mergeControllerParams(dataZoomInfoMap) {
    var controlType;
    // DO NOT use reserved word (true, false, undefined) as key literally. Even if encapsulated
    // as string, it is probably revert to reserved word by compress tool. See #7411.
    var prefix = "type_";
    var typePriority = {
        "type_true": 2,
        "type_move": 1,
        "type_false": 0,
        "type_undefined": -1
    };
    var preventDefaultMouseMove = true;
    dataZoomInfoMap.each(function(dataZoomInfo) {
        var dataZoomModel = dataZoomInfo.model;
        var oneType = dataZoomModel.get("disabled", true) ? false : dataZoomModel.get("zoomLock", true) ? "move" : true;
        if (typePriority[prefix + oneType] > typePriority[prefix + controlType]) controlType = oneType;
        // Prevent default move event by default. If one false, do not prevent. Otherwise
        // users may be confused why it does not work when multiple insideZooms exist.
        preventDefaultMouseMove = preventDefaultMouseMove && dataZoomModel.get("preventDefaultMouseMove", true);
    });
    return {
        controlType: controlType,
        opt: {
            // RoamController will enable all of these functionalities,
            // and the final behavior is determined by its event listener
            // provided by each inside zoom.
            zoomOnMouseWheel: true,
            moveOnMouseMove: true,
            moveOnMouseWheel: true,
            preventDefaultMouseMove: !!preventDefaultMouseMove
        }
    };
}
function $6a54aab21a858be1$export$f3632ddafc9ea51e(registers) {
    registers.registerProcessor(registers.PRIORITY.PROCESSOR.FILTER, function(ecModel, api) {
        var apiInner = $6a54aab21a858be1$var$inner(api);
        var coordSysRecordMap = apiInner.coordSysRecordMap || (apiInner.coordSysRecordMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)());
        coordSysRecordMap.each(function(coordSysRecord) {
            // `coordSysRecordMap` always exists (because it holds the `roam controller`, which should
            // better not re-create each time), but clear `dataZoomInfoMap` each round of the workflow.
            coordSysRecord.dataZoomInfoMap = null;
        });
        ecModel.eachComponent({
            mainType: "dataZoom",
            subType: "inside"
        }, function(dataZoomModel) {
            var dzReferCoordSysWrap = (0, $ce503c6b6cc63ecd$export$b41173dee9da195b)(dataZoomModel);
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(dzReferCoordSysWrap.infoList, function(dzCoordSysInfo) {
                var coordSysUid = dzCoordSysInfo.model.uid;
                var coordSysRecord = coordSysRecordMap.get(coordSysUid) || coordSysRecordMap.set(coordSysUid, $6a54aab21a858be1$var$createCoordSysRecord(api, dzCoordSysInfo.model));
                var dataZoomInfoMap = coordSysRecord.dataZoomInfoMap || (coordSysRecord.dataZoomInfoMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)());
                // Notice these props might be changed each time for a single dataZoomModel.
                dataZoomInfoMap.set(dataZoomModel.uid, {
                    dzReferCoordSysInfo: dzCoordSysInfo,
                    model: dataZoomModel,
                    getRange: null
                });
            });
        });
        // (1) Merge dataZoom settings for each coord sys and set to the roam controller.
        // (2) Clear coord sys if not refered by any dataZoom.
        coordSysRecordMap.each(function(coordSysRecord) {
            var controller = coordSysRecord.controller;
            var firstDzInfo;
            var dataZoomInfoMap = coordSysRecord.dataZoomInfoMap;
            if (dataZoomInfoMap) {
                var firstDzKey = dataZoomInfoMap.keys()[0];
                if (firstDzKey != null) firstDzInfo = dataZoomInfoMap.get(firstDzKey);
            }
            if (!firstDzInfo) {
                $6a54aab21a858be1$var$disposeCoordSysRecord(coordSysRecordMap, coordSysRecord);
                return;
            }
            var controllerParams = $6a54aab21a858be1$var$mergeControllerParams(dataZoomInfoMap);
            controller.enable(controllerParams.controlType, controllerParams.opt);
            controller.setPointerChecker(coordSysRecord.containsPoint);
            $1eadeed02cc6d4a8$export$958e3e1a02eac4b6(coordSysRecord, "dispatchAction", firstDzInfo.model.get("throttle", true), "fixRate");
        });
    });
}



var $de881c56e8c7dd43$var$InsideZoomView = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(InsideZoomView, _super);
    function InsideZoomView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "dataZoom.inside";
        return _this;
    }
    InsideZoomView.prototype.render = function(dataZoomModel, ecModel, api) {
        _super.prototype.render.apply(this, arguments);
        if (dataZoomModel.noTarget()) {
            this._clear();
            return;
        }
        // Hence the `throttle` util ensures to preserve command order,
        // here simply updating range all the time will not cause missing
        // any of the the roam change.
        this.range = dataZoomModel.getPercentRange();
        // Reset controllers.
        $6a54aab21a858be1$export$c499fdc26107c565(api, dataZoomModel, {
            pan: (0, $e44eb14c4271d0f9$export$2385a24977818dd0)($de881c56e8c7dd43$var$getRangeHandlers.pan, this),
            zoom: (0, $e44eb14c4271d0f9$export$2385a24977818dd0)($de881c56e8c7dd43$var$getRangeHandlers.zoom, this),
            scrollMove: (0, $e44eb14c4271d0f9$export$2385a24977818dd0)($de881c56e8c7dd43$var$getRangeHandlers.scrollMove, this)
        });
    };
    InsideZoomView.prototype.dispose = function() {
        this._clear();
        _super.prototype.dispose.apply(this, arguments);
    };
    InsideZoomView.prototype._clear = function() {
        $6a54aab21a858be1$export$d074fdbbb2bf218c(this.api, this.dataZoomModel);
        this.range = null;
    };
    InsideZoomView.type = "dataZoom.inside";
    return InsideZoomView;
}((0, $075d7d042585b153$export$2e2bcd8739ae039));
var $de881c56e8c7dd43$var$getRangeHandlers = {
    zoom: function(coordSysInfo, coordSysMainType, controller, e) {
        var lastRange = this.range;
        var range = lastRange.slice();
        // Calculate transform by the first axis.
        var axisModel = coordSysInfo.axisModels[0];
        if (!axisModel) return;
        var directionInfo = $de881c56e8c7dd43$var$getDirectionInfo[coordSysMainType](null, [
            e.originX,
            e.originY
        ], axisModel, controller, coordSysInfo);
        var percentPoint = (directionInfo.signal > 0 ? directionInfo.pixelStart + directionInfo.pixelLength - directionInfo.pixel : directionInfo.pixel - directionInfo.pixelStart) / directionInfo.pixelLength * (range[1] - range[0]) + range[0];
        var scale = Math.max(1 / e.scale, 0);
        range[0] = (range[0] - percentPoint) * scale + percentPoint;
        range[1] = (range[1] - percentPoint) * scale + percentPoint;
        // Restrict range.
        var minMaxSpan = this.dataZoomModel.findRepresentativeAxisProxy().getMinMaxSpan();
        (0, $bd452127b86a5d76$export$2e2bcd8739ae039)(0, range, [
            0,
            100
        ], 0, minMaxSpan.minSpan, minMaxSpan.maxSpan);
        this.range = range;
        if (lastRange[0] !== range[0] || lastRange[1] !== range[1]) return range;
    },
    pan: $de881c56e8c7dd43$var$makeMover(function(range, axisModel, coordSysInfo, coordSysMainType, controller, e) {
        var directionInfo = $de881c56e8c7dd43$var$getDirectionInfo[coordSysMainType]([
            e.oldX,
            e.oldY
        ], [
            e.newX,
            e.newY
        ], axisModel, controller, coordSysInfo);
        return directionInfo.signal * (range[1] - range[0]) * directionInfo.pixel / directionInfo.pixelLength;
    }),
    scrollMove: $de881c56e8c7dd43$var$makeMover(function(range, axisModel, coordSysInfo, coordSysMainType, controller, e) {
        var directionInfo = $de881c56e8c7dd43$var$getDirectionInfo[coordSysMainType]([
            0,
            0
        ], [
            e.scrollDelta,
            e.scrollDelta
        ], axisModel, controller, coordSysInfo);
        return directionInfo.signal * (range[1] - range[0]) * e.scrollDelta;
    })
};
function $de881c56e8c7dd43$var$makeMover(getPercentDelta) {
    return function(coordSysInfo, coordSysMainType, controller, e) {
        var lastRange = this.range;
        var range = lastRange.slice();
        // Calculate transform by the first axis.
        var axisModel = coordSysInfo.axisModels[0];
        if (!axisModel) return;
        var percentDelta = getPercentDelta(range, axisModel, coordSysInfo, coordSysMainType, controller, e);
        (0, $bd452127b86a5d76$export$2e2bcd8739ae039)(percentDelta, range, [
            0,
            100
        ], "all");
        this.range = range;
        if (lastRange[0] !== range[0] || lastRange[1] !== range[1]) return range;
    };
}
var $de881c56e8c7dd43$var$getDirectionInfo = {
    grid: function(oldPoint, newPoint, axisModel, controller, coordSysInfo) {
        var axis = axisModel.axis;
        var ret = {};
        var rect = coordSysInfo.model.coordinateSystem.getRect();
        oldPoint = oldPoint || [
            0,
            0
        ];
        if (axis.dim === "x") {
            ret.pixel = newPoint[0] - oldPoint[0];
            ret.pixelLength = rect.width;
            ret.pixelStart = rect.x;
            ret.signal = axis.inverse ? 1 : -1;
        } else {
            // axis.dim === 'y'
            ret.pixel = newPoint[1] - oldPoint[1];
            ret.pixelLength = rect.height;
            ret.pixelStart = rect.y;
            ret.signal = axis.inverse ? -1 : 1;
        }
        return ret;
    },
    polar: function(oldPoint, newPoint, axisModel, controller, coordSysInfo) {
        var axis = axisModel.axis;
        var ret = {};
        var polar = coordSysInfo.model.coordinateSystem;
        var radiusExtent = polar.getRadiusAxis().getExtent();
        var angleExtent = polar.getAngleAxis().getExtent();
        oldPoint = oldPoint ? polar.pointToCoord(oldPoint) : [
            0,
            0
        ];
        newPoint = polar.pointToCoord(newPoint);
        if (axisModel.mainType === "radiusAxis") {
            ret.pixel = newPoint[0] - oldPoint[0];
            // ret.pixelLength = Math.abs(radiusExtent[1] - radiusExtent[0]);
            // ret.pixelStart = Math.min(radiusExtent[0], radiusExtent[1]);
            ret.pixelLength = radiusExtent[1] - radiusExtent[0];
            ret.pixelStart = radiusExtent[0];
            ret.signal = axis.inverse ? 1 : -1;
        } else {
            // 'angleAxis'
            ret.pixel = newPoint[1] - oldPoint[1];
            // ret.pixelLength = Math.abs(angleExtent[1] - angleExtent[0]);
            // ret.pixelStart = Math.min(angleExtent[0], angleExtent[1]);
            ret.pixelLength = angleExtent[1] - angleExtent[0];
            ret.pixelStart = angleExtent[0];
            ret.signal = axis.inverse ? -1 : 1;
        }
        return ret;
    },
    singleAxis: function(oldPoint, newPoint, axisModel, controller, coordSysInfo) {
        var axis = axisModel.axis;
        var rect = coordSysInfo.model.coordinateSystem.getRect();
        var ret = {};
        oldPoint = oldPoint || [
            0,
            0
        ];
        if (axis.orient === "horizontal") {
            ret.pixel = newPoint[0] - oldPoint[0];
            ret.pixelLength = rect.width;
            ret.pixelStart = rect.x;
            ret.signal = axis.inverse ? 1 : -1;
        } else {
            // 'vertical'
            ret.pixel = newPoint[1] - oldPoint[1];
            ret.pixelLength = rect.height;
            ret.pixelStart = rect.y;
            ret.signal = axis.inverse ? -1 : 1;
        }
        return ret;
    }
};
var $de881c56e8c7dd43$export$2e2bcd8739ae039 = $de881c56e8c7dd43$var$InsideZoomView;




function $ddcd84aa86f9ac86$export$4b3e715f166fdd78(registers) {
    (0, $d141bd2f759ebb98$export$2e2bcd8739ae039)(registers);
    registers.registerComponentModel((0, $867f8f105524fa08$export$2e2bcd8739ae039));
    registers.registerComponentView((0, $de881c56e8c7dd43$export$2e2bcd8739ae039));
    (0, $6a54aab21a858be1$export$f3632ddafc9ea51e)(registers);
}


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 


var $335d4eb7f41ce7c1$var$SliderZoomModel = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(SliderZoomModel, _super);
    function SliderZoomModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = SliderZoomModel.type;
        return _this;
    }
    SliderZoomModel.type = "dataZoom.slider";
    SliderZoomModel.layoutMode = "box";
    SliderZoomModel.defaultOption = (0, $5e939fc0112f61e7$export$68acc510e46fef2)((0, $ffd97d3630a9786d$export$2e2bcd8739ae039).defaultOption, {
        show: true,
        // deault value can only be drived in view stage.
        right: "ph",
        top: "ph",
        width: "ph",
        height: "ph",
        left: null,
        bottom: null,
        borderColor: "#d2dbee",
        borderRadius: 3,
        backgroundColor: "rgba(47,69,84,0)",
        // dataBackgroundColor: '#ddd',
        dataBackground: {
            lineStyle: {
                color: "#d2dbee",
                width: 0.5
            },
            areaStyle: {
                color: "#d2dbee",
                opacity: 0.2
            }
        },
        selectedDataBackground: {
            lineStyle: {
                color: "#8fb0f7",
                width: 0.5
            },
            areaStyle: {
                color: "#8fb0f7",
                opacity: 0.2
            }
        },
        // Color of selected window.
        fillerColor: "rgba(135,175,274,0.2)",
        handleIcon: "path://M-9.35,34.56V42m0-40V9.5m-2,0h4a2,2,0,0,1,2,2v21a2,2,0,0,1-2,2h-4a2,2,0,0,1-2-2v-21A2,2,0,0,1-11.35,9.5Z",
        // Percent of the slider height
        handleSize: "100%",
        handleStyle: {
            color: "#fff",
            borderColor: "#ACB8D1"
        },
        moveHandleSize: 7,
        moveHandleIcon: "path://M-320.9-50L-320.9-50c18.1,0,27.1,9,27.1,27.1V85.7c0,18.1-9,27.1-27.1,27.1l0,0c-18.1,0-27.1-9-27.1-27.1V-22.9C-348-41-339-50-320.9-50z M-212.3-50L-212.3-50c18.1,0,27.1,9,27.1,27.1V85.7c0,18.1-9,27.1-27.1,27.1l0,0c-18.1,0-27.1-9-27.1-27.1V-22.9C-239.4-41-230.4-50-212.3-50z M-103.7-50L-103.7-50c18.1,0,27.1,9,27.1,27.1V85.7c0,18.1-9,27.1-27.1,27.1l0,0c-18.1,0-27.1-9-27.1-27.1V-22.9C-130.9-41-121.8-50-103.7-50z",
        moveHandleStyle: {
            color: "#D2DBEE",
            opacity: 0.7
        },
        showDetail: true,
        showDataShadow: "auto",
        realtime: true,
        zoomLock: false,
        textStyle: {
            color: "#6E7079"
        },
        brushSelect: true,
        brushStyle: {
            color: "rgba(135,175,274,0.15)"
        },
        emphasis: {
            handleStyle: {
                borderColor: "#8FB0F7"
            },
            moveHandleStyle: {
                color: "#8FB0F7"
            }
        }
    });
    return SliderZoomModel;
}((0, $ffd97d3630a9786d$export$2e2bcd8739ae039));
var $335d4eb7f41ce7c1$export$2e2bcd8739ae039 = $335d4eb7f41ce7c1$var$SliderZoomModel;


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 













var $23068b614958bf91$var$Rect = $538026eba361a92a$export$2e2bcd8739ae039;
// Constants
var $23068b614958bf91$var$DEFAULT_LOCATION_EDGE_GAP = 7;
var $23068b614958bf91$var$DEFAULT_FRAME_BORDER_WIDTH = 1;
var $23068b614958bf91$var$DEFAULT_FILLER_SIZE = 30;
var $23068b614958bf91$var$DEFAULT_MOVE_HANDLE_SIZE = 7;
var $23068b614958bf91$var$HORIZONTAL = "horizontal";
var $23068b614958bf91$var$VERTICAL = "vertical";
var $23068b614958bf91$var$LABEL_GAP = 5;
var $23068b614958bf91$var$SHOW_DATA_SHADOW_SERIES_TYPE = [
    "line",
    "bar",
    "candlestick",
    "scatter"
];
var $23068b614958bf91$var$REALTIME_ANIMATION_CONFIG = {
    easing: "cubicOut",
    duration: 100,
    delay: 0
};
var $23068b614958bf91$var$SliderZoomView = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(SliderZoomView, _super);
    function SliderZoomView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = SliderZoomView.type;
        _this._displayables = {};
        return _this;
    }
    SliderZoomView.prototype.init = function(ecModel, api) {
        this.api = api;
        // A unique handler for each dataZoom component
        this._onBrush = (0, $e44eb14c4271d0f9$export$2385a24977818dd0)(this._onBrush, this);
        this._onBrushEnd = (0, $e44eb14c4271d0f9$export$2385a24977818dd0)(this._onBrushEnd, this);
    };
    SliderZoomView.prototype.render = function(dataZoomModel, ecModel, api, payload) {
        _super.prototype.render.apply(this, arguments);
        $1eadeed02cc6d4a8$export$958e3e1a02eac4b6(this, "_dispatchZoomAction", dataZoomModel.get("throttle"), "fixRate");
        this._orient = dataZoomModel.getOrient();
        if (dataZoomModel.get("show") === false) {
            this.group.removeAll();
            return;
        }
        if (dataZoomModel.noTarget()) {
            this._clear();
            this.group.removeAll();
            return;
        }
        // Notice: this._resetInterval() should not be executed when payload.type
        // is 'dataZoom', origin this._range should be maintained, otherwise 'pan'
        // or 'zoom' info will be missed because of 'throttle' of this.dispatchAction,
        if (!payload || payload.type !== "dataZoom" || payload.from !== this.uid) this._buildView();
        this._updateView();
    };
    SliderZoomView.prototype.dispose = function() {
        this._clear();
        _super.prototype.dispose.apply(this, arguments);
    };
    SliderZoomView.prototype._clear = function() {
        $1eadeed02cc6d4a8$export$42ffd38884aecdac(this, "_dispatchZoomAction");
        var zr = this.api.getZr();
        zr.off("mousemove", this._onBrush);
        zr.off("mouseup", this._onBrushEnd);
    };
    SliderZoomView.prototype._buildView = function() {
        var thisGroup = this.group;
        thisGroup.removeAll();
        this._brushing = false;
        this._displayables.brushRect = null;
        this._resetLocation();
        this._resetInterval();
        var barGroup = this._displayables.sliderGroup = new $748aea24eee93173$export$2e2bcd8739ae039();
        this._renderBackground();
        this._renderHandle();
        this._renderDataShadow();
        thisGroup.add(barGroup);
        this._positionGroup();
    };
    SliderZoomView.prototype._resetLocation = function() {
        var dataZoomModel = this.dataZoomModel;
        var api = this.api;
        var showMoveHandle = dataZoomModel.get("brushSelect");
        var moveHandleSize = showMoveHandle ? $23068b614958bf91$var$DEFAULT_MOVE_HANDLE_SIZE : 0;
        // If some of x/y/width/height are not specified,
        // auto-adapt according to target grid.
        var coordRect = this._findCoordRect();
        var ecSize = {
            width: api.getWidth(),
            height: api.getHeight()
        };
        // Default align by coordinate system rect.
        var positionInfo = this._orient === $23068b614958bf91$var$HORIZONTAL ? {
            // Why using 'right', because right should be used in vertical,
            // and it is better to be consistent for dealing with position param merge.
            right: ecSize.width - coordRect.x - coordRect.width,
            top: ecSize.height - $23068b614958bf91$var$DEFAULT_FILLER_SIZE - $23068b614958bf91$var$DEFAULT_LOCATION_EDGE_GAP - moveHandleSize,
            width: coordRect.width,
            height: $23068b614958bf91$var$DEFAULT_FILLER_SIZE
        } : {
            right: $23068b614958bf91$var$DEFAULT_LOCATION_EDGE_GAP,
            top: coordRect.y,
            width: $23068b614958bf91$var$DEFAULT_FILLER_SIZE,
            height: coordRect.height
        };
        // Do not write back to option and replace value 'ph', because
        // the 'ph' value should be recalculated when resize.
        var layoutParams = $074356ab3d6b1cdb$export$4b0d20af19c9875e(dataZoomModel.option);
        // Replace the placeholder value.
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)([
            "right",
            "top",
            "width",
            "height"
        ], function(name) {
            if (layoutParams[name] === "ph") layoutParams[name] = positionInfo[name];
        });
        var layoutRect = $074356ab3d6b1cdb$export$4517a5ca639a7293(layoutParams, ecSize);
        this._location = {
            x: layoutRect.x,
            y: layoutRect.y
        };
        this._size = [
            layoutRect.width,
            layoutRect.height
        ];
        this._orient === $23068b614958bf91$var$VERTICAL && this._size.reverse();
    };
    SliderZoomView.prototype._positionGroup = function() {
        var thisGroup = this.group;
        var location = this._location;
        var orient = this._orient;
        // Just use the first axis to determine mapping.
        var targetAxisModel = this.dataZoomModel.getFirstTargetAxisModel();
        var inverse = targetAxisModel && targetAxisModel.get("inverse");
        var sliderGroup = this._displayables.sliderGroup;
        var otherAxisInverse = (this._dataShadowInfo || {}).otherAxisInverse;
        // Transform barGroup.
        sliderGroup.attr(orient === $23068b614958bf91$var$HORIZONTAL && !inverse ? {
            scaleY: otherAxisInverse ? 1 : -1,
            scaleX: 1
        } : orient === $23068b614958bf91$var$HORIZONTAL && inverse ? {
            scaleY: otherAxisInverse ? 1 : -1,
            scaleX: -1
        } : orient === $23068b614958bf91$var$VERTICAL && !inverse ? {
            scaleY: otherAxisInverse ? -1 : 1,
            scaleX: 1,
            rotation: Math.PI / 2
        } : {
            scaleY: otherAxisInverse ? -1 : 1,
            scaleX: -1,
            rotation: Math.PI / 2
        });
        // Position barGroup
        var rect = thisGroup.getBoundingRect([
            sliderGroup
        ]);
        thisGroup.x = location.x - rect.x;
        thisGroup.y = location.y - rect.y;
        thisGroup.markRedraw();
    };
    SliderZoomView.prototype._getViewExtent = function() {
        return [
            0,
            this._size[0]
        ];
    };
    SliderZoomView.prototype._renderBackground = function() {
        var dataZoomModel = this.dataZoomModel;
        var size = this._size;
        var barGroup = this._displayables.sliderGroup;
        var brushSelect = dataZoomModel.get("brushSelect");
        barGroup.add(new $23068b614958bf91$var$Rect({
            silent: true,
            shape: {
                x: 0,
                y: 0,
                width: size[0],
                height: size[1]
            },
            style: {
                fill: dataZoomModel.get("backgroundColor")
            },
            z2: -40
        }));
        // Click panel, over shadow, below handles.
        var clickPanel = new $23068b614958bf91$var$Rect({
            shape: {
                x: 0,
                y: 0,
                width: size[0],
                height: size[1]
            },
            style: {
                fill: "transparent"
            },
            z2: 0,
            onclick: (0, $e44eb14c4271d0f9$export$2385a24977818dd0)(this._onClickPanel, this)
        });
        var zr = this.api.getZr();
        if (brushSelect) {
            clickPanel.on("mousedown", this._onBrushStart, this);
            clickPanel.cursor = "crosshair";
            zr.on("mousemove", this._onBrush);
            zr.on("mouseup", this._onBrushEnd);
        } else {
            zr.off("mousemove", this._onBrush);
            zr.off("mouseup", this._onBrushEnd);
        }
        barGroup.add(clickPanel);
    };
    SliderZoomView.prototype._renderDataShadow = function() {
        var info = this._dataShadowInfo = this._prepareDataShadowInfo();
        this._displayables.dataShadowSegs = [];
        if (!info) return;
        var size = this._size;
        var oldSize = this._shadowSize || [];
        var seriesModel = info.series;
        var data = seriesModel.getRawData();
        var candlestickDim = seriesModel.getShadowDim && seriesModel.getShadowDim();
        var otherDim = candlestickDim && data.getDimensionInfo(candlestickDim) ? seriesModel.getShadowDim() // @see candlestick
         : info.otherDim;
        if (otherDim == null) return;
        var polygonPts = this._shadowPolygonPts;
        var polylinePts = this._shadowPolylinePts;
        // Not re-render if data doesn't change.
        if (data !== this._shadowData || otherDim !== this._shadowDim || size[0] !== oldSize[0] || size[1] !== oldSize[1]) {
            var otherDataExtent_1 = data.getDataExtent(otherDim);
            // Nice extent.
            var otherOffset = (otherDataExtent_1[1] - otherDataExtent_1[0]) * 0.3;
            otherDataExtent_1 = [
                otherDataExtent_1[0] - otherOffset,
                otherDataExtent_1[1] + otherOffset
            ];
            var otherShadowExtent_1 = [
                0,
                size[1]
            ];
            var thisShadowExtent = [
                0,
                size[0]
            ];
            var areaPoints_1 = [
                [
                    size[0],
                    0
                ],
                [
                    0,
                    0
                ]
            ];
            var linePoints_1 = [];
            var step_1 = thisShadowExtent[1] / (data.count() - 1);
            var thisCoord_1 = 0;
            // Optimize for large data shadow
            var stride_1 = Math.round(data.count() / size[0]);
            var lastIsEmpty_1;
            data.each([
                otherDim
            ], function(value, index) {
                if (stride_1 > 0 && index % stride_1) {
                    thisCoord_1 += step_1;
                    return;
                }
                // FIXME
                // Should consider axis.min/axis.max when drawing dataShadow.
                // FIXME
                // 应该使用统一的空判断？还是在list里进行空判断？
                var isEmpty = value == null || isNaN(value) || value === "";
                // See #4235.
                var otherCoord = isEmpty ? 0 : (0, $13e6a1a716300dd4$export$d3f68fbaa670562)(value, otherDataExtent_1, otherShadowExtent_1, true);
                // Attempt to draw data shadow precisely when there are empty value.
                if (isEmpty && !lastIsEmpty_1 && index) {
                    areaPoints_1.push([
                        areaPoints_1[areaPoints_1.length - 1][0],
                        0
                    ]);
                    linePoints_1.push([
                        linePoints_1[linePoints_1.length - 1][0],
                        0
                    ]);
                } else if (!isEmpty && lastIsEmpty_1) {
                    areaPoints_1.push([
                        thisCoord_1,
                        0
                    ]);
                    linePoints_1.push([
                        thisCoord_1,
                        0
                    ]);
                }
                areaPoints_1.push([
                    thisCoord_1,
                    otherCoord
                ]);
                linePoints_1.push([
                    thisCoord_1,
                    otherCoord
                ]);
                thisCoord_1 += step_1;
                lastIsEmpty_1 = isEmpty;
            });
            polygonPts = this._shadowPolygonPts = areaPoints_1;
            polylinePts = this._shadowPolylinePts = linePoints_1;
        }
        this._shadowData = data;
        this._shadowDim = otherDim;
        this._shadowSize = [
            size[0],
            size[1]
        ];
        var dataZoomModel = this.dataZoomModel;
        function createDataShadowGroup(isSelectedArea) {
            var model = dataZoomModel.getModel(isSelectedArea ? "selectedDataBackground" : "dataBackground");
            var group = new $748aea24eee93173$export$2e2bcd8739ae039();
            var polygon = new $e9532b79bfd5259a$export$2e2bcd8739ae039({
                shape: {
                    points: polygonPts
                },
                segmentIgnoreThreshold: 1,
                style: model.getModel("areaStyle").getAreaStyle(),
                silent: true,
                z2: -20
            });
            var polyline = new $8e5cb49aeb92b686$export$2e2bcd8739ae039({
                shape: {
                    points: polylinePts
                },
                segmentIgnoreThreshold: 1,
                style: model.getModel("lineStyle").getLineStyle(),
                silent: true,
                z2: -19
            });
            group.add(polygon);
            group.add(polyline);
            return group;
        }
        // let dataBackgroundModel = dataZoomModel.getModel('dataBackground');
        for(var i = 0; i < 3; i++){
            var group = createDataShadowGroup(i === 1);
            this._displayables.sliderGroup.add(group);
            this._displayables.dataShadowSegs.push(group);
        }
    };
    SliderZoomView.prototype._prepareDataShadowInfo = function() {
        var dataZoomModel = this.dataZoomModel;
        var showDataShadow = dataZoomModel.get("showDataShadow");
        if (showDataShadow === false) return;
        // Find a representative series.
        var result;
        var ecModel = this.ecModel;
        dataZoomModel.eachTargetAxis(function(axisDim, axisIndex) {
            var seriesModels = dataZoomModel.getAxisProxy(axisDim, axisIndex).getTargetSeriesModels();
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(seriesModels, function(seriesModel) {
                if (result) return;
                if (showDataShadow !== true && (0, $e44eb14c4271d0f9$export$305f7d4e9d4624f2)($23068b614958bf91$var$SHOW_DATA_SHADOW_SERIES_TYPE, seriesModel.get("type")) < 0) return;
                var thisAxis = ecModel.getComponent((0, $ce503c6b6cc63ecd$export$90855f7219399082)(axisDim), axisIndex).axis;
                var otherDim = $23068b614958bf91$var$getOtherDim(axisDim);
                var otherAxisInverse;
                var coordSys = seriesModel.coordinateSystem;
                if (otherDim != null && coordSys.getOtherAxis) otherAxisInverse = coordSys.getOtherAxis(thisAxis).inverse;
                otherDim = seriesModel.getData().mapDimension(otherDim);
                result = {
                    thisAxis: thisAxis,
                    series: seriesModel,
                    thisDim: axisDim,
                    otherDim: otherDim,
                    otherAxisInverse: otherAxisInverse
                };
            }, this);
        }, this);
        return result;
    };
    SliderZoomView.prototype._renderHandle = function() {
        var thisGroup = this.group;
        var displayables = this._displayables;
        var handles = displayables.handles = [
            null,
            null
        ];
        var handleLabels = displayables.handleLabels = [
            null,
            null
        ];
        var sliderGroup = this._displayables.sliderGroup;
        var size = this._size;
        var dataZoomModel = this.dataZoomModel;
        var api = this.api;
        var borderRadius = dataZoomModel.get("borderRadius") || 0;
        var brushSelect = dataZoomModel.get("brushSelect");
        var filler = displayables.filler = new $23068b614958bf91$var$Rect({
            silent: brushSelect,
            style: {
                fill: dataZoomModel.get("fillerColor")
            },
            textConfig: {
                position: "inside"
            }
        });
        sliderGroup.add(filler);
        // Frame border.
        sliderGroup.add(new $23068b614958bf91$var$Rect({
            silent: true,
            subPixelOptimize: true,
            shape: {
                x: 0,
                y: 0,
                width: size[0],
                height: size[1],
                r: borderRadius
            },
            style: {
                // deprecated option
                stroke: dataZoomModel.get("dataBackgroundColor") || dataZoomModel.get("borderColor"),
                lineWidth: $23068b614958bf91$var$DEFAULT_FRAME_BORDER_WIDTH,
                fill: "rgba(0,0,0,0)"
            }
        }));
        // Left and right handle to resize
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)([
            0,
            1
        ], function(handleIndex) {
            var iconStr = dataZoomModel.get("handleIcon");
            if (!(0, $f918b475beb849b6$export$33fc3b478d332725)[iconStr] && iconStr.indexOf("path://") < 0 && iconStr.indexOf("image://") < 0) {
                // Compatitable with the old icon parsers. Which can use a path string without path://
                iconStr = "path://" + iconStr;
                (0, $4796c55e8b767685$export$4a9c0b74eb885aa1)("handleIcon now needs 'path://' prefix when using a path string");
            }
            var path = (0, $f918b475beb849b6$export$af050e04da3a02e8)(iconStr, -1, 0, 2, 2, null, true);
            path.attr({
                cursor: $23068b614958bf91$var$getCursor(this._orient),
                draggable: true,
                drift: (0, $e44eb14c4271d0f9$export$2385a24977818dd0)(this._onDragMove, this, handleIndex),
                ondragend: (0, $e44eb14c4271d0f9$export$2385a24977818dd0)(this._onDragEnd, this),
                onmouseover: (0, $e44eb14c4271d0f9$export$2385a24977818dd0)(this._showDataInfo, this, true),
                onmouseout: (0, $e44eb14c4271d0f9$export$2385a24977818dd0)(this._showDataInfo, this, false),
                z2: 5
            });
            var bRect = path.getBoundingRect();
            var handleSize = dataZoomModel.get("handleSize");
            this._handleHeight = (0, $13e6a1a716300dd4$export$e8514cb5a5e2b40f)(handleSize, this._size[1]);
            this._handleWidth = bRect.width / bRect.height * this._handleHeight;
            path.setStyle(dataZoomModel.getModel("handleStyle").getItemStyle());
            path.style.strokeNoScale = true;
            path.rectHover = true;
            path.ensureState("emphasis").style = dataZoomModel.getModel([
                "emphasis",
                "handleStyle"
            ]).getItemStyle();
            (0, $e3c0a36328c28ac4$export$5f393df0b5aee2e7)(path);
            var handleColor = dataZoomModel.get("handleColor"); // deprecated option
            // Compatitable with previous version
            if (handleColor != null) path.style.fill = handleColor;
            sliderGroup.add(handles[handleIndex] = path);
            var textStyleModel = dataZoomModel.getModel("textStyle");
            thisGroup.add(handleLabels[handleIndex] = new $6d12d9a137e168c2$export$2e2bcd8739ae039({
                silent: true,
                invisible: true,
                style: (0, $75926670b032879d$export$f8998c3d0a13de59)(textStyleModel, {
                    x: 0,
                    y: 0,
                    text: "",
                    verticalAlign: "middle",
                    align: "center",
                    fill: textStyleModel.getTextColor(),
                    font: textStyleModel.getFont()
                }),
                z2: 10
            }));
        }, this);
        // Handle to move. Only visible when brushSelect is set true.
        var actualMoveZone = filler;
        if (brushSelect) {
            var moveHandleHeight = (0, $13e6a1a716300dd4$export$e8514cb5a5e2b40f)(dataZoomModel.get("moveHandleSize"), size[1]);
            var moveHandle_1 = displayables.moveHandle = new $538026eba361a92a$export$2e2bcd8739ae039({
                style: dataZoomModel.getModel("moveHandleStyle").getItemStyle(),
                silent: true,
                shape: {
                    r: [
                        0,
                        0,
                        2,
                        2
                    ],
                    y: size[1] - 0.5,
                    height: moveHandleHeight
                }
            });
            var iconSize = moveHandleHeight * 0.8;
            var moveHandleIcon = displayables.moveHandleIcon = (0, $f918b475beb849b6$export$af050e04da3a02e8)(dataZoomModel.get("moveHandleIcon"), -iconSize / 2, -iconSize / 2, iconSize, iconSize, "#fff", true);
            moveHandleIcon.silent = true;
            moveHandleIcon.y = size[1] + moveHandleHeight / 2 - 0.5;
            moveHandle_1.ensureState("emphasis").style = dataZoomModel.getModel([
                "emphasis",
                "moveHandleStyle"
            ]).getItemStyle();
            var moveZoneExpandSize = Math.min(size[1] / 2, Math.max(moveHandleHeight, 10));
            actualMoveZone = displayables.moveZone = new $538026eba361a92a$export$2e2bcd8739ae039({
                invisible: true,
                shape: {
                    y: size[1] - moveZoneExpandSize,
                    height: moveHandleHeight + moveZoneExpandSize
                }
            });
            actualMoveZone.on("mouseover", function() {
                api.enterEmphasis(moveHandle_1);
            }).on("mouseout", function() {
                api.leaveEmphasis(moveHandle_1);
            });
            sliderGroup.add(moveHandle_1);
            sliderGroup.add(moveHandleIcon);
            sliderGroup.add(actualMoveZone);
        }
        actualMoveZone.attr({
            draggable: true,
            cursor: $23068b614958bf91$var$getCursor(this._orient),
            drift: (0, $e44eb14c4271d0f9$export$2385a24977818dd0)(this._onDragMove, this, "all"),
            ondragstart: (0, $e44eb14c4271d0f9$export$2385a24977818dd0)(this._showDataInfo, this, true),
            ondragend: (0, $e44eb14c4271d0f9$export$2385a24977818dd0)(this._onDragEnd, this),
            onmouseover: (0, $e44eb14c4271d0f9$export$2385a24977818dd0)(this._showDataInfo, this, true),
            onmouseout: (0, $e44eb14c4271d0f9$export$2385a24977818dd0)(this._showDataInfo, this, false)
        });
    };
    SliderZoomView.prototype._resetInterval = function() {
        var range = this._range = this.dataZoomModel.getPercentRange();
        var viewExtent = this._getViewExtent();
        this._handleEnds = [
            (0, $13e6a1a716300dd4$export$d3f68fbaa670562)(range[0], [
                0,
                100
            ], viewExtent, true),
            (0, $13e6a1a716300dd4$export$d3f68fbaa670562)(range[1], [
                0,
                100
            ], viewExtent, true)
        ];
    };
    SliderZoomView.prototype._updateInterval = function(handleIndex, delta) {
        var dataZoomModel = this.dataZoomModel;
        var handleEnds = this._handleEnds;
        var viewExtend = this._getViewExtent();
        var minMaxSpan = dataZoomModel.findRepresentativeAxisProxy().getMinMaxSpan();
        var percentExtent = [
            0,
            100
        ];
        (0, $bd452127b86a5d76$export$2e2bcd8739ae039)(delta, handleEnds, viewExtend, dataZoomModel.get("zoomLock") ? "all" : handleIndex, minMaxSpan.minSpan != null ? (0, $13e6a1a716300dd4$export$d3f68fbaa670562)(minMaxSpan.minSpan, percentExtent, viewExtend, true) : null, minMaxSpan.maxSpan != null ? (0, $13e6a1a716300dd4$export$d3f68fbaa670562)(minMaxSpan.maxSpan, percentExtent, viewExtend, true) : null);
        var lastRange = this._range;
        var range = this._range = (0, $13e6a1a716300dd4$export$debe6e778e0a6d32)([
            (0, $13e6a1a716300dd4$export$d3f68fbaa670562)(handleEnds[0], viewExtend, percentExtent, true),
            (0, $13e6a1a716300dd4$export$d3f68fbaa670562)(handleEnds[1], viewExtend, percentExtent, true)
        ]);
        return !lastRange || lastRange[0] !== range[0] || lastRange[1] !== range[1];
    };
    SliderZoomView.prototype._updateView = function(nonRealtime) {
        var displaybles = this._displayables;
        var handleEnds = this._handleEnds;
        var handleInterval = (0, $13e6a1a716300dd4$export$debe6e778e0a6d32)(handleEnds.slice());
        var size = this._size;
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)([
            0,
            1
        ], function(handleIndex) {
            // Handles
            var handle = displaybles.handles[handleIndex];
            var handleHeight = this._handleHeight;
            handle.attr({
                scaleX: handleHeight / 2,
                scaleY: handleHeight / 2,
                // This is a trick, by adding an extra tiny offset to let the default handle's end point align to the drag window.
                // NOTE: It may affect some custom shapes a bit. But we prefer to have better result by default.
                x: handleEnds[handleIndex] + (handleIndex ? -1 : 1),
                y: size[1] / 2 - handleHeight / 2
            });
        }, this);
        // Filler
        displaybles.filler.setShape({
            x: handleInterval[0],
            y: 0,
            width: handleInterval[1] - handleInterval[0],
            height: size[1]
        });
        var viewExtent = {
            x: handleInterval[0],
            width: handleInterval[1] - handleInterval[0]
        };
        // Move handle
        if (displaybles.moveHandle) {
            displaybles.moveHandle.setShape(viewExtent);
            displaybles.moveZone.setShape(viewExtent);
            // Force update path on the invisible object
            displaybles.moveZone.getBoundingRect();
            displaybles.moveHandleIcon && displaybles.moveHandleIcon.attr("x", viewExtent.x + viewExtent.width / 2);
        }
        // update clip path of shadow.
        var dataShadowSegs = displaybles.dataShadowSegs;
        var segIntervals = [
            0,
            handleInterval[0],
            handleInterval[1],
            size[0]
        ];
        for(var i = 0; i < dataShadowSegs.length; i++){
            var segGroup = dataShadowSegs[i];
            var clipPath = segGroup.getClipPath();
            if (!clipPath) {
                clipPath = new $538026eba361a92a$export$2e2bcd8739ae039();
                segGroup.setClipPath(clipPath);
            }
            clipPath.setShape({
                x: segIntervals[i],
                y: 0,
                width: segIntervals[i + 1] - segIntervals[i],
                height: size[1]
            });
        }
        this._updateDataInfo(nonRealtime);
    };
    SliderZoomView.prototype._updateDataInfo = function(nonRealtime) {
        var dataZoomModel = this.dataZoomModel;
        var displaybles = this._displayables;
        var handleLabels = displaybles.handleLabels;
        var orient = this._orient;
        var labelTexts = [
            "",
            ""
        ];
        // FIXME
        // date型，支持formatter，autoformatter（ec2 date.getAutoFormatter）
        if (dataZoomModel.get("showDetail")) {
            var axisProxy = dataZoomModel.findRepresentativeAxisProxy();
            if (axisProxy) {
                var axis = axisProxy.getAxisModel().axis;
                var range = this._range;
                var dataInterval = nonRealtime ? axisProxy.calculateDataWindow({
                    start: range[0],
                    end: range[1]
                }).valueWindow : axisProxy.getDataValueWindow();
                labelTexts = [
                    this._formatLabel(dataInterval[0], axis),
                    this._formatLabel(dataInterval[1], axis)
                ];
            }
        }
        var orderedHandleEnds = (0, $13e6a1a716300dd4$export$debe6e778e0a6d32)(this._handleEnds.slice());
        setLabel.call(this, 0);
        setLabel.call(this, 1);
        function setLabel(handleIndex) {
            // Label
            // Text should not transform by barGroup.
            // Ignore handlers transform
            var barTransform = $6aec2e68b45f8796$export$fce0c6cfca85ed96(displaybles.handles[handleIndex].parent, this.group);
            var direction = $6aec2e68b45f8796$export$fff94e9792354cfa(handleIndex === 0 ? "right" : "left", barTransform);
            var offset = this._handleWidth / 2 + $23068b614958bf91$var$LABEL_GAP;
            var textPoint = $6aec2e68b45f8796$export$9f9dcb98c894b623([
                orderedHandleEnds[handleIndex] + (handleIndex === 0 ? -offset : offset),
                this._size[1] / 2
            ], barTransform);
            handleLabels[handleIndex].setStyle({
                x: textPoint[0],
                y: textPoint[1],
                verticalAlign: orient === $23068b614958bf91$var$HORIZONTAL ? "middle" : direction,
                align: orient === $23068b614958bf91$var$HORIZONTAL ? direction : "center",
                text: labelTexts[handleIndex]
            });
        }
    };
    SliderZoomView.prototype._formatLabel = function(value, axis) {
        var dataZoomModel = this.dataZoomModel;
        var labelFormatter = dataZoomModel.get("labelFormatter");
        var labelPrecision = dataZoomModel.get("labelPrecision");
        if (labelPrecision == null || labelPrecision === "auto") labelPrecision = axis.getPixelPrecision();
        var valueStr = value == null || isNaN(value) ? "" : axis.type === "category" || axis.type === "time" ? axis.scale.getLabel({
            value: Math.round(value)
        }) : value.toFixed(Math.min(labelPrecision, 20));
        return (0, $e44eb14c4271d0f9$export$f6e2535fb5126e54)(labelFormatter) ? labelFormatter(value, valueStr) : (0, $e44eb14c4271d0f9$export$844ec244b1367d54)(labelFormatter) ? labelFormatter.replace("{value}", valueStr) : valueStr;
    };
    /**
   * @param showOrHide true: show, false: hide
   */ SliderZoomView.prototype._showDataInfo = function(showOrHide) {
        // Always show when drgging.
        showOrHide = this._dragging || showOrHide;
        var displayables = this._displayables;
        var handleLabels = displayables.handleLabels;
        handleLabels[0].attr("invisible", !showOrHide);
        handleLabels[1].attr("invisible", !showOrHide);
        // Highlight move handle
        displayables.moveHandle && this.api[showOrHide ? "enterEmphasis" : "leaveEmphasis"](displayables.moveHandle, 1);
    };
    SliderZoomView.prototype._onDragMove = function(handleIndex, dx, dy, event) {
        this._dragging = true;
        // For mobile device, prevent screen slider on the button.
        $81f76356654e394a$export$fa6813432f753b0d(event.event);
        // Transform dx, dy to bar coordination.
        var barTransform = this._displayables.sliderGroup.getLocalTransform();
        var vertex = $6aec2e68b45f8796$export$9f9dcb98c894b623([
            dx,
            dy
        ], barTransform, true);
        var changed = this._updateInterval(handleIndex, vertex[0]);
        var realtime = this.dataZoomModel.get("realtime");
        this._updateView(!realtime);
        // Avoid dispatch dataZoom repeatly but range not changed,
        // which cause bad visual effect when progressive enabled.
        changed && realtime && this._dispatchZoomAction(true);
    };
    SliderZoomView.prototype._onDragEnd = function() {
        this._dragging = false;
        this._showDataInfo(false);
        // While in realtime mode and stream mode, dispatch action when
        // drag end will cause the whole view rerender, which is unnecessary.
        var realtime = this.dataZoomModel.get("realtime");
        !realtime && this._dispatchZoomAction(false);
    };
    SliderZoomView.prototype._onClickPanel = function(e) {
        var size = this._size;
        var localPoint = this._displayables.sliderGroup.transformCoordToLocal(e.offsetX, e.offsetY);
        if (localPoint[0] < 0 || localPoint[0] > size[0] || localPoint[1] < 0 || localPoint[1] > size[1]) return;
        var handleEnds = this._handleEnds;
        var center = (handleEnds[0] + handleEnds[1]) / 2;
        var changed = this._updateInterval("all", localPoint[0] - center);
        this._updateView();
        changed && this._dispatchZoomAction(false);
    };
    SliderZoomView.prototype._onBrushStart = function(e) {
        var x = e.offsetX;
        var y = e.offsetY;
        this._brushStart = new $98bf1aab7582d293$export$2e2bcd8739ae039(x, y);
        this._brushing = true;
        this._brushStartTime = +new Date();
    // this._updateBrushRect(x, y);
    };
    SliderZoomView.prototype._onBrushEnd = function(e) {
        if (!this._brushing) return;
        var brushRect = this._displayables.brushRect;
        this._brushing = false;
        if (!brushRect) return;
        brushRect.attr("ignore", true);
        var brushShape = brushRect.shape;
        var brushEndTime = +new Date();
        // console.log(brushEndTime - this._brushStartTime);
        if (brushEndTime - this._brushStartTime < 200 && Math.abs(brushShape.width) < 5) // Will treat it as a click
        return;
        var viewExtend = this._getViewExtent();
        var percentExtent = [
            0,
            100
        ];
        this._range = (0, $13e6a1a716300dd4$export$debe6e778e0a6d32)([
            (0, $13e6a1a716300dd4$export$d3f68fbaa670562)(brushShape.x, viewExtend, percentExtent, true),
            (0, $13e6a1a716300dd4$export$d3f68fbaa670562)(brushShape.x + brushShape.width, viewExtend, percentExtent, true)
        ]);
        this._handleEnds = [
            brushShape.x,
            brushShape.x + brushShape.width
        ];
        this._updateView();
        this._dispatchZoomAction(false);
    };
    SliderZoomView.prototype._onBrush = function(e) {
        if (this._brushing) {
            // For mobile device, prevent screen slider on the button.
            $81f76356654e394a$export$fa6813432f753b0d(e.event);
            this._updateBrushRect(e.offsetX, e.offsetY);
        }
    };
    SliderZoomView.prototype._updateBrushRect = function(mouseX, mouseY) {
        var displayables = this._displayables;
        var dataZoomModel = this.dataZoomModel;
        var brushRect = displayables.brushRect;
        if (!brushRect) {
            brushRect = displayables.brushRect = new $23068b614958bf91$var$Rect({
                silent: true,
                style: dataZoomModel.getModel("brushStyle").getItemStyle()
            });
            displayables.sliderGroup.add(brushRect);
        }
        brushRect.attr("ignore", false);
        var brushStart = this._brushStart;
        var sliderGroup = this._displayables.sliderGroup;
        var endPoint = sliderGroup.transformCoordToLocal(mouseX, mouseY);
        var startPoint = sliderGroup.transformCoordToLocal(brushStart.x, brushStart.y);
        var size = this._size;
        endPoint[0] = Math.max(Math.min(size[0], endPoint[0]), 0);
        brushRect.setShape({
            x: startPoint[0],
            y: 0,
            width: endPoint[0] - startPoint[0],
            height: size[1]
        });
    };
    /**
   * This action will be throttled.
   */ SliderZoomView.prototype._dispatchZoomAction = function(realtime) {
        var range = this._range;
        this.api.dispatchAction({
            type: "dataZoom",
            from: this.uid,
            dataZoomId: this.dataZoomModel.id,
            animation: realtime ? $23068b614958bf91$var$REALTIME_ANIMATION_CONFIG : null,
            start: range[0],
            end: range[1]
        });
    };
    SliderZoomView.prototype._findCoordRect = function() {
        // Find the grid corresponding to the first axis referred by dataZoom.
        var rect;
        var coordSysInfoList = (0, $ce503c6b6cc63ecd$export$b41173dee9da195b)(this.dataZoomModel).infoList;
        if (!rect && coordSysInfoList.length) {
            var coordSys = coordSysInfoList[0].model.coordinateSystem;
            rect = coordSys.getRect && coordSys.getRect();
        }
        if (!rect) {
            var width = this.api.getWidth();
            var height = this.api.getHeight();
            rect = {
                x: width * 0.2,
                y: height * 0.2,
                width: width * 0.6,
                height: height * 0.6
            };
        }
        return rect;
    };
    SliderZoomView.type = "dataZoom.slider";
    return SliderZoomView;
}((0, $075d7d042585b153$export$2e2bcd8739ae039));
function $23068b614958bf91$var$getOtherDim(thisDim) {
    // FIXME
    // 这个逻辑和getOtherAxis里一致，但是写在这里是否不好
    var map = {
        x: "y",
        y: "x",
        radius: "angle",
        angle: "radius"
    };
    return map[thisDim];
}
function $23068b614958bf91$var$getCursor(orient) {
    return orient === "vertical" ? "ns-resize" : "ew-resize";
}
var $23068b614958bf91$export$2e2bcd8739ae039 = $23068b614958bf91$var$SliderZoomView;



function $672c26f1cfd0cbf0$export$4b3e715f166fdd78(registers) {
    registers.registerComponentModel((0, $335d4eb7f41ce7c1$export$2e2bcd8739ae039));
    registers.registerComponentView((0, $23068b614958bf91$export$2e2bcd8739ae039));
    (0, $d141bd2f759ebb98$export$2e2bcd8739ae039)(registers);
}


function $5e4d2ed43059a3ee$export$4b3e715f166fdd78(registers) {
    (0, $2456b78b4596463d$export$1f96ae73734a86cc)((0, $ddcd84aa86f9ac86$export$4b3e715f166fdd78));
    (0, $2456b78b4596463d$export$1f96ae73734a86cc)((0, $672c26f1cfd0cbf0$export$4b3e715f166fdd78));
// Do not install './dataZoomSelect',
// since it only work for toolbox dataZoom.
}

/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 




var $040977d67c7f7e3d$export$83e718f1c3c9edae = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(DatasetModel, _super);
    function DatasetModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "dataset";
        return _this;
    }
    DatasetModel.prototype.init = function(option, parentModel, ecModel) {
        _super.prototype.init.call(this, option, parentModel, ecModel);
        this._sourceManager = new (0, $db2d9ac18686dd88$export$af4db9ec7e200ea2)(this);
        (0, $db2d9ac18686dd88$export$9451f4e9047441ec)(this);
    };
    DatasetModel.prototype.mergeOption = function(newOption, ecModel) {
        _super.prototype.mergeOption.call(this, newOption, ecModel);
        (0, $db2d9ac18686dd88$export$9451f4e9047441ec)(this);
    };
    DatasetModel.prototype.optionUpdated = function() {
        this._sourceManager.dirty();
    };
    DatasetModel.prototype.getSourceManager = function() {
        return this._sourceManager;
    };
    DatasetModel.type = "dataset";
    DatasetModel.defaultOption = {
        seriesLayoutBy: (0, $2b9c860c8cf83b68$export$7b3f3c6551b4949b)
    };
    return DatasetModel;
}((0, $a756077528c07361$export$2e2bcd8739ae039));
var $040977d67c7f7e3d$var$DatasetView = /** @class */ function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(DatasetView, _super);
    function DatasetView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = "dataset";
        return _this;
    }
    DatasetView.type = "dataset";
    return DatasetView;
}((0, $ced42ef9869a1e4c$export$2e2bcd8739ae039));
function $040977d67c7f7e3d$export$4b3e715f166fdd78(registers) {
    registers.registerComponentModel($040977d67c7f7e3d$export$83e718f1c3c9edae);
    registers.registerComponentView($040977d67c7f7e3d$var$DatasetView);
}




/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ // Universal transitions that can animate between any shapes(series) and any properties in any amounts.


/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 














var $c711170acf06feb4$var$CMD = (0, $9638c378ac086dea$export$2e2bcd8739ae039).CMD;
function $c711170acf06feb4$var$aroundEqual(a, b) {
    return Math.abs(a - b) < 1e-5;
}
function $c711170acf06feb4$export$fbc91cffd4bdf629(path) {
    var data = path.data;
    var len = path.len();
    var bezierArrayGroups = [];
    var currentSubpath;
    var xi = 0;
    var yi = 0;
    var x0 = 0;
    var y0 = 0;
    function createNewSubpath(x, y) {
        if (currentSubpath && currentSubpath.length > 2) bezierArrayGroups.push(currentSubpath);
        currentSubpath = [
            x,
            y
        ];
    }
    function addLine(x0, y0, x1, y1) {
        if (!($c711170acf06feb4$var$aroundEqual(x0, x1) && $c711170acf06feb4$var$aroundEqual(y0, y1))) currentSubpath.push(x0, y0, x1, y1, x1, y1);
    }
    function addArc(startAngle, endAngle, cx, cy, rx, ry) {
        var delta = Math.abs(endAngle - startAngle);
        var len = Math.tan(delta / 4) * 4 / 3;
        var dir = endAngle < startAngle ? -1 : 1;
        var c1 = Math.cos(startAngle);
        var s1 = Math.sin(startAngle);
        var c2 = Math.cos(endAngle);
        var s2 = Math.sin(endAngle);
        var x1 = c1 * rx + cx;
        var y1 = s1 * ry + cy;
        var x4 = c2 * rx + cx;
        var y4 = s2 * ry + cy;
        var hx = rx * len * dir;
        var hy = ry * len * dir;
        currentSubpath.push(x1 - hx * s1, y1 + hy * c1, x4 + hx * s2, y4 - hy * c2, x4, y4);
    }
    var x1;
    var y1;
    var x2;
    var y2;
    for(var i = 0; i < len;){
        var cmd = data[i++];
        var isFirst = i === 1;
        if (isFirst) {
            xi = data[i];
            yi = data[i + 1];
            x0 = xi;
            y0 = yi;
            if (cmd === $c711170acf06feb4$var$CMD.L || cmd === $c711170acf06feb4$var$CMD.C || cmd === $c711170acf06feb4$var$CMD.Q) currentSubpath = [
                x0,
                y0
            ];
        }
        switch(cmd){
            case $c711170acf06feb4$var$CMD.M:
                xi = x0 = data[i++];
                yi = y0 = data[i++];
                createNewSubpath(x0, y0);
                break;
            case $c711170acf06feb4$var$CMD.L:
                x1 = data[i++];
                y1 = data[i++];
                addLine(xi, yi, x1, y1);
                xi = x1;
                yi = y1;
                break;
            case $c711170acf06feb4$var$CMD.C:
                currentSubpath.push(data[i++], data[i++], data[i++], data[i++], xi = data[i++], yi = data[i++]);
                break;
            case $c711170acf06feb4$var$CMD.Q:
                x1 = data[i++];
                y1 = data[i++];
                x2 = data[i++];
                y2 = data[i++];
                currentSubpath.push(xi + 2 / 3 * (x1 - xi), yi + 2 / 3 * (y1 - yi), x2 + 2 / 3 * (x1 - x2), y2 + 2 / 3 * (y1 - y2), x2, y2);
                xi = x2;
                yi = y2;
                break;
            case $c711170acf06feb4$var$CMD.A:
                var cx = data[i++];
                var cy = data[i++];
                var rx = data[i++];
                var ry = data[i++];
                var startAngle = data[i++];
                var endAngle = data[i++] + startAngle;
                i += 1;
                var anticlockwise = !data[i++];
                x1 = Math.cos(startAngle) * rx + cx;
                y1 = Math.sin(startAngle) * ry + cy;
                if (isFirst) {
                    x0 = x1;
                    y0 = y1;
                    createNewSubpath(x0, y0);
                } else addLine(xi, yi, x1, y1);
                xi = Math.cos(endAngle) * rx + cx;
                yi = Math.sin(endAngle) * ry + cy;
                var step = (anticlockwise ? -1 : 1) * Math.PI / 2;
                for(var angle = startAngle; anticlockwise ? angle > endAngle : angle < endAngle; angle += step){
                    var nextAngle = anticlockwise ? Math.max(angle + step, endAngle) : Math.min(angle + step, endAngle);
                    addArc(angle, nextAngle, cx, cy, rx, ry);
                }
                break;
            case $c711170acf06feb4$var$CMD.R:
                x0 = xi = data[i++];
                y0 = yi = data[i++];
                x1 = x0 + data[i++];
                y1 = y0 + data[i++];
                createNewSubpath(x1, y0);
                addLine(x1, y0, x1, y1);
                addLine(x1, y1, x0, y1);
                addLine(x0, y1, x0, y0);
                addLine(x0, y0, x1, y0);
                break;
            case $c711170acf06feb4$var$CMD.Z:
                currentSubpath && addLine(xi, yi, x0, y0);
                xi = x0;
                yi = y0;
                break;
        }
    }
    if (currentSubpath && currentSubpath.length > 2) bezierArrayGroups.push(currentSubpath);
    return bezierArrayGroups;
}
function $c711170acf06feb4$var$adpativeBezier(x0, y0, x1, y1, x2, y2, x3, y3, out, scale) {
    if ($c711170acf06feb4$var$aroundEqual(x0, x1) && $c711170acf06feb4$var$aroundEqual(y0, y1) && $c711170acf06feb4$var$aroundEqual(x2, x3) && $c711170acf06feb4$var$aroundEqual(y2, y3)) {
        out.push(x3, y3);
        return;
    }
    var PIXEL_DISTANCE = 2 / scale;
    var PIXEL_DISTANCE_SQR = PIXEL_DISTANCE * PIXEL_DISTANCE;
    var dx = x3 - x0;
    var dy = y3 - y0;
    var d = Math.sqrt(dx * dx + dy * dy);
    dx /= d;
    dy /= d;
    var dx1 = x1 - x0;
    var dy1 = y1 - y0;
    var dx2 = x2 - x3;
    var dy2 = y2 - y3;
    var cp1LenSqr = dx1 * dx1 + dy1 * dy1;
    var cp2LenSqr = dx2 * dx2 + dy2 * dy2;
    if (cp1LenSqr < PIXEL_DISTANCE_SQR && cp2LenSqr < PIXEL_DISTANCE_SQR) {
        out.push(x3, y3);
        return;
    }
    var projLen1 = dx * dx1 + dy * dy1;
    var projLen2 = -dx * dx2 - dy * dy2;
    var d1Sqr = cp1LenSqr - projLen1 * projLen1;
    var d2Sqr = cp2LenSqr - projLen2 * projLen2;
    if (d1Sqr < PIXEL_DISTANCE_SQR && projLen1 >= 0 && d2Sqr < PIXEL_DISTANCE_SQR && projLen2 >= 0) {
        out.push(x3, y3);
        return;
    }
    var tmpSegX = [];
    var tmpSegY = [];
    (0, $b1facc0bcf653177$export$a2ee23a0567039da)(x0, x1, x2, x3, 0.5, tmpSegX);
    (0, $b1facc0bcf653177$export$a2ee23a0567039da)(y0, y1, y2, y3, 0.5, tmpSegY);
    $c711170acf06feb4$var$adpativeBezier(tmpSegX[0], tmpSegY[0], tmpSegX[1], tmpSegY[1], tmpSegX[2], tmpSegY[2], tmpSegX[3], tmpSegY[3], out, scale);
    $c711170acf06feb4$var$adpativeBezier(tmpSegX[4], tmpSegY[4], tmpSegX[5], tmpSegY[5], tmpSegX[6], tmpSegY[6], tmpSegX[7], tmpSegY[7], out, scale);
}
function $c711170acf06feb4$export$163f4950160f2337(path, scale) {
    var bezierArrayGroups = $c711170acf06feb4$export$fbc91cffd4bdf629(path);
    var polygons = [];
    scale = scale || 1;
    for(var i = 0; i < bezierArrayGroups.length; i++){
        var beziers = bezierArrayGroups[i];
        var polygon = [];
        var x0 = beziers[0];
        var y0 = beziers[1];
        polygon.push(x0, y0);
        for(var k = 2; k < beziers.length;){
            var x1 = beziers[k++];
            var y1 = beziers[k++];
            var x2 = beziers[k++];
            var y2 = beziers[k++];
            var x3 = beziers[k++];
            var y3 = beziers[k++];
            $c711170acf06feb4$var$adpativeBezier(x0, y0, x1, y1, x2, y2, x3, y3, polygon, scale);
            x0 = x3;
            y0 = y3;
        }
        polygons.push(polygon);
    }
    return polygons;
}



function $2575525287c3557f$var$getDividingGrids(dimSize, rowDim, count) {
    var rowSize = dimSize[rowDim];
    var columnSize = dimSize[1 - rowDim];
    var ratio = Math.abs(rowSize / columnSize);
    var rowCount = Math.ceil(Math.sqrt(ratio * count));
    var columnCount = Math.floor(count / rowCount);
    if (columnCount === 0) {
        columnCount = 1;
        rowCount = count;
    }
    var grids = [];
    for(var i = 0; i < rowCount; i++)grids.push(columnCount);
    var currentCount = rowCount * columnCount;
    var remained = count - currentCount;
    if (remained > 0) for(var i = 0; i < remained; i++)grids[i % rowCount] += 1;
    return grids;
}
function $2575525287c3557f$var$divideSector(sectorShape, count, outShapes) {
    var r0 = sectorShape.r0;
    var r = sectorShape.r;
    var startAngle = sectorShape.startAngle;
    var endAngle = sectorShape.endAngle;
    var angle = Math.abs(endAngle - startAngle);
    var arcLen = angle * r;
    var deltaR = r - r0;
    var isAngleRow = arcLen > Math.abs(deltaR);
    var grids = $2575525287c3557f$var$getDividingGrids([
        arcLen,
        deltaR
    ], isAngleRow ? 0 : 1, count);
    var rowSize = (isAngleRow ? angle : deltaR) / grids.length;
    for(var row = 0; row < grids.length; row++){
        var columnSize = (isAngleRow ? deltaR : angle) / grids[row];
        for(var column = 0; column < grids[row]; column++){
            var newShape = {};
            if (isAngleRow) {
                newShape.startAngle = startAngle + rowSize * row;
                newShape.endAngle = startAngle + rowSize * (row + 1);
                newShape.r0 = r0 + columnSize * column;
                newShape.r = r0 + columnSize * (column + 1);
            } else {
                newShape.startAngle = startAngle + columnSize * column;
                newShape.endAngle = startAngle + columnSize * (column + 1);
                newShape.r0 = r0 + rowSize * row;
                newShape.r = r0 + rowSize * (row + 1);
            }
            newShape.clockwise = sectorShape.clockwise;
            newShape.cx = sectorShape.cx;
            newShape.cy = sectorShape.cy;
            outShapes.push(newShape);
        }
    }
}
function $2575525287c3557f$var$divideRect(rectShape, count, outShapes) {
    var width = rectShape.width;
    var height = rectShape.height;
    var isHorizontalRow = width > height;
    var grids = $2575525287c3557f$var$getDividingGrids([
        width,
        height
    ], isHorizontalRow ? 0 : 1, count);
    var rowSizeDim = isHorizontalRow ? "width" : "height";
    var columnSizeDim = isHorizontalRow ? "height" : "width";
    var rowDim = isHorizontalRow ? "x" : "y";
    var columnDim = isHorizontalRow ? "y" : "x";
    var rowSize = rectShape[rowSizeDim] / grids.length;
    for(var row = 0; row < grids.length; row++){
        var columnSize = rectShape[columnSizeDim] / grids[row];
        for(var column = 0; column < grids[row]; column++){
            var newShape = {};
            newShape[rowDim] = row * rowSize;
            newShape[columnDim] = column * columnSize;
            newShape[rowSizeDim] = rowSize;
            newShape[columnSizeDim] = columnSize;
            newShape.x += rectShape.x;
            newShape.y += rectShape.y;
            outShapes.push(newShape);
        }
    }
}
function $2575525287c3557f$var$crossProduct2d(x1, y1, x2, y2) {
    return x1 * y2 - x2 * y1;
}
function $2575525287c3557f$var$lineLineIntersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y) {
    var mx = a2x - a1x;
    var my = a2y - a1y;
    var nx = b2x - b1x;
    var ny = b2y - b1y;
    var nmCrossProduct = $2575525287c3557f$var$crossProduct2d(nx, ny, mx, my);
    if (Math.abs(nmCrossProduct) < 1e-6) return null;
    var b1a1x = a1x - b1x;
    var b1a1y = a1y - b1y;
    var p = $2575525287c3557f$var$crossProduct2d(b1a1x, b1a1y, nx, ny) / nmCrossProduct;
    if (p < 0 || p > 1) return null;
    return new (0, $98bf1aab7582d293$export$2e2bcd8739ae039)(p * mx + a1x, p * my + a1y);
}
function $2575525287c3557f$var$projPtOnLine(pt, lineA, lineB) {
    var dir = new (0, $98bf1aab7582d293$export$2e2bcd8739ae039)();
    (0, $98bf1aab7582d293$export$2e2bcd8739ae039).sub(dir, lineB, lineA);
    dir.normalize();
    var dir2 = new (0, $98bf1aab7582d293$export$2e2bcd8739ae039)();
    (0, $98bf1aab7582d293$export$2e2bcd8739ae039).sub(dir2, pt, lineA);
    var len = dir2.dot(dir);
    return len;
}
function $2575525287c3557f$var$addToPoly(poly, pt) {
    var last = poly[poly.length - 1];
    if (last && last[0] === pt[0] && last[1] === pt[1]) return;
    poly.push(pt);
}
function $2575525287c3557f$var$splitPolygonByLine(points, lineA, lineB) {
    var len = points.length;
    var intersections = [];
    for(var i = 0; i < len; i++){
        var p0 = points[i];
        var p1 = points[(i + 1) % len];
        var intersectionPt = $2575525287c3557f$var$lineLineIntersect(p0[0], p0[1], p1[0], p1[1], lineA.x, lineA.y, lineB.x, lineB.y);
        if (intersectionPt) intersections.push({
            projPt: $2575525287c3557f$var$projPtOnLine(intersectionPt, lineA, lineB),
            pt: intersectionPt,
            idx: i
        });
    }
    if (intersections.length < 2) return [
        {
            points: points
        },
        {
            points: points
        }
    ];
    intersections.sort(function(a, b) {
        return a.projPt - b.projPt;
    });
    var splitPt0 = intersections[0];
    var splitPt1 = intersections[intersections.length - 1];
    if (splitPt1.idx < splitPt0.idx) {
        var tmp = splitPt0;
        splitPt0 = splitPt1;
        splitPt1 = tmp;
    }
    var splitPt0Arr = [
        splitPt0.pt.x,
        splitPt0.pt.y
    ];
    var splitPt1Arr = [
        splitPt1.pt.x,
        splitPt1.pt.y
    ];
    var newPolyA = [
        splitPt0Arr
    ];
    var newPolyB = [
        splitPt1Arr
    ];
    for(var i = splitPt0.idx + 1; i <= splitPt1.idx; i++)$2575525287c3557f$var$addToPoly(newPolyA, points[i].slice());
    $2575525287c3557f$var$addToPoly(newPolyA, splitPt1Arr);
    $2575525287c3557f$var$addToPoly(newPolyA, splitPt0Arr);
    for(var i = splitPt1.idx + 1; i <= splitPt0.idx + len; i++)$2575525287c3557f$var$addToPoly(newPolyB, points[i % len].slice());
    $2575525287c3557f$var$addToPoly(newPolyB, splitPt0Arr);
    $2575525287c3557f$var$addToPoly(newPolyB, splitPt1Arr);
    return [
        {
            points: newPolyA
        },
        {
            points: newPolyB
        }
    ];
}
function $2575525287c3557f$var$binaryDividePolygon(polygonShape) {
    var points = polygonShape.points;
    var min = [];
    var max = [];
    (0, $eb78f055659ac299$export$188c3cd07b4129dd)(points, min, max);
    var boundingRect = new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)(min[0], min[1], max[0] - min[0], max[1] - min[1]);
    var width = boundingRect.width;
    var height = boundingRect.height;
    var x = boundingRect.x;
    var y = boundingRect.y;
    var pt0 = new (0, $98bf1aab7582d293$export$2e2bcd8739ae039)();
    var pt1 = new (0, $98bf1aab7582d293$export$2e2bcd8739ae039)();
    if (width > height) {
        pt0.x = pt1.x = x + width / 2;
        pt0.y = y;
        pt1.y = y + height;
    } else {
        pt0.y = pt1.y = y + height / 2;
        pt0.x = x;
        pt1.x = x + width;
    }
    return $2575525287c3557f$var$splitPolygonByLine(points, pt0, pt1);
}
function $2575525287c3557f$var$binaryDivideRecursive(divider, shape, count, out) {
    if (count === 1) out.push(shape);
    else {
        var mid = Math.floor(count / 2);
        var sub = divider(shape);
        $2575525287c3557f$var$binaryDivideRecursive(divider, sub[0], mid, out);
        $2575525287c3557f$var$binaryDivideRecursive(divider, sub[1], count - mid, out);
    }
    return out;
}
function $2575525287c3557f$export$9cd59f9826255e47(path, count) {
    var paths = [];
    for(var i = 0; i < count; i++)paths.push((0, $76d97862acecea9f$export$18711d956bf1c3eb)(path));
    return paths;
}
function $2575525287c3557f$var$copyPathProps(source, target) {
    target.setStyle(source.style);
    target.z = source.z;
    target.z2 = source.z2;
    target.zlevel = source.zlevel;
}
function $2575525287c3557f$var$polygonConvert(points) {
    var out = [];
    for(var i = 0; i < points.length;)out.push([
        points[i++],
        points[i++]
    ]);
    return out;
}
function $2575525287c3557f$export$65980d18b75784e2(path, count) {
    var outShapes = [];
    var shape = path.shape;
    var OutShapeCtor;
    switch(path.type){
        case "rect":
            $2575525287c3557f$var$divideRect(shape, count, outShapes);
            OutShapeCtor = (0, $538026eba361a92a$export$2e2bcd8739ae039);
            break;
        case "sector":
            $2575525287c3557f$var$divideSector(shape, count, outShapes);
            OutShapeCtor = (0, $55ff835abc77a8e3$export$2e2bcd8739ae039);
            break;
        case "circle":
            $2575525287c3557f$var$divideSector({
                r0: 0,
                r: shape.r,
                startAngle: 0,
                endAngle: Math.PI * 2,
                cx: shape.cx,
                cy: shape.cy
            }, count, outShapes);
            OutShapeCtor = (0, $55ff835abc77a8e3$export$2e2bcd8739ae039);
            break;
        default:
            var m = path.getComputedTransform();
            var scale = m ? Math.sqrt(Math.max(m[0] * m[0] + m[1] * m[1], m[2] * m[2] + m[3] * m[3])) : 1;
            var polygons = (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)((0, $c711170acf06feb4$export$163f4950160f2337)(path.getUpdatedPathProxy(), scale), function(poly) {
                return $2575525287c3557f$var$polygonConvert(poly);
            });
            var polygonCount = polygons.length;
            if (polygonCount === 0) $2575525287c3557f$var$binaryDivideRecursive($2575525287c3557f$var$binaryDividePolygon, {
                points: polygons[0]
            }, count, outShapes);
            else if (polygonCount === count) for(var i = 0; i < polygonCount; i++)outShapes.push({
                points: polygons[i]
            });
            else {
                var totalArea_1 = 0;
                var items = (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(polygons, function(poly) {
                    var min = [];
                    var max = [];
                    (0, $eb78f055659ac299$export$188c3cd07b4129dd)(poly, min, max);
                    var area = (max[1] - min[1]) * (max[0] - min[0]);
                    totalArea_1 += area;
                    return {
                        poly: poly,
                        area: area
                    };
                });
                items.sort(function(a, b) {
                    return b.area - a.area;
                });
                var left = count;
                for(var i = 0; i < polygonCount; i++){
                    var item = items[i];
                    if (left <= 0) break;
                    var selfCount = i === polygonCount - 1 ? left : Math.ceil(item.area / totalArea_1 * count);
                    if (selfCount < 0) continue;
                    $2575525287c3557f$var$binaryDivideRecursive($2575525287c3557f$var$binaryDividePolygon, {
                        points: item.poly
                    }, selfCount, outShapes);
                    left -= selfCount;
                }
            }
            OutShapeCtor = (0, $e9532b79bfd5259a$export$2e2bcd8739ae039);
            break;
    }
    if (!OutShapeCtor) return $2575525287c3557f$export$9cd59f9826255e47(path, count);
    var out = [];
    for(var i = 0; i < outShapes.length; i++){
        var subPath = new OutShapeCtor();
        subPath.setShape(outShapes[i]);
        $2575525287c3557f$var$copyPathProps(path, subPath);
        out.push(subPath);
    }
    return out;
}



function $220b4a58dde22b37$var$alignSubpath(subpath1, subpath2) {
    var len1 = subpath1.length;
    var len2 = subpath2.length;
    if (len1 === len2) return [
        subpath1,
        subpath2
    ];
    var tmpSegX = [];
    var tmpSegY = [];
    var shorterPath = len1 < len2 ? subpath1 : subpath2;
    var shorterLen = Math.min(len1, len2);
    var diff = Math.abs(len2 - len1) / 6;
    var shorterBezierCount = (shorterLen - 2) / 6;
    var eachCurveSubDivCount = Math.ceil(diff / shorterBezierCount) + 1;
    var newSubpath = [
        shorterPath[0],
        shorterPath[1]
    ];
    var remained = diff;
    for(var i = 2; i < shorterLen;){
        var x0 = shorterPath[i - 2];
        var y0 = shorterPath[i - 1];
        var x1 = shorterPath[i++];
        var y1 = shorterPath[i++];
        var x2 = shorterPath[i++];
        var y2 = shorterPath[i++];
        var x3 = shorterPath[i++];
        var y3 = shorterPath[i++];
        if (remained <= 0) {
            newSubpath.push(x1, y1, x2, y2, x3, y3);
            continue;
        }
        var actualSubDivCount = Math.min(remained, eachCurveSubDivCount - 1) + 1;
        for(var k = 1; k <= actualSubDivCount; k++){
            var p = k / actualSubDivCount;
            (0, $b1facc0bcf653177$export$a2ee23a0567039da)(x0, x1, x2, x3, p, tmpSegX);
            (0, $b1facc0bcf653177$export$a2ee23a0567039da)(y0, y1, y2, y3, p, tmpSegY);
            x0 = tmpSegX[3];
            y0 = tmpSegY[3];
            newSubpath.push(tmpSegX[1], tmpSegY[1], tmpSegX[2], tmpSegY[2], x0, y0);
            x1 = tmpSegX[5];
            y1 = tmpSegY[5];
            x2 = tmpSegX[6];
            y2 = tmpSegY[6];
        }
        remained -= actualSubDivCount - 1;
    }
    return shorterPath === subpath1 ? [
        newSubpath,
        subpath2
    ] : [
        subpath1,
        newSubpath
    ];
}
function $220b4a58dde22b37$var$createSubpath(lastSubpathSubpath, otherSubpath) {
    var len = lastSubpathSubpath.length;
    var lastX = lastSubpathSubpath[len - 2];
    var lastY = lastSubpathSubpath[len - 1];
    var newSubpath = [];
    for(var i = 0; i < otherSubpath.length;){
        newSubpath[i++] = lastX;
        newSubpath[i++] = lastY;
    }
    return newSubpath;
}
function $220b4a58dde22b37$export$d7b853a0ab412a07(array1, array2) {
    var _a;
    var lastSubpath1;
    var lastSubpath2;
    var newArray1 = [];
    var newArray2 = [];
    for(var i = 0; i < Math.max(array1.length, array2.length); i++){
        var subpath1 = array1[i];
        var subpath2 = array2[i];
        var newSubpath1 = void 0;
        var newSubpath2 = void 0;
        if (!subpath1) {
            newSubpath1 = $220b4a58dde22b37$var$createSubpath(lastSubpath1 || subpath2, subpath2);
            newSubpath2 = subpath2;
        } else if (!subpath2) {
            newSubpath2 = $220b4a58dde22b37$var$createSubpath(lastSubpath2 || subpath1, subpath1);
            newSubpath1 = subpath1;
        } else {
            _a = $220b4a58dde22b37$var$alignSubpath(subpath1, subpath2), newSubpath1 = _a[0], newSubpath2 = _a[1];
            lastSubpath1 = newSubpath1;
            lastSubpath2 = newSubpath2;
        }
        newArray1.push(newSubpath1);
        newArray2.push(newSubpath2);
    }
    return [
        newArray1,
        newArray2
    ];
}
function $220b4a58dde22b37$export$e2a20c553f6c85ce(array) {
    var signedArea = 0;
    var cx = 0;
    var cy = 0;
    var len = array.length;
    for(var i = 0, j = len - 2; i < len; j = i, i += 2){
        var x0 = array[j];
        var y0 = array[j + 1];
        var x1 = array[i];
        var y1 = array[i + 1];
        var a = x0 * y1 - x1 * y0;
        signedArea += a;
        cx += (x0 + x1) * a;
        cy += (y0 + y1) * a;
    }
    if (signedArea === 0) return [
        array[0] || 0,
        array[1] || 0
    ];
    return [
        cx / signedArea / 3,
        cy / signedArea / 3,
        signedArea
    ];
}
function $220b4a58dde22b37$var$findBestRingOffset(fromSubBeziers, toSubBeziers, fromCp, toCp) {
    var bezierCount = (fromSubBeziers.length - 2) / 6;
    var bestScore = Infinity;
    var bestOffset = 0;
    var len = fromSubBeziers.length;
    var len2 = len - 2;
    for(var offset = 0; offset < bezierCount; offset++){
        var cursorOffset = offset * 6;
        var score = 0;
        for(var k = 0; k < len; k += 2){
            var idx = k === 0 ? cursorOffset : (cursorOffset + k - 2) % len2 + 2;
            var x0 = fromSubBeziers[idx] - fromCp[0];
            var y0 = fromSubBeziers[idx + 1] - fromCp[1];
            var x1 = toSubBeziers[k] - toCp[0];
            var y1 = toSubBeziers[k + 1] - toCp[1];
            var dx = x1 - x0;
            var dy = y1 - y0;
            score += dx * dx + dy * dy;
        }
        if (score < bestScore) {
            bestScore = score;
            bestOffset = offset;
        }
    }
    return bestOffset;
}
function $220b4a58dde22b37$var$reverse(array) {
    var newArr = [];
    var len = array.length;
    for(var i = 0; i < len; i += 2){
        newArr[i] = array[len - i - 2];
        newArr[i + 1] = array[len - i - 1];
    }
    return newArr;
}
function $220b4a58dde22b37$var$findBestMorphingRotation(fromArr, toArr, searchAngleIteration, searchAngleRange) {
    var result = [];
    var fromNeedsReverse;
    for(var i = 0; i < fromArr.length; i++){
        var fromSubpathBezier = fromArr[i];
        var toSubpathBezier = toArr[i];
        var fromCp = $220b4a58dde22b37$export$e2a20c553f6c85ce(fromSubpathBezier);
        var toCp = $220b4a58dde22b37$export$e2a20c553f6c85ce(toSubpathBezier);
        if (fromNeedsReverse == null) fromNeedsReverse = fromCp[2] < 0 !== toCp[2] < 0;
        var newFromSubpathBezier = [];
        var newToSubpathBezier = [];
        var bestAngle = 0;
        var bestScore = Infinity;
        var tmpArr = [];
        var len = fromSubpathBezier.length;
        if (fromNeedsReverse) fromSubpathBezier = $220b4a58dde22b37$var$reverse(fromSubpathBezier);
        var offset = $220b4a58dde22b37$var$findBestRingOffset(fromSubpathBezier, toSubpathBezier, fromCp, toCp) * 6;
        var len2 = len - 2;
        for(var k = 0; k < len2; k += 2){
            var idx = (offset + k) % len2 + 2;
            newFromSubpathBezier[k + 2] = fromSubpathBezier[idx] - fromCp[0];
            newFromSubpathBezier[k + 3] = fromSubpathBezier[idx + 1] - fromCp[1];
        }
        newFromSubpathBezier[0] = fromSubpathBezier[offset] - fromCp[0];
        newFromSubpathBezier[1] = fromSubpathBezier[offset + 1] - fromCp[1];
        if (searchAngleIteration > 0) {
            var step = searchAngleRange / searchAngleIteration;
            for(var angle = -searchAngleRange / 2; angle <= searchAngleRange / 2; angle += step){
                var sa = Math.sin(angle);
                var ca = Math.cos(angle);
                var score = 0;
                for(var k = 0; k < fromSubpathBezier.length; k += 2){
                    var x0 = newFromSubpathBezier[k];
                    var y0 = newFromSubpathBezier[k + 1];
                    var x1 = toSubpathBezier[k] - toCp[0];
                    var y1 = toSubpathBezier[k + 1] - toCp[1];
                    var newX1 = x1 * ca - y1 * sa;
                    var newY1 = x1 * sa + y1 * ca;
                    tmpArr[k] = newX1;
                    tmpArr[k + 1] = newY1;
                    var dx = newX1 - x0;
                    var dy = newY1 - y0;
                    score += dx * dx + dy * dy;
                }
                if (score < bestScore) {
                    bestScore = score;
                    bestAngle = angle;
                    for(var m = 0; m < tmpArr.length; m++)newToSubpathBezier[m] = tmpArr[m];
                }
            }
        } else for(var i_1 = 0; i_1 < len; i_1 += 2){
            newToSubpathBezier[i_1] = toSubpathBezier[i_1] - toCp[0];
            newToSubpathBezier[i_1 + 1] = toSubpathBezier[i_1 + 1] - toCp[1];
        }
        result.push({
            from: newFromSubpathBezier,
            to: newToSubpathBezier,
            fromCp: fromCp,
            toCp: toCp,
            rotation: -bestAngle
        });
    }
    return result;
}
function $220b4a58dde22b37$export$f9f720a01590a46f(path) {
    return path.__isCombineMorphing;
}
function $220b4a58dde22b37$export$ddee3124b756354f(el) {
    return el.__morphT >= 0;
}
var $220b4a58dde22b37$var$SAVED_METHOD_PREFIX = "__mOriginal_";
function $220b4a58dde22b37$var$saveAndModifyMethod(obj, methodName, modifiers) {
    var savedMethodName = $220b4a58dde22b37$var$SAVED_METHOD_PREFIX + methodName;
    var originalMethod = obj[savedMethodName] || obj[methodName];
    if (!obj[savedMethodName]) obj[savedMethodName] = obj[methodName];
    var replace = modifiers.replace;
    var after = modifiers.after;
    var before = modifiers.before;
    obj[methodName] = function() {
        var args = arguments;
        var res;
        before && before.apply(this, args);
        if (replace) res = replace.apply(this, args);
        else res = originalMethod.apply(this, args);
        after && after.apply(this, args);
        return res;
    };
}
function $220b4a58dde22b37$var$restoreMethod(obj, methodName) {
    var savedMethodName = $220b4a58dde22b37$var$SAVED_METHOD_PREFIX + methodName;
    if (obj[savedMethodName]) {
        obj[methodName] = obj[savedMethodName];
        obj[savedMethodName] = null;
    }
}
function $220b4a58dde22b37$var$applyTransformOnBeziers(bezierCurves, mm) {
    for(var i = 0; i < bezierCurves.length; i++){
        var subBeziers = bezierCurves[i];
        for(var k = 0; k < subBeziers.length;){
            var x = subBeziers[k];
            var y = subBeziers[k + 1];
            subBeziers[k++] = mm[0] * x + mm[2] * y + mm[4];
            subBeziers[k++] = mm[1] * x + mm[3] * y + mm[5];
        }
    }
}
function $220b4a58dde22b37$var$prepareMorphPath(fromPath, toPath) {
    var fromPathProxy = fromPath.getUpdatedPathProxy();
    var toPathProxy = toPath.getUpdatedPathProxy();
    var _a = $220b4a58dde22b37$export$d7b853a0ab412a07((0, $c711170acf06feb4$export$fbc91cffd4bdf629)(fromPathProxy), (0, $c711170acf06feb4$export$fbc91cffd4bdf629)(toPathProxy)), fromBezierCurves = _a[0], toBezierCurves = _a[1];
    var fromPathTransform = fromPath.getComputedTransform();
    var toPathTransform = toPath.getComputedTransform();
    function updateIdentityTransform() {
        this.transform = null;
    }
    fromPathTransform && $220b4a58dde22b37$var$applyTransformOnBeziers(fromBezierCurves, fromPathTransform);
    toPathTransform && $220b4a58dde22b37$var$applyTransformOnBeziers(toBezierCurves, toPathTransform);
    $220b4a58dde22b37$var$saveAndModifyMethod(toPath, "updateTransform", {
        replace: updateIdentityTransform
    });
    toPath.transform = null;
    var morphingData = $220b4a58dde22b37$var$findBestMorphingRotation(fromBezierCurves, toBezierCurves, 10, Math.PI);
    var tmpArr = [];
    $220b4a58dde22b37$var$saveAndModifyMethod(toPath, "buildPath", {
        replace: function(path) {
            var t = toPath.__morphT;
            var onet = 1 - t;
            var newCp = [];
            for(var i = 0; i < morphingData.length; i++){
                var item = morphingData[i];
                var from = item.from;
                var to = item.to;
                var angle = item.rotation * t;
                var fromCp = item.fromCp;
                var toCp = item.toCp;
                var sa = Math.sin(angle);
                var ca = Math.cos(angle);
                (0, $187eb1bf1a49fd34$export$3a89f8d6f6bf6c9f)(newCp, fromCp, toCp, t);
                for(var m = 0; m < from.length; m += 2){
                    var x0_1 = from[m];
                    var y0_1 = from[m + 1];
                    var x1 = to[m];
                    var y1 = to[m + 1];
                    var x = x0_1 * onet + x1 * t;
                    var y = y0_1 * onet + y1 * t;
                    tmpArr[m] = x * ca - y * sa + newCp[0];
                    tmpArr[m + 1] = x * sa + y * ca + newCp[1];
                }
                var x0 = tmpArr[0];
                var y0 = tmpArr[1];
                path.moveTo(x0, y0);
                for(var m = 2; m < from.length;){
                    var x1 = tmpArr[m++];
                    var y1 = tmpArr[m++];
                    var x2 = tmpArr[m++];
                    var y2 = tmpArr[m++];
                    var x3 = tmpArr[m++];
                    var y3 = tmpArr[m++];
                    if (x0 === x1 && y0 === y1 && x2 === x3 && y2 === y3) path.lineTo(x3, y3);
                    else path.bezierCurveTo(x1, y1, x2, y2, x3, y3);
                    x0 = x3;
                    y0 = y3;
                }
            }
        }
    });
}
function $220b4a58dde22b37$export$7174e282c1c7df1c(fromPath, toPath, animationOpts) {
    if (!fromPath || !toPath) return toPath;
    var oldDone = animationOpts.done;
    var oldDuring = animationOpts.during;
    $220b4a58dde22b37$var$prepareMorphPath(fromPath, toPath);
    toPath.__morphT = 0;
    function restoreToPath() {
        $220b4a58dde22b37$var$restoreMethod(toPath, "buildPath");
        $220b4a58dde22b37$var$restoreMethod(toPath, "updateTransform");
        toPath.__morphT = -1;
        toPath.createPathProxy();
        toPath.dirtyShape();
    }
    toPath.animateTo({
        __morphT: 1
    }, (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)({
        during: function(p) {
            toPath.dirtyShape();
            oldDuring && oldDuring(p);
        },
        done: function() {
            restoreToPath();
            oldDone && oldDone();
        }
    }, animationOpts));
    return toPath;
}
function $220b4a58dde22b37$var$hilbert(x, y, minX, minY, maxX, maxY) {
    var bits = 16;
    x = maxX === minX ? 0 : Math.round(32767 * (x - minX) / (maxX - minX));
    y = maxY === minY ? 0 : Math.round(32767 * (y - minY) / (maxY - minY));
    var d = 0;
    var tmp;
    for(var s = (1 << bits) / 2; s > 0; s /= 2){
        var rx = 0;
        var ry = 0;
        if ((x & s) > 0) rx = 1;
        if ((y & s) > 0) ry = 1;
        d += s * s * (3 * rx ^ ry);
        if (ry === 0) {
            if (rx === 1) {
                x = s - 1 - x;
                y = s - 1 - y;
            }
            tmp = x;
            x = y;
            y = tmp;
        }
    }
    return d;
}
function $220b4a58dde22b37$var$sortPaths(pathList) {
    var xMin = Infinity;
    var yMin = Infinity;
    var xMax = -Infinity;
    var yMax = -Infinity;
    var cps = (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(pathList, function(path) {
        var rect = path.getBoundingRect();
        var m = path.getComputedTransform();
        var x = rect.x + rect.width / 2 + (m ? m[4] : 0);
        var y = rect.y + rect.height / 2 + (m ? m[5] : 0);
        xMin = Math.min(x, xMin);
        yMin = Math.min(y, yMin);
        xMax = Math.max(x, xMax);
        yMax = Math.max(y, yMax);
        return [
            x,
            y
        ];
    });
    var items = (0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(cps, function(cp, idx) {
        return {
            cp: cp,
            z: $220b4a58dde22b37$var$hilbert(cp[0], cp[1], xMin, yMin, xMax, yMax),
            path: pathList[idx]
        };
    });
    return items.sort(function(a, b) {
        return a.z - b.z;
    }).map(function(item) {
        return item.path;
    });
}
function $220b4a58dde22b37$var$defaultDividePath(param) {
    return (0, $2575525287c3557f$export$65980d18b75784e2)(param.path, param.count);
}
function $220b4a58dde22b37$var$createEmptyReturn() {
    return {
        fromIndividuals: [],
        toIndividuals: [],
        count: 0
    };
}
function $220b4a58dde22b37$export$57d3bac3565fd555(fromList, toPath, animationOpts) {
    var fromPathList = [];
    function addFromPath(fromList) {
        for(var i = 0; i < fromList.length; i++){
            var from = fromList[i];
            if ($220b4a58dde22b37$export$f9f720a01590a46f(from)) addFromPath(from.childrenRef());
            else if (from instanceof (0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039)) fromPathList.push(from);
        }
    }
    addFromPath(fromList);
    var separateCount = fromPathList.length;
    if (!separateCount) return $220b4a58dde22b37$var$createEmptyReturn();
    var dividePath = animationOpts.dividePath || $220b4a58dde22b37$var$defaultDividePath;
    var toSubPathList = dividePath({
        path: toPath,
        count: separateCount
    });
    if (toSubPathList.length !== separateCount) {
        console.error("Invalid morphing: unmatched splitted path");
        return $220b4a58dde22b37$var$createEmptyReturn();
    }
    fromPathList = $220b4a58dde22b37$var$sortPaths(fromPathList);
    toSubPathList = $220b4a58dde22b37$var$sortPaths(toSubPathList);
    var oldDone = animationOpts.done;
    var oldDuring = animationOpts.during;
    var individualDelay = animationOpts.individualDelay;
    var identityTransform = new (0, $039fe2b24eabe4b4$export$2e2bcd8739ae039)();
    for(var i = 0; i < separateCount; i++){
        var from = fromPathList[i];
        var to = toSubPathList[i];
        to.parent = toPath;
        to.copyTransform(identityTransform);
        if (!individualDelay) $220b4a58dde22b37$var$prepareMorphPath(from, to);
    }
    toPath.__isCombineMorphing = true;
    toPath.childrenRef = function() {
        return toSubPathList;
    };
    function addToSubPathListToZr(zr) {
        for(var i = 0; i < toSubPathList.length; i++)toSubPathList[i].addSelfToZr(zr);
    }
    $220b4a58dde22b37$var$saveAndModifyMethod(toPath, "addSelfToZr", {
        after: function(zr) {
            addToSubPathListToZr(zr);
        }
    });
    $220b4a58dde22b37$var$saveAndModifyMethod(toPath, "removeSelfFromZr", {
        after: function(zr) {
            for(var i = 0; i < toSubPathList.length; i++)toSubPathList[i].removeSelfFromZr(zr);
        }
    });
    function restoreToPath() {
        toPath.__isCombineMorphing = false;
        toPath.__morphT = -1;
        toPath.childrenRef = null;
        $220b4a58dde22b37$var$restoreMethod(toPath, "addSelfToZr");
        $220b4a58dde22b37$var$restoreMethod(toPath, "removeSelfFromZr");
    }
    var toLen = toSubPathList.length;
    if (individualDelay) {
        var animating_1 = toLen;
        var eachDone = function() {
            animating_1--;
            if (animating_1 === 0) {
                restoreToPath();
                oldDone && oldDone();
            }
        };
        for(var i = 0; i < toLen; i++){
            var indivdualAnimationOpts = individualDelay ? (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)({
                delay: (animationOpts.delay || 0) + individualDelay(i, toLen, fromPathList[i], toSubPathList[i]),
                done: eachDone
            }, animationOpts) : animationOpts;
            $220b4a58dde22b37$export$7174e282c1c7df1c(fromPathList[i], toSubPathList[i], indivdualAnimationOpts);
        }
    } else {
        toPath.__morphT = 0;
        toPath.animateTo({
            __morphT: 1
        }, (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)({
            during: function(p) {
                for(var i = 0; i < toLen; i++){
                    var child = toSubPathList[i];
                    child.__morphT = toPath.__morphT;
                    child.dirtyShape();
                }
                oldDuring && oldDuring(p);
            },
            done: function() {
                restoreToPath();
                for(var i = 0; i < fromList.length; i++)$220b4a58dde22b37$var$restoreMethod(fromList[i], "updateTransform");
                oldDone && oldDone();
            }
        }, animationOpts));
    }
    if (toPath.__zr) addToSubPathListToZr(toPath.__zr);
    return {
        fromIndividuals: fromPathList,
        toIndividuals: toSubPathList,
        count: toLen
    };
}
function $220b4a58dde22b37$export$b6ed198024fe6db8(fromPath, toPathList, animationOpts) {
    var toLen = toPathList.length;
    var fromPathList = [];
    var dividePath = animationOpts.dividePath || $220b4a58dde22b37$var$defaultDividePath;
    function addFromPath(fromList) {
        for(var i = 0; i < fromList.length; i++){
            var from = fromList[i];
            if ($220b4a58dde22b37$export$f9f720a01590a46f(from)) addFromPath(from.childrenRef());
            else if (from instanceof (0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039)) fromPathList.push(from);
        }
    }
    if ($220b4a58dde22b37$export$f9f720a01590a46f(fromPath)) {
        addFromPath(fromPath.childrenRef());
        var fromLen = fromPathList.length;
        if (fromLen < toLen) {
            var k = 0;
            for(var i = fromLen; i < toLen; i++)fromPathList.push((0, $76d97862acecea9f$export$18711d956bf1c3eb)(fromPathList[k++ % fromLen]));
        }
        fromPathList.length = toLen;
    } else {
        fromPathList = dividePath({
            path: fromPath,
            count: toLen
        });
        var fromPathTransform = fromPath.getComputedTransform();
        for(var i = 0; i < fromPathList.length; i++)fromPathList[i].setLocalTransform(fromPathTransform);
        if (fromPathList.length !== toLen) {
            console.error("Invalid morphing: unmatched splitted path");
            return $220b4a58dde22b37$var$createEmptyReturn();
        }
    }
    fromPathList = $220b4a58dde22b37$var$sortPaths(fromPathList);
    toPathList = $220b4a58dde22b37$var$sortPaths(toPathList);
    var individualDelay = animationOpts.individualDelay;
    for(var i = 0; i < toLen; i++){
        var indivdualAnimationOpts = individualDelay ? (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)({
            delay: (animationOpts.delay || 0) + individualDelay(i, toLen, fromPathList[i], toPathList[i])
        }, animationOpts) : animationOpts;
        $220b4a58dde22b37$export$7174e282c1c7df1c(fromPathList[i], toPathList[i], indivdualAnimationOpts);
    }
    return {
        fromIndividuals: fromPathList,
        toIndividuals: toPathList,
        count: toPathList.length
    };
}






function $4183b1ffd191f345$var$isMultiple(elements) {
    return (0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(elements[0]);
}
function $4183b1ffd191f345$var$prepareMorphBatches(one, many) {
    var batches = [];
    var batchCount = one.length;
    for(var i = 0; i < batchCount; i++)batches.push({
        one: one[i],
        many: []
    });
    for(var i = 0; i < many.length; i++){
        var len = many[i].length;
        var k = void 0;
        for(k = 0; k < len; k++)batches[k % batchCount].many.push(many[i][k]);
    }
    var off = 0;
    // If one has more paths than each one of many. average them.
    for(var i = batchCount - 1; i >= 0; i--)if (!batches[i].many.length) {
        var moveFrom = batches[off].many;
        if (moveFrom.length <= 1) {
            // Not enough
            // Start from the first one.
            if (off) off = 0;
            else return batches;
        }
        var len = moveFrom.length;
        var mid = Math.ceil(len / 2);
        batches[i].many = moveFrom.slice(mid, len);
        batches[off].many = moveFrom.slice(0, mid);
        off++;
    }
    return batches;
}
var $4183b1ffd191f345$var$pathDividers = {
    clone: function(params) {
        var ret = [];
        // Fitting the alpha
        var approxOpacity = 1 - Math.pow(1 - params.path.style.opacity, 1 / params.count);
        for(var i = 0; i < params.count; i++){
            var cloned = (0, $76d97862acecea9f$export$18711d956bf1c3eb)(params.path);
            cloned.setStyle("opacity", approxOpacity);
            ret.push(cloned);
        }
        return ret;
    },
    // Use the default divider
    split: null
};
function $4183b1ffd191f345$export$c6ab3ab2bfe1ec39(from, to, divideShape, seriesModel, dataIndex, animateOtherProps) {
    if (!from.length || !to.length) return;
    var updateAnimationCfg = (0, $f7e735722ff36e8c$export$5cc7add7ab591d0a)("update", seriesModel, dataIndex);
    if (!(updateAnimationCfg && updateAnimationCfg.duration > 0)) return;
    var animationDelay = seriesModel.getModel("universalTransition").get("delay");
    var animationCfg = Object.assign({
        // Need to setToFinal so the further calculation based on the style can be correct.
        // Like emphasis color.
        setToFinal: true
    }, updateAnimationCfg);
    var many;
    var one;
    if ($4183b1ffd191f345$var$isMultiple(from)) {
        // manyToOne
        many = from;
        one = to;
    }
    if ($4183b1ffd191f345$var$isMultiple(to)) {
        // oneToMany
        many = to;
        one = from;
    }
    function morphOneBatch(batch, fromIsMany, animateIndex, animateCount, forceManyOne) {
        var batchMany = batch.many;
        var batchOne = batch.one;
        if (batchMany.length === 1 && !forceManyOne) {
            // Is one to one
            var batchFrom = fromIsMany ? batchMany[0] : batchOne;
            var batchTo = fromIsMany ? batchOne : batchMany[0];
            if ((0, $220b4a58dde22b37$export$f9f720a01590a46f)(batchFrom)) // Keep doing combine animation.
            morphOneBatch({
                many: [
                    batchFrom
                ],
                one: batchTo
            }, true, animateIndex, animateCount, true);
            else {
                var individualAnimationCfg = animationDelay ? (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)({
                    delay: animationDelay(animateIndex, animateCount)
                }, animationCfg) : animationCfg;
                (0, $220b4a58dde22b37$export$7174e282c1c7df1c)(batchFrom, batchTo, individualAnimationCfg);
                animateOtherProps(batchFrom, batchTo, batchFrom, batchTo, individualAnimationCfg);
            }
        } else {
            var separateAnimationCfg = (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)({
                dividePath: $4183b1ffd191f345$var$pathDividers[divideShape],
                individualDelay: animationDelay && function(idx, count, fromPath, toPath) {
                    return animationDelay(idx + animateIndex, animateCount);
                }
            }, animationCfg);
            var _a = fromIsMany ? (0, $220b4a58dde22b37$export$57d3bac3565fd555)(batchMany, batchOne, separateAnimationCfg) : (0, $220b4a58dde22b37$export$b6ed198024fe6db8)(batchOne, batchMany, separateAnimationCfg), fromIndividuals = _a.fromIndividuals, toIndividuals = _a.toIndividuals;
            var count = fromIndividuals.length;
            for(var k = 0; k < count; k++){
                var individualAnimationCfg = animationDelay ? (0, $e44eb14c4271d0f9$export$ebe90cb607ad99e)({
                    delay: animationDelay(k, count)
                }, animationCfg) : animationCfg;
                animateOtherProps(fromIndividuals[k], toIndividuals[k], fromIsMany ? batchMany[k] : batch.one, fromIsMany ? batch.one : batchMany[k], individualAnimationCfg);
            }
        }
    }
    var fromIsMany = many ? many === from : from.length > to.length;
    var morphBatches = many ? $4183b1ffd191f345$var$prepareMorphBatches(one, many) : $4183b1ffd191f345$var$prepareMorphBatches(fromIsMany ? to : from, [
        fromIsMany ? from : to
    ]);
    var animateCount = 0;
    for(var i = 0; i < morphBatches.length; i++)animateCount += morphBatches[i].many.length;
    var animateIndex = 0;
    for(var i = 0; i < morphBatches.length; i++){
        morphOneBatch(morphBatches[i], fromIsMany, animateIndex, animateCount);
        animateIndex += morphBatches[i].many.length;
    }
}
function $4183b1ffd191f345$export$ad61593d7c3fa814(elements) {
    if (!elements) return [];
    if ((0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(elements)) {
        var pathList_1 = [];
        for(var i = 0; i < elements.length; i++)pathList_1.push($4183b1ffd191f345$export$ad61593d7c3fa814(elements[i]));
        return pathList_1;
    }
    var pathList = [];
    elements.traverse(function(el) {
        if (el instanceof (0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039) && !el.disableMorphing && !el.invisible && !el.ignore) pathList.push(el);
    });
    return pathList;
}









var $efb39adcfacd645d$var$DATA_COUNT_THRESHOLD = 1e4;
var $efb39adcfacd645d$var$TRANSITION_NONE = 0;
var $efb39adcfacd645d$var$TRANSITION_P2C = 1;
var $efb39adcfacd645d$var$TRANSITION_C2P = 2;
var $efb39adcfacd645d$var$getUniversalTransitionGlobalStore = (0, $8917c02fd8256c67$export$64df9f8d92ae083f)();
function $efb39adcfacd645d$var$getDimension(data, visualDimension) {
    var dimensions = data.dimensions;
    for(var i = 0; i < dimensions.length; i++){
        var dimInfo = data.getDimensionInfo(dimensions[i]);
        if (dimInfo && dimInfo.otherDims[visualDimension] === 0) return dimensions[i];
    }
}
// get value by dimension. (only get value of itemGroupId or childGroupId, so convert it to string)
function $efb39adcfacd645d$var$getValueByDimension(data, dataIndex, dimension) {
    var dimInfo = data.getDimensionInfo(dimension);
    var dimOrdinalMeta = dimInfo && dimInfo.ordinalMeta;
    if (dimInfo) {
        var value = data.get(dimInfo.name, dataIndex);
        if (dimOrdinalMeta) return dimOrdinalMeta.categories[value] || value + "";
        return value + "";
    }
}
function $efb39adcfacd645d$var$getGroupId(data, dataIndex, dataGroupId, isChild) {
    // try to get groupId from encode
    var visualDimension = isChild ? "itemChildGroupId" : "itemGroupId";
    var groupIdDim = $efb39adcfacd645d$var$getDimension(data, visualDimension);
    if (groupIdDim) {
        var groupId = $efb39adcfacd645d$var$getValueByDimension(data, dataIndex, groupIdDim);
        return groupId;
    }
    // try to get groupId from raw data item
    var rawDataItem = data.getRawDataItem(dataIndex);
    var property = isChild ? "childGroupId" : "groupId";
    if (rawDataItem && rawDataItem[property]) return rawDataItem[property] + "";
    // fallback
    if (isChild) return;
    // try to use series.dataGroupId as groupId, otherwise use dataItem's id as groupId
    return dataGroupId || data.getId(dataIndex);
}
// flatten all data items from different serieses into one arrary
function $efb39adcfacd645d$var$flattenDataDiffItems(list) {
    var items = [];
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(list, function(seriesInfo) {
        var data = seriesInfo.data;
        var dataGroupId = seriesInfo.dataGroupId;
        if (data.count() > $efb39adcfacd645d$var$DATA_COUNT_THRESHOLD) {
            (0, $4796c55e8b767685$export$c106dd0671a0fc2d)("Universal transition is disabled on large data > 10k.");
            return;
        }
        var indices = data.getIndices();
        for(var dataIndex = 0; dataIndex < indices.length; dataIndex++)items.push({
            data: data,
            groupId: $efb39adcfacd645d$var$getGroupId(data, dataIndex, dataGroupId, false),
            childGroupId: $efb39adcfacd645d$var$getGroupId(data, dataIndex, dataGroupId, true),
            divide: seriesInfo.divide,
            dataIndex: dataIndex
        });
    });
    return items;
}
function $efb39adcfacd645d$var$fadeInElement(newEl, newSeries, newIndex) {
    newEl.traverse(function(el) {
        if (el instanceof (0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039)) // TODO use fade in animation for target element.
        (0, $f7e735722ff36e8c$export$a121566aadcfe021)(el, {
            style: {
                opacity: 0
            }
        }, newSeries, {
            dataIndex: newIndex,
            isFrom: true
        });
    });
}
function $efb39adcfacd645d$var$removeEl(el) {
    if (el.parent) {
        // Bake parent transform to element.
        // So it can still have proper transform to transition after it's removed.
        var computedTransform = el.getComputedTransform();
        el.setLocalTransform(computedTransform);
        el.parent.remove(el);
    }
}
function $efb39adcfacd645d$var$stopAnimation(el) {
    el.stopAnimation();
    if (el.isGroup) el.traverse(function(child) {
        child.stopAnimation();
    });
}
function $efb39adcfacd645d$var$animateElementStyles(el, dataIndex, seriesModel) {
    var animationConfig = (0, $f7e735722ff36e8c$export$5cc7add7ab591d0a)("update", seriesModel, dataIndex);
    animationConfig && el.traverse(function(child) {
        if (child instanceof (0, $42aae97fd255cbd2$export$2e2bcd8739ae039)) {
            var oldStyle = (0, $f7e735722ff36e8c$export$ccb1f1e4d2fa86ac)(child);
            if (oldStyle) child.animateFrom({
                style: oldStyle
            }, animationConfig);
        }
    });
}
function $efb39adcfacd645d$var$isAllIdSame(oldDiffItems, newDiffItems) {
    var len = oldDiffItems.length;
    if (len !== newDiffItems.length) return false;
    for(var i = 0; i < len; i++){
        var oldItem = oldDiffItems[i];
        var newItem = newDiffItems[i];
        if (oldItem.data.getId(oldItem.dataIndex) !== newItem.data.getId(newItem.dataIndex)) return false;
    }
    return true;
}
function $efb39adcfacd645d$var$transitionBetween(oldList, newList, api) {
    var oldDiffItems = $efb39adcfacd645d$var$flattenDataDiffItems(oldList);
    var newDiffItems = $efb39adcfacd645d$var$flattenDataDiffItems(newList);
    function updateMorphingPathProps(from, to, rawFrom, rawTo, animationCfg) {
        if (rawFrom || from) to.animateFrom({
            style: rawFrom && rawFrom !== from ? (0, $e44eb14c4271d0f9$export$8b58be045bf06082)((0, $e44eb14c4271d0f9$export$8b58be045bf06082)({}, rawFrom.style), from.style) : from.style
        }, animationCfg);
    }
    var hasMorphAnimation = false;
    /**
   * With groupId and childGroupId, we can build parent-child relationships between dataItems.
   * However, we should mind the parent-child "direction" between old and new options.
   *
   * For example, suppose we have two dataItems from two series.data:
   *
   * dataA: [                          dataB: [
   *   {                                 {
   *     value: 5,                         value: 3,
   *     groupId: 'creatures',             groupId: 'animals',
   *     childGroupId: 'animals'           childGroupId: 'dogs'
   *   },                                },
   *   ...                               ...
   * ]                                 ]
   *
   * where dataA is belong to optionA and dataB is belong to optionB.
   *
   * When we `setOption(optionB)` from optionA, we choose childGroupId of dataItemA and groupId of
   * dataItemB as keys so the two keys are matched (both are 'animals'), then universalTransition
   * will work. This derection is "parent -> child".
   *
   * If we `setOption(optionA)` from optionB, we also choose groupId of dataItemB and childGroupId
   * of dataItemA as keys and universalTransition will work. This derection is "child -> parent".
   *
   * If there is no childGroupId specified, which means no multiLevelDrillDown/Up is needed and no
   * parent-child relationship exists. This direction is "none".
   *
   * So we need to know whether to use groupId or childGroupId as the key when we call the keyGetter
   * functions. Thus, we need to decide the direction first.
   *
   * The rule is:
   *
   * if (all childGroupIds in oldDiffItems and all groupIds in newDiffItems have common value) {
   *   direction = 'parent -> child';
   * } else if (all groupIds in oldDiffItems and all childGroupIds in newDiffItems have common value) {
   *   direction = 'child -> parent';
   * } else {
   *   direction = 'none';
   * }
   */ var direction = $efb39adcfacd645d$var$TRANSITION_NONE;
    // find all groupIds and childGroupIds from oldDiffItems
    var oldGroupIds = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
    var oldChildGroupIds = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
    oldDiffItems.forEach(function(item) {
        item.groupId && oldGroupIds.set(item.groupId, true);
        item.childGroupId && oldChildGroupIds.set(item.childGroupId, true);
    });
    // traverse newDiffItems and decide the direction according to the rule
    for(var i = 0; i < newDiffItems.length; i++){
        var newGroupId = newDiffItems[i].groupId;
        if (oldChildGroupIds.get(newGroupId)) {
            direction = $efb39adcfacd645d$var$TRANSITION_P2C;
            break;
        }
        var newChildGroupId = newDiffItems[i].childGroupId;
        if (newChildGroupId && oldGroupIds.get(newChildGroupId)) {
            direction = $efb39adcfacd645d$var$TRANSITION_C2P;
            break;
        }
    }
    function createKeyGetter(isOld, onlyGetId) {
        return function(diffItem) {
            var data = diffItem.data;
            var dataIndex = diffItem.dataIndex;
            // TODO if specified dim
            if (onlyGetId) return data.getId(dataIndex);
            if (isOld) return direction === $efb39adcfacd645d$var$TRANSITION_P2C ? diffItem.childGroupId : diffItem.groupId;
            else return direction === $efb39adcfacd645d$var$TRANSITION_C2P ? diffItem.childGroupId : diffItem.groupId;
        };
    }
    // Use id if it's very likely to be an one to one animation
    // It's more robust than groupId
    // TODO Check if key dimension is specified.
    var useId = $efb39adcfacd645d$var$isAllIdSame(oldDiffItems, newDiffItems);
    var isElementStillInChart = {};
    if (!useId) // We may have different diff strategy with basicTransition if we use other dimension as key.
    // If so, we can't simply check if oldEl is same with newEl. We need a map to check if oldEl is still being used in the new chart.
    // We can't use the elements that already being morphed. Let it keep it's original basic transition.
    for(var i = 0; i < newDiffItems.length; i++){
        var newItem = newDiffItems[i];
        var el = newItem.data.getItemGraphicEl(newItem.dataIndex);
        if (el) isElementStillInChart[el.id] = true;
    }
    function updateOneToOne(newIndex, oldIndex) {
        var oldItem = oldDiffItems[oldIndex];
        var newItem = newDiffItems[newIndex];
        var newSeries = newItem.data.hostModel;
        // TODO Mark this elements is morphed and don't morph them anymore
        var oldEl = oldItem.data.getItemGraphicEl(oldItem.dataIndex);
        var newEl = newItem.data.getItemGraphicEl(newItem.dataIndex);
        // Can't handle same elements.
        if (oldEl === newEl) {
            newEl && $efb39adcfacd645d$var$animateElementStyles(newEl, newItem.dataIndex, newSeries);
            return;
        }
        if (// We can't use the elements that already being morphed
        oldEl && isElementStillInChart[oldEl.id]) return;
        if (newEl) {
            // TODO: If keep animating the group in case
            // some of the elements don't want to be morphed.
            // TODO Label?
            $efb39adcfacd645d$var$stopAnimation(newEl);
            if (oldEl) {
                $efb39adcfacd645d$var$stopAnimation(oldEl);
                // If old element is doing leaving animation. stop it and remove it immediately.
                $efb39adcfacd645d$var$removeEl(oldEl);
                hasMorphAnimation = true;
                (0, $4183b1ffd191f345$export$c6ab3ab2bfe1ec39)((0, $4183b1ffd191f345$export$ad61593d7c3fa814)(oldEl), (0, $4183b1ffd191f345$export$ad61593d7c3fa814)(newEl), newItem.divide, newSeries, newIndex, updateMorphingPathProps);
            } else $efb39adcfacd645d$var$fadeInElement(newEl, newSeries, newIndex);
        }
    // else keep oldEl leaving animation.
    }
    new (0, $72bedc7af0abc791$export$2e2bcd8739ae039)(oldDiffItems, newDiffItems, createKeyGetter(true, useId), createKeyGetter(false, useId), null, "multiple").update(updateOneToOne).updateManyToOne(function(newIndex, oldIndices) {
        var newItem = newDiffItems[newIndex];
        var newData = newItem.data;
        var newSeries = newData.hostModel;
        var newEl = newData.getItemGraphicEl(newItem.dataIndex);
        var oldElsList = (0, $e44eb14c4271d0f9$export$3dea766d36a8935f)((0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(oldIndices, function(idx) {
            return oldDiffItems[idx].data.getItemGraphicEl(oldDiffItems[idx].dataIndex);
        }), function(oldEl) {
            return oldEl && oldEl !== newEl && !isElementStillInChart[oldEl.id];
        });
        if (newEl) {
            $efb39adcfacd645d$var$stopAnimation(newEl);
            if (oldElsList.length) {
                // If old element is doing leaving animation. stop it and remove it immediately.
                (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(oldElsList, function(oldEl) {
                    $efb39adcfacd645d$var$stopAnimation(oldEl);
                    $efb39adcfacd645d$var$removeEl(oldEl);
                });
                hasMorphAnimation = true;
                (0, $4183b1ffd191f345$export$c6ab3ab2bfe1ec39)((0, $4183b1ffd191f345$export$ad61593d7c3fa814)(oldElsList), (0, $4183b1ffd191f345$export$ad61593d7c3fa814)(newEl), newItem.divide, newSeries, newIndex, updateMorphingPathProps);
            } else $efb39adcfacd645d$var$fadeInElement(newEl, newSeries, newItem.dataIndex);
        }
    // else keep oldEl leaving animation.
    }).updateOneToMany(function(newIndices, oldIndex) {
        var oldItem = oldDiffItems[oldIndex];
        var oldEl = oldItem.data.getItemGraphicEl(oldItem.dataIndex);
        // We can't use the elements that already being morphed
        if (oldEl && isElementStillInChart[oldEl.id]) return;
        var newElsList = (0, $e44eb14c4271d0f9$export$3dea766d36a8935f)((0, $e44eb14c4271d0f9$export$871de8747c9eaa88)(newIndices, function(idx) {
            return newDiffItems[idx].data.getItemGraphicEl(newDiffItems[idx].dataIndex);
        }), function(el) {
            return el && el !== oldEl;
        });
        var newSeris = newDiffItems[newIndices[0]].data.hostModel;
        if (newElsList.length) {
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(newElsList, function(newEl) {
                return $efb39adcfacd645d$var$stopAnimation(newEl);
            });
            if (oldEl) {
                $efb39adcfacd645d$var$stopAnimation(oldEl);
                // If old element is doing leaving animation. stop it and remove it immediately.
                $efb39adcfacd645d$var$removeEl(oldEl);
                hasMorphAnimation = true;
                (0, $4183b1ffd191f345$export$c6ab3ab2bfe1ec39)((0, $4183b1ffd191f345$export$ad61593d7c3fa814)(oldEl), (0, $4183b1ffd191f345$export$ad61593d7c3fa814)(newElsList), oldItem.divide, // Use divide on old.
                newSeris, newIndices[0], updateMorphingPathProps);
            } else (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(newElsList, function(newEl) {
                return $efb39adcfacd645d$var$fadeInElement(newEl, newSeris, newIndices[0]);
            });
        }
    // else keep oldEl leaving animation.
    }).updateManyToMany(function(newIndices, oldIndices) {
        // If two data are same and both have groupId.
        // Normally they should be diff by id.
        new (0, $72bedc7af0abc791$export$2e2bcd8739ae039)(oldIndices, newIndices, function(rawIdx) {
            return oldDiffItems[rawIdx].data.getId(oldDiffItems[rawIdx].dataIndex);
        }, function(rawIdx) {
            return newDiffItems[rawIdx].data.getId(newDiffItems[rawIdx].dataIndex);
        }).update(function(newIndex, oldIndex) {
            // Use the original index
            updateOneToOne(newIndices[newIndex], oldIndices[oldIndex]);
        }).execute();
    }).execute();
    if (hasMorphAnimation) (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(newList, function(_a) {
        var data = _a.data;
        var seriesModel = data.hostModel;
        var view = seriesModel && api.getViewOfSeriesModel(seriesModel);
        var animationCfg = (0, $f7e735722ff36e8c$export$5cc7add7ab591d0a)("update", seriesModel, 0); // use 0 index.
        if (view && seriesModel.isAnimationEnabled() && animationCfg && animationCfg.duration > 0) view.group.traverse(function(el) {
            if (el instanceof (0, $97f9f9aac9c7fd52$export$2e2bcd8739ae039) && !el.animators.length) // We can't accept there still exists element that has no animation
            // if universalTransition is enabled
            el.animateFrom({
                style: {
                    opacity: 0
                }
            }, animationCfg);
        });
    });
}
function $efb39adcfacd645d$var$getSeriesTransitionKey(series) {
    var seriesKey = series.getModel("universalTransition").get("seriesKey");
    if (!seriesKey) // Use series id by default.
    return series.id;
    return seriesKey;
}
function $efb39adcfacd645d$var$convertArraySeriesKeyToString(seriesKey) {
    if ((0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(seriesKey)) // Order independent.
    return seriesKey.sort().join(",");
    return seriesKey;
}
function $efb39adcfacd645d$var$getDivideShapeFromData(data) {
    if (data.hostModel) return data.hostModel.getModel("universalTransition").get("divideShape");
}
function $efb39adcfacd645d$var$findTransitionSeriesBatches(globalStore, params) {
    var updateBatches = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
    var oldDataMap = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
    // Map that only store key in array seriesKey.
    // Which is used to query the old data when transition from one to multiple series.
    var oldDataMapForSplit = (0, $e44eb14c4271d0f9$export$55f8aa7ef875b0a4)();
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(globalStore.oldSeries, function(series, idx) {
        var oldDataGroupId = globalStore.oldDataGroupIds[idx];
        var oldData = globalStore.oldData[idx];
        var transitionKey = $efb39adcfacd645d$var$getSeriesTransitionKey(series);
        var transitionKeyStr = $efb39adcfacd645d$var$convertArraySeriesKeyToString(transitionKey);
        oldDataMap.set(transitionKeyStr, {
            dataGroupId: oldDataGroupId,
            data: oldData
        });
        if ((0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(transitionKey)) // Same key can't in different array seriesKey.
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(transitionKey, function(key) {
            oldDataMapForSplit.set(key, {
                key: transitionKeyStr,
                dataGroupId: oldDataGroupId,
                data: oldData
            });
        });
    });
    function checkTransitionSeriesKeyDuplicated(transitionKeyStr) {
        if (updateBatches.get(transitionKeyStr)) (0, $4796c55e8b767685$export$c106dd0671a0fc2d)("Duplicated seriesKey in universalTransition " + transitionKeyStr);
    }
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(params.updatedSeries, function(series) {
        if (series.isUniversalTransitionEnabled() && series.isAnimationEnabled()) {
            var newDataGroupId = series.get("dataGroupId");
            var newData = series.getData();
            var transitionKey = $efb39adcfacd645d$var$getSeriesTransitionKey(series);
            var transitionKeyStr = $efb39adcfacd645d$var$convertArraySeriesKeyToString(transitionKey);
            // Only transition between series with same id.
            var oldData = oldDataMap.get(transitionKeyStr);
            // string transition key is the best match.
            if (oldData) {
                checkTransitionSeriesKeyDuplicated(transitionKeyStr);
                // TODO check if data is same?
                updateBatches.set(transitionKeyStr, {
                    oldSeries: [
                        {
                            dataGroupId: oldData.dataGroupId,
                            divide: $efb39adcfacd645d$var$getDivideShapeFromData(oldData.data),
                            data: oldData.data
                        }
                    ],
                    newSeries: [
                        {
                            dataGroupId: newDataGroupId,
                            divide: $efb39adcfacd645d$var$getDivideShapeFromData(newData),
                            data: newData
                        }
                    ]
                });
            } else // Transition from multiple series.
            // e.g. 'female', 'male' -> ['female', 'male']
            if ((0, $e44eb14c4271d0f9$export$43bee75e5e14138e)(transitionKey)) {
                checkTransitionSeriesKeyDuplicated(transitionKeyStr);
                var oldSeries_1 = [];
                (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(transitionKey, function(key) {
                    var oldData = oldDataMap.get(key);
                    if (oldData.data) oldSeries_1.push({
                        dataGroupId: oldData.dataGroupId,
                        divide: $efb39adcfacd645d$var$getDivideShapeFromData(oldData.data),
                        data: oldData.data
                    });
                });
                if (oldSeries_1.length) updateBatches.set(transitionKeyStr, {
                    oldSeries: oldSeries_1,
                    newSeries: [
                        {
                            dataGroupId: newDataGroupId,
                            data: newData,
                            divide: $efb39adcfacd645d$var$getDivideShapeFromData(newData)
                        }
                    ]
                });
            } else {
                // Try transition to multiple series.
                // e.g. ['female', 'male'] -> 'female', 'male'
                var oldData_1 = oldDataMapForSplit.get(transitionKey);
                if (oldData_1) {
                    var batch = updateBatches.get(oldData_1.key);
                    if (!batch) {
                        batch = {
                            oldSeries: [
                                {
                                    dataGroupId: oldData_1.dataGroupId,
                                    data: oldData_1.data,
                                    divide: $efb39adcfacd645d$var$getDivideShapeFromData(oldData_1.data)
                                }
                            ],
                            newSeries: []
                        };
                        updateBatches.set(oldData_1.key, batch);
                    }
                    batch.newSeries.push({
                        dataGroupId: newDataGroupId,
                        data: newData,
                        divide: $efb39adcfacd645d$var$getDivideShapeFromData(newData)
                    });
                }
            }
        }
    });
    return updateBatches;
}
function $efb39adcfacd645d$var$querySeries(series, finder) {
    for(var i = 0; i < series.length; i++){
        var found = finder.seriesIndex != null && finder.seriesIndex === series[i].seriesIndex || finder.seriesId != null && finder.seriesId === series[i].id;
        if (found) return i;
    }
}
function $efb39adcfacd645d$var$transitionSeriesFromOpt(transitionOpt, globalStore, params, api) {
    var from = [];
    var to = [];
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)((0, $8917c02fd8256c67$export$4f07b212a02c8051)(transitionOpt.from), function(finder) {
        var idx = $efb39adcfacd645d$var$querySeries(globalStore.oldSeries, finder);
        if (idx >= 0) from.push({
            dataGroupId: globalStore.oldDataGroupIds[idx],
            data: globalStore.oldData[idx],
            // TODO can specify divideShape in transition.
            divide: $efb39adcfacd645d$var$getDivideShapeFromData(globalStore.oldData[idx]),
            groupIdDim: finder.dimension
        });
    });
    (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)((0, $8917c02fd8256c67$export$4f07b212a02c8051)(transitionOpt.to), function(finder) {
        var idx = $efb39adcfacd645d$var$querySeries(params.updatedSeries, finder);
        if (idx >= 0) {
            var data = params.updatedSeries[idx].getData();
            to.push({
                dataGroupId: globalStore.oldDataGroupIds[idx],
                data: data,
                divide: $efb39adcfacd645d$var$getDivideShapeFromData(data),
                groupIdDim: finder.dimension
            });
        }
    });
    if (from.length > 0 && to.length > 0) $efb39adcfacd645d$var$transitionBetween(from, to, api);
}
function $efb39adcfacd645d$export$efd07f28fd73e88c(registers) {
    registers.registerUpdateLifecycle("series:beforeupdate", function(ecMOdel, api, params) {
        (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)((0, $8917c02fd8256c67$export$4f07b212a02c8051)(params.seriesTransition), function(transOpt) {
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)((0, $8917c02fd8256c67$export$4f07b212a02c8051)(transOpt.to), function(finder) {
                var series = params.updatedSeries;
                for(var i = 0; i < series.length; i++)if (finder.seriesIndex != null && finder.seriesIndex === series[i].seriesIndex || finder.seriesId != null && finder.seriesId === series[i].id) series[i][0, $3301f75840f3090f$export$e960441116ae2799] = true;
            });
        });
    });
    registers.registerUpdateLifecycle("series:transition", function(ecModel, api, params) {
        // TODO api provide an namespace that can save stuff per instance
        var globalStore = $efb39adcfacd645d$var$getUniversalTransitionGlobalStore(api);
        // TODO multiple to multiple series.
        if (globalStore.oldSeries && params.updatedSeries && params.optionChanged) {
            // TODO transitionOpt was used in an old implementation and can be removed now
            // Use give transition config if its' give;
            var transitionOpt = params.seriesTransition;
            if (transitionOpt) (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)((0, $8917c02fd8256c67$export$4f07b212a02c8051)(transitionOpt), function(opt) {
                $efb39adcfacd645d$var$transitionSeriesFromOpt(opt, globalStore, params, api);
            });
            else {
                // Else guess from series based on transition series key.
                var updateBatches_1 = $efb39adcfacd645d$var$findTransitionSeriesBatches(globalStore, params);
                (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(updateBatches_1.keys(), function(key) {
                    var batch = updateBatches_1.get(key);
                    $efb39adcfacd645d$var$transitionBetween(batch.oldSeries, batch.newSeries, api);
                });
            }
            // Reset
            (0, $e44eb14c4271d0f9$export$79b2f7037acddd43)(params.updatedSeries, function(series) {
                // Reset;
                if (series[0, $3301f75840f3090f$export$e960441116ae2799]) series[0, $3301f75840f3090f$export$e960441116ae2799] = false;
            });
        }
        // Save all series of current update. Not only the updated one.
        var allSeries = ecModel.getSeries();
        var savedSeries = globalStore.oldSeries = [];
        var savedDataGroupIds = globalStore.oldDataGroupIds = [];
        var savedData = globalStore.oldData = [];
        for(var i = 0; i < allSeries.length; i++){
            var data = allSeries[i].getData();
            // Only save the data that can have transition.
            // Avoid large data costing too much extra memory
            if (data.count() < $efb39adcfacd645d$var$DATA_COUNT_THRESHOLD) {
                savedSeries.push(allSeries[i]);
                savedDataGroupIds.push(allSeries[i].get("dataGroupId"));
                savedData.push(data);
            }
        }
    });
}




/*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ /**
 * AUTO-GENERATED FILE. DO NOT MODIFY.
 */ /*
* Licensed to the Apache Software Foundation (ASF) under one
* or more contributor license agreements.  See the NOTICE file
* distributed with this work for additional information
* regarding copyright ownership.  The ASF licenses this file
* to you under the Apache License, Version 2.0 (the
* "License"); you may not use this file except in compliance
* with the License.  You may obtain a copy of the License at
*
*   http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/ 










function $a77f1be6ff7484c1$var$createDom(id, painter, dpr) {
    var newDom = (0, $c7ef4e2442c05203$export$ef5e599365494451).createCanvas();
    var width = painter.getWidth();
    var height = painter.getHeight();
    var newDomStyle = newDom.style;
    if (newDomStyle) {
        newDomStyle.position = "absolute";
        newDomStyle.left = "0";
        newDomStyle.top = "0";
        newDomStyle.width = width + "px";
        newDomStyle.height = height + "px";
        newDom.setAttribute("data-zr-dom-id", id);
    }
    newDom.width = width * dpr;
    newDom.height = height * dpr;
    return newDom;
}
var $a77f1be6ff7484c1$var$Layer = function(_super) {
    (0, $a88b03c2e6649d67$export$a8ba968b8961cb8a)(Layer, _super);
    function Layer(id, painter, dpr) {
        var _this = _super.call(this) || this;
        _this.motionBlur = false;
        _this.lastFrameAlpha = 0.7;
        _this.dpr = 1;
        _this.virtual = false;
        _this.config = {};
        _this.incremental = false;
        _this.zlevel = 0;
        _this.maxRepaintRectCount = 5;
        _this.__dirty = true;
        _this.__firstTimePaint = true;
        _this.__used = false;
        _this.__drawIndex = 0;
        _this.__startIndex = 0;
        _this.__endIndex = 0;
        _this.__prevStartIndex = null;
        _this.__prevEndIndex = null;
        var dom;
        dpr = dpr || (0, $a9c042e5e4c73c13$export$508f096bfcdaac40);
        if (typeof id === "string") dom = $a77f1be6ff7484c1$var$createDom(id, painter, dpr);
        else if ($e44eb14c4271d0f9$export$a6cdc56e425d0d0a(id)) {
            dom = id;
            id = dom.id;
        }
        _this.id = id;
        _this.dom = dom;
        var domStyle = dom.style;
        if (domStyle) {
            $e44eb14c4271d0f9$export$23a5d775868fdd2c(dom);
            dom.onselectstart = function() {
                return false;
            };
            domStyle.padding = "0";
            domStyle.margin = "0";
            domStyle.borderWidth = "0";
        }
        _this.painter = painter;
        _this.dpr = dpr;
        return _this;
    }
    Layer.prototype.getElementCount = function() {
        return this.__endIndex - this.__startIndex;
    };
    Layer.prototype.afterBrush = function() {
        this.__prevStartIndex = this.__startIndex;
        this.__prevEndIndex = this.__endIndex;
    };
    Layer.prototype.initContext = function() {
        this.ctx = this.dom.getContext("2d");
        this.ctx.dpr = this.dpr;
    };
    Layer.prototype.setUnpainted = function() {
        this.__firstTimePaint = true;
    };
    Layer.prototype.createBackBuffer = function() {
        var dpr = this.dpr;
        this.domBack = $a77f1be6ff7484c1$var$createDom("back-" + this.id, this.painter, dpr);
        this.ctxBack = this.domBack.getContext("2d");
        if (dpr !== 1) this.ctxBack.scale(dpr, dpr);
    };
    Layer.prototype.createRepaintRects = function(displayList, prevList, viewWidth, viewHeight) {
        if (this.__firstTimePaint) {
            this.__firstTimePaint = false;
            return null;
        }
        var mergedRepaintRects = [];
        var maxRepaintRectCount = this.maxRepaintRectCount;
        var full = false;
        var pendingRect = new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)(0, 0, 0, 0);
        function addRectToMergePool(rect) {
            if (!rect.isFinite() || rect.isZero()) return;
            if (mergedRepaintRects.length === 0) {
                var boundingRect = new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)(0, 0, 0, 0);
                boundingRect.copy(rect);
                mergedRepaintRects.push(boundingRect);
            } else {
                var isMerged = false;
                var minDeltaArea = Infinity;
                var bestRectToMergeIdx = 0;
                for(var i = 0; i < mergedRepaintRects.length; ++i){
                    var mergedRect = mergedRepaintRects[i];
                    if (mergedRect.intersect(rect)) {
                        var pendingRect_1 = new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)(0, 0, 0, 0);
                        pendingRect_1.copy(mergedRect);
                        pendingRect_1.union(rect);
                        mergedRepaintRects[i] = pendingRect_1;
                        isMerged = true;
                        break;
                    } else if (full) {
                        pendingRect.copy(rect);
                        pendingRect.union(mergedRect);
                        var aArea = rect.width * rect.height;
                        var bArea = mergedRect.width * mergedRect.height;
                        var pendingArea = pendingRect.width * pendingRect.height;
                        var deltaArea = pendingArea - aArea - bArea;
                        if (deltaArea < minDeltaArea) {
                            minDeltaArea = deltaArea;
                            bestRectToMergeIdx = i;
                        }
                    }
                }
                if (full) {
                    mergedRepaintRects[bestRectToMergeIdx].union(rect);
                    isMerged = true;
                }
                if (!isMerged) {
                    var boundingRect = new (0, $bf33be5184c664d0$export$2e2bcd8739ae039)(0, 0, 0, 0);
                    boundingRect.copy(rect);
                    mergedRepaintRects.push(boundingRect);
                }
                if (!full) full = mergedRepaintRects.length >= maxRepaintRectCount;
            }
        }
        for(var i = this.__startIndex; i < this.__endIndex; ++i){
            var el = displayList[i];
            if (el) {
                var shouldPaint = el.shouldBePainted(viewWidth, viewHeight, true, true);
                var prevRect = el.__isRendered && (el.__dirty & (0, $b870c418b8d2135e$export$a7b6db622c6c7dbd) || !shouldPaint) ? el.getPrevPaintRect() : null;
                if (prevRect) addRectToMergePool(prevRect);
                var curRect = shouldPaint && (el.__dirty & (0, $b870c418b8d2135e$export$a7b6db622c6c7dbd) || !el.__isRendered) ? el.getPaintRect() : null;
                if (curRect) addRectToMergePool(curRect);
            }
        }
        for(var i = this.__prevStartIndex; i < this.__prevEndIndex; ++i){
            var el = prevList[i];
            var shouldPaint = el && el.shouldBePainted(viewWidth, viewHeight, true, true);
            if (el && (!shouldPaint || !el.__zr) && el.__isRendered) {
                var prevRect = el.getPrevPaintRect();
                if (prevRect) addRectToMergePool(prevRect);
            }
        }
        var hasIntersections;
        do {
            hasIntersections = false;
            for(var i = 0; i < mergedRepaintRects.length;){
                if (mergedRepaintRects[i].isZero()) {
                    mergedRepaintRects.splice(i, 1);
                    continue;
                }
                for(var j = i + 1; j < mergedRepaintRects.length;)if (mergedRepaintRects[i].intersect(mergedRepaintRects[j])) {
                    hasIntersections = true;
                    mergedRepaintRects[i].union(mergedRepaintRects[j]);
                    mergedRepaintRects.splice(j, 1);
                } else j++;
                i++;
            }
        }while (hasIntersections);
        this._paintRects = mergedRepaintRects;
        return mergedRepaintRects;
    };
    Layer.prototype.debugGetPaintRects = function() {
        return (this._paintRects || []).slice();
    };
    Layer.prototype.resize = function(width, height) {
        var dpr = this.dpr;
        var dom = this.dom;
        var domStyle = dom.style;
        var domBack = this.domBack;
        if (domStyle) {
            domStyle.width = width + "px";
            domStyle.height = height + "px";
        }
        dom.width = width * dpr;
        dom.height = height * dpr;
        if (domBack) {
            domBack.width = width * dpr;
            domBack.height = height * dpr;
            if (dpr !== 1) this.ctxBack.scale(dpr, dpr);
        }
    };
    Layer.prototype.clear = function(clearAll, clearColor, repaintRects) {
        var dom = this.dom;
        var ctx = this.ctx;
        var width = dom.width;
        var height = dom.height;
        clearColor = clearColor || this.clearColor;
        var haveMotionBLur = this.motionBlur && !clearAll;
        var lastFrameAlpha = this.lastFrameAlpha;
        var dpr = this.dpr;
        var self = this;
        if (haveMotionBLur) {
            if (!this.domBack) this.createBackBuffer();
            this.ctxBack.globalCompositeOperation = "copy";
            this.ctxBack.drawImage(dom, 0, 0, width / dpr, height / dpr);
        }
        var domBack = this.domBack;
        function doClear(x, y, width, height) {
            ctx.clearRect(x, y, width, height);
            if (clearColor && clearColor !== "transparent") {
                var clearColorGradientOrPattern = void 0;
                if ($e44eb14c4271d0f9$export$fa2c283003ed971c(clearColor)) {
                    var shouldCache = clearColor.global || clearColor.__width === width && clearColor.__height === height;
                    clearColorGradientOrPattern = shouldCache && clearColor.__canvasGradient || (0, $c642d8e6805d7bb5$export$3dab6afd018d48c7)(ctx, clearColor, {
                        x: 0,
                        y: 0,
                        width: width,
                        height: height
                    });
                    clearColor.__canvasGradient = clearColorGradientOrPattern;
                    clearColor.__width = width;
                    clearColor.__height = height;
                } else if ($e44eb14c4271d0f9$export$a49bbf3a55dcef7b(clearColor)) {
                    clearColor.scaleX = clearColor.scaleX || dpr;
                    clearColor.scaleY = clearColor.scaleY || dpr;
                    clearColorGradientOrPattern = (0, $e976df33d140e34a$export$8eb5db6b7bc27903)(ctx, clearColor, {
                        dirty: function() {
                            self.setUnpainted();
                            self.painter.refresh();
                        }
                    });
                }
                ctx.save();
                ctx.fillStyle = clearColorGradientOrPattern || clearColor;
                ctx.fillRect(x, y, width, height);
                ctx.restore();
            }
            if (haveMotionBLur) {
                ctx.save();
                ctx.globalAlpha = lastFrameAlpha;
                ctx.drawImage(domBack, x, y, width, height);
                ctx.restore();
            }
        }
        if (!repaintRects || haveMotionBLur) doClear(0, 0, width, height);
        else if (repaintRects.length) $e44eb14c4271d0f9$export$79b2f7037acddd43(repaintRects, function(rect) {
            doClear(rect.x * dpr, rect.y * dpr, rect.width * dpr, rect.height * dpr);
        });
    };
    return Layer;
}((0, $a2a21788c772d0fe$export$2e2bcd8739ae039));
var $a77f1be6ff7484c1$export$2e2bcd8739ae039 = $a77f1be6ff7484c1$var$Layer;







var $d2d60d1f41dae01c$var$HOVER_LAYER_ZLEVEL = 1e5;
var $d2d60d1f41dae01c$var$CANVAS_ZLEVEL = 314159;
var $d2d60d1f41dae01c$var$EL_AFTER_INCREMENTAL_INC = 0.01;
var $d2d60d1f41dae01c$var$INCREMENTAL_INC = 0.001;
function $d2d60d1f41dae01c$var$isLayerValid(layer) {
    if (!layer) return false;
    if (layer.__builtin__) return true;
    if (typeof layer.resize !== "function" || typeof layer.refresh !== "function") return false;
    return true;
}
function $d2d60d1f41dae01c$var$createRoot(width, height) {
    var domRoot = document.createElement("div");
    domRoot.style.cssText = [
        "position:relative",
        "width:" + width + "px",
        "height:" + height + "px",
        "padding:0",
        "margin:0",
        "border-width:0"
    ].join(";") + ";";
    return domRoot;
}
var $d2d60d1f41dae01c$var$CanvasPainter = function() {
    function CanvasPainter(root, storage, opts, id) {
        this.type = "canvas";
        this._zlevelList = [];
        this._prevDisplayList = [];
        this._layers = {};
        this._layerConfig = {};
        this._needsManuallyCompositing = false;
        this.type = "canvas";
        var singleCanvas = !root.nodeName || root.nodeName.toUpperCase() === "CANVAS";
        this._opts = opts = $e44eb14c4271d0f9$export$8b58be045bf06082({}, opts || {});
        this.dpr = opts.devicePixelRatio || (0, $a9c042e5e4c73c13$export$508f096bfcdaac40);
        this._singleCanvas = singleCanvas;
        this.root = root;
        var rootStyle = root.style;
        if (rootStyle) {
            $e44eb14c4271d0f9$export$23a5d775868fdd2c(root);
            root.innerHTML = "";
        }
        this.storage = storage;
        var zlevelList = this._zlevelList;
        this._prevDisplayList = [];
        var layers = this._layers;
        if (!singleCanvas) {
            this._width = (0, $c642d8e6805d7bb5$export$31b21d0167753bb4)(root, 0, opts);
            this._height = (0, $c642d8e6805d7bb5$export$31b21d0167753bb4)(root, 1, opts);
            var domRoot = this._domRoot = $d2d60d1f41dae01c$var$createRoot(this._width, this._height);
            root.appendChild(domRoot);
        } else {
            var rootCanvas = root;
            var width = rootCanvas.width;
            var height = rootCanvas.height;
            if (opts.width != null) width = opts.width;
            if (opts.height != null) height = opts.height;
            this.dpr = opts.devicePixelRatio || 1;
            rootCanvas.width = width * this.dpr;
            rootCanvas.height = height * this.dpr;
            this._width = width;
            this._height = height;
            var mainLayer = new (0, $a77f1be6ff7484c1$export$2e2bcd8739ae039)(rootCanvas, this, this.dpr);
            mainLayer.__builtin__ = true;
            mainLayer.initContext();
            layers[$d2d60d1f41dae01c$var$CANVAS_ZLEVEL] = mainLayer;
            mainLayer.zlevel = $d2d60d1f41dae01c$var$CANVAS_ZLEVEL;
            zlevelList.push($d2d60d1f41dae01c$var$CANVAS_ZLEVEL);
            this._domRoot = root;
        }
    }
    CanvasPainter.prototype.getType = function() {
        return "canvas";
    };
    CanvasPainter.prototype.isSingleCanvas = function() {
        return this._singleCanvas;
    };
    CanvasPainter.prototype.getViewportRoot = function() {
        return this._domRoot;
    };
    CanvasPainter.prototype.getViewportRootOffset = function() {
        var viewportRoot = this.getViewportRoot();
        if (viewportRoot) return {
            offsetLeft: viewportRoot.offsetLeft || 0,
            offsetTop: viewportRoot.offsetTop || 0
        };
    };
    CanvasPainter.prototype.refresh = function(paintAll) {
        var list = this.storage.getDisplayList(true);
        var prevList = this._prevDisplayList;
        var zlevelList = this._zlevelList;
        this._redrawId = Math.random();
        this._paintList(list, prevList, paintAll, this._redrawId);
        for(var i = 0; i < zlevelList.length; i++){
            var z = zlevelList[i];
            var layer = this._layers[z];
            if (!layer.__builtin__ && layer.refresh) {
                var clearColor = i === 0 ? this._backgroundColor : null;
                layer.refresh(clearColor);
            }
        }
        if (this._opts.useDirtyRect) this._prevDisplayList = list.slice();
        return this;
    };
    CanvasPainter.prototype.refreshHover = function() {
        this._paintHoverList(this.storage.getDisplayList(false));
    };
    CanvasPainter.prototype._paintHoverList = function(list) {
        var len = list.length;
        var hoverLayer = this._hoverlayer;
        hoverLayer && hoverLayer.clear();
        if (!len) return;
        var scope = {
            inHover: true,
            viewWidth: this._width,
            viewHeight: this._height
        };
        var ctx;
        for(var i = 0; i < len; i++){
            var el = list[i];
            if (el.__inHover) {
                if (!hoverLayer) hoverLayer = this._hoverlayer = this.getLayer($d2d60d1f41dae01c$var$HOVER_LAYER_ZLEVEL);
                if (!ctx) {
                    ctx = hoverLayer.ctx;
                    ctx.save();
                }
                (0, $e976df33d140e34a$export$da5d6544e8c27bc1)(ctx, el, scope, i === len - 1);
            }
        }
        if (ctx) ctx.restore();
    };
    CanvasPainter.prototype.getHoverLayer = function() {
        return this.getLayer($d2d60d1f41dae01c$var$HOVER_LAYER_ZLEVEL);
    };
    CanvasPainter.prototype.paintOne = function(ctx, el) {
        (0, $e976df33d140e34a$export$567881adfc3eb7f3)(ctx, el);
    };
    CanvasPainter.prototype._paintList = function(list, prevList, paintAll, redrawId) {
        if (this._redrawId !== redrawId) return;
        paintAll = paintAll || false;
        this._updateLayerStatus(list);
        var _a = this._doPaintList(list, prevList, paintAll), finished = _a.finished, needsRefreshHover = _a.needsRefreshHover;
        if (this._needsManuallyCompositing) this._compositeManually();
        if (needsRefreshHover) this._paintHoverList(list);
        if (!finished) {
            var self_1 = this;
            (0, $c6d80931a907d00a$export$2e2bcd8739ae039)(function() {
                self_1._paintList(list, prevList, paintAll, redrawId);
            });
        } else this.eachLayer(function(layer) {
            layer.afterBrush && layer.afterBrush();
        });
    };
    CanvasPainter.prototype._compositeManually = function() {
        var ctx = this.getLayer($d2d60d1f41dae01c$var$CANVAS_ZLEVEL).ctx;
        var width = this._domRoot.width;
        var height = this._domRoot.height;
        ctx.clearRect(0, 0, width, height);
        this.eachBuiltinLayer(function(layer) {
            if (layer.virtual) ctx.drawImage(layer.dom, 0, 0, width, height);
        });
    };
    CanvasPainter.prototype._doPaintList = function(list, prevList, paintAll) {
        var _this = this;
        var layerList = [];
        var useDirtyRect = this._opts.useDirtyRect;
        for(var zi = 0; zi < this._zlevelList.length; zi++){
            var zlevel = this._zlevelList[zi];
            var layer = this._layers[zlevel];
            if (layer.__builtin__ && layer !== this._hoverlayer && (layer.__dirty || paintAll)) layerList.push(layer);
        }
        var finished = true;
        var needsRefreshHover = false;
        var _loop_1 = function(k) {
            var layer = layerList[k];
            var ctx = layer.ctx;
            var repaintRects = useDirtyRect && layer.createRepaintRects(list, prevList, this_1._width, this_1._height);
            var start = paintAll ? layer.__startIndex : layer.__drawIndex;
            var useTimer = !paintAll && layer.incremental && Date.now;
            var startTime = useTimer && Date.now();
            var clearColor = layer.zlevel === this_1._zlevelList[0] ? this_1._backgroundColor : null;
            if (layer.__startIndex === layer.__endIndex) layer.clear(false, clearColor, repaintRects);
            else if (start === layer.__startIndex) {
                var firstEl = list[start];
                if (!firstEl.incremental || !firstEl.notClear || paintAll) layer.clear(false, clearColor, repaintRects);
            }
            if (start === -1) {
                console.error("For some unknown reason. drawIndex is -1");
                start = layer.__startIndex;
            }
            var i;
            var repaint = function(repaintRect) {
                var scope = {
                    inHover: false,
                    allClipped: false,
                    prevEl: null,
                    viewWidth: _this._width,
                    viewHeight: _this._height
                };
                for(i = start; i < layer.__endIndex; i++){
                    var el = list[i];
                    if (el.__inHover) needsRefreshHover = true;
                    _this._doPaintEl(el, layer, useDirtyRect, repaintRect, scope, i === layer.__endIndex - 1);
                    if (useTimer) {
                        var dTime = Date.now() - startTime;
                        if (dTime > 15) break;
                    }
                }
                if (scope.prevElClipPaths) ctx.restore();
            };
            if (repaintRects) {
                if (repaintRects.length === 0) i = layer.__endIndex;
                else {
                    var dpr = this_1.dpr;
                    for(var r = 0; r < repaintRects.length; ++r){
                        var rect = repaintRects[r];
                        ctx.save();
                        ctx.beginPath();
                        ctx.rect(rect.x * dpr, rect.y * dpr, rect.width * dpr, rect.height * dpr);
                        ctx.clip();
                        repaint(rect);
                        ctx.restore();
                    }
                }
            } else {
                ctx.save();
                repaint();
                ctx.restore();
            }
            layer.__drawIndex = i;
            if (layer.__drawIndex < layer.__endIndex) finished = false;
        };
        var this_1 = this;
        for(var k = 0; k < layerList.length; k++)_loop_1(k);
        if ((0, $de9e931273a116c1$export$2e2bcd8739ae039).wxa) $e44eb14c4271d0f9$export$79b2f7037acddd43(this._layers, function(layer) {
            if (layer && layer.ctx && layer.ctx.draw) layer.ctx.draw();
        });
        return {
            finished: finished,
            needsRefreshHover: needsRefreshHover
        };
    };
    CanvasPainter.prototype._doPaintEl = function(el, currentLayer, useDirtyRect, repaintRect, scope, isLast) {
        var ctx = currentLayer.ctx;
        if (useDirtyRect) {
            var paintRect = el.getPaintRect();
            if (!repaintRect || paintRect && paintRect.intersect(repaintRect)) {
                (0, $e976df33d140e34a$export$da5d6544e8c27bc1)(ctx, el, scope, isLast);
                el.setPrevPaintRect(paintRect);
            }
        } else (0, $e976df33d140e34a$export$da5d6544e8c27bc1)(ctx, el, scope, isLast);
    };
    CanvasPainter.prototype.getLayer = function(zlevel, virtual) {
        if (this._singleCanvas && !this._needsManuallyCompositing) zlevel = $d2d60d1f41dae01c$var$CANVAS_ZLEVEL;
        var layer = this._layers[zlevel];
        if (!layer) {
            layer = new (0, $a77f1be6ff7484c1$export$2e2bcd8739ae039)("zr_" + zlevel, this, this.dpr);
            layer.zlevel = zlevel;
            layer.__builtin__ = true;
            if (this._layerConfig[zlevel]) $e44eb14c4271d0f9$export$4950aa0f605343fb(layer, this._layerConfig[zlevel], true);
            else if (this._layerConfig[zlevel - $d2d60d1f41dae01c$var$EL_AFTER_INCREMENTAL_INC]) $e44eb14c4271d0f9$export$4950aa0f605343fb(layer, this._layerConfig[zlevel - $d2d60d1f41dae01c$var$EL_AFTER_INCREMENTAL_INC], true);
            if (virtual) layer.virtual = virtual;
            this.insertLayer(zlevel, layer);
            layer.initContext();
        }
        return layer;
    };
    CanvasPainter.prototype.insertLayer = function(zlevel, layer) {
        var layersMap = this._layers;
        var zlevelList = this._zlevelList;
        var len = zlevelList.length;
        var domRoot = this._domRoot;
        var prevLayer = null;
        var i = -1;
        if (layersMap[zlevel]) {
            $e44eb14c4271d0f9$export$58da9968c3170cb1("ZLevel " + zlevel + " has been used already");
            return;
        }
        if (!$d2d60d1f41dae01c$var$isLayerValid(layer)) {
            $e44eb14c4271d0f9$export$58da9968c3170cb1("Layer of zlevel " + zlevel + " is not valid");
            return;
        }
        if (len > 0 && zlevel > zlevelList[0]) {
            for(i = 0; i < len - 1; i++){
                if (zlevelList[i] < zlevel && zlevelList[i + 1] > zlevel) break;
            }
            prevLayer = layersMap[zlevelList[i]];
        }
        zlevelList.splice(i + 1, 0, zlevel);
        layersMap[zlevel] = layer;
        if (!layer.virtual) {
            if (prevLayer) {
                var prevDom = prevLayer.dom;
                if (prevDom.nextSibling) domRoot.insertBefore(layer.dom, prevDom.nextSibling);
                else domRoot.appendChild(layer.dom);
            } else if (domRoot.firstChild) domRoot.insertBefore(layer.dom, domRoot.firstChild);
            else domRoot.appendChild(layer.dom);
        }
        layer.painter || (layer.painter = this);
    };
    CanvasPainter.prototype.eachLayer = function(cb, context) {
        var zlevelList = this._zlevelList;
        for(var i = 0; i < zlevelList.length; i++){
            var z = zlevelList[i];
            cb.call(context, this._layers[z], z);
        }
    };
    CanvasPainter.prototype.eachBuiltinLayer = function(cb, context) {
        var zlevelList = this._zlevelList;
        for(var i = 0; i < zlevelList.length; i++){
            var z = zlevelList[i];
            var layer = this._layers[z];
            if (layer.__builtin__) cb.call(context, layer, z);
        }
    };
    CanvasPainter.prototype.eachOtherLayer = function(cb, context) {
        var zlevelList = this._zlevelList;
        for(var i = 0; i < zlevelList.length; i++){
            var z = zlevelList[i];
            var layer = this._layers[z];
            if (!layer.__builtin__) cb.call(context, layer, z);
        }
    };
    CanvasPainter.prototype.getLayers = function() {
        return this._layers;
    };
    CanvasPainter.prototype._updateLayerStatus = function(list) {
        this.eachBuiltinLayer(function(layer, z) {
            layer.__dirty = layer.__used = false;
        });
        function updatePrevLayer(idx) {
            if (prevLayer) {
                if (prevLayer.__endIndex !== idx) prevLayer.__dirty = true;
                prevLayer.__endIndex = idx;
            }
        }
        if (this._singleCanvas) for(var i_1 = 1; i_1 < list.length; i_1++){
            var el = list[i_1];
            if (el.zlevel !== list[i_1 - 1].zlevel || el.incremental) {
                this._needsManuallyCompositing = true;
                break;
            }
        }
        var prevLayer = null;
        var incrementalLayerCount = 0;
        var prevZlevel;
        var i;
        for(i = 0; i < list.length; i++){
            var el = list[i];
            var zlevel = el.zlevel;
            var layer = void 0;
            if (prevZlevel !== zlevel) {
                prevZlevel = zlevel;
                incrementalLayerCount = 0;
            }
            if (el.incremental) {
                layer = this.getLayer(zlevel + $d2d60d1f41dae01c$var$INCREMENTAL_INC, this._needsManuallyCompositing);
                layer.incremental = true;
                incrementalLayerCount = 1;
            } else layer = this.getLayer(zlevel + (incrementalLayerCount > 0 ? $d2d60d1f41dae01c$var$EL_AFTER_INCREMENTAL_INC : 0), this._needsManuallyCompositing);
            if (!layer.__builtin__) $e44eb14c4271d0f9$export$58da9968c3170cb1("ZLevel " + zlevel + " has been used by unkown layer " + layer.id);
            if (layer !== prevLayer) {
                layer.__used = true;
                if (layer.__startIndex !== i) layer.__dirty = true;
                layer.__startIndex = i;
                if (!layer.incremental) layer.__drawIndex = i;
                else layer.__drawIndex = -1;
                updatePrevLayer(i);
                prevLayer = layer;
            }
            if (el.__dirty & (0, $b870c418b8d2135e$export$a7b6db622c6c7dbd) && !el.__inHover) {
                layer.__dirty = true;
                if (layer.incremental && layer.__drawIndex < 0) layer.__drawIndex = i;
            }
        }
        updatePrevLayer(i);
        this.eachBuiltinLayer(function(layer, z) {
            if (!layer.__used && layer.getElementCount() > 0) {
                layer.__dirty = true;
                layer.__startIndex = layer.__endIndex = layer.__drawIndex = 0;
            }
            if (layer.__dirty && layer.__drawIndex < 0) layer.__drawIndex = layer.__startIndex;
        });
    };
    CanvasPainter.prototype.clear = function() {
        this.eachBuiltinLayer(this._clearLayer);
        return this;
    };
    CanvasPainter.prototype._clearLayer = function(layer) {
        layer.clear();
    };
    CanvasPainter.prototype.setBackgroundColor = function(backgroundColor) {
        this._backgroundColor = backgroundColor;
        $e44eb14c4271d0f9$export$79b2f7037acddd43(this._layers, function(layer) {
            layer.setUnpainted();
        });
    };
    CanvasPainter.prototype.configLayer = function(zlevel, config) {
        if (config) {
            var layerConfig = this._layerConfig;
            if (!layerConfig[zlevel]) layerConfig[zlevel] = config;
            else $e44eb14c4271d0f9$export$4950aa0f605343fb(layerConfig[zlevel], config, true);
            for(var i = 0; i < this._zlevelList.length; i++){
                var _zlevel = this._zlevelList[i];
                if (_zlevel === zlevel || _zlevel === zlevel + $d2d60d1f41dae01c$var$EL_AFTER_INCREMENTAL_INC) {
                    var layer = this._layers[_zlevel];
                    $e44eb14c4271d0f9$export$4950aa0f605343fb(layer, layerConfig[zlevel], true);
                }
            }
        }
    };
    CanvasPainter.prototype.delLayer = function(zlevel) {
        var layers = this._layers;
        var zlevelList = this._zlevelList;
        var layer = layers[zlevel];
        if (!layer) return;
        layer.dom.parentNode.removeChild(layer.dom);
        delete layers[zlevel];
        zlevelList.splice($e44eb14c4271d0f9$export$305f7d4e9d4624f2(zlevelList, zlevel), 1);
    };
    CanvasPainter.prototype.resize = function(width, height) {
        if (!this._domRoot.style) {
            if (width == null || height == null) return;
            this._width = width;
            this._height = height;
            this.getLayer($d2d60d1f41dae01c$var$CANVAS_ZLEVEL).resize(width, height);
        } else {
            var domRoot = this._domRoot;
            domRoot.style.display = "none";
            var opts = this._opts;
            var root = this.root;
            width != null && (opts.width = width);
            height != null && (opts.height = height);
            width = (0, $c642d8e6805d7bb5$export$31b21d0167753bb4)(root, 0, opts);
            height = (0, $c642d8e6805d7bb5$export$31b21d0167753bb4)(root, 1, opts);
            domRoot.style.display = "";
            if (this._width !== width || height !== this._height) {
                domRoot.style.width = width + "px";
                domRoot.style.height = height + "px";
                for(var id in this._layers)if (this._layers.hasOwnProperty(id)) this._layers[id].resize(width, height);
                this.refresh(true);
            }
            this._width = width;
            this._height = height;
        }
        return this;
    };
    CanvasPainter.prototype.clearLayer = function(zlevel) {
        var layer = this._layers[zlevel];
        if (layer) layer.clear();
    };
    CanvasPainter.prototype.dispose = function() {
        this.root.innerHTML = "";
        this.root = this.storage = this._domRoot = this._layers = null;
    };
    CanvasPainter.prototype.getRenderedCanvas = function(opts) {
        opts = opts || {};
        if (this._singleCanvas && !this._compositeManually) return this._layers[$d2d60d1f41dae01c$var$CANVAS_ZLEVEL].dom;
        var imageLayer = new (0, $a77f1be6ff7484c1$export$2e2bcd8739ae039)("image", this, opts.pixelRatio || this.dpr);
        imageLayer.initContext();
        imageLayer.clear(false, opts.backgroundColor || this._backgroundColor);
        var ctx = imageLayer.ctx;
        if (opts.pixelRatio <= this.dpr) {
            this.refresh();
            var width_1 = imageLayer.dom.width;
            var height_1 = imageLayer.dom.height;
            this.eachLayer(function(layer) {
                if (layer.__builtin__) ctx.drawImage(layer.dom, 0, 0, width_1, height_1);
                else if (layer.renderToCanvas) {
                    ctx.save();
                    layer.renderToCanvas(ctx);
                    ctx.restore();
                }
            });
        } else {
            var scope = {
                inHover: false,
                viewWidth: this._width,
                viewHeight: this._height
            };
            var displayList = this.storage.getDisplayList(true);
            for(var i = 0, len = displayList.length; i < len; i++){
                var el = displayList[i];
                (0, $e976df33d140e34a$export$da5d6544e8c27bc1)(ctx, el, scope, i === len - 1);
            }
        }
        return imageLayer.dom;
    };
    CanvasPainter.prototype.getWidth = function() {
        return this._width;
    };
    CanvasPainter.prototype.getHeight = function() {
        return this._height;
    };
    return CanvasPainter;
}();
var $d2d60d1f41dae01c$export$2e2bcd8739ae039 = $d2d60d1f41dae01c$var$CanvasPainter;


function $1a298bbe5fdf68aa$export$4b3e715f166fdd78(registers) {
    registers.registerPainter("canvas", (0, $d2d60d1f41dae01c$export$2e2bcd8739ae039));
}





var $629ea19a1a00d02f$export$402e76927ebf6a24 = [];


var $d37865c655e28511$export$63c81bd924f89474 = function() {
    return (0, $629ea19a1a00d02f$export$402e76927ebf6a24).some(function(ro) {
        return ro.activeTargets.length > 0;
    });
};



var $7663195f9784f505$export$8ca35300535e324d = function() {
    return (0, $629ea19a1a00d02f$export$402e76927ebf6a24).some(function(ro) {
        return ro.skippedTargets.length > 0;
    });
};


var $1cb7090d0f624d55$var$msg = "ResizeObserver loop completed with undelivered notifications.";
var $1cb7090d0f624d55$export$888cb69481582149 = function() {
    var event;
    if (typeof ErrorEvent === "function") event = new ErrorEvent("error", {
        message: $1cb7090d0f624d55$var$msg
    });
    else {
        event = document.createEvent("Event");
        event.initEvent("error", false, false);
        event.message = $1cb7090d0f624d55$var$msg;
    }
    window.dispatchEvent(event);
};



var $aeb6b3773bdb6aa5$export$416d111b83cd1483;
(function(ResizeObserverBoxOptions) {
    ResizeObserverBoxOptions["BORDER_BOX"] = "border-box";
    ResizeObserverBoxOptions["CONTENT_BOX"] = "content-box";
    ResizeObserverBoxOptions["DEVICE_PIXEL_CONTENT_BOX"] = "device-pixel-content-box";
})($aeb6b3773bdb6aa5$export$416d111b83cd1483 || ($aeb6b3773bdb6aa5$export$416d111b83cd1483 = {}));


var $05e852d3bd267eb9$export$792f3d81ea979f55 = function(obj) {
    return Object.freeze(obj);
};


var $298024817aad524e$export$c9ad8cdf6bbd331c = function() {
    function ResizeObserverSize(inlineSize, blockSize) {
        this.inlineSize = inlineSize;
        this.blockSize = blockSize;
        (0, $05e852d3bd267eb9$export$792f3d81ea979f55)(this);
    }
    return ResizeObserverSize;
}();



var $3961ff6f465d42f5$export$51d7a67026f4e0b7 = function() {
    function DOMRectReadOnly(x, y, width, height) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
        this.top = this.y;
        this.left = this.x;
        this.bottom = this.top + this.height;
        this.right = this.left + this.width;
        return (0, $05e852d3bd267eb9$export$792f3d81ea979f55)(this);
    }
    DOMRectReadOnly.prototype.toJSON = function() {
        var _a = this, x = _a.x, y = _a.y, top = _a.top, right = _a.right, bottom = _a.bottom, left = _a.left, width = _a.width, height = _a.height;
        return {
            x: x,
            y: y,
            top: top,
            right: right,
            bottom: bottom,
            left: left,
            width: width,
            height: height
        };
    };
    DOMRectReadOnly.fromRect = function(rectangle) {
        return new DOMRectReadOnly(rectangle.x, rectangle.y, rectangle.width, rectangle.height);
    };
    return DOMRectReadOnly;
}();


var $b5aa0f058d1b7838$export$165b39ed277223c2 = function(target) {
    return target instanceof SVGElement && "getBBox" in target;
};
var $b5aa0f058d1b7838$export$ee695c13482bb5dd = function(target) {
    if ($b5aa0f058d1b7838$export$165b39ed277223c2(target)) {
        var _a = target.getBBox(), width = _a.width, height = _a.height;
        return !width && !height;
    }
    var _b = target, offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight;
    return !(offsetWidth || offsetHeight || target.getClientRects().length);
};
var $b5aa0f058d1b7838$export$45a5e7f76e0caa8d = function(obj) {
    var _a;
    if (obj instanceof Element) return true;
    var scope = (_a = obj === null || obj === void 0 ? void 0 : obj.ownerDocument) === null || _a === void 0 ? void 0 : _a.defaultView;
    return !!(scope && obj instanceof scope.Element);
};
var $b5aa0f058d1b7838$export$a6eb60f7e7c182ba = function(target) {
    switch(target.tagName){
        case "INPUT":
            if (target.type !== "image") break;
        case "VIDEO":
        case "AUDIO":
        case "EMBED":
        case "OBJECT":
        case "CANVAS":
        case "IFRAME":
        case "IMG":
            return true;
    }
    return false;
};



var $b086007905803e0c$export$90b4d2ff6acb88af = typeof window !== "undefined" ? window : {};


var $09d7d74473ebd2f5$var$cache = new WeakMap();
var $09d7d74473ebd2f5$var$scrollRegexp = /auto|scroll/;
var $09d7d74473ebd2f5$var$verticalRegexp = /^tb|vertical/;
var $09d7d74473ebd2f5$var$IE = /msie|trident/i.test((0, $b086007905803e0c$export$90b4d2ff6acb88af).navigator && (0, $b086007905803e0c$export$90b4d2ff6acb88af).navigator.userAgent);
var $09d7d74473ebd2f5$var$parseDimension = function(pixel) {
    return parseFloat(pixel || "0");
};
var $09d7d74473ebd2f5$var$size = function(inlineSize, blockSize, switchSizes) {
    if (inlineSize === void 0) inlineSize = 0;
    if (blockSize === void 0) blockSize = 0;
    if (switchSizes === void 0) switchSizes = false;
    return new (0, $298024817aad524e$export$c9ad8cdf6bbd331c)((switchSizes ? blockSize : inlineSize) || 0, (switchSizes ? inlineSize : blockSize) || 0);
};
var $09d7d74473ebd2f5$var$zeroBoxes = (0, $05e852d3bd267eb9$export$792f3d81ea979f55)({
    devicePixelContentBoxSize: $09d7d74473ebd2f5$var$size(),
    borderBoxSize: $09d7d74473ebd2f5$var$size(),
    contentBoxSize: $09d7d74473ebd2f5$var$size(),
    contentRect: new (0, $3961ff6f465d42f5$export$51d7a67026f4e0b7)(0, 0, 0, 0)
});
var $09d7d74473ebd2f5$export$504d039a9c501c94 = function(target, forceRecalculation) {
    if (forceRecalculation === void 0) forceRecalculation = false;
    if ($09d7d74473ebd2f5$var$cache.has(target) && !forceRecalculation) return $09d7d74473ebd2f5$var$cache.get(target);
    if ((0, $b5aa0f058d1b7838$export$ee695c13482bb5dd)(target)) {
        $09d7d74473ebd2f5$var$cache.set(target, $09d7d74473ebd2f5$var$zeroBoxes);
        return $09d7d74473ebd2f5$var$zeroBoxes;
    }
    var cs = getComputedStyle(target);
    var svg = (0, $b5aa0f058d1b7838$export$165b39ed277223c2)(target) && target.ownerSVGElement && target.getBBox();
    var removePadding = !$09d7d74473ebd2f5$var$IE && cs.boxSizing === "border-box";
    var switchSizes = $09d7d74473ebd2f5$var$verticalRegexp.test(cs.writingMode || "");
    var canScrollVertically = !svg && $09d7d74473ebd2f5$var$scrollRegexp.test(cs.overflowY || "");
    var canScrollHorizontally = !svg && $09d7d74473ebd2f5$var$scrollRegexp.test(cs.overflowX || "");
    var paddingTop = svg ? 0 : $09d7d74473ebd2f5$var$parseDimension(cs.paddingTop);
    var paddingRight = svg ? 0 : $09d7d74473ebd2f5$var$parseDimension(cs.paddingRight);
    var paddingBottom = svg ? 0 : $09d7d74473ebd2f5$var$parseDimension(cs.paddingBottom);
    var paddingLeft = svg ? 0 : $09d7d74473ebd2f5$var$parseDimension(cs.paddingLeft);
    var borderTop = svg ? 0 : $09d7d74473ebd2f5$var$parseDimension(cs.borderTopWidth);
    var borderRight = svg ? 0 : $09d7d74473ebd2f5$var$parseDimension(cs.borderRightWidth);
    var borderBottom = svg ? 0 : $09d7d74473ebd2f5$var$parseDimension(cs.borderBottomWidth);
    var borderLeft = svg ? 0 : $09d7d74473ebd2f5$var$parseDimension(cs.borderLeftWidth);
    var horizontalPadding = paddingLeft + paddingRight;
    var verticalPadding = paddingTop + paddingBottom;
    var horizontalBorderArea = borderLeft + borderRight;
    var verticalBorderArea = borderTop + borderBottom;
    var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;
    var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;
    var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;
    var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;
    var contentWidth = svg ? svg.width : $09d7d74473ebd2f5$var$parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;
    var contentHeight = svg ? svg.height : $09d7d74473ebd2f5$var$parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;
    var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;
    var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;
    var boxes = (0, $05e852d3bd267eb9$export$792f3d81ea979f55)({
        devicePixelContentBoxSize: $09d7d74473ebd2f5$var$size(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),
        borderBoxSize: $09d7d74473ebd2f5$var$size(borderBoxWidth, borderBoxHeight, switchSizes),
        contentBoxSize: $09d7d74473ebd2f5$var$size(contentWidth, contentHeight, switchSizes),
        contentRect: new (0, $3961ff6f465d42f5$export$51d7a67026f4e0b7)(paddingLeft, paddingTop, contentWidth, contentHeight)
    });
    $09d7d74473ebd2f5$var$cache.set(target, boxes);
    return boxes;
};
var $09d7d74473ebd2f5$export$1a78030b04106bdb = function(target, observedBox, forceRecalculation) {
    var _a = $09d7d74473ebd2f5$export$504d039a9c501c94(target, forceRecalculation), borderBoxSize = _a.borderBoxSize, contentBoxSize = _a.contentBoxSize, devicePixelContentBoxSize = _a.devicePixelContentBoxSize;
    switch(observedBox){
        case (0, $aeb6b3773bdb6aa5$export$416d111b83cd1483).DEVICE_PIXEL_CONTENT_BOX:
            return devicePixelContentBoxSize;
        case (0, $aeb6b3773bdb6aa5$export$416d111b83cd1483).BORDER_BOX:
            return borderBoxSize;
        default:
            return contentBoxSize;
    }
};



var $16484c10da90083a$export$226159b441fc89f8 = function() {
    function ResizeObserverEntry(target) {
        var boxes = (0, $09d7d74473ebd2f5$export$504d039a9c501c94)(target);
        this.target = target;
        this.contentRect = boxes.contentRect;
        this.borderBoxSize = (0, $05e852d3bd267eb9$export$792f3d81ea979f55)([
            boxes.borderBoxSize
        ]);
        this.contentBoxSize = (0, $05e852d3bd267eb9$export$792f3d81ea979f55)([
            boxes.contentBoxSize
        ]);
        this.devicePixelContentBoxSize = (0, $05e852d3bd267eb9$export$792f3d81ea979f55)([
            boxes.devicePixelContentBoxSize
        ]);
    }
    return ResizeObserverEntry;
}();



var $59c8e78bcd0b1efe$export$f8c8e3b5da1f41d2 = function(node) {
    if ((0, $b5aa0f058d1b7838$export$ee695c13482bb5dd)(node)) return Infinity;
    var depth = 0;
    var parent = node.parentNode;
    while(parent){
        depth += 1;
        parent = parent.parentNode;
    }
    return depth;
};



var $a792a96ba9e64ac3$export$9cac928141e5443b = function() {
    var shallowestDepth = Infinity;
    var callbacks = [];
    (0, $629ea19a1a00d02f$export$402e76927ebf6a24).forEach(function processObserver(ro) {
        if (ro.activeTargets.length === 0) return;
        var entries = [];
        ro.activeTargets.forEach(function processTarget(ot) {
            var entry = new (0, $16484c10da90083a$export$226159b441fc89f8)(ot.target);
            var targetDepth = (0, $59c8e78bcd0b1efe$export$f8c8e3b5da1f41d2)(ot.target);
            entries.push(entry);
            ot.lastReportedSize = (0, $09d7d74473ebd2f5$export$1a78030b04106bdb)(ot.target, ot.observedBox);
            if (targetDepth < shallowestDepth) shallowestDepth = targetDepth;
        });
        callbacks.push(function resizeObserverCallback() {
            ro.callback.call(ro.observer, entries, ro.observer);
        });
        ro.activeTargets.splice(0, ro.activeTargets.length);
    });
    for(var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++){
        var callback = callbacks_1[_i];
        callback();
    }
    return shallowestDepth;
};




var $a79776306ac49492$export$9c17b8913a2a3572 = function(depth) {
    (0, $629ea19a1a00d02f$export$402e76927ebf6a24).forEach(function processObserver(ro) {
        ro.activeTargets.splice(0, ro.activeTargets.length);
        ro.skippedTargets.splice(0, ro.skippedTargets.length);
        ro.observationTargets.forEach(function processTarget(ot) {
            if (ot.isActive()) {
                if ((0, $59c8e78bcd0b1efe$export$f8c8e3b5da1f41d2)(ot.target) > depth) ro.activeTargets.push(ot);
                else ro.skippedTargets.push(ot);
            }
        });
    });
};


var $5b2daefc975b6b13$export$e54fe5b0f43758f7 = function() {
    var depth = 0;
    (0, $a79776306ac49492$export$9c17b8913a2a3572)(depth);
    while((0, $d37865c655e28511$export$63c81bd924f89474)()){
        depth = (0, $a792a96ba9e64ac3$export$9cac928141e5443b)();
        (0, $a79776306ac49492$export$9c17b8913a2a3572)(depth);
    }
    if ((0, $7663195f9784f505$export$8ca35300535e324d)()) (0, $1cb7090d0f624d55$export$888cb69481582149)();
    return depth > 0;
};



var $2ed4f6c031139912$var$trigger;
var $2ed4f6c031139912$var$callbacks = [];
var $2ed4f6c031139912$var$notify = function() {
    return $2ed4f6c031139912$var$callbacks.splice(0).forEach(function(cb) {
        return cb();
    });
};
var $2ed4f6c031139912$export$4c995d4933c4abb = function(callback) {
    if (!$2ed4f6c031139912$var$trigger) {
        var toggle_1 = 0;
        var el_1 = document.createTextNode("");
        var config = {
            characterData: true
        };
        new MutationObserver(function() {
            return $2ed4f6c031139912$var$notify();
        }).observe(el_1, config);
        $2ed4f6c031139912$var$trigger = function() {
            el_1.textContent = "".concat(toggle_1 ? toggle_1-- : toggle_1++);
        };
    }
    $2ed4f6c031139912$var$callbacks.push(callback);
    $2ed4f6c031139912$var$trigger();
};


var $aac3eeb102525565$export$5755c7b572e34c6 = function(cb) {
    (0, $2ed4f6c031139912$export$4c995d4933c4abb)(function ResizeObserver() {
        requestAnimationFrame(cb);
    });
};


var $d082236d5838bd06$var$watching = 0;
var $d082236d5838bd06$var$isWatching = function() {
    return !!$d082236d5838bd06$var$watching;
};
var $d082236d5838bd06$var$CATCH_PERIOD = 250;
var $d082236d5838bd06$var$observerConfig = {
    attributes: true,
    characterData: true,
    childList: true,
    subtree: true
};
var $d082236d5838bd06$var$events = [
    "resize",
    "load",
    "transitionend",
    "animationend",
    "animationstart",
    "animationiteration",
    "keyup",
    "keydown",
    "mouseup",
    "mousedown",
    "mouseover",
    "mouseout",
    "blur",
    "focus"
];
var $d082236d5838bd06$var$time = function(timeout) {
    if (timeout === void 0) timeout = 0;
    return Date.now() + timeout;
};
var $d082236d5838bd06$var$scheduled = false;
var $d082236d5838bd06$var$Scheduler = function() {
    function Scheduler() {
        var _this = this;
        this.stopped = true;
        this.listener = function() {
            return _this.schedule();
        };
    }
    Scheduler.prototype.run = function(timeout) {
        var _this = this;
        if (timeout === void 0) timeout = $d082236d5838bd06$var$CATCH_PERIOD;
        if ($d082236d5838bd06$var$scheduled) return;
        $d082236d5838bd06$var$scheduled = true;
        var until = $d082236d5838bd06$var$time(timeout);
        (0, $aac3eeb102525565$export$5755c7b572e34c6)(function() {
            var elementsHaveResized = false;
            try {
                elementsHaveResized = (0, $5b2daefc975b6b13$export$e54fe5b0f43758f7)();
            } finally{
                $d082236d5838bd06$var$scheduled = false;
                timeout = until - $d082236d5838bd06$var$time();
                if (!$d082236d5838bd06$var$isWatching()) return;
                if (elementsHaveResized) _this.run(1000);
                else if (timeout > 0) _this.run(timeout);
                else _this.start();
            }
        });
    };
    Scheduler.prototype.schedule = function() {
        this.stop();
        this.run();
    };
    Scheduler.prototype.observe = function() {
        var _this = this;
        var cb = function() {
            return _this.observer && _this.observer.observe(document.body, $d082236d5838bd06$var$observerConfig);
        };
        document.body ? cb() : (0, $b086007905803e0c$export$90b4d2ff6acb88af).addEventListener("DOMContentLoaded", cb);
    };
    Scheduler.prototype.start = function() {
        var _this = this;
        if (this.stopped) {
            this.stopped = false;
            this.observer = new MutationObserver(this.listener);
            this.observe();
            $d082236d5838bd06$var$events.forEach(function(name) {
                return (0, $b086007905803e0c$export$90b4d2ff6acb88af).addEventListener(name, _this.listener, true);
            });
        }
    };
    Scheduler.prototype.stop = function() {
        var _this = this;
        if (!this.stopped) {
            this.observer && this.observer.disconnect();
            $d082236d5838bd06$var$events.forEach(function(name) {
                return (0, $b086007905803e0c$export$90b4d2ff6acb88af).removeEventListener(name, _this.listener, true);
            });
            this.stopped = true;
        }
    };
    return Scheduler;
}();
var $d082236d5838bd06$export$d30788f2c20241cd = new $d082236d5838bd06$var$Scheduler();
var $d082236d5838bd06$export$1f18a74d42722835 = function(n) {
    !$d082236d5838bd06$var$watching && n > 0 && $d082236d5838bd06$export$d30788f2c20241cd.start();
    $d082236d5838bd06$var$watching += n;
    !$d082236d5838bd06$var$watching && $d082236d5838bd06$export$d30788f2c20241cd.stop();
};





var $dc3fbd1cbcf47da8$var$skipNotifyOnElement = function(target) {
    return !(0, $b5aa0f058d1b7838$export$165b39ed277223c2)(target) && !(0, $b5aa0f058d1b7838$export$a6eb60f7e7c182ba)(target) && getComputedStyle(target).display === "inline";
};
var $dc3fbd1cbcf47da8$export$fea412043713122 = function() {
    function ResizeObservation(target, observedBox) {
        this.target = target;
        this.observedBox = observedBox || (0, $aeb6b3773bdb6aa5$export$416d111b83cd1483).CONTENT_BOX;
        this.lastReportedSize = {
            inlineSize: 0,
            blockSize: 0
        };
    }
    ResizeObservation.prototype.isActive = function() {
        var size = (0, $09d7d74473ebd2f5$export$1a78030b04106bdb)(this.target, this.observedBox, true);
        if ($dc3fbd1cbcf47da8$var$skipNotifyOnElement(this.target)) this.lastReportedSize = size;
        if (this.lastReportedSize.inlineSize !== size.inlineSize || this.lastReportedSize.blockSize !== size.blockSize) return true;
        return false;
    };
    return ResizeObservation;
}();


var $7711ad6172ba27a1$export$d86966e6e4bc97e1 = function() {
    function ResizeObserverDetail(resizeObserver, callback) {
        this.activeTargets = [];
        this.skippedTargets = [];
        this.observationTargets = [];
        this.observer = resizeObserver;
        this.callback = callback;
    }
    return ResizeObserverDetail;
}();



var $0a94382567d57347$var$observerMap = new WeakMap();
var $0a94382567d57347$var$getObservationIndex = function(observationTargets, target) {
    for(var i = 0; i < observationTargets.length; i += 1){
        if (observationTargets[i].target === target) return i;
    }
    return -1;
};
var $0a94382567d57347$export$ed99c5bafbaf8300 = function() {
    function ResizeObserverController() {}
    ResizeObserverController.connect = function(resizeObserver, callback) {
        var detail = new (0, $7711ad6172ba27a1$export$d86966e6e4bc97e1)(resizeObserver, callback);
        $0a94382567d57347$var$observerMap.set(resizeObserver, detail);
    };
    ResizeObserverController.observe = function(resizeObserver, target, options) {
        var detail = $0a94382567d57347$var$observerMap.get(resizeObserver);
        var firstObservation = detail.observationTargets.length === 0;
        if ($0a94382567d57347$var$getObservationIndex(detail.observationTargets, target) < 0) {
            firstObservation && (0, $629ea19a1a00d02f$export$402e76927ebf6a24).push(detail);
            detail.observationTargets.push(new (0, $dc3fbd1cbcf47da8$export$fea412043713122)(target, options && options.box));
            (0, $d082236d5838bd06$export$1f18a74d42722835)(1);
            (0, $d082236d5838bd06$export$d30788f2c20241cd).schedule();
        }
    };
    ResizeObserverController.unobserve = function(resizeObserver, target) {
        var detail = $0a94382567d57347$var$observerMap.get(resizeObserver);
        var index = $0a94382567d57347$var$getObservationIndex(detail.observationTargets, target);
        var lastObservation = detail.observationTargets.length === 1;
        if (index >= 0) {
            lastObservation && (0, $629ea19a1a00d02f$export$402e76927ebf6a24).splice((0, $629ea19a1a00d02f$export$402e76927ebf6a24).indexOf(detail), 1);
            detail.observationTargets.splice(index, 1);
            (0, $d082236d5838bd06$export$1f18a74d42722835)(-1);
        }
    };
    ResizeObserverController.disconnect = function(resizeObserver) {
        var _this = this;
        var detail = $0a94382567d57347$var$observerMap.get(resizeObserver);
        detail.observationTargets.slice().forEach(function(ot) {
            return _this.unobserve(resizeObserver, ot.target);
        });
        detail.activeTargets.splice(0, detail.activeTargets.length);
    };
    return ResizeObserverController;
}();



var $c25b392594e8711c$export$9caf76241ca21a11 = function() {
    function ResizeObserver(callback) {
        if (arguments.length === 0) throw new TypeError("Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.");
        if (typeof callback !== "function") throw new TypeError("Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.");
        (0, $0a94382567d57347$export$ed99c5bafbaf8300).connect(this, callback);
    }
    ResizeObserver.prototype.observe = function(target, options) {
        if (arguments.length === 0) throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.");
        if (!(0, $b5aa0f058d1b7838$export$45a5e7f76e0caa8d)(target)) throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element");
        (0, $0a94382567d57347$export$ed99c5bafbaf8300).observe(this, target, options);
    };
    ResizeObserver.prototype.unobserve = function(target) {
        if (arguments.length === 0) throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.");
        if (!(0, $b5aa0f058d1b7838$export$45a5e7f76e0caa8d)(target)) throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element");
        (0, $0a94382567d57347$export$ed99c5bafbaf8300).unobserve(this, target);
    };
    ResizeObserver.prototype.disconnect = function() {
        (0, $0a94382567d57347$export$ed99c5bafbaf8300).disconnect(this);
    };
    ResizeObserver.toString = function() {
        return "function ResizeObserver () { [polyfill code] }";
    };
    return ResizeObserver;
}();






// Register the required components
$2456b78b4596463d$export$1f96ae73734a86cc([
    (0, $7b688bb319000a8a$export$4b3e715f166fdd78),
    (0, $a94998fee89fbc6a$export$4b3e715f166fdd78),
    (0, $ea459734a164849e$export$4b3e715f166fdd78),
    (0, $cc34440a87706c72$export$4b3e715f166fdd78),
    (0, $287cc9c31c4148ca$export$4b3e715f166fdd78),
    (0, $0a19182088c4bf1a$export$4b3e715f166fdd78),
    (0, $040977d67c7f7e3d$export$4b3e715f166fdd78),
    (0, $5e4d2ed43059a3ee$export$4b3e715f166fdd78),
    (0, $b178fe6f21151f8a$export$4b3e715f166fdd78),
    (0, $e0a18a7fcd449e53$export$4b3e715f166fdd78),
    // TransformComponent,
    (0, $73fd4b606fbc7eb8$export$5320d1b3745c02a5),
    (0, $efb39adcfacd645d$export$efd07f28fd73e88c),
    (0, $1a298bbe5fdf68aa$export$4b3e715f166fdd78)
]);
class $e23f1e1a76e2d7ce$var$PowerGraph extends HTMLElement {
    constructor(){
        super();
        this._config = null;
        this._elements = {
            card: Element,
            style: Element
        };
        this._resizeObserver = new (0, $c25b392594e8711c$export$9caf76241ca21a11)((entries)=>{
            this.resize();
        });
    }
    setConfig(config) {
        // console.error("setConfig");
        this._config = new (0, $c646df2793882bac$export$dc790a03cd43345e)(config);
        this._range = new (0, $53eba6098f86b86c$export$74e1c7e2f1829413)((0, $c70e8820d152b235$exports.DateTime).local().minus({
            hours: this._config.timRangeInHours
        }), (0, $c70e8820d152b235$exports.DateTime).local());
        this._graphs = [];
        for (const graphConfig of this._config.graphs)this._graphs.push(new (0, $e866791a01b6c100$export$614db49f3febe941)(this, graphConfig));
        this._config.validate();
        const userAgent = navigator.userAgent || navigator.vendor;
        this._isMobile = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(userAgent) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(userAgent.substr(0, 4));
        this.createContent();
    }
    set hass(hass) {
        // console.log("PowerGraph::hass() => hass: " + hass);
        this._hass = hass;
        for (const graph of this._graphs)graph.setHass(hass);
    }
    getConfig() {
        return this._config;
    }
    createContent() {
        // console.log("PowerGraph::createContent");
        const thisGraph = this;
        this._mainContener = document.createElement("div");
        this._mainContener.setAttribute("id", "main-container");
        for (const graph of this._graphs)graph.createContent(this._mainContener);
        // this._infoBox = document.createElement("div");
        // this._infoBox.setAttribute("id", "infoBox");
        var _style = document.createElement("style");
        _style.textContent = `
            .chart-container {
                width: 100%;
            }
            #infoBox {
                background-color: black;
                border:1px silver solid;
                width: 200px;
                height:800px;
                position:absolute;
                left:600px;
                top: 100px;
                overflow:auto;
                font-size: 12px;
            }
            `;
        this.attachShadow({
            mode: "open"
        });
        this.shadowRoot.append(_style, this._mainContener /*, this._infoBox*/ );
    }
    onGraphCreated() {
        const charts = [];
        // let allCreated: boolean = this._graphs.length > 0;
        for (const graph of this._graphs){
            const chart = graph.getChart();
            if (chart != null) charts.push(chart);
            else return;
        // if (!graph.isCreated()) {
        //     allCreated = false;
        //     break;
        // }
        }
    // console.log("PowerGraph::connect: " + charts.length);
    // echarts.connect(charts);
    // if (allCreated) {
    //     echarts.connect([chart1, chart2]);
    // }
    }
    getTimeRange() {
        return this._range;
    }
    setTimeRange(timeRange) {
        this._range = timeRange;
    }
    resize() {
        // console.log("PowerGraph::resize");
        for (const graph of this._graphs)graph.resize();
    }
    getCardSize() {
        return 3;
    }
    // configuration defaults
    static getStubConfig() {
        return {
            title: "PV Leistung",
            entities: [
                {
                    entity: "sensor.sofar_15ktl_pv_power_total",
                    name: "Power Total"
                },
                {
                    entity: "sensor.sofar_15ktl_pv_power_1",
                    name: "Haus 1"
                },
                {
                    entity: "sensor.sofar_15ktl_pv_power_2",
                    name: "Haus 2"
                }
            ],
            autorefresh: 10
        };
    }
    sleep(ms) {
        return new Promise((resolve)=>setTimeout(resolve, ms));
    }
    getDeviceClass(entityId) {
        return this._hass.states[entityId]?.attributes?.device_class;
    }
    getUnitOfMeasurement(entityId) {
        return this._hass.states[entityId]?.attributes?.unit_of_measurement;
    }
    getStateClass(entityId) {
        return this._hass.states[entityId]?.attributes?.state_class;
    }
    getClientArea() {
        return new (0, $53eba6098f86b86c$export$d63d7cff08fe4dc9)(this._mainContener.clientWidth, this._mainContener.clientHeight);
    }
    isMobile() {
        return this._isMobile;
    }
    scrollGraph(touchedGraph, startEnd) {
        for (const graph of this._graphs)if (graph != touchedGraph) graph.scrollGraph(startEnd);
    }
    connectedCallback() {
        //console.log("connectedCallback");
        this._resizeObserver.observe(this._mainContener);
    }
    disconnectedCallback() {
        //console.log("disconnectedCallback");
        this._resizeObserver.unobserve(this._mainContener);
    }
}
customElements.define("power-graph", $e23f1e1a76e2d7ce$var$PowerGraph);
window.customCards = window.customCards || [];
window.customCards.push({
    type: "power-graph",
    name: "Power Graph Card",
    description: "An interactive history viewer card",
    documentationURL: "https://developers.home-assistant.io/docs/frontend/custom-ui/custom-card/"
});


//# sourceMappingURL=power-graph.js.map
